[{"timestamps":[{"ts":1365164389000,"body":"@neerajdotname I cherry-picked your test and fixed in 8606a7fbe9367e9ae37ad058dd07f0dd38daf015. Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1368300007000,"body":"@tenderlove This was introduced in bc8ebefe9825dbff2cffa29ff015a1e7a31f9812"},{"ts":1371324118000,"body":"This didn't make it into gem 4.0.0.rc2 or the 4-0-0 branch"}]},{"timestamps":[{"ts":1377369278000,"body":"Thanks for the comments, I'm now using `safe_constantize`. Also, I'm not sure what version of Rails this deprecation is targeting (4.2?). In any case, I've gotten rid of the line in the deprecation that says 4.1."},{"ts":1377384059000,"body":"The deprecation will be introduced in 4.1 and the method will be removed in 4.2. There's a deprecation_horizon thing around that should be pointing to the right version.\r\nAt some point things were handled this way https://github.com/rails/rails/commit/824733612eaa408f699c5c78018d72f49c34a061 unsure how are we doing this now.\r\n/cc @rafaelfranca "},{"ts":1377384491000,"body":"The `deprecation_horizon` only make difference if you are using [`deprecation_warning`](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/deprecation/reporting.rb#L39) instead of `warn`. But right now [the horizon is 4.1](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/deprecation.rb#L35) but should be changed to 4.2"},{"ts":1377401504000,"body":"Cool, thanks for the info. I've changed the deprecation message in this PR to refer to 4.2."}]},{"timestamps":[{"ts":1371547955000,"body":"Hey, is this still an issue? Could you provide a test proving the failure? Also can I suggest that you check wether time responds to `usec` rather than comparing the class."},{"ts":1372570192000,"body":"This is still an issue. Here is the simple test case. \r\n\r\nThe following will throw an error:\r\n\r\nDateTime.now.in_time_zone(\"Beijing\").to_json\r\n\r\nThe following will succeed:\r\n\r\nTime.now.in_time_zone(\"Beijing\").to_json\r\n\r\nI've updated the code to test for the method :usec instead of checking time's class. As for a unit test, it looks like one should go in activesupport/test/time_zone_test.rb, but I'm not exactly certain as to how to structure the test. Is it ok for my test to just throw an error if it fails?"},{"ts":1373467882000,"body":"Closing since this is fixed by the backport 5b790ca7b8b52868ae2a37546f205db38ac14a46"}]},{"timestamps":[]},{"timestamps":[{"ts":1357721835000,"body":":shipit: "}]},{"timestamps":[{"ts":1364344313000,"body":"Oops, wrong branch sorry."}]},{"timestamps":[]},{"timestamps":[{"ts":1359486926000,"body":"thanks"},{"ts":1359487228000,"body":"Thank YOU"}]},{"timestamps":[{"ts":1364312072000,"body":"This fixes a bug in my migrations. I use this in production already.\r\nI would be happy if this would be merged. "},{"ts":1364324799000,"body":"Could you add a CHANGELOG entry?"},{"ts":1364336478000,"body":"Changelog added! cc @rafaelfranca "}]},{"timestamps":[{"ts":1361981805000,"body":"I think it is by default [private in rack](https://github.com/rack/rack/blob/master/lib/rack/session/abstract/id.rb#L392), so it main follows that definition. Also others like `extract_session_id` also use `send`, so I think we're ok leaving it like that. Thanks!"},{"ts":1361984035000,"body":"@carlosantoniodasilva thanks for the feedback. I didn't know about that method being private in rack ."}]},{"timestamps":[{"ts":1367570818000,"body":"Avoiding transactional fixtures seems acceptable to me. I'll merge it."},{"ts":1367570915000,"body":"Ok, I would merge it but our build is already currently epicly broken..."}]},{"timestamps":[{"ts":1370469888000,"body":"/cc @tenderlove  @rafaelfranca  @kennyj "}]},{"timestamps":[{"ts":1376087898000,"body":"/cc @steveklabnik "},{"ts":1376244788000,"body":"You may use `[ci skip]` in your commit message to skip Travis build for doc commits."},{"ts":1376246435000,"body":"Thanks! Sorry, I've been ill, so I haven't seen this until now.\r\n\r\nYes, as @pftg mentioned, please add a `[ci skip]` to your commit message, and then I'll merge. I'd like to be kind to Travis. :)"},{"ts":1376319177000,"body":"Done! @steveklabnik  @pftg \r\n\r\nThanks you both  :)"},{"ts":1376320279000,"body":"Thank you for your contribution! :heart: "},{"ts":1376321827000,"body":":smiley: :+1: "}]},{"timestamps":[{"ts":1369666550000,"body":"@rafaelfranca @jonleighton can you take a look?"},{"ts":1369666784000,"body":"@neerajdotname maybe you could also take a look?"},{"ts":1369677672000,"body":"I personally find that `implicit_readonly` to be a bit broken in the current state. For example in the following case `save!` should have blown up. But it does not in master.\r\n\r\n```\r\nclass User < ActiveRecord::Base\r\n\r\n  has_many :todos\r\n\r\n  def self.lab\r\n    User.delete_all\r\n    Todo.delete_all\r\n    user = User.create!\r\n    user.todos.create(title: 'clean house')\r\n\r\n    user = User.joins(:todos).select(\"users.*, todos.title as todos_title\").first\r\n\r\n    puts user.readonly? #> false\r\n    user.todos_title = 'clean pet'\r\n    user.save! # no error but the title is not changed in the db\r\n  end\r\nend\r\n```\r\n\r\nFinding out all the cases were `implicit_readonly` should be applied is a bit tricky. So it is best if it is left to the user.\r\n\r\n@senny while you are at it,  please also cleanup usage of `implicit_readonly` also from `relation.rb` file.\r\n\r\nAdd something like this to change log\r\n\r\n```\r\nUsage of `implicit_readonly` is being removed`. Please use `readonly` method \r\nexplicitly to mark records as `readonly.\r\n\r\nExample:\r\nuser = User.joins(:todos).select(\"users.*, todos.title as todos_title\").readonly(true).first\r\nuser.todos_title = 'clean pet'\r\nuser.save! # will raise error\r\n\r\n```\r\n\r\n\r\nI'm +1 on this PR."},{"ts":1369678838000,"body":"@senny is it marked as readonly with explicit `select` for a join table field?"},{"ts":1369679212000,"body":"@rafaelfranca if there is any select then `@implicit_readonly = false`. \r\n\r\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/query_methods.rb#L964\r\n\r\nParsing the select statement to see which of the columns belong to primary table and which ones belong to join table will be brittle and error-prone. Hence my take that lets leave it upto the user."},{"ts":1369679719000,"body":"> Parsing the select statement to see which of the columns belong to primary table and which ones belong to join table will be brittle and error-prone. Hence my take that lets leave it upto the user.\r\n\r\n:+1: to this as it's the approach taken with the `references` method added to the Active Record Query API."},{"ts":1369681797000,"body":"@neerajdotname I removed the references from `relation.rb` can you take another look?"},{"ts":1369681980000,"body":"Seems good. We need to add this to the upgrading guide too. (Better to start soon)"},{"ts":1369682036000,"body":"@senny  looks good. +1 from me."},{"ts":1369683673000,"body":"@rafaelfranca what do you want to have covered in the guides? you no longer need `readonly` when `joins` was called. You should apply it when you use a custom `select` but you would have to do that until now. As I see it there is not really a change you need to upgrade to."}]},{"timestamps":[{"ts":1370602811000,"body":"cc @rafaelfranca "}]},{"timestamps":[]},{"timestamps":[{"ts":1364344462000,"body":"cc @jeremy @carlosantoniodasilva"},{"ts":1364352199000,"body":"Thanks."}]},{"timestamps":[{"ts":1365237792000,"body":"So what do you think? @rafaelfranca "},{"ts":1365253623000,"body":"@Agis- very good. I made some comments.\r\n\r\nThank you"},{"ts":1365259088000,"body":"@rafaelfranca Updated :)"},{"ts":1365269304000,"body":"Seems good. Could you rebase your branch and squash your commits?"},{"ts":1365269792000,"body":"@rafaelfranca done"},{"ts":1365270277000,"body":"Thank you"}]},{"timestamps":[{"ts":1363756588000,"body":"cc  @rafaelfranca"},{"ts":1363787538000,"body":"@fredwu could you check if this need to be fixed on https://github.com/rails/sprockets-rails too?"},{"ts":1363787555000,"body":"And please add a CHANGELOG entry."},{"ts":1363818765000,"body":"Hi @rafaelfranca - changelog has been added. I just took a look at sprockets-rails and afaik it's unaffected."}]},{"timestamps":[{"ts":1376229884000,"body":"How does this optimize storage?"},{"ts":1376239193000,"body":"This will introduce a memory leakage on system where the are a lot of possible SQLs. Remember symbols are not removed from memory from the garbage collector."},{"ts":1376243769000,"body":"Thanks @rafaelfranca , missed this."}]},{"timestamps":[{"ts":1365607998000,"body":"Thanks Sam!\r\n\r\nI don't think we should allow people to use their own locale on Active Record column names, tables and friends. All of Ruby standard library, Rails API are in english. As someone who has seen projects using two idioms, mixing portuguese and english, I am really frightened by this change, because those are always the worst projects to work with."},{"ts":1365608700000,"body":"@josevalim I previously created https://github.com/rubys/rails/commit/9343eb7d60a33320c12ae95d8cea69017941da4a but others seemed to prefer generalizing it.  All I care is that setting the locale doesn't cause ActiveRecord to get :confused:."},{"ts":1365608798000,"body":"@rubys I reverted the original commit at d716fe05dfc174af4d840258b52e690ff754c8c3 since it doesn't affect only Active Record"},{"ts":1365608939000,"body":"Closing this now."},{"ts":1365615712000,"body":"Dammit. Sorry about all this, everyone."},{"ts":1365615941000,"body":"> I don't think we should allow people to use their own locale on Active Record column names, tables and friends. All of Ruby standard library, Rails API are in english. \r\n\r\nI can :+1: this, for sure."}]},{"timestamps":[{"ts":1366204635000,"body":"Seems good. Could you squash your commits ?"},{"ts":1366271065000,"body":"@dmathieu done! Should I write a CHANGELOG entry as well, or is it not needed?"},{"ts":1366271196000,"body":"For this kind of change, which is more of something missing (as there is already `read_multi`) rather than something new, I wouldn't think so.\r\n\r\ncc @carlosantoniodasilva @rafaelfranca "},{"ts":1366561501000,"body":"@carlosantoniodasilva what do you think of this PR? While #10268 may be a niche use case, I think this one is widely usable."},{"ts":1367396660000,"body":"@dmathieu @carlosantoniodasilva sorry for being pushy, but could you give this another look?"},{"ts":1367672893000,"body":"Seems good. We will need the CHANGELOG entry"},{"ts":1367834384000,"body":"@rafaelfranca done!"}]},{"timestamps":[]},{"timestamps":[{"ts":1364489500000,"body":"> @fxn (or someone else interested in documentation) I'm wondering if we should include a link to the upgrade guide, which is where the caveats/warnings/etc about setting secret_key_base are currently. \r\n\r\n\r\nSeems like something that should be in the API docs too, especially if it's that important.\r\n"},{"ts":1364489583000,"body":"@steveklabnik can you point me to where you think the right spot might be? I'll happily update this PR with more docs. "},{"ts":1364490363000,"body":"Hmm. Yeah, I'm not sure where the best place to put them would be. Maybe @fxn has a better idea. It just seems odd that the upgrade guide would have the docs, and the docs would point to the guide, you know? :)"},{"ts":1364490506000,"body":"Totally, @steveklabnik -- this is an important setting, so let's make sure it's easy to read more about it :) "},{"ts":1364493846000,"body":"Love this. Thanks @trevorturk. +1 on the future work, too. Each are good bite-sized PRs."},{"ts":1364500182000,"body":"@jeremy I removed the unnecessary begin/end, but left the private spacing because the style matches the rest of the file. I'll change this for the entire file in a refactoring commit as part of my upcoming further work pull requests. \r\n\r\nI rebased, and I think this is ready to merge. We can improve the docs separately. Thanks for the feedback!"},{"ts":1364757081000,"body":"@trevorturk PR looks great. So after applying this we would have a way to use encrypted, signed and the upgrading path. The only drawback I see is you're not able to use signed cookies only without warnings."},{"ts":1364820243000,"body":"Thanks for reviewing, @spastorino!\r\n\r\nAfter applying this, the cookie-based session store would be automatically configured to use the best possible cookie store given the app's configuration . The logic would work like this:\r\n\r\n- If only `secret_token` is set: upgrade from the old signed session cookies to the new signed session cookies.\r\n- If only `secret_key_base` is set: use the new encrypted session cookies.\r\n- If both `secret_token` and `secret_key_base` are set: upgrade from old signed cookies to encrypted cookies.\r\n\r\nYou would still be able to use `cookies[:signed]` just as before without warnings, though. The only deprecation warning is the one from here: https://github.com/rails/rails/blob/master/railties/lib/rails/application.rb#L139-L141 that's triggered by not setting `secret_key_base`. "},{"ts":1364824298000,"body":"@trevorturk exactly, the warn raises if you don't set secret_key_base. So users are not able to use signed cookie store for sessions without warnings."},{"ts":1364825799000,"body":"So the question to answer is, do we want users to use SignedCookieStore or not? /cc @jeremy @NZKoz \r\nI'd allow for users that do not store things that browsers shouldn't read."},{"ts":1364829269000,"body":"Thanks @spastorino!\r\n\r\nWe had a chat and did a benchmark showing no significant performance impact for using encrypted session cookies versus signed. So, the recommendation is to reduce the number of configuration options for users and to choose the best cookie store we can, given their app's config.\r\n\r\nHere's the benchmark:\r\n\r\n```ruby\r\nrequire 'benchmark'\r\n\r\nrequire 'active_support/key_generator'\r\nrequire 'active_support/message_verifier'\r\nrequire 'active_support/message_encryptor'\r\n\r\nBenchmark.bm do |r|\r\n  N = 100000\r\n\r\n  r.report(\"signed\") do\r\n    key_generator = ActiveSupport::DummyKeyGenerator.new('b3c631c314c0bbca50c1b2843150fe33')\r\n    secret = key_generator.generate_key('signed cookie salt')\r\n    verifier = ActiveSupport::MessageVerifier.new(secret)\r\n    signed_message = verifier.generate('test')\r\n\r\n    N.times { verifier.verify(signed_message) }\r\n  end\r\n\r\n  r.report(\"encrypted\") do\r\n    key_generator = ActiveSupport::KeyGenerator.new('b3c631c314c0bbca50c1b2843150fe33')\r\n    secret = key_generator.generate_key('encrypted cookie salt')\r\n    sign_secret = key_generator.generate_key('encrypted cookie salt')\r\n    encryptor = ActiveSupport::MessageEncryptor.new(secret, sign_secret)\r\n    encrypted_message = encryptor.encrypt_and_sign('test')\r\n\r\n    N.times { encryptor.decrypt_and_verify(encrypted_message) }\r\n  end\r\nend\r\n\r\n#             user       system     total    real\r\n# signed      3.240000   0.010000   3.250000 (  3.263722)\r\n# encrypted   5.450000   0.010000   5.460000 (  5.472302)\r\n```"},{"ts":1364838632000,"body":":shipit:"},{"ts":1364853894000,"body":"Great work @trevorturk!  If you wanted to convert from using Marshal to JSON for session serialization that'd be cool too ;)"},{"ts":1364968386000,"body":"Nevermind... didn't read this PR."}]},{"timestamps":[{"ts":1367515643000,"body":"Can you fix this where strict mode is shut off?  I think it's [here](https://github.com/rails/rails/blob/master/activerecord/test/cases/primary_keys_test.rb#L210)."},{"ts":1367552312000,"body":"I tracked it down.  The issue was caused by https://github.com/rails/rails/commit/2088bf27981137a2c6c8b2f718f33b417b4045af ... the setup and tear down for test/cases/adapters/mysql2/active_schema_test.rb overrides the adapter's execute method to just return the sql rather execute it which doesn't allow the mysql session variables to be set.\r\n\r\n/CC @tenderlove "},{"ts":1367557246000,"body":"Closing and opening a new one with a single commit"}]},{"timestamps":[{"ts":1369969253000,"body":"@arunagw, I know you've made jruby specific changes before, does this look like the right thing to do?"},{"ts":1369976035000,"body":"Looks good to me :+1: \r\n"},{"ts":1369977141000,"body":"sorry. been busy this last week. thanks @atambo for re-patching against master."},{"ts":1370205072000,"body":"cc @guilleiguaran "},{"ts":1370328659000,"body":"@atambo rebase required with master."},{"ts":1370347712000,"body":"@arunagw, done"},{"ts":1370728757000,"body":"@steveklabnik, can you take a look at this? It's a pretty small change would help jruby users a ton."},{"ts":1370757212000,"body":"About to board a plane, I'll try to soon.\r\n\r\nIt needs a rebase. Probably the CHANGELOG. :/"},{"ts":1370804512000,"body":"Overall looks great, but I think we should be using `assert_raises`."},{"ts":1370816466000,"body":"@steveklabnik, switched to assert_raises, thanks for taking a look."},{"ts":1370846916000,"body":"Thanks for your patience. <3"},{"ts":1370866531000,"body":"Awesome, now what are the chances of getting this backported to 4.0-stable?"},{"ts":1370889065000,"body":"Done in 14fda48."}]},{"timestamps":[]},{"timestamps":[{"ts":1376972257000,"body":"IMO examples containing symbolized hash notation should be above examples containing raw SQL. What do you think?"},{"ts":1376974344000,"body":"I think so. I'll rewrite it."},{"ts":1376986501000,"body":"I agree, let's change the order and it's good to go."},{"ts":1377042478000,"body":"Should this be preferred syntax? Maybe the older style should be removed as well."},{"ts":1377068899000,"body":"@steveklabnik in my opinion one should prefer to use the symbolized hash but we need to keep and document both. The SQL fragment can still be necessary if you perform complex orders (for example with a function call)."},{"ts":1377167367000,"body":"I changed the order and pushed. Merge, please."},{"ts":1377168151000,"body":":+1: "}]},{"timestamps":[]},{"timestamps":[{"ts":1357506339000,"body":"Very good. Just a minor comment."},{"ts":1357506673000,"body":"All set. @rafaelfranca thanks for the review and advice on the little issue."},{"ts":1357506977000,"body":"@trisweb Thank YOU for the report and fix."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1372627055000,"body":"This is dup of #11201 "},{"ts":1373018471000,"body":"I'm closing this one as #11201 was merged."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1372545172000,"body":"Please add [ci skip] in commit message and force push :-)"},{"ts":1372545581000,"body":"Updated. Thank You!"},{"ts":1372627928000,"body":"Make sure to add `[ci skip]` to the merge commit as well ;)"},{"ts":1372657722000,"body":"@carlosantoniodasilva :grimacing: will do in the future."}]},{"timestamps":[{"ts":1374061995000,"body":"If this got merged, I think we should also update the `templates/Gemfile` file (in railties/lib/rails/generators/app). Just my two cents."},{"ts":1374062301000,"body":"yea maybe there are also sample files like in the getting started guide that might need updating."},{"ts":1374064733000,"body":"like so?"},{"ts":1374068360000,"body":"@bvogel : Yes, thanks!\r\n\r\nAfter a bit of investigation (with `grep -R bcrypt`) apart from the root Gemfile and Gemfile.lock, all the files are up to date. I don't if these ones should be updated, can you confirm @senny please?"},{"ts":1374070398000,"body":"confirm, please update also [Gemfile](https://github.com/rails/rails/blob/master/Gemfile#L11) and squash your commits"},{"ts":1374071665000,"body":"sorry I'm a bit at a lost how to squash already pushed commits."},{"ts":1374071815000,"body":"@bvogel : Here you have to:\r\n\r\n~~~\r\n$ git rebase -i HEAD~3\r\n~~~\r\n\r\nThen with your code editor, replace pick with squash _except for the very first commit__.\r\n\r\nThen `git push origin +master` (don't forget the + to force push)."},{"ts":1374072062000,"body":"Thanks for clearing that up - again learned something"}]},{"timestamps":[{"ts":1376224822000,"body":"@tenderlove this might be something you could be interested in :dancers: "},{"ts":1376593546000,"body":"If we're instrumenting the sql string, couldn't someone getting the notification parse out the operation in the same way? Can you give me an example of how this will make your life (and hopefully mine) easier compared to today?\r\n\r\nThis PR also needs to be squashed to one commit `git rebase -i HEAD~5` then force push"},{"ts":1376596569000,"body":"Yup, the data could be parsed by the subscriber - but I feel that the notifier ought to do it. It's already being done by the EXPLAIN subscriber.\r\n\r\nIn the app I'm building I'm currently doing the parsing, but it doesn't feel like something a subscriber should have to do."},{"ts":1376597489000,"body":"Adding to the notifier we are penalising the users who doesn't care with this information with extra performance load. \r\n\r\nSince it is not optional like the explain subscriber and can be done in the subscriber side I'm :-1: for this."},{"ts":1376600063000,"body":"@schneems and @rafaelfranca are right about the performance, I don't think this is worth it."},{"ts":1376601031000,"body":"@rafaelfranca I can understand that – I'll close this PR. However, have you considered that this was all a clever ploy to get you to review #11452, the bugfix patch I did for the ActionView template digests? Muahahaha!"},{"ts":1376601430000,"body":"I prefer to defer to who introduced the feature to Rails :smile: since I don't have time to understand the code and the new implementation. Already pinged him."},{"ts":1376602615000,"body":"Okay, thanks! :smile: "}]},{"timestamps":[{"ts":1370379435000,"body":"Thank you but we don't want this feature. See https://github.com/rails/rails/pull/5969#issuecomment-8313968 and #7524.\r\n\r\nAlso you can easily do `if user.color` right now."},{"ts":1370381030000,"body":"Thank you. That makes sense. \r\n\r\nFWIW, I vote to deprecate/remove the `attr?` methods from normal ActiveRecord attributes. Then the behavior would be consistent."}]},{"timestamps":[{"ts":1373443909000,"body":"can you add `[ci skip]` to the commit message?"},{"ts":1373443984000,"body":"the post also mentions a different bug, we should backport that one too."},{"ts":1373472669000,"body":"It was already fixed"},{"ts":1373853592000,"body":"@senny @rafaelfranca Thanks, sorry for missing the `[ci skip]` bit. Next time!"}]},{"timestamps":[{"ts":1373612245000,"body":"/cc @fxn "},{"ts":1373859625000,"body":"This doesn't make a lot of sense to me - if `boolean` is sensible for the `?` methods, wouldn't `integer` or `string` (etc) be more logical for the others?\r\n\r\nFrom some digging, it looks like the only place in 3.2.x that `column_methods_hash` was used was here:\r\n\r\nhttps://github.com/rails/rails/blob/714cb5a436e72d00ca0e5e6efa4b789c3e6f5b04/activerecord/lib/active_record/dynamic_matchers.rb#L72\r\n\r\nin the dynamic finders code - which only ever depended on the keys of the hash, and has now been spun off into a gem.\r\n\r\n"},{"ts":1373870304000,"body":"@al2o3cr well yes just `boolean` is not making that much sense.  But in the current implementation neither `id`, `name` is also not making sense.  If key is the method then value should tell us what should be the return type. What do you think?  "},{"ts":1373873901000,"body":"Hey I'll try to work on this one today."},{"ts":1373923533000,"body":"On one hand the purpose of the values in that hash is to be true. The hash acts as a set. As true values, the hash stores the original attribute name from which the generated method gets its name. There is here no idea of data type.\r\n\r\nAs @al2o3cr said this code was used in the previous implementation of the dynamic finders. Note that not all dynamic finders are deprecated, the singulars like `find_by_email` are fully supported, those are not going anywhere. But the current implementation of what remains in Rails 4 from dynamic finders no longer uses that method.\r\n\r\nThe conclusion is that this method is obsolete, internal, and nodoc'ed, so I am just going to remove it in master."}]},{"timestamps":[]},{"timestamps":[{"ts":1365700127000,"body":"If the `find_by` method also should use duped attributes, you should use `temp_attrs` in both places:\r\n\r\n```ruby\r\n  temp_attrs = attributes.dup\r\n  find_by(temp_attrs) || create(temp_attrs , &block)\r\n```\r\n\r\nAlternatively, if `find_by` doesn't need duped attrs, you should only dupe them for the `create` method so you don't spend cycles duping where its not needed:\r\n\r\n```ruby\r\n  find_by(attributes) || create(attributes.dup , &block)\r\n```\r\n\r\nAlso, it would be great to have a test for this that ensures original attributes are no longer mutated.\r\n\r\nFinally, why is duping an issue in find_or_create type methods but not in the underlying create/new methods? Should you instead modify the new/create methods to dupe?"},{"ts":1365701061000,"body":"If they're being mutated, I think we should check `find_by` and `create` to see where it happens, that might be the culprit. AR shouldn't mutate the assigned attributes hash in any sense."},{"ts":1365704913000,"body":"The idea behind this was that @tenderlove eventually wants relations to be cached with binds. Now find_by ends up calling build_where, where the binding would be handled. Attributes would contain only the bind params instead of real values after that point, and it would be safer to dup them at this point to prevent similar cases.\r\n<pre><code>\r\nfind_by(attributes) || create(attributes.dup , &block)\r\n</code></pre>\r\nWouldn't it be too late to dup the attributes after find_by is visited, given it might override them even if it returns false?"},{"ts":1365705363000,"body":"`find_by` by itself should not change the attributes hash, it should keep them intact, so if it needs to change anything, it should dup internally. I believe this code should be safe the way it is, and if it's not, the problem may be somewhere else.\r\n\r\nI may be missing something regarding your conversation with @tenderlove, so we may need to ask him to weight. Thanks!"},{"ts":1365705690000,"body":"Currently its safe, this would be a stepping stone Aaron proposed. Lets wait for his input."},{"ts":1366129753000,"body":"```ruby\r\n  temp_attrs = attributes.dup.freeze\r\n```\r\nAnd see where it blows up :grin:"},{"ts":1366130174000,"body":"Closing this, @carlosantoniodasilva has a valid point and the dup should be done internally."}]},{"timestamps":[{"ts":1357246616000,"body":"Thank you"},{"ts":1357246684000,"body":"Happy to help!"}]},{"timestamps":[{"ts":1365114631000,"body":"/cc @fxn @rafaelfranca "},{"ts":1365116467000,"body":"Awesome!"}]},{"timestamps":[]},{"timestamps":[{"ts":1371448149000,"body":"/cc @steveklabnik "},{"ts":1371491642000,"body":"I'm not 100% sure. this is what a 406 is for, but\r\n\r\n> HTTP/1.1 servers are allowed to return responses which are\r\n>      not acceptable according to the accept headers sent in the\r\n>      request. In some cases, this may even be preferable to sending a\r\n>      406 response. User agents are encouraged to inspect the headers of\r\n>      an incoming response to determine if it is acceptable.\r\n\r\nSo, this may be one of those preferable times. "},{"ts":1371492001000,"body":"Briefly discussed this with @tenderlove , and we both think that returning info is better than not returning info, so let's go with this."},{"ts":1371492027000,"body":"Please add a CHANGELOG entry though, and squash it into this commit. <3"},{"ts":1371565847000,"body":"Done. Should it be back ported to 3.2?"},{"ts":1371588249000,"body":"It's still 3 commits.\r\n\r\nI think this is fine for backporting, but we'll do that ourselves after a merge."},{"ts":1371590292000,"body":"Sorry. I ran rebase -i HEAD~2 and I messed it up. I will move it to a branch as one commit and open another pull request. \r\n\r\nBecker"},{"ts":1371590793000,"body":"https://github.com/rails/rails/pull/11000\r\n\r\nSubmitted new pull request. "},{"ts":1371591166000,"body":"You don't need to submit new pull requests in the future, just force push to the branch."}]},{"timestamps":[]},{"timestamps":[{"ts":1360589073000,"body":"Rebased commits for simplicity"}]},{"timestamps":[{"ts":1367048918000,"body":"/cc @tenderlove "},{"ts":1368324146000,"body":"Could you rebase your commit and ping me when done?"},{"ts":1368330240000,"body":"@rafaelfranca Done."}]},{"timestamps":[{"ts":1363813132000,"body":"@pixeltrix would also be nice if we ignored host's with backslashes or used a more intelligent joining method like `File.joins` otherwise we end up with this\r\n```\r\nbar_path(host: 'example.com/')\r\n```\r\nTurns into `example.com//bar`\r\n"},{"ts":1363851013000,"body":"We could always `chomp` it:\r\n\r\n``` ruby\r\n>> \"http://www.example.com/\".chomp('/')\r\n=> \"http://www.example.com\"\r\n```"},{"ts":1369904411000,"body":"Ok, let me do the grumpy old man job: it is to a certain point the responsibility of the user to provide correct data. However, it is our responsibility to document and name our API as clearly as possible.\r\n\r\nThat said, `:host` is a very clear name. A host does not contain a schema. A host does not contain paths. I think normalizing those things is a waste of resource for the 99% of the correct cases at the cost of teaching wrong semantics to users!\r\n\r\nSo I'm :-1: on this one. :heart:"},{"ts":1369906867000,"body":"The problem is that it is a very expensive yet silent lesson. If you configure the host wrong then your outbound links in emails suddenly quit working all without exception or warning.   \r\n\r\nIf we know an invalid input causes an invalid output we should either fix the input or raise an instructive error.  \r\n\r\n--  \r\nRichard Schneeman\r\nhttp://heroku.com\r\n@schneems\r\n\r\nSent from the road\r\n\r\n\r\nOn Thursday, May 30, 2013 at 6:01 PM, José Valim wrote:\r\n\r\n> Ok, let me do the grumpy old man job: it is to a certain point the responsibility of the user to provide correct data. However, it is our responsibility to document and name our API as clearly as possible.\r\n> That said, :host is a very clear name. A host does not contain a schema. A host does not contain paths. I think normalizing those things is a waste of resource for the 99% of the correct cases at the cost of teaching wrong semantics to users!\r\n>  \r\n> —\r\n> Reply to this email directly or view it on GitHub (https://github.com/rails/rails/pull/9838#issuecomment-18668979).\r\n>  \r\n>  \r\n>  "},{"ts":1369917213000,"body":"I have had this problem as well, back when I didn't know these things. An instructive error would have been lovely, to let me know that rails made that distinction. "},{"ts":1373421324000,"body":"I've seen this error often in various applications.  In fact, I've seen it enough that I ended up doing some checks and manipulating the url mailed out to ensure both a host and protocol were specified to prevent this particular error from happening in a recent application.\r\n\r\n:+1: "},{"ts":1373447347000,"body":"I don't think we need to backport this now that Rails 4.0 has been released."}]},{"timestamps":[{"ts":1361461955000,"body":"@NARKOZ can you squash the commits and I'll merge it thanks."},{"ts":1361517768000,"body":"@pixeltrix I squashed them into two commits."},{"ts":1361518439000,"body":"Merged - thanks @NARKOZ !"},{"ts":1361519414000,"body":"Thank you."}]},{"timestamps":[{"ts":1376863512000,"body":"@baroquebobcat sorry, I didn't see this and fixed it myself :grin:"}]},{"timestamps":[{"ts":1357079653000,"body":"@vijaydev @fxn "}]},{"timestamps":[{"ts":1367919515000,"body":"@rafaelfranca @carlosantoniodasilva can you take a look?"},{"ts":1367991072000,"body":"@rafaelfranca I updated the PR to only silence the warning without assertion."}]},{"timestamps":[{"ts":1373740299000,"body":"cc/ @fxn "},{"ts":1373753482000,"body":"Why do we want the license in the API? In fact I would delete the changelogs as well."},{"ts":1373753552000,"body":"@fxn :+1:"},{"ts":1373787887000,"body":"@fxn true we don't need. I removed previous one as well from railties.\r\n\r\nUpdated PR. \r\n\r\nthanks"},{"ts":1373802916000,"body":"Excellent."},{"ts":1373802941000,"body":":green_heart: "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1361841175000,"body":"Hi, I'm still getting these 3 failures with Oracle enhanced adapter. and this is the only failures need addressed for Rails 4. Can I have some updates?"},{"ts":1361844340000,"body":"This is a regression and we need to address it. But I'm not sure what is the best way. Maybe we are going to revert the changes at predicate builder that introduced this regression.\r\n\r\nI'll mark with 4.0.0 milestone"},{"ts":1361844488000,"body":"Thanks for the update. I think my pull request is not the better way to address these failures, but would like to provide anything I can do. I'll keep monitoring this thread. "},{"ts":1361844556000,"body":"Ok. We will fix this issue soon, it is a blocker to the 3.2.x release"},{"ts":1361994229000,"body":"Since https://github.com/rails/rails/commit/afd4a14332c49fa0e236e6904a5f7e09ce33c407, these failures have gone."},{"ts":1361994367000,"body":"Great! Closing. Thank you for the pull request."}]},{"timestamps":[{"ts":1374694319000,"body":"Actually different actions is right. Thank you"},{"ts":1374695080000,"body":"Sorry, can you explain? In the example, there appears to be one action (`welcome_email`) with two formats (`html` and `text`). The formats use different layouts."},{"ts":1374695381000,"body":"Yes, but the idea is to show that you can specify a different layout from action passing the `layout_name` option to  `render`."},{"ts":1374695550000,"body":"Actually both are correct. But since it is talking explicitly about the format block `formarts` is better."},{"ts":1374695557000,"body":"Thanks"}]},{"timestamps":[{"ts":1376848392000,"body":"Thanks!!!\r\n\r\nWe don't add changelog entries for changes in tests :)\r\n\r\nCan you remove changelog entry and force push your branch?"},{"ts":1376849882000,"body":"Yep, will do"},{"ts":1376850086000,"body":"Done\r\n"}]},{"timestamps":[]},{"timestamps":[{"ts":1374241700000,"body":"It makes sense to me for this to be defined on the `abstract_adapter`. You may want to restart the build to see if the MySQL adapter errors were flickering.\r\n\r\nSome unsolicited advice though: I'd really recommend using the same database for testing/dev/production. There are significant differences between SQLite and Postgres that can show up even if you are sticking to ORM methods. SQLite will cast strings to integers more readily than Postgres will, for example."},{"ts":1374242954000,"body":"Thanks for your reply @sorentwo \r\n\r\nHow can I exactly restart the build? The corresponding button in Travis CI seems to be disabled.\r\n\r\nI understand (and agree with) your concerns about mixing adapters. The rationale behind it is because of our CI environment: we have two applications sharing the database (which is in my opinion, also a bad idea) and the only way to make it possible to run parallel builds is to be able to isolate databases. It is certainly possible to do with Postgresql as well, but I guess sqlite was just easier."},{"ts":1374243226000,"body":"The simple way would be to amend the comment and force a push."},{"ts":1374757246000,"body":"Done and tests passing :)\r\n\r\nWhat about the tests? Can anyone help with that?"},{"ts":1374758312000,"body":"I dug into `postgres_adapter` a bit to see if and how the extensions were being tested. It looks like `supports_extensions?` may be the better route. There are a number of other extension related methods that probably wouldn't make sense to have defined on the abstract adapter:\r\n\r\n* supports_extensions?\r\n* enable_extension\r\n* disable_extension\r\n* extension_enabled?\r\n* extensions\r\n\r\nThe clearest solution seems like defining `supports_extensions?` on the abstract adapter and hard coding it as false:\r\n\r\n```ruby\r\ndef supports_extensions?\r\n  false\r\nend\r\n```\r\n\r\nThere don't seem to be any tests directly on the `AbstractAdapter`, which makes sense. I'd assert that the sqlite3 adapter does not support extensions:\r\n\r\n```ruby\r\n# activerecord/test/cases/adapters/sqlite3/sqlite3_adapter_test.rb\r\ndef test_supports_extensions\r\n  assert !@conn.support_extensions?, 'does not support extensions'\r\nend\r\n```\r\n\r\nJust my thinking though.\r\n"},{"ts":1375371460000,"body":"Added some tests, thanks @sorentwo "}]},{"timestamps":[{"ts":1364479846000,"body":":+1: @yahonda any objections?"},{"ts":1364479912000,"body":"@tenderlove what do you think?"},{"ts":1364479965000,"body":"this is cool!"},{"ts":1364480309000,"body":"Will take a look at this.\r\n\r\ncc / @metaskills I think you maintain sql server adapter."},{"ts":1364481721000,"body":"Fine by me, we  have always had to hack around these anyway. Would much rather prefer the new proposed API."},{"ts":1364565109000,"body":"Hi, I've merged these commits into my sandbox branch and tested. Every database adapter (sqlite, mysql, mysql2, postgresql and oracle) this test gets error. \r\n\r\n```ruby\r\n  1) Error:\r\nActiveRecord::MySQLStructureDumpTest#test_warn_when_external_structure_dump_fails:\r\nTypeError: can't convert Tempfile into StringIO\r\n    /home/yahonda/git/rails/activesupport/lib/active_support/core_ext/kernel/reporting.rb:87:in `reopen'\r\n    /home/yahonda/git/rails/activesupport/lib/active_support/core_ext/kernel/reporting.rb:87:in `capture'\r\n    /home/yahonda/git/rails/activerecord/test/cases/tasks/mysql_rake_test.rb:277:in `test_warn_when_external_structure_dump_fails'\r\n```\r\n\r\nHere are all outputs. \r\nhttps://gist.github.com/yahonda/5270973 I'm okay to merge this pull request if these errors resolved."},{"ts":1364577034000,"body":"@yahonda Thank you for testing ! I can reproduce above error, and I'm going to fix it."},{"ts":1364578661000,"body":"I've updated commits to fix the above error. I used `capture` method instead of swapping $stderr in testcase"},{"ts":1364583593000,"body":"Thanks for the update. All errors have gone.\r\n\r\nIs this an expected behavior to show deprecation messages every time, `rake test_sqlite3` and other bundled adapters are tested? \r\n\r\nhttps://gist.github.com/yahonda/5272825\r\n\r\n"},{"ts":1364662065000,"body":"I don't think so."},{"ts":1364693333000,"body":"@yahonda thanks for your comment. I've confirmed it. I'm going to check one tonight. Now I'm working on holiday ;)"},{"ts":1364725745000,"body":"@yahonda @rafaelfranca I've udpated deprecation warning problem. I added 2b32b0597ab082404c9146892912c31014c075a0.\r\n\r\nI thought no D.R.Y., but above code will be removed. So I left duplicated code alone."},{"ts":1364830157000,"body":"@kennyj  Thanks for making a fix.\r\n\r\nhttps://github.com/rails/rails/commit/2b32b0597ab082404c9146892912c31014c075a0 mutes all deprecated messages not only for bundled adapters (sqlite3, mysql, mysql2 and postgresql) but for Oracle enhanced adapter. I do not have SQLServer or Firebird database environments, it should mute deprecate messages for these adapters also.\r\n\r\nWhat I meant to say was this deprecate message should appear when Oracle, Firebird and SQLServer adapters are tested. but it should not appear when bundled adapters (sqlite3, mysql, mysql2 and postgresql) are tested.\r\n\r\nI was trying to make a fixusing `current_adapter?` but actually these tests use `Mocha::Mock` adapter, then made [a commit] (https://github.com/yahonda/rails/commit/beff312e2cf041090000aa98750b324e3b2a865a)  using if adapter names are defined or not.\r\n\r\nHere are both outputs.\r\n`rake test_oracle` [output] (https://gist.github.com/yahonda/5285473) and `rake test` [output] (https://gist.github.com/yahonda/5285437)\r\n\r\nThis output is what I expected whatever the way it is implemented. "},{"ts":1364859555000,"body":"@yahonda thanks. I agree with your commit.\r\nI want to remove https://github.com/rails/rails/commit/2b32b0597ab082404c9146892912c31014c075a0\r\nand add your commit . But your commit depend on my commit .\r\nCould you provide a commit without dependency ?\r\nor should I fix my commit ?"},{"ts":1364859946000,"body":"Yes my commit needs your https://github.com/rails/rails/commit/2b32b0597ab082404c9146892912c31014c075a0. I do not think you need to revert/remove https://github.com/rails/rails/commit/2b32b0597ab082404c9146892912c31014c075a0. I think it should be fine your pull request includes https://github.com/yahonda/rails/commit/beff312e2cf041090000aa98750b324e3b2a865a. Would you cherry pick https://github.com/yahonda/rails/commit/beff312e2cf041090000aa98750b324e3b2a865a and update your pull request?"},{"ts":1364860773000,"body":"@yahonda ok. I'm going to include your commit. Thanks :)"},{"ts":1364917657000,"body":"I've updated my PR again :) I included @yahonda 's commit."},{"ts":1364917813000,"body":"Great @kennyj. Now we need a CHANGELOG entry"},{"ts":1364918624000,"body":"@rafaelfranca I've added a CHANGELOG entry ."},{"ts":1364918983000,"body":"@kennyj could you squash these two commits? https://github.com/kennyj/rails/commit/24e093f19a5834481427d2949ae9e987a636346b https://github.com/kennyj/rails/commit/2f336708c0a819221f34164856fdbb23d2932e27"},{"ts":1364919398000,"body":"@rafaelfranca I've updated again :)"},{"ts":1364919479000,"body":"Thank you"},{"ts":1364919617000,"body":"Thanks guys !"}]},{"timestamps":[{"ts":1356836750000,"body":"@JordiPolo sorry but this has been discussed multiple times in the past and was decided that the scaffold generator will keep with respond_to instead of switch to respond_with just because is intend to be a learning tool for newcomers to Rails. See [1] [2] and [3] for details.\r\n\r\nI will keep this open to check if the opinion of core members have changed since the last time this was discussed.\r\n\r\n[1] https://rails.lighthouseapp.com/projects/8994/tickets/3044-change-scaffolding-to-use-respond_with\r\n[2] https://github.com/rails/rails/pull/233\r\n[3] https://github.com/rails/rails/pull/3446\r\n\r\n/cc @josevalim"},{"ts":1356840501000,"body":"@JordiPolo Thanks for the patch!\r\n\r\nGenerating actions with `respond_to` starts you off with a full palette of paints to work with. Starting with DRYed up `respond_with` makes it harder to un-DRY, or even reveal to users that it's possible."},{"ts":1376588473000,"body":"@jeremy But why not create an option to decide whether to use the new-style template? So, for the beginners, it's easy to learn rails, but it'll be very convenient for the seniors to create the prototype of the web site."}]},{"timestamps":[{"ts":1372982261000,"body":"For earlier discussion refer to https://github.com/rails/rails/pull/11188#issuecomment-20492664"},{"ts":1373033216000,"body":"Could we wrap this to 80 cols, maybe?"},{"ts":1373080061000,"body":"OK, changed it to 80 columns. I'm having problems trying to update this pull request, so will close it and redo it yet again. New request is https://github.com/rails/rails/pull/11323  I think I'm having problems because I'm forking to my own repo, then pulling and pushing to it before creating requests back to rails/rails.  Do you have any advice on the best way to do this, to enable updates of pull requests? Thanks for the pointer to your tutorial on squashing commits; the tutorial I first used was incorrect which is what messed up my earlier attempts to squash the commits.\r\n\r\nAlso, the manifest-md5hash.json file example didn't truncate to 80 columns in vim, so it is displaying as one long line. I'm using the ```json markup for it."}]},{"timestamps":[{"ts":1363178859000,"body":"I like it.\r\n\r\nI have a question, do we need the password digest on the index and show?"},{"ts":1363183525000,"body":"My initial thinking was that it was easier for an application developer to remove password digest lines from a template than it is to add them, but if most will remove them, and if adding these lines is both obvious and easy, then I can buy the argument that these lines shouldn't be added in the first place.  Removed.  I've also refactored the password digest attribute check based on Carlos' suggestion."},{"ts":1363183845000,"body":":+1: we can proceed in my opinion."},{"ts":1363186931000,"body":"With the addition of a test case and a changelog entry, my recommendation is that this be pulled now.  Updating jquery-rails, the edge guides, and my test suite can proceed after that is complete."},{"ts":1363189841000,"body":"squashed"},{"ts":1363194720000,"body":"Looks great :+1:, thanks @rubys :)"},{"ts":1363206062000,"body":":green_heart: :yellow_heart: :heart: :purple_heart: :blue_heart: "},{"ts":1363209436000,"body":":+1:"},{"ts":1363209680000,"body":":+1: I was actually thinking about this just yesterday creating the migration with the password_digest. "}]},{"timestamps":[{"ts":1361554296000,"body":"Thank you but we decided to not deprecate that method now since `update_column` and `update_attribute` are not interchangeable. "}]},{"timestamps":[]},{"timestamps":[{"ts":1374163156000,"body":"The `test_module_is_included_normally` test runs twice the same thing, for no reason apparently."},{"ts":1374165454000,"body":"@dmathieu you are right. Maybe there was a reason to do it twice. We'll have to investigate. The test, which is removed by this commit was rendered useless by 401393b6\r\n\r\nI'm merging this one feel free to open a new PR for the other duplication."},{"ts":1374165470000,"body":"thanks for your contribution :yellow_heart: "},{"ts":1374167569000,"body":"Thanks!"}]},{"timestamps":[{"ts":1374856693000,"body":"Hello,\r\n\r\nThanks for your contribution! :heart: I've added some comments. Could you just wrap these helpers with a title (here SanitizeHelper) please?"},{"ts":1374856830000,"body":"Super pwned!\r\n\r\nThanks for the feedback I'll get right on it.\r\n-- \r\nToby Sims\r\nSent with Airmail\r\n\r\nOn 26 July 2013 at 17:39:26, Robin Dupret (notifications@github.com) wrote:\r\n\r\nHello,\r\n\r\nThanks for your contribution!  I've added some comments. Could you just wrap these helpers with a title (here SanitizeHelper) please?\r\n\r\n—\r\nReply to this email directly or view it on GitHub."},{"ts":1374857310000,"body":"Oops. My bad, too many files open."},{"ts":1374857710000,"body":"Could you just squash your commits into a single one please?\r\n\r\n~~~bash\r\n$ git rebase -i HEAD~3\r\n# Replace pick with squash except for the first commit\r\n$ git push origin +doc_sanitize\r\n~~~"},{"ts":1374857939000,"body":"You learn something new every day…\r\n\r\n-- \r\nToby Sims\r\nSent with Airmail\r\n\r\nOn 26 July 2013 at 17:56:16, Robin Dupret (notifications@github.com) wrote:\r\n\r\nCould you just squash your commits into a single one please?\r\n\r\n$ git rebase -i HEAD~3\r\n# Replace pick with squash except for the first commit\r\n$ git push origin +doc_sanitize\r\n—\r\nReply to this email directly or view it on GitHub."},{"ts":1374858282000,"body":"> You learn something new every day…\r\n\r\nYeah, especially with Git!\r\n\r\nDidn't see any error with the snippet I've posted? Seems like this hasn't applied correctly."},{"ts":1375084748000,"body":"I think I won. Curse my poor spelling."},{"ts":1375088346000,"body":"Awesome, thanks you! :-) \r\n\r\nLGTM /cc @fxn "},{"ts":1375088500000,"body":"No problem, thanks for being so helpful!\r\nOn Jul 29, 2013 10:00 AM, \"Robin Dupret\" <notifications@github.com> wrote:\r\n\r\n> Awesome, thanks you! :-)\r\n>\r\n> LGTM /cc @fxn <https://github.com/fxn>\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/11617#issuecomment-21707071>\r\n> .\r\n>"},{"ts":1376490145000,"body":"I feel like this kind of documentation is too similar to the [Rails API documentation](http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html) I don't see a good reason to duplicate the documentation on the method level. I know that there are already modules documented that way in this guide, I just don't think it's particularly useful.\r\n\r\n@steveklabnik @fxn what do you guys think?"},{"ts":1376491078000,"body":"Yeah it's a middle ground. We have some guides that are like this; the validations guide, for example. I am also a vague :-1: , but since we have other things like this, maybe this should be in too.\r\n\r\n@fxn?"},{"ts":1376491610000,"body":"Yeah, there is no good solution I am afraid.\r\n\r\nSome guides are more detailed, the most extreme one is the Active Support guide that not only documents at the API level, but it is more informative than the API itself for some methods (motivation is to provide a central point to read about extensions to core classes).\r\n\r\nThis guide has also a section where helpers are listed... gray area.\r\n\r\nIn general I believe we should avoid duplication. Find a balanced point and at most cross-link (\"read the API documentation for further details\", something like that). Which reminds me that I need to figure out a way to cross-link.\r\n\r\nThe patch is fine for me though, no reason strong enough not to apply."},{"ts":1376559963000,"body":"@fxn @steveklabnik @senny : Maybe we could just put a list of links pointing to the different methods/helpers and try to enhance as possible the API to avoid duplication? If you want me to help you at this level, I would be glad!"},{"ts":1376562769000,"body":"@robin850 I think we could leave these as they are by now."}]},{"timestamps":[]},{"timestamps":[{"ts":1370373359000,"body":"Thank you but they was changed to this form on purpose, to better document. See https://github.com/rails/rails/commit/3b0da715c5c8cfc97071c4e640c9e00a2895113a"}]},{"timestamps":[]},{"timestamps":[{"ts":1369553115000,"body":"I'm always a little bit reluctant to merge these kind of things as you end up forcing everyone to accept slower performance whereas it's easy enough to do `array.reject(&:blank).to_sentence` if there's a possibility that you might have blanks in your array.\r\n\r\nWdyt @carlosantoniodasilva  @rafaelfranca ?"},{"ts":1369556438000,"body":"@pixeltrix I agree with you. Next this could lead to call `:strip` on each of them to ensure we don't have double spaces and so on. I think the user should be responsible to validate the \"input\" before calling `to_sentence`."},{"ts":1369595684000,"body":"Thanks for considering! I understand your reasoning."}]},{"timestamps":[]},{"timestamps":[{"ts":1361766573000,"body":"Seems fine. Thank you!"},{"ts":1361769095000,"body":"This inadvertently moved `Array#encode_json` to `Enumerable` as well. `#as_json` returns a Ruby object that directly corresponds to a JSON primitive, and only these primitives implement `#encode_json`. `Enumerable#encode_json` should remain on `Array`.\r\n\r\nMoving `Array#as_json` to `Enumerable` is technically ok, but it obscures the intention behind these API: explicitly coercing the enumerable to an array *first*, then returning the array's JSON representation.\r\n\r\nThe patch also removes the `options` attr without reason.\r\n\r\n@steveklabnik I think we should revert."},{"ts":1361771281000,"body":"@guilleiguaran beat me to it. My bad! I will defer to you on the intention bit."},{"ts":1361771302000,"body":"(it was reverted in 3762ee0baa2285bdc4a76d4d492fbe34a10cdc3a for posterity)"},{"ts":1361772489000,"body":":heart:"}]},{"timestamps":[{"ts":1371732767000,"body":"Ok, now works fine. Just one question because i can't understand what's happend now when super() calls in model.rb? Because i don't see where to go call in debugger."}]},{"timestamps":[{"ts":1357747120000,"body":"> Makes it easier to test its objects.\r\n\r\nWdym?"},{"ts":1357747638000,"body":"Inside my application's test suite:\r\n\r\n```ruby\r\nEventAvailabilityValidator.new({}).validate(record)\r\n\r\n# to\r\n\r\nEventAvailabilityValidator.new.validate(record)\r\n```"}]},{"timestamps":[]},{"timestamps":[{"ts":1366639129000,"body":"I don't think they should be full links with the host pointing to api, @fxn @vijaydev ?"},{"ts":1366639564000,"body":"Yes, @carlosantoniodasilva is right. The links are correct."},{"ts":1366639602000,"body":"The problem with your change is that links will then be broken in [edgeapi](http://edgeapi.rubyonrails.org/)."},{"ts":1366641566000,"body":"Ok dmathieu, but the links in rails/master doesn't works. They directs to page not found."},{"ts":1366641804000,"body":"That's a known issue. Not all places can be fixed at the moment. So the choice has been made to have broken links in the git repository.\r\nYou can get the working links in http://api.rubyonrails.org/"},{"ts":1366642034000,"body":"Thanks @dmathieu, for the detailed answer."}]},{"timestamps":[{"ts":1374953738000,"body":"What about this?\r\n\r\n```ruby\r\nif params[:subject].in?([:english, :math, :biology])\r\n```"},{"ts":1374954232000,"body":"@guilleiguaran I like that. Simple and short."},{"ts":1374954490000,"body":"@guilleiguaran I modified it, rebased and commited."},{"ts":1374957593000,"body":"@Nerian I'm guessing @guilleiguaran's point was that there's a method `Object#in?` already defined. See [inclusion.rb](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/object/inclusion.rb)."},{"ts":1374960595000,"body":"Oh I see. Didn't see that method, thanks for the link. No need to replicate it :)  \r\n\r\nClosing "}]},{"timestamps":[{"ts":1357509676000,"body":"I really don't like `tap` it doesn't make anything better in that case."},{"ts":1357509829000,"body":"@rafaelfranca ok, reverted it."},{"ts":1357511523000,"body":"Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1365135836000,"body":"@wangjohn thank you so much for the pull request! I have added some small comments!"},{"ts":1365138344000,"body":"@josevalim Thanks for the comments. I've updated my PR with your comments."},{"ts":1365176790000,"body":"This looks good to me. @tenderlove, let's merge it?"},{"ts":1365177926000,"body":"Just wondering: are we aiming such changes for Rails 4?"},{"ts":1365183425000,"body":"@carlosantoniodasilva I don't think so. The plan is to ship this one in Rails 4.1"},{"ts":1365251470000,"body":"Thanks @tenderlove, I've made your suggested changes. I decided to load the ``:before_configuration`` callbacks each time an application loads, but they are loaded on ``:self`` instead of loading them on possibly the same application each time."},{"ts":1371517809000,"body":"If I'm not wrong this is not going to work if I upgrade my apps from 4.0 to 4.1 and don't change the application.rb file to the new format. c/d?"},{"ts":1371530427000,"body":"@spastorino Unfortunately that is correct. The change in the application.rb file was something that @jeremy originally suggested so that we could get around the fact that each application is a singleton instance of a particular ``Rails::Application`` subclass. \r\n\r\nI'm not really sure how to go about removing the subclass singleton without changing how an application is initialized in the application.rb file. I'll look into this in the next couple of days to see if I can find a more backwards compatible alternative."},{"ts":1372306187000,"body":"@spastorino The new PR is updated so that it is completely backwards compatible: it doesn't change `application.rb` and still initializes the application when the `Rails::Application` is subclassed. However, there is now the additional ability to create more rails applications with a particular config."},{"ts":1372358921000,"body":"I've added some comments after chatting with John.\r\nWe also may need more tests for the different INITIAL_VARIABLES we have.\r\n\r\nGreat work John :heart:"},{"ts":1372643621000,"body":"@spastorino I've added tests that cover most of the functionality that is changed here. Let me know if you see anything that still needs to be tested."}]},{"timestamps":[{"ts":1376373849000,"body":"Have you tried with http://edgeapi.rubyonrails.org?\r\n\r\nIt seems already fixed."},{"ts":1376373894000,"body":"yes in edgeapi it is working but not in api  so can we change all the entry like http://api.rubyonrails.org in our \\actionmailer\\README.rdoc,actionpack/README to  http://edgeapi.rubyonrails.org"},{"ts":1376387002000,"body":"I have updated the new api link in our guides please look https://github.com/rails/rails/pull/11864"},{"ts":1376388653000,"body":"Edge need to check that master version is looking good. You do not need to use links to it."}]},{"timestamps":[{"ts":1357934996000,"body":"Two things:\r\n\r\n1. this pull request is for the wrong branch.\r\n2. This release is not under maintenance anymore"}]},{"timestamps":[{"ts":1369216307000,"body":"> Since ActionPack relies so heavily on the ActiveModel API, this should probably be considered a dependency of the app. Another possibility would be to make it a dependency of ActionController.\r\n\r\nActually, ActionPack defines the API, ActiveModel just implements it. There is no concrete dependency in between them. That said, you patch is perfect, thank you."}]},{"timestamps":[{"ts":1368177004000,"body":"One more fix is coming in this PR. "},{"ts":1368179412000,"body":"+1 Confirm that `else` is useless"},{"ts":1368179622000,"body":"Is `column_name` ever anything other than a string or symbol?"},{"ts":1368191866000,"body":"Yes Not required. Removed now."},{"ts":1368192479000,"body":"@arunagw I think @carlosantoniodasilva said instead of not both :smile:"},{"ts":1368193040000,"body":"Closing this one. doing another one with pluck fixed changes."}]},{"timestamps":[]},{"timestamps":[{"ts":1374494218000,"body":"can you add `[ci skip]` to the commit message?"},{"ts":1374495240000,"body":"Done"},{"ts":1374495263000,"body":"thanks for your contribution: :yellow_heart: "}]},{"timestamps":[{"ts":1367590815000,"body":"@arunagw if you have a `no-assets` option we should remove and leave only the `assets` option since thor will define the `no-assets` automatically"},{"ts":1367590937000,"body":"I just looked and we only have `--assets` option and thor is actually doing `--no-assets`. \r\n\r\nI was confused at start that do we have both options."},{"ts":1367591166000,"body":"Seems we need a rebase"},{"ts":1367591386000,"body":"No idea why. But I changed a commit message and forced pushed this branch. And now it's showing green button to merge :-) "},{"ts":1367672647000,"body":"Could you add a CHANGELOG entry?"},{"ts":1367675409000,"body":"@rafaelfranca Added :-) "},{"ts":1367675455000,"body":"Thank you"}]},{"timestamps":[]},{"timestamps":[{"ts":1359803038000,"body":"@dahakawang I see you've opened another pull request with the requested changes, usually there's no need to do that, you can just amend commits and push force to your branch in github, that it'll take care of updating the pull request properly. Also, when opening a second pull request, it's important to link to the prior one so that people can follow the discussion. Thanks!"},{"ts":1359858387000,"body":"@carlosantoniodasilva hi, thanks for reminding me. BTW, i just wonder how to \"link the current pull request to the prior one\", could you please tell me ? thx ahead ^_^"},{"ts":1359893753000,"body":"@dahakawang From github you just need to add #NNNN, where NNNN is the issue/pull request number (in the url), and it'll link properly."},{"ts":1359897026000,"body":"@carlosantoniodasilva  hey,i'v linked the new pull request with this old post. thanks for you help~~^_^"}]},{"timestamps":[{"ts":1374674877000,"body":"The idea is interesting. Thank you! :sunflower: \r\n\r\nHowever, the problem with your implementation is that we have twice the same code, in `destroy` and `destroy!`.\r\nAvoiding code duplication would make this PR awesome.\r\nWhat you could do is using `destroy!` in the `destroy` method, but rescuing the exception, so true or false is returned.\r\nAlso, don't forget the transaction, as mentioned in the inline comments.\r\n\r\nAlso, you added some documentation.\r\nBut in the examples, you kept the usage of `destroy` even though it should be `destroy!`."},{"ts":1374675698000,"body":"I don't see the point of adding this method.\r\n\r\nIf you pass only one id I prefer to use the `find.destroy!`. Multiples ids don't make sense since it will stop the execution in the first error and you will not know which elements were destroyed.\r\n\r\nCould you please you give us an example where you want to try to destroy multiple elements and is interesting to stop the execution in the middle?\r\n"},{"ts":1374676244000,"body":"@rafaelfranca My original use case is not to destroy multiple records, but to use the shortcut `Model.destroy!(id)`. I just kept the multiple ids implementation because the original `Model.destroy(id)` also [does that](https://github.com/fabiokr/rails/blob/e0bf9c5f2f6315be9271b793a6a5132ffc52327e/activerecord/lib/active_record/relation.rb#L382-L388)."},{"ts":1374676964000,"body":"Ok.\r\n\r\nSo, in my opinion `Model.destroy!(id)` is not wroth to add since we have `Model.find(id).destroy!` and because adding `Model.destroy!` will bring the cognitive complexity of the multiple ids stopping the execution in the middle, or if we don't implement multiple ids, the expectation difference between `Model.destroy` and `Model.destroy!`.\r\n\r\nThank you for the contribution."}]},{"timestamps":[]},{"timestamps":[{"ts":1358000825000,"body":"@jonleighton could you review this?"},{"ts":1358503689000,"body":"Looks like a fine fix to me."}]},{"timestamps":[{"ts":1368192583000,"body":":+1:  I ran into this issue today.  The result is that the schema dumper removes the `enable_extension` lines from `db/schema.rb` every time i run `rake db:migrate`.  Postgres 9.1 most certainly supports extensions:  http://www.postgresql.org/docs/9.1/static/sql-createextension.html\r\n\r\nScreenshot of my db/schema.rb diff:\r\nhttp://note.io/149Jpuj\r\n"},{"ts":1368562793000,"body":"Can confirm this issue here as well. Same story as @BigNerdRanchDan."},{"ts":1368563856000,"body":"@kennyj could you add a CHANGELOG entry?"},{"ts":1368589830000,"body":"@rafaelfranca I've updated it.\r\n\r\nI think we should backport this PR to 4-0-stable too. wdyt?"}]},{"timestamps":[{"ts":1369294747000,"body":"Thanks for your patches but I think this is a way too specific use case that is not worthy the extra complexity added to the code."},{"ts":1369297130000,"body":"After a refactor 2 lines changed. So it has now 2 lines changed and one new template. I don't see where this is adds too much complexity to the code. But I understand that this is not very important."},{"ts":1369310241000,"body":"the refactor does not appear. So I decided to put them here:\r\n\r\nI added one -> (), changed the $2 to $3 and added a if line. Then the new template file.\r\n\r\nwhen /^(add|remove)_(.*)_(?:to|from)_(.*)/\r\n          @migration_action = $1\r\n          @table_name       = $3.pluralize\r\n          @migration_template = 'timestamps.rb' if $2 =~ /^timestamps$/\r\n"}]},{"timestamps":[]},{"timestamps":[{"ts":1356977144000,"body":"thanks and happy new Year... @rafaelfranca and to all"},{"ts":1356977509000,"body":"Thank you. Happy new Year :tada: :fireworks: "}]},{"timestamps":[]},{"timestamps":[{"ts":1358705797000,"body":"A changelog entry would be nice :smile:"}]},{"timestamps":[{"ts":1358935346000,"body":"@rafaelfranca could you review this one?"},{"ts":1358935501000,"body":"The '0.0' seems to be only one possibility. If we specify an other value, it shouldn't be marked as changed either.\r\n\r\n    1.9.3p327 :002 > '1.1'.to_f\r\n      => 1.1"},{"ts":1358935642000,"body":"@dmathieu I'm not sure I understand what you mean. Could you provide a complete example?\r\n\r\n0 is a special case for nullable numeric columns because `nil` values will be stored aas `NULL` and not as `0`."},{"ts":1358938499000,"body":"Sorry for the comments outside from this PR "},{"ts":1359015411000,"body":"Thanks for all the feedback. I updated the PR with the following changes:\r\n\r\n* test is now against a float column\r\n* code works with `0.0` and `0.00`\r\n* rebased against master\r\n\r\n@carlosantoniodasilva could you take a look?"},{"ts":1359016861000,"body":"with the following test fails:\r\n\r\n```\r\ndef test_integer_zero_to_string_zero_dot_zero_not_marked_as_changed_00\r\n      pirate = Pirate.new\r\n      pirate.parrot_id = 0\r\n      pirate.catchphrase = 'arrr'\r\n      assert pirate.save!\r\n\r\n      assert !pirate.changed?\r\n\r\n      pirate.parrot_id = '0.0001'\r\n      assert pirate.changed?\r\n  end\r\n```"},{"ts":1359017571000,"body":"@acapilleri I think your test-case is not accurate. \r\n\r\nWhen you assign `0.0001` to a integer column it will be converted to `0`:\r\n\r\n```\r\n1.9.3-p194 :001 > '0.0001'.to_i\r\n => 0 \r\n```\r\n\r\nSo the `parrot_id` did not actually change. "},{"ts":1359017607000,"body":"with something like \r\n```\r\ndef non_zero?(value)\r\n  value !~ /^0+(.0+)?$/\r\nend\r\n```\r\nnot fails"},{"ts":1359018008000,"body":"@acapilleri I see your point but I think we need a different test-case. I'll revisit when I got a couple of minutes."},{"ts":1359019141000,"body":"the strange behaviour is when you try to test numericality:\r\n\r\n```\r\ndef test_integer_zero_to_string_zero_dot_zero_not_marked_as_changed_00\r\n      Pirate.validates :parrot_id, :numericality => { :only_integer => true }\r\n      pirate = Pirate.new\r\n      pirate.parrot_id = 0\r\n      pirate.catchphrase = 'arrr'\r\n      assert pirate.save!\r\n\r\n      assert !pirate.changed?\r\n\r\n      pirate.parrot_id = '0.0001'\r\n\r\n      assert !pirate.valid?\r\n      assert pirate.changed? #fails here\r\n  end\r\n\r\n```\r\n```parrot```becomes invalid but it not changed"},{"ts":1359053807000,"body":"Yes. I think we have to take in consideration the @acapilleri case"},{"ts":1359130738000,"body":"@acapilleri I adjusted the Regexp as you described but I'm not sure it's actually solving the problem:\r\n\r\n```ruby\r\n  def test_integer_zero_to_string_float_marked_as_changed\r\n    Pirate.validates :parrot_id, :numericality => { :only_integer => true }\r\n    pirate = Pirate.new\r\n    pirate.catchphrase = \"Yarrrr, me hearties\"\r\n    pirate.parrot_id = 0\r\n    pirate.save!\r\n\r\n    pirate.parrot_id = '0.00001'\r\n    p pirate.valid? # => false\r\n    p pirate.parrot_id # => 0\r\n    p pirate.parrot_id_before_type_cast # => \"0.00001\"\r\n    p pirate.changed? # => true\r\n    p pirate.changes # => {\"parrot_id\"=>[0, 0]}\r\n  end\r\n```\r\n\r\nThe `Numericality` validator uses the value before the type cast. That's why it's marked as \"invalid\". On the other hand, the changes hash uses the value after the type cast and it does not really make sense.\r\n\r\n@rafaelfranca This problem existed before my patch so I don't think we should mix them together. What is your opinion?"},{"ts":1359137202000,"body":"> On the other hand, the changes hash uses the value after the type cast and it does not really make sense.\r\n\r\nYes but currently I don't see another simple solution, anyway it's better that we know that the object changes and it is invalid.\r\n\r\nAlso I think that you could simply use:\r\n\r\n```\r\ndef changes_from_zero_to_string?(old, value)\r\n  old == 0 && value.is_a?(String) && value.present? && value.to_i != 0 #or !value.to_i.zero?\r\nend\r\n```"},{"ts":1359223307000,"body":"The problem is, it's not really a solution. I think the adjusted Regexp makes sense but it won't solve the validation / type case / dirty problem.\r\n\r\n```ruby\r\n  def test_validation_is_strange_anyway\r\n    Pirate.validates :parrot_id, :numericality => { :only_integer => true }\r\n    pirate = Pirate.new\r\n    pirate.catchphrase = \"Yarrrr, me hearties\"\r\n    pirate.parrot_id = '0'\r\n    pirate.save\r\n\r\n    pirate.parrot_id = '0.0000'\r\n    p pirate.parrot_id # => 0\r\n    p pirate.parrot_id_before_type_cast # => \"0.0000\"\r\n    p pirate.valid? # => false\r\n    p pirate.changes # => {}\r\n  end\r\n```\r\n\r\nthe integer validation will always fail if you assign such values."},{"ts":1362489179000,"body":"@carlosantoniodasilva rebased and `assert_empty` used."},{"ts":1362489327000,"body":"Thanks!"}]},{"timestamps":[{"ts":1365422048000,"body":"Sooo... @carlosantoniodasilva :)"},{"ts":1365422763000,"body":"You don't even need to use `sort!`. Using `sort` would be enough here.\r\nThis applies to the `helpers` variable just below too."},{"ts":1365423806000,"body":"@dmathieu at least we avoid creating a few extra objects :)."},{"ts":1365423877000,"body":"@carlosantoniodasilva: I'm not saying this is bad. I'm saying we create even less extra objects :)"},{"ts":1365423972000,"body":"@dmathieu  `sort!` is faster than `sort`, and avoid creating a shallow copy of the original object"}]},{"timestamps":[{"ts":1357630693000,"body":"cc / @pixeltrix "},{"ts":1357635244000,"body":"@pixeltrix done, thanks for your detailed review"}]},{"timestamps":[{"ts":1363258532000,"body":"@carlosantoniodasilva @pixeltrix let me know what you think."},{"ts":1363259765000,"body":"@pixeltrix the fact that I used both notations is clearly a sign that it is confusing :smile: it is the other way around though. Using `request.headers` does not work. You need to use `request.env` as the `headers` method always instantiated a new `Http::Headers` class the changes will not persist: https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/http/request.rb#L151-L153"},{"ts":1363333491000,"body":"@pixeltrix I updated the examples to be more useful. The access is still through `@request.env`. The problem is that `Http::Headers` does not reference the hash passed in but has it's own hash."}]},{"timestamps":[{"ts":1375172618000,"body":"Did the build break? Running the tests locally seemed fine - I wanted to leave the test cases in place."},{"ts":1375172654000,"body":"Failing for isolated one, I think we need some require in that test case?"},{"ts":1375172881000,"body":"```ruby\r\n  1) Failure:\r\nStringInflectionsTest#test_pluralize [test/core_ext/string_ext_test.rb:58]:\r\nExpected: \"kine\"\r\n  Actual: \"cows\"\r\n\r\n\r\n  2) Failure:\r\nStringInflectionsTest#test_singularize [test/core_ext/string_ext_test.rb:70]:\r\nExpected: \"cow\"\r\n  Actual: \"kine\"\r\n```"},{"ts":1375182354000,"body":"It turns out that the irregular inflection test were mutating the original inflections instance causing it to leak into other tests. Build should be fixed by 2d53ee0f42e917e94d6440ec5370c049b0864814."},{"ts":1375202855000,"body":":cool:"}]},{"timestamps":[{"ts":1365271366000,"body":"Seems fine to the new hash but not for the arguments."},{"ts":1365271791000,"body":"Done. Sorry for the mixup"},{"ts":1365272050000,"body":"No problem. Thanks"}]},{"timestamps":[{"ts":1376463539000,"body":"Can you rebase your change, so that it only includes the relevant commit and not the merge commit?"},{"ts":1376464429000,"body":"@senny done"},{"ts":1376466555000,"body":"thank you for rebasing, can you also elaborate why this is necessary? What actions did you take? What error did you get?"},{"ts":1376468611000,"body":"sure...\r\n\r\ntry running `rake guides:generate` and this error with strong parameters will be raised.\r\n\r\n```\r\nrake guides:generate\r\n/usr/local/bin/ruby rails_guides.rb\r\n/home/deployer/host/apps/rails/actionpack/lib/action_controller/metal/strong_parameters.rb:382:in `<class:Parameters>': cannot load such file -- rack/test (LoadError)\r\n\tfrom /home/deployer/host/apps/rails/actionpack/lib/action_controller/metal/strong_parameters.rb:99:in `<module:ActionController>'\r\n\tfrom /home/deployer/host/apps/rails/actionpack/lib/action_controller/metal/strong_parameters.rb:7:in `<top (required)>'\r\n\tfrom /usr/local/lib/ruby/site_ruby/2.0.0/rubygems/core_ext/kernel_require.rb:106:in `require'\r\n\tfrom /usr/local/lib/ruby/site_ruby/2.0.0/rubygems/core_ext/kernel_require.rb:106:in `require'\r\n\tfrom /home/deployer/host/apps/rails/actionpack/lib/action_controller.rb:5:in `<top (required)>'\r\n\tfrom /usr/local/lib/ruby/site_ruby/2.0.0/rubygems/core_ext/kernel_require.rb:45:in `require'\r\n\tfrom /usr/local/lib/ruby/site_ruby/2.0.0/rubygems/core_ext/kernel_require.rb:45:in `require'\r\n\tfrom /home/deployer/host/apps/rails/guides/rails_guides/generator.rb:57:in `<top (required)>'\r\n\tfrom /usr/local/lib/ruby/site_ruby/2.0.0/rubygems/core_ext/kernel_require.rb:45:in `require'\r\n\tfrom /usr/local/lib/ruby/site_ruby/2.0.0/rubygems/core_ext/kernel_require.rb:45:in `require'\r\n\tfrom rails_guides.rb:43:in `<main>'\r\nrake aborted!\r\nCommand failed with status (1): [/usr/local/bin/ruby rails_guides.rb...]\r\n/home/deployer/host/apps/rails/guides/Rakefile:11:in `block (3 levels) in <top (required)>'\r\nTasks: TOP => guides:generate => guides:generate:html\r\n```\r\n\r\nthis error indicates an error in this line\r\nhttps://github.com/rails/rails/blob/6a20cf4f0532b3e0e397aead76eff28f87135e2d/actionpack/lib/action_controller/metal/strong_parameters.rb#L382\r\n\r\nwhich is basically complaining that 'rack/test' hasn't been required in this project.\r\n\r\n\r\na possibility should be solving the error where it is invoked,\r\nhttps://github.com/rails/rails/blob/6a20cf4f0532b3e0e397aead76eff28f87135e2d/actionpack/lib/action_controller/metal/strong_parameters.rb#L6\r\nbut I believe suggesting that would not be justifiable since all rails tests do pass.\r\n\r\n\r\nand since it's inside action_controller,\r\nI believe requiring this file should be done inside the guides scope, before action_controller is required\r\nhttps://github.com/rails/rails/blob/6a20cf4f0532b3e0e397aead76eff28f87135e2d/guides/rails_guides/generator.rb#L57\r\n\r\n\r\n\r\n"},{"ts":1376468970000,"body":"I was asking because guide generation works fine for me. Did you use?\r\n\r\n```\r\nbundle exec rake guides:generate\r\n```"},{"ts":1376470007000,"body":"I'm currently having problems connecting to rubygems.org from my location so `bundle` lingers on.\r\nI don't see any of the guides task by running `rake -T`  in the root of the project,\r\nand I don't see those tasks being required by `/Rakefile` specially as they are declared in `/guides/Rakefile` but yes, if you say it works for you then it was probably just me. sorry again, not my intention to waste anybody's time."},{"ts":1376470373000,"body":"@yakko no worries, please report back when you can try with `bundle exec`. It's important that you execute the rails stuff inside the right environment. To list the tasks also try `bundle exec rake -T`."},{"ts":1376586031000,"body":"@senny hey, so I installed all gems and I still reached the same results and perspectives, including my other PR regarding `/guides/Gemfile` because `rake guides:generate` needs to be run from inside `/guides`\r\n\r\nI see you didn't go through this problem yourself, it could be because I only have Rails 4 installed in this environment.\r\n\r\nAgain, `strong_parameters.rb` uses classes inside `rack/test` but the gem is required nowhere.\r\nRequiring `rack-test` inside the guides is a non-intrusive solution to Rails, because `rails` itself passes all tests."},{"ts":1376589791000,"body":"@yakko I still can't follow your problem. If I do:\r\n\r\n```\r\ngit clone git@github.com:rails/rails.git\r\ncd rails\r\ngem install bundler && bundle\r\ncd guides\r\nbundle exec rake guides:generate\r\n```\r\n\r\nIt works as expected, a missing require should not be environment specific."},{"ts":1376591793000,"body":"then it was probably just me.\r\n@senny  thank you for your time."},{"ts":1376593301000,"body":"@yakko let me know if it's still a problem. Thank you for helping us to improve Rails."}]},{"timestamps":[{"ts":1362304624000,"body":"Pretend i've never used this feature before ( i haven't), why would I ever use `ActiveSupport::Notifications.instrumenter.instrument(\"pull\") ` over `ActiveSupport::Notifications.instrument(\"pull\")` ? Do you have any clues why the payload wasn't passed in from the original version?\r\n"},{"ts":1362341072000,"body":"The main reason is so that you can cache the instrumenter, [ActiveRecord does it](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L93).\r\n\r\nMy best guess as to why it didn't already yield is that ActiveRecord didn't need to add anything to the payload, and it is the primary place in Rails that caches the instrumenter."},{"ts":1362528266000,"body":"Looks good :+1: from me and @jeremy"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1360354090000,"body":"since d549df7 broke 2.3 series, can't this be backported there too?"},{"ts":1360355717000,"body":"@dgm it looks like the issue was fixed by converting the hex-encoded entity to a decimal-encoded one https://github.com/rails/rails/commits/2-3-stable https://github.com/rails/rails/commit/88331c575bf5a7ef2451e008881641322ee562b4"},{"ts":1360355845000,"body":"#9144"}]},{"timestamps":[{"ts":1372744390000,"body":"@senny done."},{"ts":1372744820000,"body":"thanks. :yellow_heart: "}]},{"timestamps":[{"ts":1363684017000,"body":"How about adding a test for this ?"},{"ts":1363697441000,"body":"Please squash your commits."},{"ts":1363706431000,"body":"@carlosantoniodasilva will squash to make it a single commit."}]},{"timestamps":[]},{"timestamps":[{"ts":1369152090000,"body":"/cc @rafaelfranca "},{"ts":1369183480000,"body":"Active Record is definitely the place where I don't want to change the hash syntax only for cosmetic changes. There are a lot of pull requests open for it. Also there are a lof of bugs that will be harder to fix if we put this in.\r\n\r\n@divineforest Sorry and thank you for the pull request."}]},{"timestamps":[{"ts":1363181338000,"body":"@pixeltrix @jeremy let me know what you think."}]},{"timestamps":[{"ts":1359122233000,"body":"Sorry but 2.3.x is not under maintenance. "}]},{"timestamps":[{"ts":1357346866000,"body":"I was hoping @nobu would change it back, but we should fix in Rails for now.  Thanks!"}]},{"timestamps":[{"ts":1369089028000,"body":"The commit that broke this was f08f8750a512f741acb004d0cebe210c5f949f28"}]},{"timestamps":[{"ts":1361720792000,"body":"@rafaelfranca @carlosantoniodasilva could you take a look?"},{"ts":1361721036000,"body":"@rafaelfranca blank line is removed..."},{"ts":1361721064000,"body":":heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[{"ts":1375536682000,"body":"/cc @fxn on the docrails bit"},{"ts":1375536730000,"body":"Can this get a `[ci skip]` please?"},{"ts":1375537965000,"body":":+1: about the doc edit."},{"ts":1375573135000,"body":"@iainbeeston added to docrails team."}]},{"timestamps":[{"ts":1371901945000,"body":"@rafaelfranca @carlosantoniodasilva what do you think?"},{"ts":1372058656000,"body":"This will have a subtle behavioural change if an explicit `nil` is passed. \r\n\r\nBefore, it would change an explicit `nil` to `:invalid`. After, it will keep explicit `nil` as `nil`, and only use `:invalid` if the second argument `message` (and by implication, `options`) was not passed at all.\r\n\r\nNot sure if it matters."},{"ts":1372058814000,"body":"@egilburg good observation, let's wait for feedback and see if it's a viable solution."},{"ts":1372059019000,"body":"Sure. But if needed, you can easily avoid the problem by bringing back the `message ||= :invalid` line in the normalizer, but keeping the `message = :invalid` in the signatures for clarity reasons only."},{"ts":1372059308000,"body":"@egilburg yea that's what I thought. I wanted to get some feedback first on the general idea behind the PR before I take time to update."},{"ts":1372087602000,"body":"@josevalim can you take a look?"},{"ts":1372299780000,"body":"Why should a forced `nil` default to `:invalid`?"},{"ts":1372310195000,"body":"@fny this behavior is not intending to change behavior but to improve the docs. The documentation for `added?` already explains why it works the way it does:\r\n\r\n> +message+ is treated the same as for +add+."},{"ts":1372335381000,"body":"I don't feel like people should be relying on the case that sending `nil` will automagically work as `:invalid`. Just send `:invalid` and make it explicit then."}]},{"timestamps":[]},{"timestamps":[{"ts":1368102969000,"body":"I think this might be intentional - if you look at the original commit (21c75e5) then it's testing whether an exception is raised when an association doesn't exist. Changing it to `:author_address` makes it match an existing association.\r\n\r\n@NZKoz can you confirm this?"},{"ts":1371292350000,"body":"how to continue on this one?"},{"ts":1371301066000,"body":"A comment with the original commit will prevent this to be removed in the future. Something like:\r\n\r\n```ruby\r\n# Regression test to 21c75e5\r\n```\r\n\r\nAlso a better test description too:\r\n\r\n\r\n```ruby\r\ndef test_nested_loading_do_not_raise_exception_when_association_does_not_exist\r\n```\r\n\r\n@vipulnsward could you change it?\r\n"},{"ts":1371301241000,"body":"Changing"},{"ts":1371301831000,"body":"updated name and added comment."}]},{"timestamps":[{"ts":1372264399000,"body":"Can you add a changelog entry as well? Thanks."}]},{"timestamps":[{"ts":1359490430000,"body":"[3.0 stable does not receive bug fixes any more](https://groups.google.com/forum/?fromgroups=#!topic/rubyonrails-security/G4TTUDDYbNA), so I cannot accept this, sorry."}]},{"timestamps":[{"ts":1371893840000,"body":"you need to squash these commits into one."},{"ts":1371895228000,"body":"looks good, can you please squash the commits as @arunagw mentioned? You can force push to the same PR afterwards to update it."},{"ts":1371896816000,"body":"Squashed, and write the description into the commit."},{"ts":1371897131000,"body":"great! thanks :yellow_heart: "},{"ts":1371918537000,"body":"Hello @senny, I will revert this commit. :) Those two files are required by active_model.rb:\r\n\r\nhttps://github.com/rails/rails/blob/master/activemodel/lib/active_model.rb#L25\r\n\r\nWhich then loads them:\r\n\r\nhttps://github.com/rails/rails/blob/master/activesupport/lib/active_support/rails.rb\r\n\r\nIt is common to require common dependencies on the root files to avoid boilerplate on each file."},{"ts":1371918784000,"body":"Sorry for the mistake.\r\n\r\n`require 'active_model'` seems enough to use the any of its internal components as they are all autoloaded. "},{"ts":1371918857000,"body":"@josevalim thanks for stepping in :heart:, didn't see those dependencies :sweat: "},{"ts":1371919021000,"body":"That's ok! Thanks for contributing and merging @yangchenyun and @senny! :heart:"}]},{"timestamps":[{"ts":1359149401000,"body":"Thanks, but doesn't It look like too much information? And for what would we use that? "},{"ts":1359149569000,"body":"Yes. I think is too much information. Maybe is worth to add this information to the [Initialization Process guide](http://edgeguides.rubyonrails.org/initialization.html)"},{"ts":1359177251000,"body":"Thanks for the heads up @rafaelfranca, yeah this does seem better suited for the guide."},{"ts":1359199121000,"body":"@bsodmike no problem. Do you want to work on the guide?"},{"ts":1359199254000,"body":"Sure, will update that shortly.  Thanks!\r\nOn 26 Jan 2013 16:49, \"Rafael Mendonça França\" <notifications@github.com>\r\nwrote:\r\n\r\n> @bsodmike <https://github.com/bsodmike> no problem. Do you want to work\r\n> on the guide?\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/9082#issuecomment-12734075>.\r\n>\r\n>"}]},{"timestamps":[{"ts":1365567855000,"body":"Cool - thanks @prathamesh-sonpatki !\r\n\r\nCould you update the test case as well? https://github.com/rails/rails/blob/master/railties/test/app_rails_loader_test.rb"},{"ts":1365568099000,"body":"@jeremy Yes. I think it also needs a CHANGELOG entry?"},{"ts":1365568892000,"body":"Probably, it's a 'bugfix' from beta1."},{"ts":1365573814000,"body":"@jeremy  Updates tests"},{"ts":1365579362000,"body":"If I am not mistaken the purpose of the chdir calls is to exec with the application root directory as cwd, which existing code may rely on."},{"ts":1365580257000,"body":"@fxn You are right. But those chdir calls are required because `find_executable_in_parent_path` doesn't return the full path of executable. It just returns `script/rails` or `bin/rails`.\r\n\r\nBut here it returns full path to executable so we can directly do `exec RUBY, exe, *ARGV` instead of again checking for `cwd == Dir.pwd` and recursing.\r\n\r\nInfact, we can drop cwd as it will not be used now."},{"ts":1365582480000,"body":"Hmmm, not sure I follow, it returns the relative path because you want to execute the script in a directory where the relative path works. If the script is found, then you are in the application root directory, and so you just `exec`.\r\n\r\nWhat is the problem this refactor is solving?"},{"ts":1365586000000,"body":"I think I know what you are trying to solve, the current code is a bit convoluted, but removing all `chdir` calls is a red flag.\r\n\r\nI believe you could find the executable the way you do, and then `chdir` to the parent directory of the executable to `exec`. It is OK if that `chdir` raises for permissions or whatever. It is important to change the cwd only if the executable is found."},{"ts":1365586605000,"body":"@fxn , Once i found `exe` my way from parent directory, then there is no need to `chdir`, as `exe` will be like `/home/prathamesh/path-to-rails-app/bin/rails`\r\n\r\nSo, we can directly do `exec` with it.\r\n\r\nIn case, if we are already in app root, exe will be `bin/rails` which can be `exec`'ed also.\r\n\r\nWill removing `chdir` cause some other problems?\r\n"},{"ts":1365587095000,"body":"That's my point, the `rails` command has `chdir`ed always, and while I don't think we have promised anywhere that the CWD of a Rails application is `Rails.root`, I believe it would break in practice existing code.\r\n\r\nThere is no need to change that assumption, so I believe we should just preserve it.\r\n"},{"ts":1365587790000,"body":"Yes. CWD is not required to be `Rails.root`. That's why we are finding `exe` in parent directories. My point is, i have changed the return value of `find_executable_in_parent_path` to return absolute path of `rails executable`. So it doesn't matter whether you are in `app/` or `app/models` or `test/`\r\nSo i think there is no need to `chdir`, as we have absolute path to `rails exe` already!\r\nSorry for the confusion."},{"ts":1365588116000,"body":"Yes, yes, it is clear that `ruby /absolute/path/to/bin/rails` works without `chdir`.\r\n\r\nThe problem is that *user code* has a different current working directory. For example, if a user is doing\r\n\r\n```ruby\r\nYAML.load_file('db/database.yml')\r\n```\r\n\r\nthat is not going to work.\r\n\r\nSee what I mean?\r\n"},{"ts":1365588817000,"body":"@fxn Oh! I got now what you mean by `rails command has chdired always`..\r\nThis means it was internally coming to app root if called from any other directory than root.\r\nI am updating the code. Will push it in some time.\r\nThanks :smile: "},{"ts":1365590685000,"body":"@fxn please check again. I have updated the code to `chdir` till we are in application root"},{"ts":1365591552000,"body":"Hmm, comparing both implementations I lean on the current one using a recursive `chdir`, but it could be simplified, no need looking for parent paths. Just go up and look for the executable there. Also could use pathname for `parent` and `root?`."},{"ts":1365592390000,"body":"Let me write today the alternative I have in mind so we can compare."},{"ts":1365592406000,"body":"@fxn  How about this?\r\n\r\n``` ruby\r\npathname = Pathname.new(Dir.pwd)\r\n\r\n until exe = find_executable\r\n   return if pathname.root?\r\n   Dir.chdir(\"..\")\r\n   pathname = pathname.parent\r\n end\r\n```\r\n\r\nThen we don't need `find_executable_in_parent_path`"},{"ts":1365592573000,"body":"Exactly! Something like that is what I have in mind. The only gotcha is that we cannot change the current working directory if we return (if you want to generate an application, it has to be generated in the directory you are running the script in)."},{"ts":1365595623000,"body":"Yes. I faced same problem when testing. Will try to update it so that it handles this condition also."},{"ts":1365607235000,"body":"Awesome, this is the implementation I had in mind. I believe we do not need the CHANGELOG entry now? I think there is no public behavior change now.\r\n\r\nIf you remove the entry, and nobody has any other comment, we'd merge."},{"ts":1365607481000,"body":"@fxn Removed CHANGELOG entry."},{"ts":1365607608000,"body":"@prathamesh-sonpatki great, thanks for working on this!"},{"ts":1365607715000,"body":"@fxn Thanks for all help :)"},{"ts":1365609773000,"body":"@fxn I forgot to alter tests for `find_executable_in_parent_path`. Should i delete those two tests? As that method is deleted?"},{"ts":1365622790000,"body":"Yes please. Tests are testing stuff, should be updated rather than deleted."},{"ts":1365679249000,"body":"Fixed in 85de18307127d740d32c42093d39b859a1335eb3."},{"ts":1365682513000,"body":"@fxn The test breaks for me on Mac OS X.  `Dir.pwd` returns from a '/private' folder context while `@tmp` var points to path without private"},{"ts":1365684467000,"body":"@vipulnsward interesting, was not aware of that gotcha. Thanks for the ping I'll investigate."},{"ts":1365685485000,"body":"Founded the culprit:\r\n\r\n    lrwxr-xr-x@  1 root  wheel       11 Jul 27  2012 var -> private/var\r\n\r\nSo the test is non-portable in a more generic way, it depends on symlinks. I'll fix it, thanks!"},{"ts":1365685559000,"body":"@vipulnsward :+1: "}]},{"timestamps":[{"ts":1372697990000,"body":"@carlosantoniodasilva please merge this branch as I have closed the earlier branch..."},{"ts":1372708025000,"body":"Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1368630854000,"body":"I've updated this.\r\nI removed a CHANGELOG entry."}]},{"timestamps":[{"ts":1369316491000,"body":":+1: "},{"ts":1369317616000,"body":"This I suppose happens due the way of  `select` and `reject` work internally in ruby, one does an `initialize` other a `dup`. Does this happen for any other methods too?"},{"ts":1369319154000,"body":"Can't think of many more cases where this would happen. I've manually checked `delete_if` and `keep_if` and it seems to behave as I would expect. Any other cases you could think of?"},{"ts":1369455463000,"body":"Same solution as #10748 but with more tests :+1: "},{"ts":1369470429000,"body":"I wonder how 3 different people could find this issue, 1 report it, 2 fix it, and all within about 3 days. When this seems to have been here for so long already.\r\n\r\nHeh!"},{"ts":1371241736000,"body":"This looks good to me. @josevalim, can you have another look (and merge it?)"}]},{"timestamps":[{"ts":1374761352000,"body":"I think this can be merged and description can be enhanced later :smile: "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1357927379000,"body":"Not sure if we want to make cookies behaves like a hash.\r\n\r\n@NZKoz @spastorino I remember you guys discussed something like this. could you review?"},{"ts":1357965559000,"body":"@NZKoz @spastorino, I'll share my thoughts about why I made this addition in the meantime.\r\n\r\nWhen something is `Enumerable`, I expect it to behave in a certain way. `cookies` in Rails are always treated like hashes (thought a little different). I understand you wouldn't necessarily want them to be *exactly* like hashes (because they aren't), but when you are retrieving single keys all of the time (like a hash), I would expect to be able to fetch them (like a hash) since the feeling of `cookies` is similar to `Hash` in this particular way.\r\n\r\nI'm not looking to make this a full-blown `Hash`, but this is potentially a useful little method for those looking to do something a little more dynamic or complicated with the `cookies`.\r\n\r\nJust my two cents.\r\n\r\n"},{"ts":1359329813000,"body":"Looks like @tenderlove just added this in 789df3b. I could be mistaken, but should this be closed @rafaelfranca?"},{"ts":1359330838000,"body":"@mattdbridges probably @tenderlove didn't know about this PR when he was adding it.\r\n\r\nThanks for your contribution!!!"}]},{"timestamps":[{"ts":1375538455000,"body":"This looks great! :+1: for me, but I'd like someone else's :+1: before :shipit: "},{"ts":1375540214000,"body":":+1: looks good. "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1361219694000,"body":"I don't see the create_after_initialize tests anywhere."},{"ts":1361246880000,"body":"@steveklabnik Thought\r\n\r\n- test_create_after_initialize_without_block -> [test_create](https://github.com/rails/rails/blob/master/activerecord/test/cases/persistence_test.rb#L167)\r\n- test_create_after_initialize_with_block -> [test_create_through_factory_with_block](https://github.com/rails/rails/blob/master/activerecord/test/cases/persistence_test.rb#L225)\r\n\r\nwas the same :O I guess it's not...?"},{"ts":1361247619000,"body":"The without block one is asserting on `cb.frickinawesome`, which is set by an after_initialize hook, right? https://github.com/Takehiro-Adachi/rails/blob/04d406865b636bda121a8bae65705309d99e45eb/activerecord/test/models/bulb.rb#L34-L38"},{"ts":1361248551000,"body":"@steveklabnik \r\noooo yea, right thx for pointing it out :D Will restore that deletions.\r\nDo u think this `test_create_after_initialize` tests belong to base_test.rb since the initialize feature is the basic feature :O ?\r\nI really couldn't understand what the base_test.rb is for, would help if u give me some hints."},{"ts":1361277583000,"body":"updated commit :)"},{"ts":1361292748000,"body":"Looks good, thank you.\r\n\r\n>  I really couldn't understand what the base_test.rb is for, would help if u give me some hints.\r\n\r\nHonestly, I'm not sure how the tests are arranged."},{"ts":1361299480000,"body":"> Honestly, I'm not sure how the tests are arranged.\r\n\r\noh ok! guess i'll have to figure them out myself :) thx anyways!"}]},{"timestamps":[]},{"timestamps":[{"ts":1362847134000,"body":"I'd rather not have Rails depend on another gem - `launchy`, for that."},{"ts":1362850883000,"body":"We discussed this feature in #9396, and came to the conclusion that it's just not useful enough. Thanks!"}]},{"timestamps":[{"ts":1358606136000,"body":"Sorry, we don't accept cosmetic changes like this into Rails.\r\n\r\nAlso, `$:.push` is really idiomatic at this point."},{"ts":1358623156000,"body":"No Problem. I wasn't aware of this policy"}]},{"timestamps":[{"ts":1372789923000,"body":":heart:"}]},{"timestamps":[{"ts":1368111828000,"body":"cc @jeremy "}]},{"timestamps":[{"ts":1367447354000,"body":"Thank you so much. Your patch is very good.\r\n\r\nCongratulations for the nice documentation.\r\n\r\nI did some stylistic comments."},{"ts":1367447781000,"body":"Thanks for the feedback!\r\n\r\nMy bad on the trailing spaces, I need to get my linter to check for that...\r\n\r\nI'll get the tweaks in and squashed shortly."},{"ts":1367449702000,"body":"Ok, that should include everything mentioned above.  Let me know if you see anything else."},{"ts":1367450558000,"body":"Thank you"}]},{"timestamps":[{"ts":1368721248000,"body":"I'm not sure. @mikel?"},{"ts":1368721860000,"body":"jhg"},{"ts":1368721886000,"body":"keep in contact\r\n"},{"ts":1368724643000,"body":"I think that this issue is related to https://github.com/mikel/mail/commit/832cfccd9685192b0597445a122f2ab7efccb51f .\r\nIn mail 2.5.3, if we pass :transfer_encoding as 'base64', it's ignored. so I believe mail 2.5.4 behavior is correct and rails's testcase depended on the wrong behavior of mail 2.5.3."},{"ts":1368753137000,"body":"I updated this PR.\r\n\r\nsorry, I removed my comment by mistake.\r\n"},{"ts":1369073910000,"body":"@rafaelfranca  This had a changelog."},{"ts":1369074387000,"body":"I know. I removed it after the merge. I want to merge this as soon as possible this is why I didn't asked @kennyj to remove it"},{"ts":1369074522000,"body":":+1: "},{"ts":1369095660000,"body":"Sorry, I'm too late ;)\r\nI added a changelog, because I thought `mail`'s behavior (same to ActionMailer's behavior) is changed by https://github.com/mikel/mail/commit/832cfccd9685192b0597445a122f2ab7efccb51f.\r\n\r\nBut my commit was testcase fix only, I agree with you."},{"ts":1369096237000,"body":"No problem. Thank you so much :heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1372629325000,"body":"Can you squash the last 2 commits at least? The doc commit is fine to be on its own. Thanks."},{"ts":1372635755000,"body":"@carlosantoniodasilva commits squashed.  BTW, does `git` provide shortcuts to squash commits? Currently, I just soft resetting and redo the commits manually."},{"ts":1372637926000,"body":"@yangchenyun  Have a look at https://www.kernel.org/pub/software/scm/git/docs/git-rebase.html"},{"ts":1372638339000,"body":"@yangchenyun exactly what @zhouguangming linked: you can use `rebase -i` to manipulate the history and squash/edit/remove commits. Thanks!"},{"ts":1372643942000,"body":"@zhouguangming Thanks :+1:  "}]},{"timestamps":[{"ts":1371742146000,"body":"@mjtko thanks! Could you squash the commits, add a changelog entry and try to make a commit message more like described here: http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#commit-your-changes ?"},{"ts":1371754893000,"body":"Sure, done.\r\n\r\nLet me know if you would like me to tweak it any further, or if you'd like a backport PR or two to any other branches."},{"ts":1371792629000,"body":"@mjtko thanks, that's perfect, I will push backport to 4-0-stable"},{"ts":1371793538000,"body":"@mjtko it doesn't apply cleanly, so please send a PR for 4-0-stable"},{"ts":1371799901000,"body":"PR against 4-0-stable is available as #11038."}]},{"timestamps":[{"ts":1360661831000,"body":"I would disagree. Often times you want this 'null pattern' behaviour when generating parameters dynamically and this change would force you to write unnecessary conditional statements."},{"ts":1361234706000,"body":"@tadast Could you show some code that's affected, before & after? Note that we're checking that any arguments are passed, not the argument isn't null or an empty string.\r\n\r\n```ruby\r\n>> [''].blank?\r\n=> false\r\n```"},{"ts":1361260353000,"body":"Right, I got confused by splat operator again :blush:  Sorry for the FUD @wangjohn, @jeremy "},{"ts":1361289270000,"body":"Seems good. Could you add a changelog entry?"},{"ts":1361289755000,"body":"@tadast :+1:"},{"ts":1361290622000,"body":"Changelog entry has been added."},{"ts":1361294079000,"body":"Sorry, I don't want to cause any more trouble, but I'm thinking about it again... What if someone has a method like this:\r\n\r\n```ruby\r\ndef fancy_filter(options = {})\r\n  related = []\r\n  query = {}\r\n  if options[:author_name]\r\n    query[:author] = { name: options[:author_name] }\r\n    related << :author\r\n  end\r\n  where(query).references(related)\r\nend\r\n```\r\n\r\nwould it not break things? In cases like this people would have to make sure to omit the `#references` call unless options[:author_name] is present."},{"ts":1361294349000,"body":"So where is handled separately. I only changed the functionality where blank arguments make strictly no sense. Where still returns self."},{"ts":1361294668000,"body":"@wangjohn the @tadast's problem still occurs with `references`"},{"ts":1361296234000,"body":"Again:\r\n\r\n```ruby\r\n>> [[]].blank?\r\n=> false\r\n```\r\n\r\nIt'll only break if you do `.references(*related)`, which would splat an empty array."},{"ts":1361296399000,"body":":speak_no_evil: "},{"ts":1361352727000,"body":"I'm confused too; sorry!\r\n\r\nGiven the discussion above, the `CHANGELOG.md` description is misleading, I think.  It reads: \"are the arguments blank\", not \"are there arguments\".  I'm confused by the examples:\r\n\r\n```\r\nPost.limit()     # => raises error\t\r\nPost.include([]) # => raises error\r\n```\r\n\r\nThe `limit` method has not been changed to call `check_empty_arguments`, so how will `.limit()` raise?\r\nAs mentioned in the discussion above, with `.include([])`, `args.blank? == false`, so how will it raise?\r\n\r\nAre there tests for this I can read?"},{"ts":1361373209000,"body":"Sorry, the CHANGELOG is misleading and there is an error in it. I'm sending in a PR to fix this and add some more documentation and tests https://github.com/rails/rails/pull/9332. "}]},{"timestamps":[{"ts":1361765513000,"body":"This can't be merged anymore. If it's going to be merged, it'll need squashed, and a CHANGELOG entry.\r\n\r\n@dhh what do you think of this?"},{"ts":1361781364000,"body":"@steveklabnik Rebased and squashed :smile:\r\n\r\nAm I doing the changelog right?"},{"ts":1361796182000,"body":"It's fine. I might not have put a linebreak between your two sentences, but it's not a particularly big deal."}]},{"timestamps":[{"ts":1366961134000,"body":"Nice, the guide already explains it that way. Mind putting `DateTime` in fixed-width font please?"},{"ts":1366965863000,"body":"Sure thing @fxn "},{"ts":1366966142000,"body":"Awesome appreciate it."},{"ts":1366970053000,"body":"Thanks :)"}]},{"timestamps":[{"ts":1377354274000,"body":"@wangjohn you should be using `assert_deprecated` like here https://github.com/rails/rails/blob/5a9988/actionpack/test/controller/base_test.rb#L101-103"},{"ts":1377368888000,"body":"@spastorino Ah thanks, I didn't realize that. The PR has been updated accordingly."}]},{"timestamps":[{"ts":1362764388000,"body":"@carlosantoniodasilva I wanted to minimize the pain when backporting, but if you think it should be different on master and 3-2-13, then I'll change that."},{"ts":1362764602000,"body":"@carlosantoniodasilva done"},{"ts":1362764657000,"body":"Hm no, that's fine, we can keep the hash in the tests if we're going to backport, but the changelog can be changed I think. Also make sure to add spaces inside `{}`. Thanks!\r\n\r\nBtw, even backporting it's too late for 3.2.13, but it can wait in 3-2-stable for the next one :)."},{"ts":1362765027000,"body":"> Btw, even backporting it's too late for 3.2.13, but it can wait in 3-2-stable for the next one :).\r\n\r\nAccording to the [changelog](https://github.com/rails/rails/blob/3-2-13/actionpack/CHANGELOG.md) (right above the header \"3.2.12\"), this is a regression since 3.2.12, so I thought it'd make sense to release in 3.2.13."},{"ts":1362765319000,"body":"Ah perfect, sorry I missed this comment in your description:\r\n\r\n> I found this bug when upgrading from 3.2.12 to 3.2.13.rc2, so I'd like this to backport this to 3-2-13.\r\n\r\nSo I think it'll have to be part of 3.2.13, but we may need another rc for that. /cc @tenderlove.\r\n\r\nThanks @exviva."},{"ts":1362765655000,"body":"@carlosantoniodasilva no problem, I wouldn't mind another RC :)."},{"ts":1362841623000,"body":"@exviva merged and backported. Lets wait for @tenderlove to check about 3.2.13 now. Thanks!"},{"ts":1362843170000,"body":"@carlosantoniodasilva thanks! So you backported to 3-2-stable? Let's see if @tenderlove would care to backport to 3-2-13."},{"ts":1362847170000,"body":"@exviva yup, I did in a0c3c1e1f796c215685e4e4bcd3e8c9178936492 :)"},{"ts":1363129243000,"body":"@exviva the fix will be included in 3.2.13 as it's a regression, on top of current rc2. It's already in 3-2-13 branch. Thanks."},{"ts":1363156430000,"body":"@carlosantoniodasilva thank you!"}]},{"timestamps":[{"ts":1376453236000,"body":"I don't think we have to add it to Inflector. You can easily add it to one of your initializers\r\n\r\n``` ruby\r\nActiveSupport::Inflector.inflections do |inflect|\r\n  inflect.irregular 'criterion', 'criteria'\r\nend\r\n```\r\n\r\n(If i am not mistaken, inflector is sort of frozen now for such changes. We can't add all possible examples to Rails) //cc @steveklabnik "},{"ts":1376463048000,"body":"@prathamesh-sonpatki is right, the inflector is generally frozen to keep backwards compatibility with existing applications. You can always change the inflector to match your needs in your own application.\r\n\r\n/cc @fxn "},{"ts":1376465937000,"body":"Confirm, thanks for reporting anyway."}]},{"timestamps":[{"ts":1362308381000,"body":"@tonyla is it possible to test this functionality, maybe creating two files, touching one and making sure only the one touched is updated in the reloader? I agree with your logic, but want this functionality tested. \r\n\r\nDoes the reloader behave the same in master? "},{"ts":1362554761000,"body":"@schneems \r\n\r\nThe reloader functionality is tested in this file https://github.com/rails/rails/blob/3-2-stable/activesupport/test/file_update_checker_test.rb \r\n\r\nDoes that cover what you were thinking? Or are you meaning a test that tests the reloader in context? Meaning testing of actual file reloading inside a rails environment.\r\n\r\nMaster does behave the exact same way:\r\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/application/finisher.rb#L87\r\n\r\nAs an anecdote this reduces my dev page loads from ~4s to < 1s. The first page load still takes 4s but each subsequent page load is < 1s. Has made a huge different in development speed in the fairly large rails app I work with. "},{"ts":1364325074000,"body":"This seems like a pretty important thing to fix for Rails 4 given other improvements in getting the dev environment to load quickly. What else is necessary for this to get fixed? Tests? A patch?"},{"ts":1364325558000,"body":"I can create what ever is needed, I'm just unsure of how to get this actually \"approved\". \r\n\r\nI've been using this on a forked version of rails and it speeds up development significantly. \r\n\r\nhttps://github.com/pingg-corp/rails/tree/v3.2.12-patched"},{"ts":1364325714000,"body":"> @tonyla is it possible to test this functionality, maybe creating two files, touching one and making sure only the one touched is updated in the reloader? I agree with your logic, but want this functionality tested.\r\n\r\nYou've obviously got a patch. I'd make a pull request referencing this issue with the relevant changes, plus tests. "},{"ts":1364361102000,"body":"I did some more digging and found out that the reloading behaviour was being caused by https://github.com/wavii/rails-dev-tweaks/pull/9 (A gem that I use). I'll detail the explanation below just in case it helps someone in the future.\r\n\r\nThe code does behave as expected but it is very deceiving when reading it. That is because the line \r\n\r\n~~~ruby\r\nActionDispatch::Reloader.to_prepare(:prepend => true){ reloader.execute }\r\n~~~\r\n\r\nLooks like it will reload on every request. But reloaders are not actually run unless #reload_dependencies? is true.\r\n\r\n~~~ruby\r\n    def reload_dependencies? #:nodoc:\r\n      config.reload_classes_only_on_change != true || reloaders.map(&:updated?).any?\r\n    end\r\n~~~\r\n\r\nAs you can see it checks to see if any reloader #updated?. It will not reload the code on ever request."},{"ts":1364403175000,"body":"@josevalim could you take a look?"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1363351803000,"body":"Thanks, but the 3-2-13 branch does not get any direct pull request since it's a release branch. I'm merging this into 3-2-stable. Does this also need fixing in master?"},{"ts":1363354974000,"body":"Thanks for merging. page caching extracted to new gem, i think. No need to fix in master."}]},{"timestamps":[]},{"timestamps":[{"ts":1377677908000,"body":"I think needed to add Changelog and some tests."},{"ts":1377678159000,"body":"/cc @fxn"},{"ts":1377679365000,"body":"@pftg my bad - i thought it can go as is ... feel free to close I won't be adding tests nor filling out changelogs ;(\r\nI do not care that much I only though to include since I did it on AR-JDBC since it was confusing while debugging ..."}]},{"timestamps":[{"ts":1359459947000,"body":"This seems to be targeted incorrectly, please review and send in another pull request."},{"ts":1359460824000,"body":"You're right, I've accidentally applied it to the master branch instead of the 2-3-stable branch. Thanks for letting me know!"}]},{"timestamps":[]},{"timestamps":[{"ts":1368948252000,"body":"cc @mikel "},{"ts":1368952737000,"body":"It seems that this is same to #10646."},{"ts":1368966414000,"body":"@kennyj Yes it's same. I didn't see your PR. I don't know which approach is right. Your approach also looks good. Let's wait for some official word."},{"ts":1369073741000,"body":"Closed since I'll merge #10646"}]},{"timestamps":[{"ts":1365486500000,"body":"updated"}]},{"timestamps":[{"ts":1372873955000,"body":"Removing few tests now. "},{"ts":1372874026000,"body":"Thanks :+1:"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1375860725000,"body":"Hm, this look like cosmetic changes."},{"ts":1375860941000,"body":"@rShetty thank you for your time to improve Rails.\r\n\r\n> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted.\r\n\r\nYou can find more in our [contribution guide](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html)"}]},{"timestamps":[{"ts":1357662192000,"body":"I think this should have been fixed by 295806e11945a6fa052438a5ff8ef82cb262b977, not? Can you please check? Thanks."},{"ts":1357662365000,"body":"Oh, I didn't know https://github.com/rails/rails/commit/295806e11945a6fa052438a5ff8ef82cb262b977 . Thanks!!"}]},{"timestamps":[{"ts":1368100803000,"body":"/cc @fxn "}]},{"timestamps":[{"ts":1365053140000,"body":"Whoah, that second one is gnarly. My brain didn't get what was going on for a second.\r\n\r\nThanks for all this work. :heart: remove warnings."},{"ts":1365053249000,"body":"@steveklabnik  There are some more fixes to come! :smile: "}]},{"timestamps":[]},{"timestamps":[{"ts":1368716938000,"body":"wrong commits"},{"ts":1368717512000,"body":"actually wrong branch.  Corrected pull request here: https://github.com/rails/rails/pull/10645"}]},{"timestamps":[]},{"timestamps":[{"ts":1361988171000,"body":"I was surprised to see no failing test when switching the option to `false`. This could also be the reason why the value changed somehow. Do you think we need to lock the default in place?\r\n\r\n@carlosantoniodasilva could you take a look?"},{"ts":1361998379000,"body":"@senny I only found this test https://github.com/rails/rails/blob/master/activerecord/test/cases/serialization_test.rb#L49. But it's not testing the default behaviour afaik :("},{"ts":1362010925000,"body":":+1: on switch it back to false since that change was intentional. "},{"ts":1362010956000,"body":"was unintentional*"},{"ts":1362091250000,"body":"I think you need to rebase this patch as well."},{"ts":1362343880000,"body":"Not sure if this should include a CHANGELOG since was a regression in an unreleased version :smile:"},{"ts":1362381152000,"body":"@guilleiguaran I think you are right. However if we are going to completely remove the option I think we should include a CHANGELOG entry. How should I proceed?"},{"ts":1362422988000,"body":"In my opinion we should give a option to disable/enable it in Active Record without changing Active Model."},{"ts":1362423006000,"body":"So :+1: to keep the option changing to false"},{"ts":1362426098000,"body":"We will need tests to avoid the regression again."},{"ts":1362428677000,"body":"@rafaelfranca I added the tests. I first had to do a refactoring commit to remove the side-effects on the global state. Can you check again?"}]},{"timestamps":[{"ts":1366943428000,"body":"Can you provide a benchmark to be run demonstrating this?"},{"ts":1366943788000,"body":"```ruby\r\nrequire 'benchmark'\r\n\r\nkilobyte = \"1\" * 1024\r\n\r\nu = ActiveSupport::Multibyte::Unicode\r\n\r\nres = Benchmark.realtime do\r\n  10_000.times do\r\n    u.tidy_bytes(kilobyte)\r\n  end\r\nend\r\n\r\nputs \"tidy_bytes took #{res / 10}ms\"\r\n```\r\n\r\nSave as `./activesupport/bm.rb`, cd to `./activesupport`, and run:\r\n\r\n```\r\nruby -I./lib -ractive_support/multibyte/unicode bm.rb\r\n```\r\n\r\nOutput before proposed change:\r\n\r\n```\r\ntidy_bytes took 1.9525396000000002ms\r\n```\r\n\r\nAfter proposed change:\r\n\r\n```\r\ntidy_bytes took 0.0029686ms\r\n```"},{"ts":1366950464000,"body":"I figured out a way to get almost the same performance improvement while able to handle mish-mash encoding. Closing and submitting a new PR soon."},{"ts":1366951453000,"body":"Moved to https://github.com/rails/rails/pull/10355"}]},{"timestamps":[]},{"timestamps":[{"ts":1357453226000,"body":"@hsbt thanks!!! but PerformanceTest and all related tests and classes will be extracted to a separated gem in the next days and this test will be removed anyway. \r\n\r\nThanks for your contribution :smile: "},{"ts":1357453260000,"body":"About tests in ruby 2.0.0, this isn't the last failing one, we should wait for https://github.com/wycats/thor/pull/289 to get test-suite green"},{"ts":1357455801000,"body":"@guilleiguaran Thank you for your reply. I understood about performance test in rails edge. I'm waiting it :octocat:"}]},{"timestamps":[{"ts":1376297168000,"body":"Please add `[ci skip]` to commit message. Thanks."},{"ts":1376323359000,"body":"All set"},{"ts":1376407566000,"body":"I removed that pesky extra space that worked it's way in there and squashed the commits."},{"ts":1376416059000,"body":"Thanks!"}]},{"timestamps":[{"ts":1363469985000,"body":":+1: "},{"ts":1363488217000,"body":":+1: "},{"ts":1363499846000,"body":"Sorry guys but the stable branches don't get new features."},{"ts":1363499930000,"body":"Agree with @rafaelfranca, this is nice but we only apply bugfixes to stable branches. "}]},{"timestamps":[]},{"timestamps":[{"ts":1363333551000,"body":"looks good to me /cc @carlosantoniodasilva @steveklabnik "},{"ts":1363351861000,"body":"Thanks!"}]},{"timestamps":[]},{"timestamps":[{"ts":1376059276000,"body":"cc @tenderlove @rafaelfranca "},{"ts":1376060306000,"body":"Sorry but I didn't got why this is redundant. Could you explain better?"},{"ts":1376060503000,"body":"Actually it doesn't perform any operation and returns the value passed, I cross-verified with other adaptors, there doesn't seem to be anything like this."}]},{"timestamps":[{"ts":1367890094000,"body":"Thank you"}]},{"timestamps":[]},{"timestamps":[{"ts":1357607327000,"body":"Thanks for your contribution!!!"}]},{"timestamps":[{"ts":1360213293000,"body":"Aren't there assets cached in `tmp/cache/assets`? I think this is what it's clearing."},{"ts":1360213420000,"body":"Oh, yes, nevermind the whole cache clear then I misread the task name, but there's still no need to clear the asset cache—it's just the sprockets index. It does a great job of detecting asset changes and doing minimal recompilation."},{"ts":1360213544000,"body":"Wait, no, I shouldn't have edited, it is indeed clearing the whole application cache. The intention is clearing the subset of the cache used for assets, yes."},{"ts":1360214977000,"body":"Timing this in CI now, I'm tentatively :+1:"},{"ts":1360556790000,"body":"There should be a way to remove outdated cache entries after a compilation, so that the cache contains only those items that were generated or that would have been generated during the last compilation, so that the cache doesn't grow indefinitely."},{"ts":1360711525000,"body":"There is definitely a bug here as it should not clear up the whole cache but we still need to clean up the assets cache before each run. Why? Because each runs uses different options and you don't want to mix the caches. If you remove the cache clean-up, you have nondigest assets pointing to primary assets and vice-versa."},{"ts":1360711979000,"body":"@josevalim for that case we could use separate caches"},{"ts":1360712071000,"body":"You could key the cache on the options, who knows how much you're going to break though, undoubtedly tons of people depend on the current behaviour."},{"ts":1360712519000,"body":"Dupe of #5497"},{"ts":1360716784000,"body":"The asset cache is namespaced by the rails environment already. The fundamental problem seems to be that 1 rails environment == 2 sprockets environments, and there's no cache namespacing for that. A sprockets environment config fingerprint prefix would be better, though, so switching compressors/digests/etc would also implicitly invalidate the cache.\r\n\r\nCe la vie. The workaround is sufficient for my needs, and I'll run an assets:clean when I need to. :-)"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1376740303000,"body":"Please use `[ci skip]` for commit message"}]},{"timestamps":[{"ts":1361395956000,"body":"cc @fxn "}]},{"timestamps":[]},{"timestamps":[{"ts":1364452206000,"body":"Thanks @obrie I've missed this case!"},{"ts":1364480272000,"body":"Thanks @carlosantoniodasilva for the quick turnaround!"}]},{"timestamps":[]},{"timestamps":[{"ts":1376557738000,"body":"I think the test you are looking for is: https://github.com/rails/rails/blob/master/railties/test/application/rake/notes_test.rb#L19\r\n\r\nAlso please make sure to change the comment above `find_in` to list `less`."},{"ts":1376559557000,"body":"Cheers @senny, is that better?"},{"ts":1376559710000,"body":"looks good, can you add a simple one line CHANGELOG entry and squash all the commits into a single one?"},{"ts":1376561824000,"body":"@senny not sure if I've done this right or completely messed it up! "},{"ts":1376562497000,"body":"The \"Commits\" tab at the top of your Pull Request should show only a single commit. Currently there are 5 and the history looks kinda messed up. I think the easiest thing now is to create a new branch from `master` apply the patch diff, and push that branch to this Pull Request. You should be able to achieve this with something like this:\r\n\r\n```\r\ngit checkout -b search_less_on_rake_notes master\r\ngit diff master... add_less_to_rake_todos | git apply\r\ngit add -A\r\ngit commit -m \"Adding LESS to rake notes\"\r\ngit push -uf origin search_less_on_rake_notes:add_less_to_rake_todos\r\n```"},{"ts":1376562710000,"body":"@senny thanks! Does that look better now?"},{"ts":1376563004000,"body":"awesome. It looks good now. Thanks for your contribution :yellow_heart: "},{"ts":1376563217000,"body":"Awesome! :dancer: "},{"ts":1376569166000,"body":"@onlymejosh please make sure you actually run the tests for further contributions. The build just failed with:\r\n\r\n```\r\n  1) Failure:\r\nApplicationTests::RakeTests::RakeNotesTest#test_notes_finds_notes_for_certain_file_types [test/application/rake/notes_test.rb:55]:\r\nExpected: 10\r\n  Actual: 11\r\n```\r\n\r\nYou should run all the tests that you modify to make sure they actually pass."},{"ts":1376601218000,"body":"We really should think how to make this configurable in the application side. We can't should Rails every time a new template/javascript/stylesheet language come out"},{"ts":1376601538000,"body":"@rafaelfranca :+1:"},{"ts":1376604171000,"body":"I'm not sure it needs to be a template. Why doesn't it just grep the directory?\r\n\r\nSent from my iPad\r\n\r\nOn 15 Aug 2013, at 22:14, Rafael Mendonça França <notifications@github.com> wrote:\r\n\r\n> We really should think how to make this configurable in the application side. We can't should Rails every time a new template/javascript/stylesheet language come out\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub."},{"ts":1376631074000,"body":"@rafaelfranca :+1: configuration certainly helps but it would still be great if most common ruby technologies just work out of the box."},{"ts":1376631383000,"body":"Thinking about it, it might be better to just have the configuration so that plugins like https://github.com/metaskills/less-rails can add their pattern and we only include what rails supports out of the box."},{"ts":1376725294000,"body":"@senny @rafaelfranca @guilleiguaran : I would love to have a try with such a patch."},{"ts":1376732059000,"body":"@robin850 please go ahead."}]},{"timestamps":[]},{"timestamps":[{"ts":1378267704000,"body":"If the extra 3 decimal places is optional why is rails making it default? Seems like something that should be optional based on the ISO8601 spec."},{"ts":1378267816000,"body":"Because if the object in question has sub-second accuracy, then it would make sense to serialize it, rather than lose data."},{"ts":1379104769000,"body":"It is odd that only `TimeWithZone` that has these fractional seconds. `Time#as_json` and `DateTime#as_json` do not. \r\n\r\nhttps://github.com/rails/rails/blob/master/activesupport/lib/active_support/json/encoding.rb#L319\r\nhttps://github.com/rails/rails/blob/master/activesupport/lib/active_support/json/encoding.rb#L339\r\n\r\nI suggest that it be configurable and consistent across all the time types.\r\n\r\nhttps://github.com/rails/rails/pull/12226"}]},{"timestamps":[]},{"timestamps":[{"ts":1361795699000,"body":"Thank you for the pull request. Sorry but we don't accept cosmetic changes alone."},{"ts":1361797020000,"body":"I got it. Thank you for reviewing. "}]},{"timestamps":[{"ts":1368346244000,"body":"Super! :smiley:."},{"ts":1368380945000,"body":"Pushed"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1376025684000,"body":"@yaotti thank you, for the next time when you submit documentation changes, please add `[ci skip]` to the commit message. This will prevent Travis from running a build, which is not necessary for doc changes and will help to keep the Travis queue low."},{"ts":1376026074000,"body":"@senny oh, I forgot to add that. I see :smiley: "}]},{"timestamps":[{"ts":1363049989000,"body":"/cc @fxn @jonleighton "}]},{"timestamps":[{"ts":1372196102000,"body":"TBH I don't think that just reverting is the right solution.\r\nThis may cause a regression in #2815 the issue that @avakhov was trying to fix.\r\nI don't have time right now and I may be overlooking something but if you can guys please try to come up with a solution that fixes both cases. Thanks!"},{"ts":1372197103000,"body":"@spastorino Oops, sorry. I'll close this for now and see if I can come up with a solution that fixes both problems."}]},{"timestamps":[{"ts":1365156697000,"body":"/cc @rafaelfranca @jonleighton "},{"ts":1365156782000,"body":"@DanOlson Is there a reason that this PR points to `3-2-stable`? Is this only a problem on `3.2.x` or also on master?\r\n\r\nAs this changes the behavior I don't think it should be backported to 3-2-stable."},{"ts":1365166411000,"body":"The current behaviour exists for security reasons, to prevent unsafe query generation. So we can't merge this."}]},{"timestamps":[{"ts":1364773569000,"body":"The change looks ok, and Rails code would probably break when [this condition will be removed in the future](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb#L769). But the test redefining a method and checking if the options have arrived as a hash seems slightly brittle. It'd be good if we could ensure that sending `nil` would break somewhere else, focusing more on the behavior itself, but I don't have any good example coming to my mind right now. Thanks!"},{"ts":1364835094000,"body":"Right now nobody can assume options will be always a hash since it used to be a string. So I'm fine with this change but I'd not assume that options is a hash."},{"ts":1364835262000,"body":"Also I agree with @carlosantoniodasilva about the tests but I don't have a better implementation. Right now I'd only remove that test."},{"ts":1364837173000,"body":"@carlosantoniodasilva, @rafaelfranca Done, thank you very much for your feedback! Should I send a separate PR with the test, so we can keep thinking about it, or should I drop it altogether?\r\n\r\nAlso, FWIW, I agree that plugins shouldn't assume that options will be a hash. I just think that this change will make it a bit easier for devs to upgrade to Rails 4."},{"ts":1364837406000,"body":"@pwnall if you think in something to test this please submit the pull request.\r\n\r\nThank you"}]},{"timestamps":[{"ts":1357453413000,"body":"/cc @fxn @vijaydev "},{"ts":1357476022000,"body":":+1:"},{"ts":1357489143000,"body":"@fxn what do you think?"},{"ts":1357595656000,"body":"Good."}]},{"timestamps":[{"ts":1367228023000,"body":"Note that this doesn't happen in Rails 4."},{"ts":1367233996000,"body":"Can you add a changelog entry that explains the bug fix please?"},{"ts":1367260515000,"body":"I enhanced a test a bit, because this also happens:\r\n\r\n```ruby\r\nclass User < ActiveRecord::Base\r\n  store :properties, accessors: [:age, :name]\r\nend\r\n\r\nuser = User.create!(age: 21, name: \"foo\")\r\nuser.age = 22\r\nuser.properties_change # => [{:age => 22, :name: \"foo\"}, {:age => 22, :name => \"foo\"}]\r\nuser.name = \"bar\"\r\nuser.properties_change # => [{:age => 22, :name: \"foo\"}, {:age => 22, :name => \"foo\"}]\r\n```\r\n\r\nThat is, it stopped to track even the current state."},{"ts":1372208947000,"body":"Thanks."}]},{"timestamps":[{"ts":1363825824000,"body":"Have you run the tests?"},{"ts":1366987864000,"body":"These files are intentionally there to [test that they aren't rendered][1].\r\n\r\n[1]: https://github.com/rails/rails/blob/master/actionpack/test/template/render_test.rb#L376-L382"}]},{"timestamps":[{"ts":1373625001000,"body":"I'm not sure there are enough use-cases for this option. Consider the situation where your model is in a different namespace than your controller, this would lead to a new option. \r\n\r\nMaybe we could introduce something to specify the name of the model to use. This would apply to more uses:\r\n\r\n```\r\nrails g scaffold_controller Admin::User --model-name=\"User\"\r\n```\r\n\r\n@rafaelfranca @carlosantoniodasilva what do you think?"},{"ts":1373625956000,"body":"I agree with @senny. `--skip-namespace` is a confusing name, you are skipping which namespace? The controller one? The model one? All? `--model-name` is way better."},{"ts":1373626945000,"body":"@yalab are you up to changing the PR to implement a `--model-name` option?"},{"ts":1373644695000,"body":"@senny OK I try to change it. Please wait a few days."},{"ts":1373645357000,"body":"great! ping me if you have questions.\r\n—\r\nSent from Mailbox for iPhone\r\n\r\nOn Fri, Jul 12, 2013 at 5:59 PM, yalab <notifications@github.com> wrote:\r\n\r\n> @senny OK I try to change it. Please wait a few days.\r\n> ---\r\n> Reply to this email directly or view it on GitHub:\r\n> https://github.com/rails/rails/pull/11408#issuecomment-20885842"}]},{"timestamps":[{"ts":1367429944000,"body":"I think it was intended in master, since it's a mayor patch version, but @ernie and @rafaelfranca can confirm since they were more in the discussion."},{"ts":1367430192000,"body":"Yup. Was intended in master. "},{"ts":1367430680000,"body":"Will close then.  Thx"}]},{"timestamps":[{"ts":1362752565000,"body":"Thank you"},{"ts":1362753079000,"body":"My pleasure :)"}]},{"timestamps":[{"ts":1358317755000,"body":"@pixeltrix Andrew, just a gentle nudge to address this please? I understand that underscore is used in a number of places but this particular use is working on a very limited set of inputs to underscore. What do you think?"},{"ts":1358320137000,"body":"@asanghi this needs to be against master doesn't it - problem appears there as well"},{"ts":1358320505000,"body":"nope doesnt appear there because it does not use a Hash proc there.\r\n On 16 Jan 2013 12:39, \"Andrew White\" <notifications@github.com> wrote:\r\n\r\n> @asanghi <https://github.com/asanghi> this needs to be against master\r\n> doesn't it - problem appears there as well\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8632#issuecomment-12307173>.\r\n>\r\n>"},{"ts":1358323544000,"body":"Sorry, I forgot you mentioned that in #8631. I actually prefer the fix in 872d8c30971e376cf6d2f7b99a0aafdb7bfc1939 - can you update this PR to match that and squash the commits. Once that's done I'll merge it."},{"ts":1358325863000,"body":"@pixeltrix squashed with solution from master and added changelog entry and test."},{"ts":1358332241000,"body":"Good catch @pixeltrix . I was mucking around with tests earlier and it was left behind. Removed and squashed again."},{"ts":1358334320000,"body":"Thanks @arunagw - I think we should add the test to master as well. Can you create a PR?"},{"ts":1358334682000,"body":"I'm sure you meant @asanghi and I will. :)"},{"ts":1358334812000,"body":"Yes, the autocomplete jumped to the wrong one and I didn't notice - thanks."},{"ts":1358336048000,"body":"@pixeltrix .. see #8963 for pull on master"}]},{"timestamps":[]},{"timestamps":[{"ts":1371229238000,"body":"Someone have any comment about this?"},{"ts":1371326445000,"body":"Can you give more info? Why is the test case currently \"wrong\"?"},{"ts":1371326806000,"body":"ahh, make sense.\r\n\r\n@schneems the `hash` value will be always equal to `parsed_xml` because they are the same :smile: "},{"ts":1371327363000,"body":"Broke the build."},{"ts":1371328497000,"body":"@pacoguzman could you please fix it?"},{"ts":1371329040000,"body":"Yes, I'll do\r\nOn Jun 15, 2013 10:35 PM, \"Rafael Mendonça França\" <notifications@github.com>\r\nwrote:\r\n\r\n> @pacoguzman <https://github.com/pacoguzman> could you please fixt it?\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/10727#issuecomment-19502997>\r\n> .\r\n>"},{"ts":1371335590000,"body":"@rafaelfranca should I open a new PR with the fix, right?"}]},{"timestamps":[{"ts":1357417626000,"body":"cc @fxn @steveklabnik "},{"ts":1357419787000,"body":"I love it. Thank so much. This is a way better example.\r\n\r\nI think with this, we can remove the WIP tag. @fxn?"},{"ts":1357419955000,"body":"@lucasmazza :heart:"},{"ts":1357420079000,"body":"Thanks guys :heart:"}]},{"timestamps":[{"ts":1358515688000,"body":"Is `find_by_*` really deprecated?\r\nI don't see any deprecation warning for this in my Rails 4 project, and actually it works even if I unbundle `activerecord-deprecated_finders` gem."},{"ts":1358515771000,"body":"Afaik, `find_by_attribute` is not deprecated, but `find_by_foo_and_bar_and_baz` is."},{"ts":1358517650000,"body":"Right. I'm afraid this update is a bit too much.\r\nActually `find_by_id(Model.id)` looks (slightly) nicer than `find_by(id: Model.id)` in terms of readability IMO."},{"ts":1358517808000,"body":":-1: on this, since `find_by_[attribute]` dynamic finder did *not* get removed."}]},{"timestamps":[{"ts":1358800860000,"body":"Thanks Piotr!!! :smile:"}]},{"timestamps":[{"ts":1374906241000,"body":"Please add `[ci skip]` to commit message."},{"ts":1374906404000,"body":"@pftg - done"}]},{"timestamps":[{"ts":1374530514000,"body":"@kennyj why not. But in Gemfile is used ```>=``` not ```~>```.\r\n\r\n//cc @guilleiguaran"},{"ts":1374530652000,"body":"I prefer be a bit more conservative in adapter file :)"},{"ts":1374540105000,"body":"I thinks so, But I think that we invariably must skip mysql2 0.3.12."},{"ts":1374540252000,"body":"@kennyj just for CI I think. It just generates some warnings."}]},{"timestamps":[{"ts":1376753075000,"body":"> Is there a supported database that uses this column type? I may have missed something.\r\n\r\nIt looks like you are right ; at least [PostgreSQL](http://www.postgresql.org/docs/9.2/static/datatype.html) and [MySQL](http://dev.mysql.com/doc/refman/5.7/en/string-types.html) have no `string` type. "},{"ts":1376986973000,"body":"This patch looks valid to me.\r\n\r\n@yahonda, @metaskills is this something you are relying on?"},{"ts":1376999700000,"body":"Looks good to me."},{"ts":1377000143000,"body":"Oracle database also does not have String datatype.\r\nTested this patch and no regressions found. Looks good to me. "},{"ts":1377004021000,"body":"Thanks for your contribution :yellow_heart: \r\n\r\n/cc @rafaelfranca @tenderlove"},{"ts":1377014749000,"body":"This needs a changelog entry even if we don't know nobody using it."},{"ts":1377015665000,"body":"@rafaelfranca I'll write one."},{"ts":1377016526000,"body":"Thank you guys"}]},{"timestamps":[{"ts":1375780304000,"body":"@jquadrin Thanks. I don't think the TODO implied that the test data should be moved into actual production code (which active_record/railtie.rb is). From my perspective, that TODO is likely out of date and could be simply removed."}]},{"timestamps":[{"ts":1362846207000,"body":"Thank you!"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1376042943000,"body":"Updated to have single test which tests order. let me know if this okay or earlier approch of two tests okay. Further, there is a better way to do this. I would like to know about it. Thanks"},{"ts":1376781914000,"body":"weekly bump to check the status"},{"ts":1376814116000,"body":"Sorry for late reply... Ruby 1.9-compat and higher also define RUBY_ENGINE, which would be \"jruby\" under JRuby, \"ruby\" under MRI, and so on."},{"ts":1376821892000,"body":"@headius \r\nBetween `RUBY_ENGINE`, `JRUBY_VERSION` & `RUBY_PLATFORM`. Is there a recommended way or all three are almost same & thus can be used interchangeably? "}]},{"timestamps":[{"ts":1358415971000,"body":"Good for safely composing fragments of large SQL statements to avoid multiple round-trips between ruby and the db e.g. [anonymous code blocks](http://www.postgresql.org/docs/9.2/static/sql-do.html) in PostgreSQL. :+1: "},{"ts":1361974232000,"body":":+1:  Strongly support"},{"ts":1361974422000,"body":"hmmm, seems a good idea. @tenderlove WDYT?"},{"ts":1361978484000,"body":"@rafaelfranca updated following your comment. Was tired when I did this :-)"},{"ts":1362126711000,"body":"I'd suspect the Rails guys would like the commits squashed :)"},{"ts":1362126836000,"body":"I'll rebase them as soon as they will at least give me a sign of agreement ^_^"},{"ts":1362126911000,"body":"Done just in case ;-)"},{"ts":1362694560000,"body":"Could you add a CHANGELOG entry?"},{"ts":1362730548000,"body":"@rafaelfranca done"}]},{"timestamps":[{"ts":1370424093000,"body":"cc @tenderlove "}]},{"timestamps":[]},{"timestamps":[{"ts":1364996325000,"body":"@sikachu @steveklabnik @carlosantoniodasilva what do you think?"},{"ts":1365008316000,"body":"I thought `rails test` was going away, or at least, @tenderlove is shooting for it."},{"ts":1365440445000,"body":"@steveklabnik thanks for the heads-up. As `rails test` won't be in Rails 4 this PR does not make a lot of sense."}]},{"timestamps":[{"ts":1361765024000,"body":"/cc @carlosantoniodasilva @ernie"},{"ts":1361793022000,"body":"Yeah, same comment from the other PR applies here. I really don't like how this implementation gives the finger to Demeter. But it should work. "},{"ts":1361799585000,"body":"@ernie any idea how can we improve it? Your input is always valuable"},{"ts":1361799864000,"body":"@rafaelfranca One thing I mentioned in the other PR is that we could consider making the column_for method in ARel public. It's basically doing the same thing already. Of course, that increases dependence on ARel being coupled to the DB connection, which is something we've talked about trying to reduce.\r\n\r\nUnfortunately, I've been busy lately with work and prepping for talks, and unable to spend time on AR/ARel work. Based on the regression needing a fix, and lack of time to work something cleaner out, I'm not really opposed to merging this -- just think we need to keep in mind it's a band-aid."},{"ts":1361808233000,"body":"Yes, this is a band-aid until https://github.com/rails/arel/pull/162 gets merged in Arel, after which we can remove the `when Integer, ActiveSupport::Duration` case that this if fixing an issue with."},{"ts":1361983076000,"body":"Now that we've reverted that commit, this shouldn't be needed anymore. Thank you for the patch."}]},{"timestamps":[{"ts":1365871783000,"body":"We tend to check `.ruby-version` in to ensure everyone running the project uses the same ruby version. Thanks!"}]},{"timestamps":[]},{"timestamps":[{"ts":1357160803000,"body":"Can you please merge?"},{"ts":1357163916000,"body":"Thank you"}]},{"timestamps":[{"ts":1369316071000,"body":"Not super-fond of this rename - it's going to break any gem that uses the old name, and for very little benefit..."}]},{"timestamps":[{"ts":1371491689000,"body":"Could you add a CHANGELOG entry?"},{"ts":1371497394000,"body":"@rafaelfranca CHANGELOG has been added. Thanks."}]},{"timestamps":[{"ts":1361999587000,"body":"Is this needed on master too?"},{"ts":1361999982000,"body":"No. this method is deprecated in 3-2-stable branch in rails and it has already gone in master branch, as far as I remember.\r\n\r\nOracle enhanced adapter did not support this deprecated method but now going to support it with Rails 3.2."},{"ts":1362000015000,"body":"Got it."},{"ts":1362000237000,"body":"Thanks. "}]},{"timestamps":[{"ts":1361312252000,"body":":+1:"},{"ts":1361312265000,"body":":+1:"},{"ts":1361312280000,"body":"I cannot see a merge button? Anyone, if you see the \"merge\" button, click, ASAP"},{"ts":1361312488000,"body":"Holding this one off right now to discuss the right gem name for this. Potential candidates are:\r\n\r\n1. actiondispatch-xml_params_parser\r\n2. action_dispatch-xml_params_parser\r\n3. actionpack-xml_params_parser\r\n\r\nI like 2 myself, since it follows Ruby `require` convention."},{"ts":1361312553000,"body":"My vote is blue...errr, 3, because it's extending the `actionpack` gem."},{"ts":1361313820000,"body":"3 :+1:"},{"ts":1361315803000,"body":"Yeah, 3 :+1: "},{"ts":1361317947000,"body":"yeah. 3 :+1: "},{"ts":1361318449000,"body":"Vote closed, and now I'm having a facepalm moment.\r\n\r\nYou could say that it's extending actionpack, but then you also have to think that actionpack is actually consist of `abstract_controller`, `action_controller`, `action_dispatch`, `and action_view`. `actionpack` itself is a container ...\r\n\r\nI'm writing a documentation for `ActionDispatch::XmlParamsParser` now, and it doesn't make sense if the gem is going to be named `actionpack-xml_params_parser`. Also, if I renamed the namespace to `ActionPack::XmlParamsParser`, it started to feel weird as well.\r\n\r\nCan I use my **veto** power and do 2? "},{"ts":1361318675000,"body":"btw, \r\n\r\nhttps://github.com/rails/actionpack-action_caching\r\nhttps://github.com/rails/actionpack-page_caching"},{"ts":1361318858000,"body":"I see. So I guess it should be in `actionpack` prefix. nvm then."},{"ts":1361319492000,"body":"@sikachu how about your choice?"},{"ts":1361319554000,"body":"We've decided that we'll go with `actionpack-xml_parser`. A bit shorter, while keeping the gem within `actionpack-` prefix."},{"ts":1361319847000,"body":"Code update mentioning the new library name. The code also has been extracted to https://github.com/rails/actionpack-xml_parser"},{"ts":1361356036000,"body":":+1: "},{"ts":1361364861000,"body":"Is something missing?"},{"ts":1361368125000,"body":"I think this is ready, and the green button is appearing again ... click it!"},{"ts":1361368349000,"body":"Thank you @guilleiguaran @sikachu "}]},{"timestamps":[{"ts":1372744008000,"body":"the build is failing."}]},{"timestamps":[{"ts":1371627165000,"body":"I'm not sure about this. As you said it's clearly documented in the [Postgres.app documentation](http://postgresapp.com/documentation). I've installed postgres manually and over homebrew, both installations don't need `host: localhost`."},{"ts":1371669260000,"body":"Yup, it's not our job to document libraries that do something different than usual. I'd rather just stick with it being in the Postgres.app documentation.\r\n\r\nThanks though!"}]},{"timestamps":[{"ts":1365011842000,"body":"@carlosantoniodasilva  done."},{"ts":1365012818000,"body":":+1:"},{"ts":1365013067000,"body":"Thanks."}]},{"timestamps":[{"ts":1366382291000,"body":"Could you add a test case?"},{"ts":1366383396000,"body":"adding"},{"ts":1366386711000,"body":"added"},{"ts":1366550091000,"body":"@rafaelfranca anything else, I should update?"},{"ts":1368558138000,"body":"@rafaelfranca 1 month ping. Anything else this needs to handle?"},{"ts":1368569489000,"body":"Hmm, seems a bit counterintuitive to me - the method isn't called e.g. `deep_to_hash`; usually `to_*` methods don't mutate nested objects."}]},{"timestamps":[{"ts":1358249609000,"body":"Sorry I couldn't figure out how to remove first commit (ac49ea3) from pull request"},{"ts":1358264366000,"body":"@bolshakov it already support this. See #7645"}]},{"timestamps":[{"ts":1358965811000,"body":"Couldn't this simply be:\r\n\r\n    mail(subject: t(\".subject\", username: user.name))"},{"ts":1358972456000,"body":"Yes. Agree with @josevalim. It is simpler and clearer."},{"ts":1358972479000,"body":"Oops! Closed by mistake."},{"ts":1358973078000,"body":"Also important to notice that you can always override `default_i18n_subject` in your own mailer :)"},{"ts":1359020768000,"body":"Actually the thing I cared about the most was to not have to implement `mailer_scope` on my own. Yeah, the solution with `t('.subject' ...` is good enough :)."},{"ts":1359022484000,"body":"Actually, `t('.subject' ...)` doesn't work, it'd only work in the views. So you'd still need to re-implement `mailer_scope` yourself :/."},{"ts":1359022613000,"body":"You should be able to use `I18n.t`."},{"ts":1359023975000,"body":"@dmathieu the `t` method does work, it's the `\".subject\"` lazy lookup that doesn't work. It's not scoped to `[mailer_scope, action_name]` as I'd like it to be."},{"ts":1359027355000,"body":"@exviva so it would make sense to extract `mailer_scope` to another protected method then, so you can reuse."},{"ts":1359027749000,"body":"@carlosantoniodasilva well, sort of. What I'd like to achieve, is being able to easily use the default subject I18n structure, but with interpolation. Even if `mailer_scope` were a method, I'd still need to join it with action_name and \".subject\", so it's not as elegant.\r\n\r\nI'm aware that this is a tiny improvement, so if your call is that it's not worth the costs, I'm totally fine with that.\r\n\r\nWhat do you think about allowing the `:subject` option to be a Hash, and if it is, treat it as interpolations for the default I18n subject?"},{"ts":1359028432000,"body":"@exviva This has been discussed in #2314, the result is that it'd bring too much indirection, please see there.\r\n\r\nSo instead of adding a new option / API, we could just allow `default_i18n_subject` to receive the extra interpolation hash, so you can call it from your mailers:\r\n\r\n```ruby\r\ndef default_i18n_subject(interpolations = {})\r\n  mailer_scope = self.class.mailer_name.tr('/', '.')\r\n  I18n.t(:subject, interpolations.merge(scope: [mailer_scope, action_name], default: action_name.humanize))\r\nend\r\n\r\nmail subject: default_i18n_subject(message: \"OMGLOL\")\r\n```\r\n\r\nWdyt?"},{"ts":1359032019000,"body":"@carlosantoniodasilva that's a very reasonable compromise, I'll implement it and ping you back. Thanks!"},{"ts":1359033853000,"body":"@carlosantoniodasilva done, let me know what you think"},{"ts":1359037661000,"body":"Other than that, seems good to me."},{"ts":1359037803000,"body":"@carlosantoniodasilva done"},{"ts":1359116597000,"body":"@exviva Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1357103303000,"body":"Nice! In future, please use [docrails](https://github.com/lifo/docrails) for such changes. Thanks."},{"ts":1357116098000,"body":"oh damn!. Just noticed that this PR is requested for the wrong branch. We'd need to revert this in the jobs branch. "},{"ts":1357156687000,"body":"@frodsan I couldn't, it was docs for the `jobs` branch."}]},{"timestamps":[{"ts":1372628377000,"body":"Your fix was correct, I cherry-picked it in 6e583cdac30332f10c73bec4fe3e857b7cdb9975. Thanks."},{"ts":1372628450000,"body":"And I just noticed it was included in #11183 as well :smile:. Will review there, thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1375132913000,"body":"I guess since 3.2 is no longer supported for bug fixes this is a no go? /cc @fxn"},{"ts":1375136299000,"body":"Yep, I think it is not worthwhile for that branch, but appreciate that you took the time to check it worked and write the patch."}]},{"timestamps":[{"ts":1377292717000,"body":"Why is it redundant? It allows you to not load up the constants."},{"ts":1377296995000,"body":"I'd argue that only one of these is necessary. If you don't load up the constants now, they will be loaded later (https://github.com/rails/rails/blob/master/activerecord/lib/active_record/fixtures.rb#L510) since the `FixtureSet` needs to set the `@model_class`.\r\n\r\nSo really, passing in a string doesn't help performance at all."},{"ts":1377319881000,"body":"Looks like this caused an error in the build, I'm looking into it."}]},{"timestamps":[{"ts":1371729844000,"body":"Duplication of #11028 "}]},{"timestamps":[]},{"timestamps":[{"ts":1358381112000,"body":"Sorry, Rails 2.3 is not receiving any support except for security fixes."},{"ts":1358381851000,"body":"But the security fixes for 2.3.15 brought in unrelated changes that have introduced this bug."},{"ts":1358438286000,"body":"I agree with @wezm. Security fixes should be backported to unmaintained releases but only if the fix does two things:\r\n* properly patches the vulnerability\r\n* doesn't break anything else (the branch is called 2-3 'stable' which it is not apparently)"},{"ts":1358443396000,"body":"The Rack upgrade was applied to the 2-3-stable branch in Dec 2011 but not released. I reverted the commit so you can stay on an earlier Rack release. 28cfd79e31eeb5923c51ea6c8410d98fb48efebf"}]},{"timestamps":[]},{"timestamps":[{"ts":1364238155000,"body":":heart:"}]},{"timestamps":[{"ts":1358163168000,"body":"Thank you guys"}]},{"timestamps":[{"ts":1357239106000,"body":"The change was done on purpose in 3b0da715c5c8cfc97071c4e640c9e00a2895113a so that the methods can be properly documented. Thanks @goshakkk  /cc @fxn"}]},{"timestamps":[{"ts":1364898228000,"body":"@rafaelfranca @pixeltrix @steveklabnik what do you think?"},{"ts":1364924482000,"body":"Certainly good on getting this in there."},{"ts":1369143263000,"body":"@pixeltrix some time ago we talked about this PR, I put the scaffold in place. How should we continue?"},{"ts":1375211359000,"body":"This looks good, any action on it? I'd be happy to help expand it once merged."},{"ts":1375875645000,"body":"@jaggederest I've merged the template in, so you can send your improvements.\r\n\r\n/cc @pixeltrix "},{"ts":1375876475000,"body":":+1: "}]},{"timestamps":[{"ts":1359698468000,"body":"Please also add an entry to `activerecord/CHANGELOG.md`\r\nOtherwise people are unaware of this change (which is an important fix)"},{"ts":1359700102000,"body":"Now just sit and wait\r\nunless you know the right person to draw attention..."},{"ts":1359719811000,"body":"cc @jeremy @dhh "},{"ts":1359974986000,"body":":+1: needs a rebase"},{"ts":1359975538000,"body":"And please squash your commits into one (note that you can rebase/squash and push force to your branch, that github updates the pull request properly)."},{"ts":1359989606000,"body":"Ok I think I did all that right. Let me know if not. Thanks for your help!"},{"ts":1361001365000,"body":"Anything else i need to do? @carlosantoniodasilva "},{"ts":1361018124000,"body":"Hmm? still not merged?"},{"ts":1363242122000,"body":"Any news on this issue, pretty painful when dealing with caching."},{"ts":1363242260000,"body":"I really want this to be merged before `beta2`\r\nUnless there is a problem"},{"ts":1363243639000,"body":"Glad to hear... Any chance to see it pushed to `3.2.stable` as well ?"},{"ts":1363243919000,"body":"Anyone can open a PR for 3.2 backport  **after** this one is merged into master\r\nBut lets focus on getting this merged first"},{"ts":1363244861000,"body":"Sounds perfect. Thanks for the info."},{"ts":1363244988000,"body":"Once this get merged I don't mind back porting it... Doubt it will be much\r\ndifferent.\r\n\r\nOn Thu, Mar 14, 2013 at 2:08 AM, Sébastien Grosjean <\r\nnotifications@github.com> wrote:\r\n\r\n> Sounds perfect. Thanks for the info.\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/9141#issuecomment-14889304>\r\n> .\r\n>"},{"ts":1363280150000,"body":"It needs to be rebased again, doesn't merge cleanly."},{"ts":1363283331000,"body":"@steveklabnik I rebased master, but my env is messed up and I can't get the tests to run, I assume travis will let you know they pass?\r\n\r\nI'm pretty sure they do the merge was minor."},{"ts":1363284286000,"body":"Travis does not run tests for our pull requests, because we put a lot of strain on Travis.\r\n\r\nIf @carlosantoniodasilva is still good with the idea, I can test this locally and then merge."},{"ts":1363293125000,"body":"ok thanks"},{"ts":1363828355000,"body":"Would this be included in `beta2`?"},{"ts":1363830345000,"body":"If it gets merged, yes."},{"ts":1364966117000,"body":"What is holding this PR?\r\nAny failed test or just need another rebase?"}]},{"timestamps":[{"ts":1373138502000,"body":"Thank you. These links must start with `link:/` since the task that generates the api.rubyonrails.org site change it to point to the right location.\r\n\r\nBut seems this task is broken."},{"ts":1373138518000,"body":"cc @fxn "},{"ts":1373138673000,"body":"@rafaelfranca  ahh i see.. can you point me to that task ? maybe i can have a look"},{"ts":1373138805000,"body":"https://github.com/rails/rails/blob/master/railties/lib/rails/api/task.rb"},{"ts":1373138919000,"body":"Roger, having a look at this."},{"ts":1373139257000,"body":" :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"},{"ts":1373142468000,"body":"Nowadays the README of the project is different from the README of the API. The content is still the same, but the idea is that everything is ready to have a better home for the API."},{"ts":1373148938000,"body":"@fxn Thanks for the above info.  Was not knowing about it."}]},{"timestamps":[{"ts":1361882537000,"body":"/cc @rafaelfranca \r\n\r\n@pixeltrix could you review this?"},{"ts":1361883098000,"body":"Seems good to me :+1:"},{"ts":1361883942000,"body":"Seems good to me but I prefer to leave this to @pixeltrix review. The router code is hard to my brain."},{"ts":1361897523000,"body":"Changes are made and I pushed a rebased version @pixeltrix can you check again?"}]},{"timestamps":[{"ts":1361474495000,"body":"@carlosantoniodasilva I've changed the ```clear_validators!``` method so that it also removes any validate callbacks as well as clearing the ```_validator``` hash."},{"ts":1361525736000,"body":"We would also need a CHANGELOG entry."},{"ts":1361552856000,"body":"@senny I've made it more clear in the changelog entry and in the comments themselves what ```clear_validators!``` does. Yes, you're right, it's clearing all validations on a model, but I added some comments to show that it clears both the ```_validator``` hash which is updated when new Validator objects are created, and resets the ```:validate``` callbacks. "},{"ts":1361621988000,"body":"@wangjohn :+1: new comments make it much more clear whats happening."}]},{"timestamps":[{"ts":1358804145000,"body":"Any of this use cases are valid. And these helpers are working in the same way that Rails 3\r\n\r\nThank you for the pull request"},{"ts":1358804163000,"body":"Thanks, I just misunderstood the purpose of record.last in form_for."},{"ts":1358804239000,"body":"@virusman no problem. Thank you for the contribution :heart:."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1373867551000,"body":"Fixed already :grin:"},{"ts":1373867666000,"body":"oops :smiley: "}]},{"timestamps":[{"ts":1371434432000,"body":"I'm -1 on this one. I think silently ignoring the bad association will take many by surprise and will create more issues."},{"ts":1371444164000,"body":"@neerajdotname I understand your concern. Would you be supportive of a version that outputs a warning to log? "},{"ts":1371452393000,"body":"@Bertg I'm not so sure. I think in majority of the cases raising exception is the right thing. You might have a case where you do not want it. May be you can get around to that issue in some other way."},{"ts":1371456014000,"body":"@neerajdotname pointed out that not raising would create \"more issues\" and might introduces more \"surprise\", but this is not the case as the behavior would be more consistent. \r\n\r\nIf we ignore (or warn for) non existing associations there is less surprise. The fact that eager loading raises or not is greatly dependent on the result of the first query. In one case the query can select for records that meet the requested eager loaded associations and all will be fine. While in a different situation the same query raise an error. This to me is a more confusing (or surprising) behavior. By not raising the code keeps behaving the same.\r\n"},{"ts":1372069018000,"body":"+1"},{"ts":1372203052000,"body":"Right now I think that raising will be least surprising, people can typo association names and know about it right away, it's more user friendly I believe. Thanks.\r\n\r\n@rafaelfranca thoughts?"},{"ts":1372251881000,"body":"@carlosantoniodasilva it is indeed true that it's easier this way to detect typos, so it's convenience for the developer. However, one can not deny that the raising of the error depends on what the queries are returning. This can break code in production. \r\n\r\nI would like to invoke then the principal of least surprise here. The same code can and will raise (or not raise) errors depending on what is queried. The correct action to take is to send this as debugging information."},{"ts":1372255795000,"body":"I don't think this code should be raising errors depending on query results, it should rely on associations existing based on reflection, not record results I believe (that's my understanding, I didn't check the code to see the exact code path). Are you talking specifically about polymorphic relationships?\r\n\r\nCan you show an example where it could break depending on query results? Thanks."},{"ts":1372269561000,"body":"@carlosantoniodasilva Because eager loading works with polymorphic associations it is next to impossible to know beforehand if nested eager loading will work or not. Especially if you take deeply nested examples.\r\n\r\nBecause of this rails raises only once it encounters loaded models where a desired association is missing. These loaded models (which in itself could already come from a nested association) could either come from a normal association or from a polymorphic one.\r\n\r\nIf you want I can extend the tests to show a case where nested eager loading through an polymorphic association can both hit an existing and non existing association in the same query."},{"ts":1373618372000,"body":"I'm :-1: on this one. As said before I think raising is the right thing to do. Regarding your example with polymorphism I really don't think this is a good thing to do. Polymorphism means that you treat all your objects as if they \"were\" a `Story`. This means you can't make assumptions that are only true for certain subclasses, when you deal with the genreal `Story` type. Otherwise many things will eventually break."},{"ts":1373618660000,"body":"@senny I see your point. But wouldn't it be better to let those later issues raise themselves, instead of prematurely (and inconsistently) raising?"},{"ts":1373996778000,"body":"I am :-1:. This is a special case which should not become the rule. Fortunately, you can solve this issue by:\r\n\r\n1. Retrieving the subject and grouping them by class\r\n2. For each subject group, you call [`Preloader#run`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/preloader.rb#L3) with the associations that belong to that group\r\n\r\nThis way you get the preloading you need and everyone else gets a reliable error message when an association does not exist.\r\n"},{"ts":1374155559000,"body":"I'm sad to see the ticket closed; however I'm happy I'm getting an alternative solution.\r\n\r\nThx for taking the time @josevalim :+1: "}]},{"timestamps":[{"ts":1376463615000,"body":"I don't think this is necessary, the gems are already in the top-level Gemfile:\r\n\r\n```ruby\r\ngroup :doc do\r\n  gem 'sdoc'\r\n  gem 'redcarpet', '~> 2.2.2', platforms: :ruby\r\n  gem 'w3c_validators'\r\n  gem 'kindlerb'\r\nend\r\n```"},{"ts":1376465159000,"body":"@senny you are right, none of rails subprojects has an individual Gemfile, guides should be no exception, please don't accept this request and thank you for taking the time to analyze it."}]},{"timestamps":[{"ts":1361766337000,"body":"This will need a rebase."},{"ts":1361840318000,"body":"Rebased and removed extraneous comments as per @steveklabnik."},{"ts":1361906139000,"body":"Looks good. Thank you for your patch! :heart:"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1363697729000,"body":"It is, but can you please expand the commit message the same way it's there and add a changelog entry?"},{"ts":1363707777000,"body":"I've updated it. Thanks."}]},{"timestamps":[{"ts":1375297256000,"body":"Build fail unrelated to code change and is a result of a previous commit."},{"ts":1375310979000,"body":"Thanks again @gzohari"}]},{"timestamps":[{"ts":1360412666000,"body":"for same values\r\n```\r\n       user     system      total        real\r\n  47.810000   0.220000  48.030000 ( 48.127422)\r\n   1.010000   0.000000   1.010000 (  1.016548)\r\n```\r\n\r\nfor first letter different\r\n```\r\n       user     system      total        real\r\n  51.600000   0.280000  51.880000 ( 52.332904)\r\n   1.020000   0.000000   1.020000 (  1.029753)\r\n```"},{"ts":1360413692000,"body":"@skammer we cannot skip comparing hashes :) because of timing attack"},{"ts":1360413800000,"body":"I'm sorry I thought you used the code from your last gist. Disregard my comments :)"},{"ts":1360424758000,"body":"and according to my tests comparison of two integers is constant time.."},{"ts":1360429250000,"body":"@homakov please don't be offended if I don't take your tests as definitive proof that integer comparisons are constant time but lets assume for the moment that the timing difference is well within the [20 microsecond resolution][1] that remote timing attacks are susceptible to.\r\n\r\nGiven that it still doesn't make any difference as all you've done is split it into two timing attacks - the first one to get the correct hash value and then the second one to guess the HMAC. You'll be able to detect when you have the right hash value because the `&&` won't be short-circuted and the time taken will likely jump above the threshold as we are now comparing the strings. The second timing attack will be easier because you can eliminate all the HMACs that don't have the right hash value.\r\n\r\n[1]: http://www.cs.rice.edu/~dwallach/pub/crosby-timing2009.pdf"},{"ts":1360429976000,"body":"@pixeltrix \r\nintegers are compared in different way, i guess.\r\neven if my tests are wrong (maybe it's the case), a.hash-b.hash==0 is clearly constant time. Bruteforcing that code makes no sense because hash range is huge for example 2936743840852223980."},{"ts":1360431582000,"body":"@homakov hash size on Ruby 1.8 is a lot smaller (2^32), plus relying on something being too large to brute force hasn't worked out well in the past. Speed isn't a problem here - it's not a method that's repeatedly called in a loop so I'd rather err on the side of caution."},{"ts":1360432299000,"body":" 4294967296 yes, it's worse. thanks"},{"ts":1360432642000,"body":"Ok, I think I understand this is related to recent discussions about timing attacks based on early-terminating comparisons. But this code is really awful for performance.\r\n\r\nWhy not just compare the bytes directly? I don't understand the purpose of unpacking here. Here's a constant-time compare that's not as bad for perf as the old one:\r\n\r\n```ruby\r\ndef secure_compare3(a, b)\r\n  return false unless a.bytesize == b.bytesize\r\n \r\n  i = 0\r\n  max = a.bytesize\r\n  ok = true\r\n  while i < max\r\n    ok &&= a.getbyte(i) == b.getbyte(i)\r\n    i+=1\r\n  end\r\n  ok\r\nend\r\n```\r\n\r\nMy numbers:\r\n\r\n```\r\next-jruby-local ~/projects/jruby $ ruby-1.9.3 -rbenchmark secure_compare.rb \r\nRehearsal ------------------------------------\r\n  13.520000   0.020000  13.540000 ( 13.534633)\r\n   8.300000   0.010000   8.310000 (  8.321602)\r\n-------------------------- total: 21.850000sec\r\n\r\n       user     system      total        real\r\n  13.480000   0.020000  13.500000 ( 13.498988)\r\n   8.030000   0.000000   8.030000 (  8.037417)\r\n\r\next-jruby-local ~/projects/jruby $ (pickjdk 5 ; jruby -rbenchmark secure_compare.rb)\r\nNew JDK: jdk1.8.0_hotspot-comp\r\nRehearsal ------------------------------------\r\n   5.380000   0.100000   5.480000 (  4.263000)\r\n   1.630000   0.010000   1.640000 (  1.430000)\r\n--------------------------- total: 7.120000sec\r\n\r\n       user     system      total        real\r\n   3.340000   0.010000   3.350000 (  3.263000)\r\n   1.190000   0.000000   1.190000 (  1.188000)\r\n```"},{"ts":1360432735000,"body":"FYI, the above numbers were using @homakov's benchmark with 1M iterations instead of 3M."},{"ts":1360433522000,"body":"I also experimented with a native impl. I'm not opposed to adding this, or helping to get a native ext written in C and Java versions. The JRuby version is pretty simple.\r\n\r\nJRuby impl:\r\n\r\n```java\r\n    @JRubyMethod\r\n    public IRubyObject secure_compare(ThreadContext context, IRubyObject other) {\r\n        Ruby runtime = context.runtime;\r\n        \r\n        if (!(other instanceof RubyString)) return runtime.getFalse();\r\n        \r\n        ByteList a = value;\r\n        ByteList b = ((RubyString)other).value;\r\n        \r\n        if (a.getRealSize() != b.getRealSize()) return runtime.getFalse();\r\n        \r\n        boolean ok = true;\r\n        for (int i = 0; i < a.getRealSize(); i++) {\r\n            ok = ok && (a.get(i) == b.get(i));\r\n        }\r\n        \r\n        return runtime.newBoolean(ok);\r\n    }\r\n```\r\n\r\nAnd numbers:\r\n\r\n```\r\next-jruby-local ~/projects/jruby $ (pickjdk 5 ; jruby -rbenchmark secure_compare.rb)\r\nNew JDK: jdk1.8.0_hotspot-comp\r\nRehearsal ------------------------------------\r\n   5.080000   0.100000   5.180000 (  4.026000)\r\n   1.620000   0.010000   1.630000 (  1.418000)\r\n   0.290000   0.000000   0.290000 (  0.180000)\r\n--------------------------- total: 7.100000sec\r\n\r\n       user     system      total        real\r\n   3.380000   0.010000   3.390000 (  3.304000)\r\n   1.220000   0.010000   1.230000 (  1.225000)\r\n   0.120000   0.000000   0.120000 (  0.129000)\r\n```"},{"ts":1360433628000,"body":"yes, cool. a bit more rubyish:\r\n```\r\ndef secure_compare(a, b)\r\n  return false unless a.bytesize == b.bytesize\r\n  ok = true\r\n  a.bytesize.times{ |i| \r\n    ok &&= a.getbyte(i) == b.getbyte(i)\r\n  }\r\n  ok\r\nend\r\n```"},{"ts":1360433709000,"body":"The times version is maybe more rubyish, but in most implementations the block form is slower than a loop. Perhaps not by a lot."},{"ts":1360433884000,"body":"ok. is comparing bytes really faster than characters  a[i]==b[i]"},{"ts":1360433959000,"body":"Yes...in 1.9, str[i] creates a new String object every time. Comparing bytes is at worst the cost of a byte-ranged Fixnum, which should create no object in MRI, Rubinius, and JRuby."},{"ts":1360434362000,"body":"ah interesting! so your implementation looks great and faster than current"},{"ts":1360436215000,"body":"@headius your code isn't constant time:\r\n\r\n``` ruby\r\nrequire 'benchmark'\r\n\r\ndef secure_compare(a, b)\r\n  return false unless a.bytesize == b.bytesize\r\n\r\n  i = 0\r\n  max = a.bytesize\r\n  ok = true\r\n  while i < max\r\n    ok &&= a.getbyte(i) == b.getbyte(i)\r\n    i+=1\r\n  end\r\n  ok\r\nend\r\n\r\nval = '1f9a12d8cacb4db86e75148b442c96150a5211a9'\r\nval2 ='2f9a12d8cacb4db86e75148b442c96150a5211a9'\r\n\r\nn = 100_000\r\nBenchmark.bm { |x|\r\n  x.report {\r\n     n.times {\r\n       secure_compare(val, val)\r\n    }\r\n  }\r\n  x.report {\r\n    n.times {\r\n       secure_compare(val, val2)\r\n    }\r\n  }\r\n}\r\n\r\n#       user     system      total        real\r\n#   1.280000   0.000000   1.280000 (  1.274457)\r\n#   0.370000   0.000000   0.370000 (  0.370521)\r\n```"},{"ts":1360437013000,"body":"@envygeeks yes, sorry I realised that after re-reading your comment. Interestingly `==` for enumerators appears to be constant time, however it's not for arrays. I'm not sure why that is and it's something I'd rather not rely on since it may be optimised at some point."},{"ts":1360438560000,"body":"@headius your method above and JRuby implementation both seem vulnerable seems they don't actually compare after first wrong result:\r\n```\r\ndef secure_compare3(a, b)\r\n  return false unless a.bytesize == b.bytesize\r\n\r\n  i = 0\r\n  max = a.bytesize\r\n  ok = true\r\n  while i < max\r\n    ok &&= begin\r\n      puts 'compare ',i\r\n      a.getbyte(i) == b.getbyte(i)\r\n    end\r\n    i+=1\r\n  end\r\n  ok\r\nend\r\n\r\n secure_compare3('abcdef','abbdef')\r\ncompare \r\n0\r\ncompare \r\n1\r\ncompare \r\n2\r\n => false \r\n```"},{"ts":1360438725000,"body":"@pixeltrix: The lack of constant-time in my impl is due to two things:\r\n\r\nWith only a single run, you're seeing JIT performance skew results. Here's the same benchmark you posted but running ten iterations:\r\n\r\n```\r\n       user     system      total        real\r\n   0.810000   0.000000   0.810000 (  0.494000)\r\n   0.330000   0.000000   0.330000 (  0.151000)\r\n       user     system      total        real\r\n   0.110000   0.010000   0.120000 (  0.114000)\r\n   0.070000   0.000000   0.070000 (  0.070000)\r\n       user     system      total        real\r\n   0.100000   0.010000   0.110000 (  0.106000)\r\n   0.060000   0.000000   0.060000 (  0.069000)\r\n       user     system      total        real\r\n   0.150000   0.010000   0.160000 (  0.115000)\r\n   0.070000   0.000000   0.070000 (  0.066000)\r\n       user     system      total        real\r\n   0.100000   0.010000   0.110000 (  0.105000)\r\n   0.060000   0.000000   0.060000 (  0.066000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.106000)\r\n   0.060000   0.010000   0.070000 (  0.067000)\r\n       user     system      total        real\r\n   0.110000   0.000000   0.110000 (  0.104000)\r\n   0.060000   0.000000   0.060000 (  0.064000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.103000)\r\n   0.060000   0.000000   0.060000 (  0.064000)\r\n       user     system      total        real\r\n   0.150000   0.000000   0.150000 (  0.114000)\r\n   0.060000   0.000000   0.060000 (  0.063000)\r\n       user     system      total        real\r\n   0.110000   0.000000   0.110000 (  0.104000)\r\n   0.060000   0.000000   0.060000 (  0.063000)\r\n```\r\n\r\nNot nearly as bad as your example, but yes, it's definitely not constant time. The problem is the &&=, since it won't evaluated the RHS after ok is false. A version that always evaluates it is nearly constant-time:\r\n\r\n```\r\ndef secure_compare(a, b)\r\n  return false unless a.bytesize == b.bytesize\r\n\r\n  i = 0\r\n  max = a.bytesize\r\n  ok = true\r\n  while i < max\r\n    ok = (a.getbyte(i) == b.getbyte(i)) && ok\r\n    i+=1\r\n  end\r\n  ok\r\nend\r\n\r\n       user     system      total        real\r\n   0.780000   0.010000   0.790000 (  0.481000)\r\n   0.380000   0.020000   0.400000 (  0.203000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.102000)\r\n   0.120000   0.000000   0.120000 (  0.118000)\r\n       user     system      total        real\r\n   0.100000   0.010000   0.110000 (  0.102000)\r\n   0.110000   0.000000   0.110000 (  0.117000)\r\n       user     system      total        real\r\n   0.140000   0.000000   0.140000 (  0.110000)\r\n   0.120000   0.000000   0.120000 (  0.114000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.098000)\r\n   0.110000   0.000000   0.110000 (  0.114000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.099000)\r\n   0.120000   0.010000   0.130000 (  0.115000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.099000)\r\n   0.110000   0.000000   0.110000 (  0.113000)\r\n       user     system      total        real\r\n   0.100000   0.000000   0.100000 (  0.100000)\r\n   0.110000   0.000000   0.110000 (  0.113000)\r\n       user     system      total        real\r\n   0.140000   0.000000   0.140000 (  0.108000)\r\n   0.110000   0.000000   0.110000 (  0.114000)\r\n       user     system      total        real\r\n   0.100000   0.010000   0.110000 (  0.101000)\r\n   0.110000   0.000000   0.110000 (  0.115000)\r\n```\r\n\r\nThis may actually be constant time and the difference may only be an artifact of how it's being optimized. But I tried an additional version that uses ^ similar to someone else's impl. The operative change here is eliminating the unpacking and object creation, mostly:\r\n\r\n```\r\ndef secure_compare(a, b)\r\n  return false unless a.bytesize == b.bytesize\r\n\r\n  i = 0\r\n  max = a.bytesize\r\n  ok = 0\r\n  while i < max\r\n    ok += a.getbyte(i) ^ b.getbyte(i)\r\n    i+=1\r\n  end\r\n  ok == 0\r\nend\r\n\r\n       user     system      total        real\r\n   0.950000   0.010000   0.960000 (  0.583000)\r\n   0.270000   0.000000   0.270000 (  0.221000)\r\n       user     system      total        real\r\n   0.180000   0.010000   0.190000 (  0.177000)\r\n   0.180000   0.000000   0.180000 (  0.177000)\r\n       user     system      total        real\r\n   0.180000   0.000000   0.180000 (  0.175000)\r\n   0.170000   0.000000   0.170000 (  0.175000)\r\n       user     system      total        real\r\n   0.220000   0.010000   0.230000 (  0.186000)\r\n   0.180000   0.000000   0.180000 (  0.175000)\r\n       user     system      total        real\r\n   0.170000   0.000000   0.170000 (  0.174000)\r\n   0.180000   0.010000   0.190000 (  0.177000)\r\n       user     system      total        real\r\n   0.170000   0.000000   0.170000 (  0.175000)\r\n   0.170000   0.000000   0.170000 (  0.174000)\r\n       user     system      total        real\r\n   0.180000   0.000000   0.180000 (  0.175000)\r\n   0.170000   0.000000   0.170000 (  0.174000)\r\n       user     system      total        real\r\n   0.180000   0.000000   0.180000 (  0.173000)\r\n   0.170000   0.000000   0.170000 (  0.175000)\r\n       user     system      total        real\r\n   0.210000   0.010000   0.220000 (  0.183000)\r\n   0.170000   0.000000   0.170000 (  0.172000)\r\n       user     system      total        real\r\n   0.170000   0.000000   0.170000 (  0.172000)\r\n   0.170000   0.010000   0.180000 (  0.171000)\r\n```\r\n\r\nI'm sure others can iterate on this and improve it, but the primary point is that creating intermediate arrays and strings is totally unnecessary to have a constant-time comparison."},{"ts":1360439234000,"body":"@headius I was running on MRI 1.9.3 - no JIT involved. You see an improvement because the JIT has made the whole method faster so the absolute difference is smaller but the relative difference is the same."},{"ts":1360439305000,"body":"@pixeltrix i pointed out above, looks like it doesn't calculate values after first wrong result"},{"ts":1360439559000,"body":"I still don't understand why people insist on beating up loops :bomb: does:\r\n\r\n```ruby\r\nrequire \"benchmark\"\r\n\r\ndef secure_compare1(a, b)\r\n  return false unless a.bytesize == b.bytesize\r\n\r\n  i = 0\r\n  max = a.bytesize\r\n  ok = true\r\n  while i < max\r\n    ok = (a.getbyte(i) == b.getbyte(i)) && ok\r\n    i+=1\r\n  end\r\n  ok\r\nend\r\n\r\ndef secure_compare2(a, b)\r\n  a.bytesize == b.bytesize && a.bytes == b.bytes\r\nend\r\n\r\nval1 = '1f9a12d8cacb4db86e75148b442c96150a5211a9'\r\nval2 = '2f9a12d8cacb4db86e75148b442c96150a5211a9'\r\n\r\nn = 3_000_000\r\nBenchmark.bm { |x|\r\n  x.report(\"@headius secure_random1 same val\") {\r\n     n.times {\r\n       secure_compare1(val1, val1)\r\n    }\r\n  }\r\n\r\n  x.report(\"@headius secure_random1 diff val\") {\r\n     n.times {\r\n       secure_compare1(val1, val2)\r\n    }\r\n  }\r\n\r\n  x.report(\"@envygeeks secure_random2 same val\") {\r\n    n.times {\r\n       secure_compare2(val1, val1)\r\n    }\r\n  }\r\n\r\n  x.report(\"@envygeeks secure_random2 diff val\") {\r\n    n.times {\r\n       secure_compare2(val2, val2)\r\n    }\r\n  }\r\n}\r\n\r\n# @headius secure_random1 same val 21.770000   0.010000  21.780000 ( 22.049549)\r\n# @headius secure_random1 diff val 21.580000   0.020000  21.600000 ( 21.876470)\r\n# @envygeeks secure_random2 same val 13.540000   0.000000  13.540000 ( 13.889511)\r\n# @envygeeks secure_random2 diff val 13.410000   0.020000  13.430000 ( 13.597267)\r\n```\r\n\r\nnot work?"},{"ts":1360439564000,"body":"@pixeltrix @homakov Yes, the only issue was &&= then. With it reversed, the only variability in the boolean version is that non-matching bytes will be *slightly* faster because they won't evaluate the \"ok\" part anymore.\r\n\r\nIn any case, here's four versions that are nearly constant...the final version should be constant all the time, assuming ^ is constant time regardless of inputs (and if it isn't, the original version is broken too).\r\n\r\n```ruby\r\ndef secure_compare(a, b)\r\n  return false unless a.bytesize == b.bytesize\r\n \r\n  l = a.unpack \"C#{a.bytesize}\"\r\n \r\n  res = 0\r\n  b.each_byte { |byte| res |= byte ^ l.shift }\r\n  res == 0\r\nend\r\n \r\ndef secure_compare2(a, b)\r\n  a.hash == b.hash && a == b\r\nend\r\n\r\ndef secure_compare3(a, b)\r\n  return false unless a.bytesize == b.bytesize\r\n\r\n  i = 0\r\n  max = a.bytesize\r\n  ok = true\r\n  while i < max\r\n    ok = (a.getbyte(i) == b.getbyte(i)) && ok\r\n    i+=1\r\n  end\r\n  ok\r\nend\r\n\r\ndef secure_compare4(a, b)\r\n  return false unless a.bytesize == b.bytesize\r\n\r\n  i = 0\r\n  max = a.bytesize\r\n  ok = 0\r\n  while i < max\r\n    ok |= a.getbyte(i) ^ b.getbyte(i)\r\n    i+=1\r\n  end\r\n  ok == 0\r\nend\r\n \r\nval = '1f9a12d8cacb4db86e75148b442c96150a5211a9'\r\nval2 ='2f9a12d8cacb4db86e75148b442c96150a5211a9'\r\n \r\nn = 3_000_000\r\n10.times {\r\n  Benchmark.bm { |x|\r\n    x.report(\"v1, match\") { \r\n      n.times { \r\n        secure_compare(val, val)\r\n      }\r\n    }\r\n    x.report(\"v1, miss\") { \r\n      n.times { \r\n         secure_compare(val2, val)\r\n      }\r\n    }\r\n    x.report(\"v2, match\") { \r\n      n.times { \r\n        secure_compare2(val, val)\r\n      }\r\n    }\r\n    x.report(\"v2, miss\") { \r\n      n.times { \r\n         secure_compare2(val2, val)\r\n      }\r\n    }\r\n    x.report(\"v3, match\") { \r\n      n.times { \r\n        secure_compare3(val, val)\r\n      }\r\n    }\r\n    x.report(\"v3, miss\") { \r\n      n.times { \r\n         secure_compare3(val2, val)\r\n      }\r\n    }\r\n    x.report(\"v4, match\") { \r\n      n.times { \r\n        secure_compare4(val, val)\r\n      }\r\n    }\r\n    x.report(\"v4, miss\") { \r\n      n.times { \r\n         secure_compare4(val2, val)\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nNumbers on JRuby (last iteration only):\r\n\r\n```\r\n                 user     system      total        real\r\nv1, match   10.130000   0.050000  10.180000 (  9.892000)\r\nv1, miss    10.360000   0.040000  10.400000 ( 10.209000)\r\nv2, match    0.870000   0.000000   0.870000 (  0.852000)\r\nv2, miss     0.870000   0.010000   0.880000 (  0.853000)\r\nv3, match    3.440000   0.010000   3.450000 (  3.436000)\r\nv3, miss     3.460000   0.010000   3.470000 (  3.460000)\r\nv4, match    4.810000   0.010000   4.820000 (  4.805000)\r\nv4, miss     4.800000   0.010000   4.810000 (  4.793000)\r\n```\r\n\r\n@pixeltrix I hope you're not trying to argue that the original version is the only good one."},{"ts":1360439813000,"body":"@envygeeks .bytes here will I believe return an Enumerator, which may or may not have constant time for ==. If it's an array, then it won't be constant time since Array#== does bail out. In any case I don't think we can rely on either of them being constant time because they could change at any time. Plus...creating an Enumerator is additional object overhead we don't need.\r\n\r\nI think the fourth version I posted, with |= and ^, should be constant time for all inputs and should not create any objects in any mainstream Ruby implementation."},{"ts":1360440136000,"body":"problem is here:\r\n`ok = (a.getbyte(i) == b.getbyte(i)) && ok`\r\ni suspect if ok is False, ruby still will not execute () block, because it can. this is how logic works - you can change parts in AND conditions if you want.\r\nso ideal version would be:\r\n```\r\ncur=a.getbyte(i) == b.getbyte(i)\r\nok &&= cur\r\n```\r\n"},{"ts":1360440213000,"body":"@homakov No, Ruby's evaluation order rules require that the () part be evaluated regardless of whether \"ok\" is true or not. In any case, the masking version isn't much slower, and it has no issues I know of."},{"ts":1360440328000,"body":"@homakov Also, your version could still have some timing difference, since the implementation of &&= will eventually see \"ok\" become false and not evaluated \"cur\" access or \"ok && cur\"."},{"ts":1360440334000,"body":"@headius glad to hear that. `ok = (a.getbyte(i) == b.getbyte(i)) && ok` is ideal then. I suspect bitwise OR operation is slower than ==, but you know better anyway :)"},{"ts":1360440392000,"body":"ah, functional tricks are evil-ish "}]},{"timestamps":[{"ts":1357058102000,"body":"@jonleighton @rafaelfranca is it known and expected that HABTM associations and callbacks are order dependent? If this is the expected behavior, feel free to close. Otherwise we should look for a possible solution."},{"ts":1357899935000,"body":"Definitely looks like unexpected behaviour to me."},{"ts":1359568968000,"body":"No clue if I can squash this or not, but I'm starting to investigate.  I'll update in here with whatever I find, at the least."},{"ts":1363130283000,"body":"Was any progress made on this?"},{"ts":1363130797000,"body":"I'll try to spend a little more time on it tonight, but no promises if I'll get anywhere.  I was just trying to figure it out when I had to give up on it last time."},{"ts":1363153061000,"body":"Status update: spent hours learning all the surrounding code, figured out that @senny is right on the money.  No idea for a fix yet, but I'll give that a stab tomorrow."},{"ts":1363161994000,"body":"I was thinking about this issue lately and it could be a tricky one to solve. Let me know if you find an angle."},{"ts":1363164611000,"body":"@senny the problem is that `AutosaveAssociation` is using the public callback API to implement its functionality which means that it's subject to the definition order. There used to be a lot of these problems but most of them went away when @jonleighton refactored the association code.\r\n\r\nThe `belongs_to :foo, :touch => true` code is also using the callbacks api so that may be definition order dependent as well."},{"ts":1363199975000,"body":"I basically came to the same conclusion as @pixeltrix.  I think the best solution is to have separate callback chains for these purposes.  Here's why:\r\n\r\n1. If we try to make <code>save_collection_association</code> smart enough to handle this situation, it'll be really ugly.  The hack is certainly possible, but it's inexcusably ugly.\r\n2. If we try to force the right ordering by some sort of special case, that doesn't help at all in solving other instances where there might be problems of this sort.\r\n\r\nThe downsides I can see:\r\n\r\n1. By default, all callback chains are publicly exposed.  If people start using the callback chains we add in their code, these sorts of problems could happen again.  Then it turns into a sort of arms race for which callback chain is REALLY first or last.\r\n2. Aside from the public use scenario, in general proliferation of callback chains inside the same callback management code seems inelegant to me.\r\n\r\nOne final alternative that presents itself to me is to have an entirely separate, not publicly exposed, set of callback chains.  Of course, this could be enforced more by code (of course, anyone can actually access them if they really want) or more by convention (documented as \"don't touch unless you really know what you're doing\").  A \"separate set\" is flexible concept, of course, so it could mean separate objects managing it, or a conceptually distinct set, managed by the same code, but distinct by convention.\r\n\r\nI'm working on the separate by convention approach right now to see how the code turns out.  If everyone is radically opposed to that, I'll stop and move on to something else."},{"ts":1373976262000,"body":"I'm closing this one as it is just a test-case without a fix. It will remain linked in the issue."}]},{"timestamps":[{"ts":1357918082000,"body":"Not sure if it matters much (probably not), but `remove_possible_method` actually uses `undef_method`."},{"ts":1357918170000,"body":"In this case doesn't have difference."}]},{"timestamps":[{"ts":1357142143000,"body":"I'm not sure this is the best decision, since that would mean we need to add RedCarpet as a dependency for Rails, or else you'd not be able to generate that file.\r\n\r\nOn the side note, if we decide to switch to `.md`, I'd love to see those lines to be truncated at 80 or 100 characters like it used to be.\r\n\r\n/cc @fxn "},{"ts":1357142369000,"body":"Well the file has already been created so it won't need to be generated?"},{"ts":1357142397000,"body":"This would normally be merged, but as of today the README of the project is also the README of the API and RDoc < 4 does not support Markdown."},{"ts":1357570990000,"body":"I support this.\r\n\r\n@fxn I do not see any connection between README of the generated project and README of any of Rails components except for [those lines in railties Rakefile](https://github.com/rails/rails/blob/master/railties/Rakefile#L37-42). However, as far as I can see, this rake task wasn't run in a while. README of railties and README of generated project actually differ as of now.\r\n\r\nMoreover, the \"README file created within your application\" link at http://edgeapi.rubyonrails.org points to the railties README.\r\n\r\nI don't think the README of generated project should be a guide to Rails. It should be a short Markdown file describing requirements of the project (ruby version, database, required env vars), how to bundle it, how to run tests, and how to run server. Current \"Welcome to Rails\" README may just be moved into rails' or railties' README or a GETTING_STARTED.rdoc and get linked by my API docs page.\r\n\r\n(Looks like we also should get rid of that unused rake task.)"},{"ts":1357576528000,"body":"On a second reading I realize I totally misunderstood this PR, thought it was about the project root README. Sorry about that.\r\n\r\nWe are going to change the generated README for applications and it is going to be in Markdown."},{"ts":1357577815000,"body":"I agree with what @goshakkk says. To understand the basics of Rails, you need to learn using other ways, such as Railscasts or the Rails Tutorial my Micharl Hartl.\r\nI've created a template which I use which removes the default readme and just creates a basic markdown readme with the app name and the version of Rails which is all is needed IMHO."},{"ts":1357578040000,"body":"Don't worry, I am going to revise all this (the Rails version needs no documentation BTW since it goes in the Gemfile)."},{"ts":1357578437000,"body":"@deanperry I do not think it is necessary to have Rails version in README.\r\n\r\nWhat about [this](https://gist.github.com/4476638)?"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1367887542000,"body":"Not sure we should change. see 70af2bde29996c7cb66bfe0e8d2092572deeea78"},{"ts":1367887761000,"body":"Ah, sounds reasonable."},{"ts":1367887964000,"body":"Ok. Thank you for the pull request :heart: "}]},{"timestamps":[{"ts":1370686496000,"body":"@wangjohn regarding false vs nil, there's a difference between not having an `:inverse_of` option, and having a nil option. i.e. you could do `options.include?(:inverse_of) && options[:inverse_of].nil?`. Anyway, I don't really mind it being `false` actually, so let's leave it."},{"ts":1370710935000,"body":"@jonleighton Ahh, thanks for the pointer, that does make sense.\r\n\r\n@robin850 Thank you for the comment, I've fixed the CHANGELOG entry to use backticks instead."}]},{"timestamps":[{"ts":1371577123000,"body":"@neerajdotname do you know why `squeeze(' ')` was introduced in the first place? Any information in the git history?"},{"ts":1371577968000,"body":"@senny I was able to trace upto this point \r\n\r\nhttps://github.com/rails/rails/commit/6788db824ab732b13493a9d702dd8fb89fa153c8 . Not sure how to go beyond it to see where it was actually added."},{"ts":1371578992000,"body":"I tried to figure out where it was introduced but as you mentioned without luck. I don't see a reason why we need to squeeze it and as there was no test-case to verify the behavior I think we should put this one in.\r\n\r\n/cc @rafaelfranca @carlosantoniodasilva "},{"ts":1371632693000,"body":"@neerajdotname this does no longer apply cleanly. Can you push a rebased version?"},{"ts":1371643751000,"body":"@senny rebased."},{"ts":1371644091000,"body":"thanks :heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1371209272000,"body":"/cc @pixeltrix "},{"ts":1371227721000,"body":"@pixeltrix correct the English text."},{"ts":1371448375000,"body":"thanks :yellow_heart: "}]},{"timestamps":[{"ts":1360336148000,"body":"Sorry but I don't think we'll be backporting this change to other 3.x branches. Thanks!"}]},{"timestamps":[{"ts":1360843331000,"body":"Thank you :)"}]},{"timestamps":[{"ts":1370616158000,"body":"I looked at #10878 and still doesn't see a rationale behind this. Would you mind telling us why this is useful to add?"},{"ts":1370616837000,"body":"@sikachu sure\r\n\r\nWhen one need to make a query relative to middle of the day (for example to show weather data, I faced this situation today) this method might be useful. Also there is `Time#midnight` method, but no `Time#midday`.\r\n\r\nFor sure initializer is a good place for keeping extensions like this, it is not a problem."},{"ts":1371190868000,"body":"/cc @pixeltrix "},{"ts":1371207511000,"body":"@makaroni4 needs adding to `DateTime` as well"},{"ts":1371207628000,"body":"Thinking about it, adding `morning?` and `afternoon?` would be useful too."},{"ts":1371208227000,"body":"@pixeltrix thx, I will add `midday` to DateTime :+1: \r\n\r\n`midday` is the opposite of `midnight`, which difened for `Time` and `DateTime` so it is one of the reasons for me to add this method.\r\n\r\nThere is no opposite method for `morning` and `afternoon` (I think it should be smth like `midnight`) so I think it is a perfect scenario when initializer should be used."},{"ts":1371209760000,"body":"There is `past?`, `future?` and `today?` though which is why I suggested adding `morning?` and `afternoon?`. Also missing are `tomorrow?` and `yesterday?`."},{"ts":1371210031000,"body":"Both hands are up for the `tomorrow?` and `yesterday?`"},{"ts":1371211529000,"body":"This might be usefull"},{"ts":1371581080000,"body":"Interesting, could potentially find this useful. @makaroni4 are you going to add this to `DateTime` ? "},{"ts":1371581221000,"body":"Hi, @schneems!\r\n\r\nFor sure, give me couple of minutes."},{"ts":1371582738000,"body":"@pixeltrix @schneems done.\r\n\r\nI added methods for both `Date` and `DateTime`.\r\n\r\nI see duplications of methods like [beginning_of_day](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/time/calculations.rb#L173), [end_of_day](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/date_time/calculations.rb#L107) in `Time` and `DateTime`. Should we move them to `DateAndDateTime` module?"},{"ts":1374739233000,"body":"@steveklabnik could you please take a look? This one should be either merged or closed :smiley: "},{"ts":1374766548000,"body":"I like to let @pixeltrix merge stuff related to time."},{"ts":1374771253000,"body":"@pixeltrix aka Kronos, god of the time :grin:"},{"ts":1374788813000,"body":"@makaroni4 I hadn't merged it yet because the build failed and I thought you might be adding the other methods that had been suggested. No matter - can you check out why the tests are failing and update the PR. There is a significant amount of duplication between `DateTime` and `Time` calculations but we'll leave that for another PR."},{"ts":1374791298000,"body":"@pixeltrix I see that it was activerecord test failed: `Failed components: activerecord:postgresql:isolated `.\r\n\r\nCould you please restart the build (I probably have no access, because button is locked on Travis)? I have no such an error on my local machine."},{"ts":1374908990000,"body":"@pixeltrix the build is green :smile: :+1: You rebuilt it or how did it happen?\r\n\r\nI will work on DRYing date and time modules in the next PR (as long as `tomorrow?` and `yesterday?` methods)."},{"ts":1375035548000,"body":"@makaroni4 can you squash the commits - once you've done that I'll merge :+1: \r\n"},{"ts":1375112759000,"body":"@pixeltrix the build is failed again due to bundler error in AR tests: <https://travis-ci.org/rails/rails/jobs/9582396>"},{"ts":1375116745000,"body":"@makaroni4 rebuilding that job now - we're nearly there :smile:"},{"ts":1375117625000,"body":":smile:"},{"ts":1375118760000,"body":"@makaroni4 thanks for you contribution and your patience :heart:"},{"ts":1375119163000,"body":"Yay! @pixeltrix thank you very much :smiley:  :heart: "},{"ts":1378717216000,"body":"BTW, what about changelog?"},{"ts":1379021697000,"body":"Huge :+1: for CHANGELOG. Added"},{"ts":1379030319000,"body":"@rafaelfranca sorry, I am late (back to school :smiley: )\r\n\r\nThanks a lot for the CHANGELOG :+1: "}]},{"timestamps":[{"ts":1357214968000,"body":"Thanks."},{"ts":1357235863000,"body":":+1:"}]},{"timestamps":[]},{"timestamps":[{"ts":1362083137000,"body":"Thank you for the pull request.\r\n\r\nThe refactoring in `normalize_message` is wrong. If it is called with `nil` as second argument the default value will not be applied.\r\n\r\nAlso the another changes only make the method harder to read."}]},{"timestamps":[]},{"timestamps":[{"ts":1363335904000,"body":"/cc @pixeltrix "},{"ts":1363338395000,"body":"Looks like we also need a `to_sym` [here][1] so that the following works:\r\n\r\n``` rb\r\nconcern 'taggable' do |options|\r\n  resources 'tags', options\r\nend\r\n```\r\n\r\n[1]: https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/routing/mapper.rb#L1714"},{"ts":1363388271000,"body":"@pixeltrix I've gone ahead and added an explicit test case (makes a lot of sense). I've also updated the PR to no longer use the `:picture` resource to test the string array, and instead I've added a new `:article` resource. I've updated the concern method as you suggested, and tweaked the taggable concern to match your example.\r\n\r\nThanks for looking at this guys!"},{"ts":1365808430000,"body":"I'll resubmit with suggested changes."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1361923685000,"body":"Thanks. :)"},{"ts":1361923713000,"body":"Thanks! :hand: "},{"ts":1361923754000,"body":"These warnings are :shit:.\r\n\r\n@tenderlove do you know the reason for them?"}]},{"timestamps":[{"ts":1368040301000,"body":"@neerajdotname The change itself looks fine, but the commit message should describe its purpose.\r\n\r\nCould you update the commit message to reflect its intent?"},{"ts":1368041162000,"body":"@jeremy https://github.com/neerajdotname/rails/commit/fdba949b47154f43aa8d0cce5177a75080f47836 .\r\n\r\n@rafaelfranca blank line has been removed. "}]},{"timestamps":[{"ts":1373879239000,"body":"@rajcybage please go through our [contribution guide](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html). It states:\r\n\r\n> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted.\r\n\r\nPlease don't submit any more purely cosmetic pull requests."},{"ts":1373879434000,"body":"Hi sunny it is not failed travis"},{"ts":1373879504000,"body":"I didn't close because Travis failed. I closed because we do not merge purely cosmetic changes:\r\n\r\n> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted.\r\n"}]},{"timestamps":[{"ts":1366617079000,"body":"@rafaelfranca @carlosantoniodasilva can you take a look?"}]},{"timestamps":[{"ts":1357453431000,"body":"/cc @fxn @vijaydev"},{"ts":1357485334000,"body":"Could you explain the issue a little more please?"},{"ts":1357485637000,"body":"Yes, sure. For now, images with width larger than width of content block would render in their actual size so image takes more in width than the content. It is not only bad-looking on desktop, it also leads to glitches on mobile:\r\n\r\n![](http://cl.ly/image/391A410e0S2N/download)"},{"ts":1357488893000,"body":"Thanks!"}]},{"timestamps":[{"ts":1358241338000,"body":"+1, especially considering that Googling the sha1 yields a single result."},{"ts":1358241600000,"body":":+1:"},{"ts":1358508638000,"body":"+1 for 2.3.16 (also in the light of 28cfd79e31eeb5923c51ea6c8410d98fb48efebf)"},{"ts":1358701029000,"body":"Thanks @cjohansen, I've merged the fix commit in 7763f39a7f7e70. I can't merge your other commit since a 2.3.16 isn't planned for release yet."},{"ts":1358766656000,"body":"@guilleiguaran \"yet\" -  does that mean there will be a 2.3.16? This is sorta critical, I can't see why you wouldn't push this immediately?"},{"ts":1358781540000,"body":"2.3.15 was released as an exception to make it easier to address a significant security vulnerability. We don't anticipate or plan on any future 2.3.x releases. Your best bet is to bundle the 2-3-stable branch."},{"ts":1358783393000,"body":"I don't understand this decision. This other vulnerability is bad as well, and I did this pull request so the only thing you need to do is `gem push`. It would've taken less time than closing this PR and responding. Lots of people are stuck on 2.x I don't see why they can't receive upgrades when the community itself is doing the actual work..."},{"ts":1358784128000,"body":"cjohansen has a very good point here. Especially as it is major work to \"bundle\" the 2-3-staging branch (http://robanderson123.wordpress.com/2013/01/05/applying-backported-security-patches-to-rails-2-3/)"},{"ts":1358789096000,"body":"Please reconsider this decision. This PR will make some interesting headlines once the first 2.3 app in production is hit by this vulnerability."},{"ts":1358842701000,"body":"Looks like this post: https://groups.google.com/d/topic/rubyonrails-security/G4TTUDDYbNA/discussion on the rubyonrails-security mailing list is somehow related to this thread."},{"ts":1358870651000,"body":"I'm guessing this particular security issue falls under the \"Security issues\" classification and not under \"Severe security issues\" listed in @NZKoz's email. I would like to have confirmation of this, but I think the fact that it hasn't been released is enough.\r\n\r\nFor those of us with Rails 2.3 apps in production what is the best way to keep tracking the 2-3-stable branch? \r\n\r\nI modified my Gemfile:\r\n\r\n```ruby\r\ngem 'rails', :git => 'git://github.com/rails/rails.git', :branch => '2-3-stable'\r\n```\r\n\r\nWhen bundling I receive this error:\r\n\r\n```\r\nCould not find gem 'rails (>= 0) ruby' in git://github.com/rails/rails.git (at 2-3-stable).\r\nSource does not contain any versions of 'rails (>= 0) ruby'\r\n```\r\n\r\nwhich I assume is happening because there is no rails.gemspec present in the branch."},{"ts":1358873471000,"body":"@mguterl If you [trust me](https://github.com/johndouthat/rails/compare/rails:2-3-stable...2-3-stable), you can do this\r\n````ruby\r\ngit 'git://github.com/johndouthat/rails.git', :branch => '2-3-stable' do\r\n  gem 'rails'\r\n  gem 'actionmailer'\r\n  gem 'actionpack'\r\n  gem 'activerecord'\r\n  gem 'activeresource'\r\n  gem 'activesupport'\r\nend\r\n````"},{"ts":1358877421000,"body":"I made this pull request from /rails2/rails, and my thought was that if the PR is closed, we could perhaps join forces and keep /rails2/rails up to date. I even thought about doing gem releases, but don't know how much trouble it'll be given that we need to do all six gems under different names. I started by cherry-picking @johndouthat's gemspecs into the organization repo so you can do:\r\n\r\n```rb\r\ngit 'git://github.com/rails2/rails.git', :branch => '2-3-stable' do\r\n  gem 'rails'\r\n  gem 'actionmailer'\r\n  gem 'actionpack'\r\n  gem 'activerecord'\r\n  gem 'activeresource'\r\n  gem 'activesupport'\r\nend\r\n```\r\n\r\nThis works, but it sucks. The monolithic Rails repo is huge, so now `bundle` takes way longer than I'd like. At least we're safe(r) and avoid vendoring the whole thing."},{"ts":1358878241000,"body":"@johndouthat - it's not that I don't trust the code, I just don't trust that the repo will be around forever. I wonder if Rails Core would consider merging your changes in so that each project has a gemspec?"},{"ts":1358882141000,"body":"@cjohansen If you want to avoid the huge download, you could strip the history and rails3+4 branches, which would reduce the download from ~60MB to ~4MB. But it's really not a big deal, because git bundles are cached after the first download. The Rails maintainers have been generous and patient (i.e. true heroes) to backport security fixes to such an old branch. If that changes, a fork may be necessary, but my hope is that https://github.com/rails/rails/tree/2-3-stable remains the best one."},{"ts":1358884107000,"body":"@mguteri you can bundle git repos without a gemspec by providing a version explicitly. Then Bundler will synthesize a stand-in spec for you:\r\n\r\n```\r\ngem 'rails', '2.3.15', :github => 'rails/rails', :branch => '2-3-stable'\r\n```"},{"ts":1358884430000,"body":"@jeremy ah, thanks, that's better."},{"ts":1358885183000,"body":"Thank you Jeremy, this works great.\r\n\r\nOn Tue, Jan 22, 2013 at 2:49 PM, Jeremy Kemper <notifications@github.com>wrote:\r\n\r\n> @mguteri you can bundle git repos without a gemspec by providing a version\r\n> explicitly. Then Bundler will synthesize a stand-in spec for you:\r\n>\r\n> gem 'rails', '2.3.15', :github => 'rails/rails', :branch => '2-3-stable'\r\n>\r\n>  —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8948#issuecomment-12562507>.\r\n>\r\n>"},{"ts":1358898005000,"body":"As of now (thanks, steveklabnik!) the official 2.3 branch has gemspecs. So you can add this to your gemfile to pick up Ernie's fix for CVE-2013-0155:\r\n\r\n````ruby\r\ngit 'git://github.com/rails/rails.git', :branch => '2-3-stable' do\r\n  gem 'rails'\r\n  gem 'actionmailer'\r\n  gem 'actionpack'\r\n  gem 'activerecord'\r\n  gem 'activeresource'\r\n  gem 'activesupport'\r\nend\r\n````\r\n\r\nAfter doing that, if there are additional commits to the branch in the future, run `bundle update rails` to pick them up."},{"ts":1358925411000,"body":"Thank *you* @johndouthat!"},{"ts":1359012894000,"body":"This is seriously good news. Thank you!\r\n\r\nOn Wed, Jan 23, 2013 at 3:17 PM, Marius Mathiesen\r\n<notifications@github.com>wrote:\r\n\r\n> Thank *you* @johndouthat <https://github.com/johndouthat>!\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8948#issuecomment-12584284>.\r\n>\r\n>"}]},{"timestamps":[{"ts":1370473972000,"body":"I've seen this as well, but I think it might be prudent to discover _why_ this directory is now being generated. Do we want it to be?\r\n\r\nI've been meaning to but haven't had the time, myself."},{"ts":1370474118000,"body":"@steveklabnik , ok I will try to figure out why it appears"},{"ts":1370474542000,"body":"Seems these two tests are generating log folder by running tests\r\n\r\nhttps://github.com/rails/rails/blob/master/activemodel/test/cases/railtie_test.rb#L15-L27"},{"ts":1370474949000,"body":"@arunagw , you are right"},{"ts":1370475115000,"body":"so the solution will be to stub logger?"},{"ts":1370475440000,"body":"Yes I think so. I am fine with that."},{"ts":1370476543000,"body":"@arunagw , fixed"},{"ts":1370510439000,"body":":+1:\r\n"},{"ts":1370518903000,"body":"@arunagw , updated. Did you mean this? Please, check it out"},{"ts":1370534035000,"body":"Yes, exactly. Can you add a comment like `Set a fake logger to avoid creating the log directory automatically.` or something like that, when creating the mock logger, just so that someone else doesn't come by and remove it?"},{"ts":1370536990000,"body":"@carlosantoniodasilva, done"},{"ts":1370537136000,"body":"@ka8725 thanks. @carlosantoniodasilva will be merging this. I can't do as of now :) "},{"ts":1370608053000,"body":"Thanks."}]},{"timestamps":[{"ts":1367367942000,"body":"(Solved the problem with the `-q` flag instead, thanks @tenderlove for the tip!)"}]},{"timestamps":[{"ts":1373495374000,"body":"Thanks @josevalim for the review!\r\n\r\nI've fixed the small things. I was aware of moving both `view_assigns` and `protected_vars` stuff from AV and I will address them in coming days.\r\n\r\nThe main purpose of posting this was get opinion on the solution I finally stick to (https://github.com/strzalek/rails/blob/fc89313fe3f9e508dbe84616fa9a91db123337b0/actionpack/lib/action_controller/base.rb#L164-168) from others so please that into account that there's a lot rough edges to polish.\r\n"},{"ts":1373626908000,"body":"@robin850 your comments have been addressed in the latest commit. It's true that it's WIP but it's also very helpful to have those kind of suggestions early in the process. Thank you!"},{"ts":1373630052000,"body":"@strzalek : Thanks! I'm always interested in this kind of PR. Glad to help! :smiley: "},{"ts":1376322141000,"body":"Few weeks later and it looks like the whole thing is finished! :boom:\r\n\r\nTests passes and sample application which doesn't use AV at all can be crated without any problem. You can find it here: https://github.com/strzalek/rails-sandbox\r\n\r\nCould you guys give it a look and review all this stuff? It would be very appreciated! :sparkles: \r\n\r\n/cc @drogus @josevalim @jeremy "},{"ts":1376322525000,"body":"I will review the entire PR in the evening, but I just wanted to confirm that I've been able to build simple rails app, which just rendered JSON without AV. The simplest way to do that is to create app with `--skip-action-view` option. Then you should be able to use `render :text` in controller in order to render a response."},{"ts":1376322699000,"body":"Right, just like here: https://github.com/strzalek/rails-sandbox/blob/master/app/controllers/pages_controller.rb#L3"},{"ts":1376329063000,"body":"@strzalek I'm curious, what's the current status of AV? Is possible to use it without depend on AP? :smiley: "},{"ts":1376333476000,"body":"Hah, yes! Using this branch - YES.\r\n\r\nThe `rails-sandbox` (https://github.com/strzalek/rails-sandbox) project is rails app *without* ActionView. It uses rails from my fork and this branch.\r\n\r\nYou can clone it and give it a try :roller_coaster: !"},{"ts":1376333502000,"body":"AV's gemspec does not depend on AP in production, so the short answer is yes.\r\n\r\nHowever, it still has development dependency on AP, which I'm not sure is a good thing - it makes it harder to verify with tests that AV is actually truly independent of AP."},{"ts":1376334657000,"body":"@egilburg it might be possible to remove dev dep from AP on AV but well, I don't think it makes any sense. At the end of the day, AP and AV are still closely tight together and 95% of the project or maybe even more will be always using rails with AV.\r\n\r\nHowever, almost all of the tests concerning ActionView were moved away from AP to AV, and you can find them as integration ones in `actionview/test/actionpack` (https://github.com/strzalek/rails/tree/extract_renderers/actionview/test/actionpack). Notice that AV has also dev dep on AP as it needs stuff from there.\r\n\r\nBesides that, in `railties` you can find `basic_rendering_test.rb` (https://github.com/strzalek/rails/blob/extract_renderers/railties/test/application/basic_rendering_test.rb) which is end-to-end test, checking if rails application without AV works as supposed. (it generates full rails app, makes few changes to files and setup, runs it and checks what was rendered).\r\n\r\nThat's how it is now. I think that AV should stay as dev dep on AP for now. We have quite good coverage to be sure if stuff with/without AV works properly. Maybe it'll change some time in the future, during the process of refactoring tests, because I must admit, in some places you can find huge mess in there.\r\n\r\nHope that explains everything, @egilburg. Let me know if you still have any questions."},{"ts":1376341069000,"body":"@strzalek I was talking about the other use case, using ActionView without Rails, something like this:\r\n\r\nhttps://gist.github.com/drogus/2472931\r\n\r\nI'll try it to check if everything works as expected :smile: "},{"ts":1376341218000,"body":"@guilleiguaran this is also possible, see the previous PR #11032 :)  @strzalek also confirmed that it works with my gists when you change the Gemfile to include actionview instead of entire actionpack."},{"ts":1376341332000,"body":"@drogus @strzalek nice!!! great work on this guys :smile: "},{"ts":1376393668000,"body":"Yeah, just like @drogus said, it was possible after previous PR :)"},{"ts":1376436646000,"body":"I give a thought about AP and AV as dev dependency and actually it can - and maybe even should - be dropped. I've just pushed 2 commits, they're moving tests from `abstract_controller` to AV.\r\n\r\nAt this state, only few small things are keeping AV as dep. I'll try to remove them tomorrow."},{"ts":1376507193000,"body":":+1: :100: :heart_eyes: "},{"ts":1376508290000,"body":"Thanks @josevalim for the review! :metal: "},{"ts":1376573694000,"body":"Anybody else from core team is willing to review? It would be much appreciated! :cake: \r\n\r\n/cc @jeremy @wycats @spastorino @tenderlove"},{"ts":1376790853000,"body":"I've reviewed this :+1:\r\n\r\n@drogus feel free to merge this after of your review :smiley: "},{"ts":1376790890000,"body":"oops, github reports \"We can’t automatically merge this pull request.\" :grin:"},{"ts":1376846019000,"body":"Rebased. Should apply cleanly now! :sunny: "},{"ts":1376936707000,"body":":+1: looks good. Great work.\r\n\r\nWould be great to have performance benchs."},{"ts":1376943937000,"body":"I can prepare something tomorrow. @drogus when trying out this branch observed 0,2 s drop in boot time. I guess there might be some performance boost in rendering as BasicRendering is super simple now. Just few lines of code. \r\n\r\nHowever the biggest gain here is that AV is pluggable and can be easily dropped or replaced with something custom. \r\n\r\n:ship: :ship: :ship: "},{"ts":1377087319000,"body":"Here are benchmarks: https://gist.github.com/strzalek/6293709\r\n\r\n/cc @spastorino "},{"ts":1377108152000,"body":":shipit: form my side"},{"ts":1377164584000,"body":"@rafaelfranca, I've changed this message to one line. Thank you very much for the review.\r\n\r\n@drogus told me that once he find time (he's currently a bit busy), he'll give it a final review and will merge it.\r\n\r\n:shipit:"},{"ts":1377197935000,"body":"@strzalek what I'd like to see are performance test just using AV but current master vs your branch"},{"ts":1377287237000,"body":"@spastorino  So that's interesting. I've updated gist with `ab` test against edge master (b77f25cb8479a8ff6c93b1d6bbf0771e5368434f) and to me they're a bit un unexpected: https://gist.github.com/strzalek/6293709\r\n\r\nI haven't thought that my branch would be **that** faster. I've thought that there will be no difference or it'll be even a bit slower. Maybe my tests are too dumb and simple? What do you think? If not, those changes will introduce quite big performance gain! :spades: "},{"ts":1377301958000,"body":"Well yeah I would test using some templates calling in a loop a lot of times to render partial, etc, etc.\r\nAnywayiIf I recall correctly there were some @wycats' perf tests which may worth taking a look at. @josevalim do you remember that?"},{"ts":1377302169000,"body":"@spastorino https://github.com/wycats/rails-simple-benches"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1368175102000,"body":"I'd personally leave this line in."},{"ts":1368175530000,"body":"Ok..closing this PR then.."}]},{"timestamps":[{"ts":1367433917000,"body":"Please squash the commits. Tks."},{"ts":1367459906000,"body":"ok! :dancer: "},{"ts":1367460182000,"body":"@carlosantoniodasilva squashed and updated :) "},{"ts":1367460747000,"body":"Thanks!"},{"ts":1367470421000,"body":":smiley:"}]},{"timestamps":[{"ts":1361269119000,"body":"Good. Could you please remove `require 'active_support/core_ext/object/blank'`? That one is required at the top level by loading _active_support/rails.rb_."},{"ts":1361269570000,"body":"This is what happens when I try to remove it:\r\n\r\n```\r\n$ irb -Iactionpack/lib -raction_dispatch/http/url\r\nirb(main):001:0> ActionDispatch::Http::URL.url_for host: \"host.com\"\r\nNoMethodError: undefined method `blank?' for \"host.com\":String\r\n\tfrom /Users/miha/Sources/rails/actionpack/lib/action_dispatch/http/url.rb:55:in `build_host_url'\r\n\tfrom /Users/miha/Sources/rails/actionpack/lib/action_dispatch/http/url.rb:37:in `url_for'\r\n\tfrom (irb):1\r\n\tfrom /Users/miha/.rbenv/versions/1.9.3-p327-perf/bin/irb:12:in `<main>'\r\n```"},{"ts":1361269712000,"body":"Because in order to use a file from a Rails component you have to load the root file, in this case _action_dispatch.rb_."},{"ts":1361269966000,"body":"Fixed. Thanks for the clarification."},{"ts":1361271178000,"body":"Excellent, thanks!"}]},{"timestamps":[{"ts":1372203758000,"body":"/cc @jonleighton "},{"ts":1372233207000,"body":"Hey @carlosantoniodasilva, this is a Rails 4 regression, with more evidence here: https://gist.github.com/Empact/5865555\r\n\r\nThe output for the above is:\r\n```\r\nActive Record 3.2.13\r\n-- create_table(:firms, {:force=>true})\r\n   -> 0.1371s\r\n-- create_table(:clients, {:force=>true})\r\n   -> 0.0005s\r\n1 clients. 1 expected.\r\n1 clients updated. 1 expected.\r\n```\r\n\r\n```\r\nActive Record 4.0.0\r\n-- create_table(:firms, {:force=>true})\r\n   -> 0.1606s\r\n-- create_table(:clients, {:force=>true})\r\n   -> 0.0004s\r\n1 clients. 1 expected.\r\n0 clients updated. 1 expected.\r\n```\r\n\r\nShould I re-open this request on 4-0-stable?"},{"ts":1372274300000,"body":"All pull requests should be opened against master, they'll be backported appropriately.\r\n\r\nThat said let's see if @carlosantoniodasilva agrees this is actually a bug."},{"ts":1375337148000,"body":"Hit this again in tests, reopened against master as #11694"}]},{"timestamps":[{"ts":1375941045000,"body":"Pull request number \"ichi\" :laughing: :smile:"},{"ts":1375941070000,"body":"awesome! :heart: "},{"ts":1376499564000,"body":"Nice fix, but it seems like this should be the driver's responsibility. How about pushing upstream to the mysql lib instead?"}]},{"timestamps":[{"ts":1364994288000,"body":"@pixeltrix @rafaelfranca can you take a look?"},{"ts":1364994688000,"body":"Makes sense :+1:, thanks @senny!"},{"ts":1364996094000,"body":"Thanks @senny :heart:"}]},{"timestamps":[{"ts":1368144267000,"body":"I'm wary of stdlib collision, e.g. a lib requires 'minitest/foo' which exists in stdlib but not minitest 5.x. Folks often don't declare gem deps on stuff in stdlib, so we end up in undeclared dependency hell. Ditto for requiring the old test unit shims and relying on it loading minitest stdlib.\r\n\r\nDoes MT5 attempt to handle these cases? (e.g. with a test/unit.rb that raises an exception)"},{"ts":1368180125000,"body":"*nod* I appreciate your wariness. There's nothing _file-wise_ in stdlib that doesn't exist in the gem.\r\n\r\nAs far as test/unit goes... that's an ongoing pain of mine and mostly out of my hands. It mostly falls down to stdlib not being proper gems but instead pretending. It causes all sorts of loading hell. I addressed this as best I could by making the stdlib minitest/autorun activate the gem so if you did have a real minitest gem installed you'd immediately switch over to it. That's in place across all the 1.9.3 series and up (at least... might go back to 1.9.2). \r\n\r\nMT5 does _not_ have anything to sabotage the use of test/unit. That was intentional as I'm fucking tired of getting flack from people who don't even bother understanding what's going on in the first place before they start flinging their poo.\r\n\r\nI did have some code in MT that would warn if it saw both minitest and test/unit constants but I only used that in debug mode to ensure I finished porting my old tests over. Pretty easy to put something in AS::TC if you think that'd help mitigate confusion."},{"ts":1368201736000,"body":"Cool—sounds like we're reasonably well insulated. I'm a fan of losing the `test/unit` shim, too."},{"ts":1368201796000,"body":"(And IMO we've been on minitest long enough that we needn't retain old test/unit defenses in AS::TC.)"}]},{"timestamps":[]},{"timestamps":[{"ts":1369153255000,"body":"@rafaelfranca can you take a look?"},{"ts":1369185751000,"body":"@senny I looked at the fix.\r\n\r\n In the association the primary_key of essays is marked as `first_name` but here the primary_key is still 'id`. https://github.com/rails/rails/blob/master/activerecord/test/schema/schema.rb#L261-L267\r\n\r\nI executed the newly added test.  I could not find first_name anywhere in the generated query.\r\n\r\nMay be I'm missing something.\r\n\r\nI do see that when `primary_key` is being used then deletion has some issue. I applied your patch and I still see issues. I'll dig deeper into it tomorrow.\r\n\r\n"},{"ts":1369205159000,"body":"@neerajdotname I'm not sure what query in my test-case should include the primary key. It is the value stored in `writer_id`. I also think the `:primary_key` in the `schema.rb` is not required to be the same as specified on the association. Do you have a test-case to explain your concerns?"},{"ts":1369217109000,"body":"@senny Actually I'm still not sure what is the real bug. \r\n\r\nUsage of primary_key in the has_many is throwing me off.\r\n\r\nAs per the doc\r\n\r\n```\r\nBy convention, Rails assumes that the column used to hold the primary key of this model is id. You can override this and explicitly specify the primary key with the :primary_key option.\r\n```\r\n\r\nSo I assumed that you are using non-standard primary_key. But in the schema the table still has id in the primary key. That is why I was looking for first_name in the query."},{"ts":1369217824000,"body":"@neerajdotname the example in the test-case is a little far fetched but there are similar uses in our test-suite already:\r\nhttps://github.com/rails/rails/blob/master/activerecord/test/models/author.rb#L104\r\n\r\nThey just illustrate that you can use a different primary_key for any given association. Even if it's not the real primary-key on the table. Imagine a situation where you have a table with 2 unique columns, an ID Sequence and some kind of string identifier. Now there might be join tables that you want to link to using the string identifier. You can achieve this using the `:primary_key` option.\r\n\r\nNow the bug was hidden in our test-suite because all occurrences of `:primary_key` referenced a column present in both tables (in the example I linked to it was `name`, which is on `authors` and `essays`). You can see from the deletion query I linked that the code tried to use the `:primary_key` option on the wrong table.\r\n\r\nI hope you understand my poor explanation. :sweat:  "},{"ts":1369218316000,"body":"@senny thanks for the explanation. I'll look into it."},{"ts":1369238320000,"body":"@senny looks good.\r\n\r\n+1 for merging it. "},{"ts":1369287853000,"body":"I pushed a rebased version. It should be apply cleanly again."}]},{"timestamps":[{"ts":1371043366000,"body":"Thanks, but we kinda consider more a stylistic change than a refactor by itself, and it's common to not merge style changes only because it makes git history harder to track later. If it was part of a bigger refactor of bug fix, it'd be probably ok. Thanks anyway!"},{"ts":1371095728000,"body":"hmm ! will go through more and push the code"}]},{"timestamps":[{"ts":1358190539000,"body":"@rafaelfranca @steveklabnik could you review this?"},{"ts":1358194706000,"body":"@rafaelfranca thanks, it's fixed now :smile: "},{"ts":1358194748000,"body":":heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[{"ts":1362045544000,"body":"Ups, I wanted to propose change for Rails 3.2, not merge whole master into branch, bad GH :/ Will try again."}]},{"timestamps":[{"ts":1363382221000,"body":"I personally prefer the former, for me it is more human friendly"},{"ts":1363382238000,"body":"I forgot to update the test"},{"ts":1363382800000,"body":"rafaelfranca can you give more details as to why you think the words \"was successfully\" are more human friendly? IMHO It is more friendly not to waste a person's time with extra words so can you tell me a bit about what the value that these words provide. Thank you."},{"ts":1363383151000,"body":"For me, the current text seems like I'm talking with a robot. \"User created\", \"User deleted\", \"User updated\""},{"ts":1363389385000,"body":"Interesting PR. I indeed believe these messages are inertia, I personally show no message in my apps. Of course the user was created, of course the product was updated, you warn when you err! Imagine Vim telling \"character successfully inserted\".\r\n\r\nThat said, the current messages are fine for me, see no reason to invalidate every single tutorial about Rails.\r\n"},{"ts":1363390250000,"body":"@jscipione thanks for the PR, but although we see your point in being more concise, being more emphatic is also a valid approach, we believe there is not need to change the messages. Thank you."}]},{"timestamps":[{"ts":1373097409000,"body":"Will be great if you can add [ci skip] as well in commit message for guides. \r\n\r\n"},{"ts":1373117273000,"body":"I vaguely remember that @dhh had an option on `<br>` vs `<br />`, which is why the scaffolds output `<br>`, but I could be totally wrong.\r\n\r\nThe other changes look good, this will need squashed, and don't forget to `[ci skip]` when you do."},{"ts":1373127694000,"body":"Yes, <br/> is for XHTML. That's not what we intend to output. We intend to output HTML5. \r\n\r\nOn Jul 6, 2013, at 15:28, Steve Klabnik <notifications@github.com> wrote:\r\n\r\n> I vaguely remember that @dhh had an option on <br> vs <br />, which is why the scaffolds output <br>, but I could be totally wrong.\r\n> \r\n> The other changes look good, this will need squashed, and don't forget to [ci skip] when you do.\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub."},{"ts":1373139704000,"body":"Ok, I'll fix the `<br>` the other way (and in the other doc files too).  Thanks for the heads-up on `ci skip`; I'm new to github and hadn't heard of Travis-CI before. :)"},{"ts":1373142403000,"body":"Could you squash your commits and force push for your branch?"},{"ts":1373150684000,"body":"Thanks for your patience.  I think that does what you need."},{"ts":1373151877000,"body":"Thank you"}]},{"timestamps":[]},{"timestamps":[{"ts":1356730585000,"body":"Could you add a test case?"},{"ts":1356755407000,"body":"ok I‘ll do it later"},{"ts":1356772299000,"body":"@rafaelfranca \r\nI add test case\r\nsorry in last commit I do something wrong\r\nnow ```content_tag_for``` without given block works as mentioned in document"},{"ts":1357079746000,"body":"Seems good. Could you add a CHANGELOG entry?"},{"ts":1357079766000,"body":"And please squash your commits"},{"ts":1357116985000,"body":"@rafaelfranca \r\nwhat about now?\r\nsry, this my first commit to a open source project."},{"ts":1357128320000,"body":"Very good. Thank you so much."}]},{"timestamps":[{"ts":1364224748000,"body":"Thank you!"},{"ts":1364224884000,"body":":smiley: "}]},{"timestamps":[{"ts":1364924074000,"body":"> will fix in all places asap\r\n\r\nThis is a cosmetic style change, we wont' accept a request that just fixes indentation. But if you're doing a refactoring or writing new code, it should be indented."}]},{"timestamps":[]},{"timestamps":[{"ts":1375429150000,"body":"Now adding tests for `xml` columns and updating changelog."},{"ts":1375433952000,"body":"I updated PR with tests and changelog.\r\n\r\n/cc @rafaelfranca, @senny, @carlosantoniodasilva "}]},{"timestamps":[{"ts":1364844831000,"body":"Hey John, just wanted to let you know I ran your tests and applied the fix, they worked for myself and several other students at Portland Code School. We are currently getting familiar with the process of submitting patches, thanks for the example!\r\n\r\n@NeilMakn @criskelly @phil0xf7"},{"ts":1364846300000,"body":"@rafaelfranca I've incorporated your comments and the ``raise_record_not_found_exception!`` method is no longer part of the public api. Also, ``Array(result).size`` has been kept in a variable. "},{"ts":1364846485000,"body":"Thank you"}]},{"timestamps":[{"ts":1371240976000,"body":"Would you mind adding a test for this?"},{"ts":1371668151000,"body":"Upon looking at the tests and reviewing the code, I realized there wasn't an issue. I'm just a noob :)"}]},{"timestamps":[{"ts":1366050913000,"body":"Thank you"}]},{"timestamps":[{"ts":1361765144000,"body":"I like it. :+1:"},{"ts":1361792448000,"body":"Thanks Steve. When you say \"this needs to be moved to the top,\" what are you referring to? That I need to move the changelog entry to the top of the file instead of the bottom of the file?\r\n\r\nSam"},{"ts":1361795880000,"body":"Seems good. I'm :+1: on this!\r\n\r\nI allow myself to answer your question : yes, you should move your changelog entry to the top of the file.\r\n\r\nThanks for your contribution! :) "},{"ts":1361796031000,"body":"Yes, I mean it should be at the top of the file."},{"ts":1361800320000,"body":"Ok, I moved the changelog entry to the top of the file.\r\n\r\nAny other feedback? (for example, should I pull from rails/master and merge?)"},{"ts":1361800425000,"body":"Could you squash the commits and rebase against master? It cannot be automatically merged"},{"ts":1361802240000,"body":"Ok, I rebased onto master, and the PR contains one commit. How does it look now?"},{"ts":1362117206000,"body":":+1: :+1: :+1: "},{"ts":1362138540000,"body":"Looks good :+1:. But github says it cannot be automatically merged, can you please rebase again? (it's likely a changelog conflict)."},{"ts":1362140166000,"body":"Ok, done. Does it say it will merge cleanly?"},{"ts":1362140537000,"body":"Yup it does. Thank you!"},{"ts":1362140904000,"body":"Awesome, thanks! :thumbsup: :heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1364087447000,"body":"Failed to create this against the right branch, sorry."}]},{"timestamps":[{"ts":1375721024000,"body":"Thanks."}]},{"timestamps":[{"ts":1358172710000,"body":"> (Oops, made it another commit, sorry)\r\n\r\nThat's fine, just rebase, squash, and force push."},{"ts":1358174012000,"body":"All done. Thanks for the hint, @steveklabnik "},{"ts":1358184577000,"body":"Any time! :)\r\n\r\nI'll let @carlosantoniodasilva merge, though."},{"ts":1358261604000,"body":"Thanks :heart:"},{"ts":1358264128000,"body":"@cordawyn this has failed some [railties tests](https://travis-ci.org/rails/rails/jobs/4165884/#L143). The solution would be to move the `ordered_railties` method to `public`, but leaving it as `nodoc` since it's not public for user consumption, just for the framework.\r\n\r\nI tried doing that, but then I got a new failure:\r\n\r\n```\r\n  1) Failure:\r\ntest_copying_migrations(RailtiesTest::EngineTest) [test/railties/engine_test.rb:102]:\r\nExpected /2_create_users/ to not match \"NOTE: Migration 3_create_sessions.rb from bukkits has been skipped. Migration with the same name already exists.\\nNOTE: Migration 1_create_sessions.rb from app_template_application has been skipped. Migration with the same name already exists.\\nNOTE: Migration 2_create_users.bukkits.rb from app_template_application has been skipped. Migration with the same name already exists.\\nNOTE: Migration 3_add_last_name_to_users.bukkits.rb from app_template_application has been skipped. Migration with the same name already exists.\".\r\n```\r\n\r\nI don't have time to look at it now, can you please take a look and send a pull request fixing it if you find the issue? Otherwise I'll have to revert, unfortunately. Thanks!"},{"ts":1358264970000,"body":"I'll take a look at that, sure."},{"ts":1358266476000,"body":"I think you can revert the commit for now, because this is going to take me more than a day, I'm afraid. I'll get back with another version of the fix later."},{"ts":1358480836000,"body":"Hey I opened #8985 to hopefully address all issues."}]},{"timestamps":[{"ts":1373108339000,"body":"looks good, I added a few minor comments."},{"ts":1373111565000,"body":"Isn't nil intended to be returned in order to be equivalent to other bang-methods such as `Set#select!`, `Array#select!` and `Hash#select!` which all return `nil` if no operation was made.\r\n\r\nSee:\r\nhttp://www.ruby-doc.org/stdlib-2.0/libdoc/set/rdoc/Set.html#method-i-select-21\r\nhttp://ruby-doc.org/core-2.0/Array.html#method-i-select-21\r\nhttp://ruby-doc.org/core-2.0/Hash.html#method-i-select-21"},{"ts":1373117156000,"body":"Yes, this is the way that bang methods work in Ruby, as @KevinSjoberg points out. Thank you though!"},{"ts":1373118203000,"body":"I disagree, this PR is about the behavior of `select`, which uses `select!` internally. See the following irb session from `master`:\r\n\r\n```\r\nirb(main):002:0> require 'active_support/all'\r\n=> true\r\nirb(main):003:0> normal = {a: \"a\"}\r\n=> {:a=>\"a\"}\r\nirb(main):004:0> indifferent = HashWithIndifferentAccess.new(a: \"a\")\r\n=> {\"a\"=>\"a\"}\r\nirb(main):005:0> normal.select {|k,v| true}\r\n=> {:a=>\"a\"}\r\nirb(main):006:0> indifferent.select {|k,v| true}\r\n=> nil\r\n```"},{"ts":1373118611000,"body":"Ah ha, sorry. I just read the commit message :("},{"ts":1373119196000,"body":"@senny I made the changes you requested."},{"ts":1373120701000,"body":"looks good. @schuetzm thanks for your contribution :yellow_heart: "}]},{"timestamps":[{"ts":1372277004000,"body":"Something is wrong. This PR cannot merge automatically. Needs a rebase."},{"ts":1372280697000,"body":"Sorry. I broke..."},{"ts":1372286513000,"body":"I am again at #11131 ."}]},{"timestamps":[{"ts":1362269918000,"body":"Bump...anyone from core care to review and maybe merge this?"},{"ts":1362766851000,"body":"@NZKoz or @josevalim could you have a look?"},{"ts":1363156604000,"body":"Ok, then maybe @carlosantoniodasilva or @steveklabnik ? :)"},{"ts":1363174293000,"body":"Sorry, can't take a look today, but I've bookmarked here to check when I\r\nfind some time.\r\n\r\n\r\nOn Wed, Mar 13, 2013 at 3:36 AM, Olek Janiszewski\r\n<notifications@github.com>wrote:\r\n\r\n> Ok, then maybe @carlosantoniodasilva<https://github.com/carlosantoniodasilva>or\r\n> @steveklabnik <https://github.com/steveklabnik> ? :)\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/9426#issuecomment-14826823>\r\n> .\r\n>\r\n\r\n\r\n\r\n-- \r\nAt.\r\nCarlos Antonio"},{"ts":1363213064000,"body":"I will defer to @carlosantoniodasilva . I'm not familiar enough with ActiveRecord."},{"ts":1365126502000,"body":"Overall I think it looks good. It's gonna need a changelog entry though. Thanks!\r\n\r\n/cc @jonleighton "},{"ts":1366720570000,"body":"bump @carlosantoniodasilva @jonleighton could you guys have another look at this?\r\n\r\nThanks!"},{"ts":1367569649000,"body":"Added some comments. It also needs a rebase. In general it seems good."},{"ts":1367575785000,"body":"@jonleighton thanks for the review, please have another look.\r\n\r\nShould this also be backported to 4-0-stable?"},{"ts":1367589907000,"body":"Sorry, this needs another rebase"},{"ts":1367591715000,"body":"@jonleighton done"},{"ts":1367593200000,"body":"@jonleighton thanks for merging. Should we backport to 4-0-stable?"},{"ts":1367601224000,"body":"Unsure. I'm not sure if I consider this a feature or a bug fix. I'm trying to clarify on the core team what our backporting policy should be for 4-0-stable (between now and the actual release)."}]},{"timestamps":[{"ts":1368478519000,"body":"Changelog reverted."},{"ts":1368589764000,"body":"Much improved, thank you!"},{"ts":1368622166000,"body":"Could you squash your commits?"},{"ts":1368630854000,"body":"Commits have been squashed, @rafaelfranca.\r\n\r\nThanks for the feedback, @zzak and @vipulnsward."},{"ts":1368631820000,"body":"Thank you so much"}]},{"timestamps":[]},{"timestamps":[{"ts":1376534539000,"body":"Not sure about this. It's changing AR itself to skip a conn reload if a txn is open *in general* to fix a specific case with console reloading. That seems backward - perhaps console reload should just leave the db alone if it's sandboxed?"},{"ts":1376546770000,"body":"Yes, you're right. I'll update this later on today.\r\nThanks @jeremy."},{"ts":1376604505000,"body":"/cc @jeremy"},{"ts":1377419850000,"body":"@gzohari : Why have you close this one please?"},{"ts":1377421829000,"body":"Looking at the fix again, even though it works, it still feels backwards. \r\nRight now i can't think of a better way to do this.\r\nI'll re-open if i come up with a better way."},{"ts":1377423186000,"body":"Ok, thank you!"}]},{"timestamps":[{"ts":1377466087000,"body":"@vipulnsward Can you provide some background on why this is being removed? \r\n\r\nThis will cause a binary column to get passed to ``` \"'#{quote_string(value)}'\"``` which will have a different outcome. "},{"ts":1377536141000,"body":"@GeekOnCoffee you were looking at the wrong case statement. Basically the else case does the same as binary case was doing. Look https://github.com/rails/rails/blob/6c1bf465b50b86645d65a267ee50aa5ea58b49d0/activerecord/lib/active_record/connection_adapters/abstract/quoting.rb#L57"}]},{"timestamps":[{"ts":1364069007000,"body":"@rafaelfranca your feedback was implemented . "},{"ts":1364069055000,"body":"Thank you  :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1372351822000,"body":"I agree with [@rubys here](https://github.com/rails/rails/pull/9419#issuecomment-14114394) and I prefer to use `to:`"},{"ts":1372352143000,"body":"But since we are accepting both forms I think it is fine to merge."}]},{"timestamps":[{"ts":1358798876000,"body":"I don't think this belongs to Active Suport. I don't see where this code is better than `foo[:bar][:baz][:bomb]` and I don't see Rails using this code."},{"ts":1358798889000,"body":"Hey there!\r\n\r\nAdding random methods on every `Hash` is obviously something that should be done with care, so we try to do it only when it brings a big gain. Can you show off some code that's significantly improved with this? Maybe within Rails itself?"},{"ts":1358802298000,"body":"@steveklabnik - thanks for the quick look.  The idea is that it simplifies cluttered nil checking when accessing deeply nested hashes which - at least in the codebases I've worked in - is prevalent. \r\n```ruby\r\nif response[:part] && response[:part][:availability] && response[:part][:availability][:quantity_backordered]\r\n    # do something\r\nend\r\n```\r\n...into\r\n\r\n```ruby\r\nif response.traverse :part, :availability, :quantity_backordered\r\n    # do something\r\nend\r\n```\r\n\r\nWith the addition of the optional default it becomes like an extended `Hash#fetch`.\r\n```ruby\r\npart_response = response.traverse(:part, :availability) { EmptyPartAvailabilityResponse.new }\r\n```\r\n\r\n@rafaelfranca - I think the issue with your refute is pretty obvious - the existence of objects in a nested hash can't always be guaranteed.  Code that doesn't take this into account is brittle, and code that does is often long winded.  In my code, this has helped combat that situation. \r\n\r\nIn regard to whether it belongs in ActiveSupport, I'm not passionate.  I'm new to contributing to Rails and from my perspective ActiveSupport seemed a decent context for the patch based on what I perceive as being handled there.  Advice on a better location would be more than welcome."},{"ts":1358802967000,"body":"@tylerdooling The way I usually accomplish this is using `Hash#fetch` to set default values.\r\n\r\n```ruby\r\nif response.fetch(:part, {}).fetch(:availability, {})[:quantity_backordered]\r\n  # do something if deep hash is not a \"falsy\" value\r\nend\r\n```\r\nIf this gets merged in, I'll definitely be using it, but until then that is the cleanest and simplest solution with pure Ruby."},{"ts":1358803193000,"body":"@mattdbridges - I've used similar approaches in the past as well that have worked well enough.  This is just an attempt at cleaning that up - especially when dealing with things like api responses that can have significantly more levels."},{"ts":1358803678000,"body":"@tylerdooling Active Support is a place to put think that are needed in the Rails itself or it the majority of application using the framework. I don't see this fall in any of the cases.\r\n\r\nWe try to avoid add a lot of extensions to Active Support, so I think is better to use implement this in your applications or create a gem to do this.\r\n\r\nThank so much for the pull request."}]},{"timestamps":[{"ts":1358610639000,"body":"Seems good to me. Needs to update the guides"},{"ts":1358612720000,"body":"@rafaelfranca Done: https://github.com/lifo/docrails/commit/46752092ef222d8ae5c1e314f18aefab8a167c05"},{"ts":1358612754000,"body":"Cool. Also remember to squash your commits"},{"ts":1358613693000,"body":"@rafaelfranca Sorry, forgot, done now."},{"ts":1358614009000,"body":"thank you"},{"ts":1358630992000,"body":"When I did the previous implementation for mass assignment protection in active model there was a problem with raise behavior in case of id attribute. At the end we decided to not raise anything when id is mass assigned. I am not sure if it affects current implementation but we need to check.\r\n\r\nhttps://github.com/rails/rails/blob/3-2-stable/activemodel/lib/active_model/mass_assignment_security/sanitizer.rb#L47"},{"ts":1358674237000,"body":"@bogdan Can you remember what the issue was?\r\n\r\nI imagine this was related to nested_attributes, in which case I don't see that being a problem for this."},{"ts":1358674612000,"body":"There was a problem with tests generated by railties scaffold: it used to pass `:id` attribute to controller. Something like:\r\n\r\n``` ruby\r\npost :create, :user => user_parameters\r\n```\r\n\r\nAnd `user_parameters` contained `id`. "},{"ts":1358674807000,"body":"@bogdan I see, well I think that will cause the `id` attribute to be logged. Which seems reasonable to me - the tests shouldn't really be passing and `id` - but unless the config is set to `:raise` that shouldn't be an issue."},{"ts":1358674913000,"body":"\r\nAnd what if person specified `:raise` for test env and test was generated by rails itself?"},{"ts":1358675256000,"body":"@bogdan Then exceptions would be raised (assuming that these tests provided attributes to the controller, and that this controller was using `.permit` and did not specify some of those attributes).\r\n\r\nIf this is considered a problem, then I would favour patching the test generators."},{"ts":1358677237000,"body":"This was thing I've done before, but as I remember @josevalim decided that it is better to ignore `id` instead.\r\n"}]},{"timestamps":[{"ts":1363660625000,"body":"Damn."},{"ts":1363661647000,"body":"@evanphx Man, it must have been hard to track this down. I don't have enough words to express my gratitude for this pull request."},{"ts":1363661948000,"body":"Having been plagued by this for a while now, thanks @evanphx!"},{"ts":1363661997000,"body":":+1: @evanphx for prez"},{"ts":1363688103000,"body":":bow: "},{"ts":1363688816000,"body":":+1: "},{"ts":1363688988000,"body":":+1: "},{"ts":1363717017000,"body":"Yay! Lazy inits and threads, what a fun mix."},{"ts":1371744127000,"body":"Is this supposed to be merged and fixed in 3.2.13? Still having this issue: https://github.com/puma/puma/issues/204"},{"ts":1371881224000,"body":"@rafBM if you click on the commit, you can see it's only in 3-2-stable, and hasn't made it to a release yet."}]},{"timestamps":[{"ts":1377154260000,"body":"If `nil` is a significantly more common case than not (or alternatively, just as common, but significantly faster to check for than a `===` query or one of the other conditionals), early `nil` checks can make a performance difference."},{"ts":1377159711000,"body":"Fair point. In this case the check is performed on the setter, so I would assume that most of the time it's not `nil`. Anyway the build failed because `IPAddr::InvalidAddressError` is not in ruby 1.9, it seems this pull request will change little."}]},{"timestamps":[{"ts":1365551120000,"body":"I created something like this before: https://github.com/steveklabnik/request_store"},{"ts":1365554344000,"body":":+1:"},{"ts":1365558024000,"body":"@jeremy Thanks for the comments. I believe that just calling ``Thread.current[self.name] ||= new`` is pretty much as fast as caching some value of ``@local_thread_key``. I've changed the PR to reflect that, and have also gotten rid of the ``extend`` hook and am just extending with the ``PerThreadRegistry`` module directly."},{"ts":1365561036000,"body":"@luke-gru, @carlosantoniodasilva Thanks for the catches. The docs on the ``PerThreadRegistry`` class have been updated."}]},{"timestamps":[{"ts":1362053236000,"body":"Changes were necessary to make Rails master work with Rack ~> 1.5.0, as you can see in 7d624e0e8cfa3adffd8f475e3588d83f3b367c24. I don't think those changes are going to be backported, so I guess 3-2-stable will have to stick with 1.4.x for now. Also, as a side note, we'd have to use `~> 1.4` instead of `>= 1.4.5`, otherwise we'd be freeing too much (for instance, rack 2.0 could be used and would be a breakage). Thanks!"}]},{"timestamps":[]},{"timestamps":[{"ts":1371429056000,"body":"@carlosantoniodasilva @spastorino I know you guys did some changes on middleware stack on rails-api, so I think you guys can do a better review here than me.\r\n\r\n:+1: from my side."},{"ts":1371516394000,"body":"@wangjohn About rack-cache would be nice to remove all the occurrences of it from Rails and provide a Railtie on rack-cache itself."},{"ts":1371516455000,"body":":+1:"}]},{"timestamps":[{"ts":1357005158000,"body":"@smondal first off, happy new year to you :)  I'm wondering how one could test this - i.e. it'll need to be run in isolation?"},{"ts":1357017985000,"body":"Happy new year to all..Please follow the ticket #7245. That was post by \"wonnage\" in 5 months back. Previous it was given inconsistent output. "},{"ts":1358035133000,"body":"You should write a test-case to make sure the \"previously\" inconsistent behavior does no longer happen. This will prevent regressions from happening. (maybe you can use the one I wrote some time ago https://github.com/senny/rails/commit/9e6cb87a0fe62d7cb25c92d998370d2b6a8b75dc)"},{"ts":1358035722000,"body":"There is a competing PR for the same Issue #8377 "},{"ts":1366647947000,"body":"It looks like the consensus on #7245 was to fix this issue in the view, so I think that this can probably be closed."},{"ts":1366707298000,"body":"thanks @jimryan. Closing this one see the discussion on #7245"}]},{"timestamps":[]},{"timestamps":[{"ts":1371881454000,"body":"We keep the issues tracker for bugs only. These failing tests are useful, but we don't have discussions about what 'should' be here. Please post to rubyonrails-core, thanks!\r\n\r\nI'm going to give this a close, but if we do decide to change this behavior, I hope that these tests will be useful."},{"ts":1371889736000,"body":"Cool. :+1: "},{"ts":1372170382000,"body":"@teohm Just a note that your table above is missing `ActiveSupport::Cache::NullStore` as an option, which \"succeeds\" on write and returns `nil` on read:\r\n\r\n```\r\n> cache = ActiveSupport::Cache::NullStore.new\r\n=> #<ActiveSupport::Cache::NullStore:0x007fb9f1761be8 @options={}>\r\n> cache.write(cache_key, 'value')\r\n=> true\r\n> cache.read(cache_key)\r\n=> nil\r\n```"},{"ts":1372170800000,"body":"@tjschuck Thanks, table updated. "}]},{"timestamps":[]},{"timestamps":[{"ts":1361395359000,"body":"@sikachu @senny @carlosantoniodasilva This pull request addresses the issues raised in #9311, namely:\r\n\r\n* Broke out assertions testing this fix into their own test case.\r\n* Described the nature of the bug differently.\r\n* Fixed repeated word in commit message.\r\n\r\nThanks for bearing with me as I get the hang of contributing to a large-scale project."},{"ts":1361458953000,"body":":+1:"},{"ts":1361522558000,"body":":+1:\r\n\r\n@hoffm the branch does no longer merge cleanly. Could you push a rebased version?\r\n\r\n@carlosantoniodasilva @rafaelfranca could you take a final look?"},{"ts":1361539674000,"body":"@senny Rebased version now pushed."},{"ts":1361570440000,"body":"Thank you! :heart:"},{"ts":1361572126000,"body":":sparkling_heart: "},{"ts":1361572374000,"body":"Thanks, all! This was my first open source contribution. I look forward to more in the future! :rocket:"},{"ts":1361572555000,"body":"@hoffm welcome to [Rails contributors](http://contributors.rubyonrails.org/contributors/hoffm/commits), and please keep contributing! :smiley:"}]},{"timestamps":[{"ts":1373828101000,"body":"I am not sure if this is a Bug or not. But this test added 1 year back by @tenderlove and not running after that in build process.\r\n\r\nHere is the file.\r\n\r\nhttps://github.com/rails/rails/blob/master/actionpack/test/routing/helper_test.rb\r\n\r\n\r\n"},{"ts":1373879144000,"body":"Confirmed that this used to be work with 3-2-stable."},{"ts":1374043976000,"body":"@arunagw I know why the test is failing - the optimized url generation added to Rails 4 in d7014bc7eaa62c36f045a503cdad64e4ebbc2687 doesn't check for empty values - working on a fix."},{"ts":1374044572000,"body":"@pixeltrix thanks for looking into this. :cookie: "},{"ts":1374048936000,"body":"thanks. It's merged and fixed :-) \r\n\r\n:green_heart: @pixeltrix "},{"ts":1374048948000,"body":"Merged in 96310f69e1fd4bf0d744ed9599df895ef1fcf2d1"}]},{"timestamps":[{"ts":1373878261000,"body":"First commit can be backported in 4-0-stable as well as Rack::Sendfile changes are also in that branch."},{"ts":1373879117000,"body":"looks good. I wait for Travis."},{"ts":1373879906000,"body":"Added one more test. Let's travis run again. Seem green in my local"},{"ts":1373880095000,"body":"@arunagw can you squash the two pending migration commits?"},{"ts":1373880188000,"body":"done"},{"ts":1373890428000,"body":"@arunagw thanks :heart: "},{"ts":1373890550000,"body":"I backported the first commit."}]},{"timestamps":[{"ts":1357853511000,"body":"why not [docrails](https://github.com/lifo/docrails)?"},{"ts":1357853692000,"body":"@frodsan Do I have to update in both? I'm still figuring out all the pieces I have to be aware of when contributing."},{"ts":1357853768000,"body":"No. Just commit to lifo/docrails.\r\n\r\nCheers,\r\nGosha Arinich\r\n\r\n\r\nOn Friday, January 11, 2013 at 12:35 AM, Matt Bridges wrote:\r\n\r\n> @frodsan (https://github.com/frodsan) Do I have to update in both?\r\n>  \r\n> —\r\n> Reply to this email directly or view it on GitHub (https://github.com/rails/rails/pull/8884#issuecomment-12119948).  \r\n>  \r\n>  \r\n>  "},{"ts":1357853901000,"body":"@goshakkk Thanks! Should I close this then?"},{"ts":1357853961000,"body":"@mattdbridges merging here but next time use docrails for documentation changes :smile: \r\n\r\nThanks!!!"},{"ts":1357854053000,"body":"Will do @guilleiguaran!"},{"ts":1357864858000,"body":"Basically docrails is just a 'fast track' so you don't have to wait for us to get to your PR. :) Doing things here is fine, just means it might take a while to get to ;)"},{"ts":1357866325000,"body":"@mattdbridges All the info is here [Contributing to Rails Documentation](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)."},{"ts":1357876503000,"body":"@steveklabnik @frodsan Forgot about that section. Need to do a better job reading and less skimming..."}]},{"timestamps":[]},{"timestamps":[{"ts":1360677469000,"body":"Makes sense to me /cc @tenderlove @ernie"},{"ts":1360678175000,"body":"Oh man. This is all such a mess. :(\r\n\r\nNote that for table aliases, we won't know the actual table, so we lose the desired quoting behavior in those cases. If we weren't trying to make ARel less knowledgable about the DB connection and tables, I'd almost say a cleaner solution would be to make column_for public on the ARel side, and let this code pass the attr directly to it. But we are, so I won't.\r\n\r\nThat being said, I don't like duplicating so much logic between AR and ARel. It definitely illustrates the problem we're facing nicely. :(\r\n\r\nAnd now, because I have frowned enough in this issue, I will finish with a :smile:."},{"ts":1361983071000,"body":"Now that we've reverted that commit, this shouldn't be needed anymore. Thank you for the patch."}]},{"timestamps":[{"ts":1374450543000,"body":"@ssimeonov thanks for a PR. it looks good apart from 2 things:\r\n\r\n* please add a changelog entry\r\n* please add a detailed description in the commit message instead of linking to it - people should not be forced to open the browser when looking at the git history (more info on commiting and messages is here: guides.rubyonrails.org/contributing_to_ruby_on_rails.html#commit-your-changes)"},{"ts":1374463192000,"body":"@drogus Done + will do a separate pull request with a single, clean commit."},{"ts":1374502531000,"body":"You don't need to make new PRs, just rebase and force push."},{"ts":1374504250000,"body":"@steveklabnik yes, that's what I did and you can see it in the commit log of the forked repo. GH had a hiccup of sorts and showed me two commits as opposed to a single one in this PR, which is why I closed it and created a new one. I presume it was some type of ephemeral fragment caching."},{"ts":1374504332000,"body":"Cool. :smile: "}]},{"timestamps":[{"ts":1357711640000,"body":"@rwz the json scaffold generator was merged in jbuilder?"},{"ts":1357711650000,"body":"I've also made quotes consistent (single) across generated controller and removed `--no-html` options, since we no longer need it."},{"ts":1357711659000,"body":"@guilleiguaran, working on that right now."},{"ts":1357715600000,"body":"It's here https://github.com/rails/jbuilder/pull/91"},{"ts":1357722157000,"body":"Remember to update the CHANGELOG. I think you will have to remove the entry to the html option "},{"ts":1357722893000,"body":"please update relevant guides too."},{"ts":1357740673000,"body":"Fixed codestyles."},{"ts":1357740770000,"body":"Ok, about changelog. We're going to bring jbuilder as default, overriding rails controller scaffold to include json stuff in it. So, maybe we should/could combine these two things into one CHANGELOG issue. Thoughts?"},{"ts":1357741641000,"body":"@rwz can you rebase this and squash your commits? :smile: "},{"ts":1357741721000,"body":"@guilleiguaran sure"},{"ts":1357741893000,"body":"@guilleiguaran done"},{"ts":1357742231000,"body":"@carlosantoniodasilva @guilleiguaran removed mentions of `--no-html`. Will scan guides for outdated examples."},{"ts":1357845981000,"body":"Doh. Didn't even see this PR, so I went ahead and just implemented it on my own.\r\n\r\nPlease do add the docs etc. Thanks!"}]},{"timestamps":[{"ts":1369413183000,"body":"Thanks @vipulnsward !  Will this be backported to all supported Rails versions?  3.2.x at least (3.1.x as well)?  As folks update to Ruby 1.9.3-p429, they *will* encounter this."},{"ts":1369414097000,"body":"+1 \r\n\r\nAlso a big +1 to backport to 3.2-branch."},{"ts":1369464961000,"body":"I'm not sure this is the right fix. The change made to Ruby was to prevent Time objects being treated as integers - this would nullify the effect of the change as AS::TWZ is meant to be compatible with Time. I'll investigate further."},{"ts":1369483779000,"body":"Ugh, it looks as though `Time.at` [checks the type][1] of the first argument to see [if it's a][2] `Time` value and converts it if it does, however [the type check][3] explicitly checks that [it's not a subclass][4] of `Time`.\r\n\r\nJust blindly adding `to_int` isn't really the answer as it's saying that TWZ values can be treated like integers all of the time and may have consequences elsewhere. We may have to consider overriding `Time.at` to convert TWZ values first before calling `super`.\r\n\r\n\r\n[1]: https://github.com/ruby/ruby/blob/v1_9_3_429/time.c#L2553-L2559\r\n[2]: https://github.com/ruby/ruby/blob/v1_9_3_429/time.c#L1815\r\n[3]: https://github.com/ruby/ruby/blob/v1_9_3_429/error.c#L430-L437\r\n[4]: https://github.com/ruby/ruby/blob/v1_9_3_429/error.c#L433\r\n"},{"ts":1369504703000,"body":"@pixeltrix Right. https://github.com/ruby/ruby/commit/c64f26a had motivated me to make this small fix. There should be a better approach. I hope overriding `Time.at` won't add an extra overhead."},{"ts":1369938131000,"body":"+10\r\n\r\nRuby 1.9.3-p429 FAIL\r\n\r\nI use Rails 3.2.12. As a quick work around, I went down to p392 patch level, in development, which works if anybody is in a rush to get things working while a solution is in the works:\r\n\r\nrvm upgrade 1.9.3-p429 1.9.3-p392\r\n\r\nthough note that Heroku for example uses p429 in its stack, so you'd be broken if you're using ruby 1.9.3 and Rails 3.2.x in Heroku."},{"ts":1370681863000,"body":"Fixed in master: b7f9de27f0558d6144f982cae83f32ca85a07f7e\r\nFixed in 4-0-stable: 927df2d49a49f9db40e000a528d2b2989b99e877\r\nFixed in 4-0-0: 214e377a329d8b4df5a8cff4b6a7347f1282b384\r\nFixed in 3-2-stable: f42e0fd3f4d3e2f4b806b001b6ed88c8da8cd833\r\n\r\n@vipulnsward thanks for reporting"},{"ts":1371060921000,"body":"Thanks @pixeltrix !"}]},{"timestamps":[{"ts":1361832091000,"body":"+ 1 Makes sense."},{"ts":1361851319000,"body":":+1: /cc @guilleiguaran "},{"ts":1361851464000,"body":"@banyan Thanks! :heart: "},{"ts":1361851511000,"body":"Thanks!!!"},{"ts":1361855885000,"body":"Thanks!"},{"ts":1361886335000,"body":"I'm not a fan.  Agile Development with Rails, I suggest adding \"as: 'store'\".  As the root helper takes only one parameter, so you will need to add 'to:'.  This is not obvious.\r\n    \r\nPerhaps the root helper could be modified to accept two parameters, and if the first is a string and the second is a hash will construct the proper hash?  Example:\r\n\r\n    root 'store#index', as: 'store'"},{"ts":1361891874000,"body":"@rubys \r\n\r\nThe root helper can be used only once for each application.\r\nIn case of root route, URL helpers `root_path` and `root_url` are defined by Rails.\r\nSo I haven't had the idea that second hash will be passed in. \r\nCertainly it becomes not obvious in such cases. hmm...\r\n"},{"ts":1361892967000,"body":"@banyan actually you can use `root` inside namespaces/scopes as well, generating different `xxx_root_url` helpers:\r\n\r\n```ruby\r\nMasterApp::Application.routes.draw do\r\n  namespace :admin do\r\n    root to: \"admin#index\"\r\n  end\r\n\r\n  root to: \"home#index\"\r\nend\r\n\r\n```\r\n\r\n```shell\r\n$ rake routes\r\n    Prefix Verb URI Pattern      Controller#Action\r\nadmin_root GET /admin(.:format) admin/admin#index\r\n      root GET /                home#index\r\n```"},{"ts":1361893615000,"body":"oh, I didn't know that. Thank you for letting me know that. @carlosantoniodasilva "}]},{"timestamps":[{"ts":1360260003000,"body":"Updated patch looks good, but I don't think it requires releasing the Kraken just yet :) commit da19327 introduced a change that isn't otherwise used here."},{"ts":1360344821000,"body":":+1: "},{"ts":1360365270000,"body":":space_invader:"},{"ts":1360365410000,"body":"Please make sure you squash the commits :)."},{"ts":1360448514000,"body":"How do I squash the commits?"},{"ts":1360449421000,"body":"I think [this post](http://blog.steveklabnik.com/posts/2012-11-08-how-to-squash-commits-in-a-github-pull-request) from @steveklabnik might help :)"},{"ts":1360530999000,"body":"@carlosantoniodasilva  I think I have squashed the commits. "},{"ts":1360540633000,"body":"It still says there are 11: https://github.com/rails/rails/pull/9204/commits\r\n\r\nDid you force push to the branch successfully?"},{"ts":1360656363000,"body":"I believe that the commits have now been successfully squashed here as well."},{"ts":1360760550000,"body":"This change impacts the ability to create a db/schema.rb file.  See:\r\n\r\nhttps://github.com/rails/rails/commit/f8c8ad56c8a1cb48c6535fd8e248dcb9049e0aa3#L3R608"},{"ts":1360776770000,"body":"Yes, seeing same error here."},{"ts":1360791499000,"body":"I didn't draw the connection at the time, but I'm seeing lots of errors as a result of this:\r\n\r\nhttp://intertwingly.net/projects/AWDwR4/checkdepot/\r\n\r\nAll go away if `valid_type?` is made public."},{"ts":1360812667000,"body":"I just moved them to public methods. Running additional tests now."},{"ts":1360945626000,"body":"Hi @ranjaykrishna, I have reverted this commit because it introduced caused a failing test. I have also reverted the commit by @rubys as it relates solely to this commit. Please fix up the test and send a new PR incorporating the commit by @rubys also."}]},{"timestamps":[{"ts":1374442025000,"body":"can you add [ci skip] to the commit message?"},{"ts":1374480836000,"body":"Added the  [ci skip]  to commit message and Please let me know if there is anything. Thanks "},{"ts":1374489148000,"body":"Ok . I will  do it.  Thanks\r\n"},{"ts":1374495422000,"body":"cc @pftg Modified the changes as per your previous comment"},{"ts":1374495615000,"body":"Also, please squash commits to one, and do not forget about `[ci skip]`, thanks"},{"ts":1374495998000,"body":"Doing the squash"},{"ts":1374497244000,"body":"Done the Squash and removed extra spaces -- Thanks"},{"ts":1374497512000,"body":":+1: "}]},{"timestamps":[{"ts":1374762939000,"body":"This seems more like a bug. It should be generated."},{"ts":1374763928000,"body":"Can you try with master? I think we do have test for this as well."},{"ts":1374764044000,"body":"See this \r\n\r\nhttps://github.com/rails/rails/blob/master/railties/test/generators/generator_generator_test.rb#L8-L22"},{"ts":1374772795000,"body":"Confirmed working with master\r\n\r\n```\r\ncrap/issue_11597~>bundle exec rails generate generator Awesome                                                                                                    \r\n      create  lib/generators/awesome\r\n      create  lib/generators/awesome/awesome_generator.rb\r\n      create  lib/generators/awesome/USAGE\r\n      create  lib/generators/awesome/templates\r\n      invoke  test_unit\r\n      create    test/lib/generators/awesome_generator_test.rb\r\ncrap/issue_11597~>\r\n```\r\n\r\n\r\nClosing this. "}]},{"timestamps":[{"ts":1357684532000,"body":"cc / @carlosantoniodasilva "},{"ts":1357685159000,"body":"@carlosantoniodasilva  thanks!"}]},{"timestamps":[{"ts":1365157096000,"body":"If you absolutely need to use Models, why not simply define them in the Migration itself?\r\n\r\n```ruby\r\nclass ChangeProducts < ActiveRecord::Migration\r\n  class SampleProduct < ActiveRecord::Base\r\n    self.table_name = \"products\"\r\n  end\r\n\r\n  def up\r\n    SampleProduct.update_all(valid: true)\r\n  end\r\n\r\n  def down\r\n    # ...\r\n  end\r\nend\r\n```\r\n\r\nI don't think we should promote the usage of models in Migrations with a specific API, if you need them, it's very easy to define them. I'm :-1: on this one.\r\n\r\n/cc @rafaelfranca @carlosantoniodasilva "},{"ts":1365177770000,"body":"I totally agree. In my opinion migrations should not be used to do data change."},{"ts":1365178014000,"body":"I usually do what @senny said when in need of a model in a migration, it's easier and safer."},{"ts":1365183278000,"body":"Thank you for the contribution. Since right now you can do what @senny described I'm closing this one.\r\n\r\nIf we are missing something please let us know commenting here."}]},{"timestamps":[{"ts":1374695006000,"body":"cc @kennyj "}]},{"timestamps":[{"ts":1373289660000,"body":"Can you add a changelog entry as well please (and amend/push force the commit)? Thanks."},{"ts":1373295800000,"body":"Could you please squash your two commits into a single one? Simple but very nice addition! :+1: "},{"ts":1373296591000,"body":"Now all is well? :)"},{"ts":1373296679000,"body":"Nice, thanks. /cc @carlosantoniodasilva "}]},{"timestamps":[{"ts":1365155313000,"body":"looks good!\r\n\r\n/cc @pixeltrix "},{"ts":1365160568000,"body":"Actually there's something better we can do - `scope_options` returns `:options` and `:blocks` so we don't need to create the additional method, e.g:\r\n\r\n``` ruby\r\nscope_options.each do |option|\r\n  if option == :blocks\r\n    value = block\r\n  elsif option == :options\r\n    value = options\r\n  else\r\n    value = options.delete(option)\r\n  end\r\n\r\n  if value\r\n    recover[option] = @scope[option]\r\n    @scope[option]  = send(\"merge_#{option}_scope\", @scope[option], value)\r\n  end\r\nend\r\n```\r\n\r\nand while we're in there I think we should remove the `scope_options` method and explicitly list them in a constant `SCOPE_OPTIONS` underneath `URL_OPTIONS` at the top, e.g:\r\n\r\n``` ruby\r\nSCOPE_OPTIONS = [:path, :shallow_path, :as, :shallow_prefix, :module, :controller, :path_names, :constraints, :defaults, :shallow, :blocks, :options]\r\n```\r\n"},{"ts":1365160728000,"body":"This is what the diff should look like:\r\nhttps://gist.github.com/pixeltrix/827cc2bcad9c20a00a61"},{"ts":1365175056000,"body":"@pixeltrix Thanks! That's indeed a better way of refactoring it. I've updated the PR with your comments."},{"ts":1365273531000,"body":"@wangjohn thanks!"}]},{"timestamps":[{"ts":1362899097000,"body":"This has been fixed in master already. Those are no longer dependencies of\r\na newly generated plugin. Thanks for the patch regardless!\r\n\r\n>\r\n>    -\r\n>\r\n>\r\n\r\n-- \r\n\r\n\r\n*José Valim*\r\nwww.plataformatec.com.br\r\nSkype: jv.ptec\r\nFounder and Lead Developer"}]},{"timestamps":[{"ts":1373321053000,"body":"Thank you for the contribution.\r\n\r\nFirst, `validates` is not preferred.\r\n\r\nAlso this fall in cosmetic changes and we don't accept cosmetic changes."},{"ts":1373322087000,"body":"@rafaelfranca Thanks, learning what comes under cosmetic changes :)"}]},{"timestamps":[{"ts":1372449611000,"body":"Thanks @josh! Would we have any downside on doing this by default for signed/encrypted jars? I know it will expire all previously signed cookies, but we can likely provide an upgrade plan."},{"ts":1372449811000,"body":"@josevalim I'd love that actually. But I was concerned it was going to be too backwards incompatible."},{"ts":1372451649000,"body":"This seems good to me."},{"ts":1372498071000,"body":"I like this. Let's not require the the #expires chain, though, but figure another backwards compatible way to do it. Using \"expires\" as the key is good too since that's the same as we already had. :+1:"},{"ts":1372690664000,"body":"I agree this should be the new default for signed and encrypted jars. It seems like a no-brainer security upgrade and it would be nice to avoid introducing another jar if possible. \r\n\r\nIf we only trigger the verification when there's an expires key, wouldn't that be enough? \r\n\r\nFor signed and encrypted cookies, a user wouldn't be able to manually strip an expires key, so if we encounter a cookie without an expires key, we could just assume that was a \"legacy\" cookie and should be accepted. \r\n\r\nIf someone wanted to forcibly expire all of their legacy cookies, they could choose to change their secret key. "},{"ts":1372703932000,"body":"For sure. I'm liking that approach.\r\n\r\nBut I still think we'll need a flag to disable upgrading the \"legacy cookies\"."},{"ts":1373314095000,"body":"Thought of a good way to do this in a backwards compat way.\r\n\r\nI want to add the expiration support down at the message verifier level. This will allow us to read back both permanent and perishable signed messages."},{"ts":1373314333000,"body":"Think I still need to add support for this to the `MessageEncrypter` class."},{"ts":1373411522000,"body":"cc'ing some security people that should have a look. @NZKoz @tenderlove @ptoomey3 @postmodern"},{"ts":1373412828000,"body":"This isn't actually backwards compatible either as digests generated by this code can't be read by the old code, I don't think this is a bad thing necessarily, but it's not backwards compatible:\r\n\r\n```ruby\r\nirb(main):001:0> mv = ActiveSupport::MessageVerifier.new(\"lolsosecret\")\r\n=> #<ActiveSupport::MessageVerifier:0x007f82aa71e740 @secret=\"lolsosecret\", @digest=\"SHA1\", @serializer=Marshal>\r\nirb(main):002:0> old = mv.generate(\"I am old\")\r\n=> \"BAhJIg1JIGFtIG9sZAY6BkVU--caff953d49a2d68443051b40ad6a36bd6b850970\"\r\nirb(main):003:0> new = \"BAhJIg1JIGFtIG9sZAY6BkVU--#{Time.now.to_i}--caff953d49a2d68443051b40ad6a36bd6b850970\"\r\n=> \"BAhJIg1JIGFtIG9sZAY6BkVU--1373412772--caff953d49a2d68443051b40ad6a36bd6b850970\"\r\nirb(main):004:0> mv.verify(new)\r\nActiveSupport::MessageVerifier::InvalidSignature: ActiveSupport::MessageVerifier::InvalidSignature\r\n```\r\nI don't think there's actually a way to make this reliably backwards compatible without introducing issues anyway.\r\n\r\nAs for the encryption case, the encryptor signs the data too so there's no need to add expiry to the encryption code, just make sure the args are passed down into the relevant verifier.\r\n\r\nFinally, an option to allow disabling this would be good so that people who *do* have to share cookies between apps which don't get upgraded simultaneously won't suddenly have things stop working."},{"ts":1373413338000,"body":"Worth noting that when you're serializing the cookie you could just jam the expires time in there and therefore need no changes to the MessageVerifier. \r\n\r\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/middleware/cookies.rb#L385-L389\r\n\r\ninstead of serializing the raw value serialize `{_expires: int, value: value}` then detect that on read"},{"ts":1373420072000,"body":"Regarding embedding the expiry into the message.. This sounds appealing, as you don't have to make any modifications to MessageVerifier.  However, what about the following downsides:\r\n\r\n* If you embed the expiry into the serialized data then you are required to deserialize to check expiry.  If you keep it separate you can check expiry first and not bother with needless deserialization.\r\n* It would seem there would be a small, though probably negligible, chance that this format could be misinterpreted upon deserialization.  What if a permanent signed cookie has a deserialized object that matches `{_expires: int, value: value}`.  How would you distinguish a legacy permanent cookie from from a perishable one?"},{"ts":1373420652000,"body":"@ptoomey3 yes, you'd have to deserialize to check expiry, this is a small performance cost but not one of any consequence really.  In the normal case it has to be deserialized anyway, and in the 'expired' case you're still forced to do the HMAC checks, I don't see a huge issue here.\r\n\r\nAs for your second point, you can't actually serialize hashes in cookies at present because of [this code](https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/middleware/cookies.rb#L284-L290)\r\n\r\n```ruby\r\n      def []=(name, options)\r\n        if options.is_a?(Hash)\r\n          options.symbolize_keys!\r\n          value = options[:value]\r\n        else\r\n          value = options\r\n          options = { :value => value }\r\n        end\r\n\r\n        handle_options(options)\r\n\r\n        if @cookies[name.to_s] != value or options[:expires]\r\n          @cookies[name.to_s] = value\r\n          @set_cookies[name.to_s] = options\r\n          @delete_cookies.delete(name.to_s)\r\n        end\r\n\r\n        value\r\n      end\r\n```\r\n\r\nSo it's something we should write in the release notes, but we're not breaking anyone's apps by doing this unless they're doing some EGREGIOUS hax to avoid that check"},{"ts":1373422961000,"body":"@NZKoz Ah, right, I had forgotten about the inability to serialize hashes in cookies (just curious...what if the value of \":value\" in the options hash is itself a hash?).  And, yes, the timing benefit is nominal compared to the hmac validation.  So, if there is negligible issues with this formatting causing backward compatibility problems, then this approach seems nice.  \r\n\r\nFrom a security standpoint, I like that the hmac would be over the entire composite object (data and expiry) in a format that doesn't require splitting across delimiters to reconstruct for verification."},{"ts":1373424551000,"body":"@NZKoz wdyt about a `PerishableMessageVerifier` subclass? Definitely worried about whatever crazy things people are already using `MessageVerifier` for.\r\n\r\n> I don't think there's actually a way to make this reliably backwards compatible without introducing issues anyway.\r\n\r\nSorry, I meant as an upgrade path, any existing non-timestamped cookies will be still valid.\r\n\r\n> As for your second point, you can't actually serialize hashes in cookies at present because of this code\r\n\r\nI was actually avoiding `{:_expires}` because I thought that might be possible. That exception might be worth exploiting."},{"ts":1373425357000,"body":"@josh a seperate subclass would be fine which would let you use custom serialization to encode the timestamp to avoid the issue @ptoomey3 mentioned.\r\n\r\nBut I still think the right approach is to exploit the fact you can store hashes, and just do it that way (for signed and encrypted cookies) "},{"ts":1373425575000,"body":"@ptoomey3 is right. For signed and encrypted cookies you can do `cookies.signed[:a] = {:value => {:b => 'c'}}`"},{"ts":1373425679000,"body":"@mastahyeti which would continue to work no?"},{"ts":1373425792000,"body":"The concern is just that someone else might already be using the namespace `_expires` or there might be some crazy app in which an attacker has control over the hash keys."},{"ts":1373426281000,"body":"There'd be a small risk of people who just *happened* to store `cookies[:a] = {:value=>{:_expires=>1, :value=>\"asdf\"}}` but honestly, that's not worth the problems with the MessageVerifier approach where we have to attempt to provide backwards compatibility which is risky stuff.\r\n\r\nWhat's the attack where an attacker has control of your hash keys?  They could cause the application to generate an expired cookie that expired at a known time in cases where you currently generate non-expiring cookies?  They couldn't force your application to generate *unsigned* cookie or force your app to generate cookies which expire later than you wanted them to?\r\n\r\n"},{"ts":1373427637000,"body":"There isn't much of an attack scenario, I agree. If the application had two cookies, one of which was a normal signed cookie and entirely controlled by the attacker, and the other of which was a expiring signed cookie that wasn't controlled by the attacker. He could modify the cookie that he controls to look like an expiring signed cookie. He could then take that cookie and replace the actual expiring signed cookie with the spoofed one in the browser. \r\n\r\nThere are a lot of ifs and buts in that scenario, and it is really more of an issue with the fact that signed cookie values can be swapped between cookies. That issue should probably be addressed separately because it *does* pose a moderate risk for any app that has multiple, similarly formatted, signed cookies."},{"ts":1373427804000,"body":"The only way to conclusively avoid those issues is to actually require a seperate jar like @josh initially mentioned, or to have it as a configuration option where we document \"hey, you turn this on here are the risks\""},{"ts":1373427918000,"body":"Yep. It might not be worth worrying about it here."},{"ts":1373428861000,"body":"Yeah, I'll think it over some more, but my concern was more about breaking someone else's code rather than a specific security issue.  But, I agree, the probability of this causing a breakage are fairly low, and possibly not worth worrying too much about. "},{"ts":1373429333000,"body":"I think in this case we should take a risk of a breakage over a risk of an attacker being able to circumvent this stuff.  Especially if we have an option in `config.` for people who find some obscure breakage."},{"ts":1373484022000,"body":"If we're going to have to do the \"legacy cookie jar\" upgrade path thing again, I'd like to try to slip signing the cookie name into the value as well.\r\n\r\nIts kinda scary that you could swap the cookie value from some other value into an auth token.\r\n\r\n``` ruby\r\ncookies.signed[:user_id] = 42\r\ncookies.signed[:referrer_id] = params[:referrer_id] # 42\r\n\r\ncookies[:user_id] == cookies[:referrer_id]\r\n```"},{"ts":1373484285000,"body":"@NZKoz what do you think about this approach? Not yet done yet. Still need to figure out the upgrade shit."},{"ts":1373514983000,"body":"@josh Does your above comment imply that, currently, signed session cookies uses the same key as other signed cookies (it looked like this was the case from a quick 30 second look at the code from my phone, but I will take a closer look when I am on my laptop)?  In other words, is is possible that these two could be equal?\r\n\r\n    cookies.signed[:referer_id] = { value: arbitrary_user_controlled_value } # contains session_id, user_id, etc.\r\n    session[:user_id] = 42\r\n\r\nIt seems pretty unlikely you would have a `cookies.signed[:referrer_id]` cookie that is completely user controlled (why would you be signing a value that is completely user controlled anyway?).  But, I was just curious if that was what you were implying?  Like @mastahyeti  :metal: on including the name in the signature to prevent this kind of thing."},{"ts":1373769121000,"body":"including the name in the cookie signature is a good idea, but a complete pain in terms of backwards compatibility.  If you're backwards compatible, then you're allowing attackers to skip the name verification which defeats the entire purpose of adding the name verification.   We could add it as a config option though and warn that it'll be on in the future and you possibly want it now.\r\n\r\n@ptoomey3 yeah, if you let users specify arbitrary hashes that you then sign with the cookie secret,then they can forge sessions.  "},{"ts":1373819033000,"body":"@NZKoz I think we'll need the upgrade flag now just for expires if we are doing it at the cookie jar level. So it seems like a good time to introduce both, you think?\r\n\r\nIn terms of app upgrade flow, you'd have a flag that basically excepts both forms of cookies, the current signature and these new signed name and expires values. You'd maybe keep that flipped for a month in production while peoples cookies are getting upgraded then flip it over to the \"more secure\" default when you're ready. Green field apps can do this out of the box."}]},{"timestamps":[{"ts":1357669795000,"body":"Great stuff!"},{"ts":1357669866000,"body":":fire:"},{"ts":1357669953000,"body":":heart:"},{"ts":1357671403000,"body":"I tried to follow the pattern used by the etag stuff in ConditionalGet (https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/conditional_get.rb#L28-L30). Is that code also not thread safe?"},{"ts":1357671842000,"body":"I did find one error in this pull request, I was evaluating the view_cache_dependencies at the class level, instead of the instance level as I had originally written. (This was the result of a poorly considered refactoring.) I'm getting a new pull request ready for that, but I'm happy to continue discussing the threading issue here."},{"ts":1357672612000,"body":"Sorry, I misunderstood the code. Since the view cache dependencies are defined at class definition time it is fine to store they on a class variable."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1374448469000,"body":"@vipulnsward thanks for a PR! Could you extend a commit message a bit and say why do we need this? Basically the summary of the info in #11497"},{"ts":1374469212000,"body":"@drogus done."},{"ts":1374473888000,"body":"@vipulnsward as this is a bugfix we should add a CHANGELOG entry."},{"ts":1374484666000,"body":"@senny done. Also fixed the build."},{"ts":1374484978000,"body":"@orslumen I dint catch your full name, would like to add to CHANGELOG :)"},{"ts":1374488864000,"body":"Looks great, thanks!"},{"ts":1374502347000,"body":"Thanks for picking this up.\r\n\r\nPS. For the changelog: orslumen will do fine :)"}]},{"timestamps":[{"ts":1364043051000,"body":"You shouldn't need to do this; assets gems belong in the assets group. To turn on asset compilation in production just\r\n\r\n```\r\nconfig.assets.compile = true\r\n```\r\n\r\nhttp://guides.rubyonrails.org/asset_pipeline.html#live-compilation"},{"ts":1364046049000,"body":"Yes, Rails default strategy is to precompile assets only in production. If you need to change it, you should do it in your own app and it can be done as @steveklabnik said and by changing config/application.rb to require assets in production."},{"ts":1364056031000,"body":"This isn't about assets, it's about templates."},{"ts":1364056151000,"body":"If you need coffeescript templates you should change in your application. Not every application use coffeescript templates and we don't want to make this the Rails default."},{"ts":1364056216000,"body":"How about about disabling coffee templates in test and development by default?"},{"ts":1364056626000,"body":"I don't think is worth, doing this we will also disable coffeescript assets. If you need coffee templates on production just put the gem in the top level"},{"ts":1364056865000,"body":"Fair enough, thanks guys."},{"ts":1364081876000,"body":"I'm +1 on this. We're bundling and encouraging coffeescript. It is the Rails default already.\r\n\r\nAnd it's extra confusing that they work in dev/test, then break when you deploy."},{"ts":1364154401000,"body":"I'm not sure if we still needing the ``:assets`` group in the Gemfile, I think the assets compilation isn't done 'by accident' anymore in production when a requested asset is not precompiled"},{"ts":1364155512000,"body":"@guilleiguaran Yeah, I remove the `assets` group in apps now. Nice to go back to `Bundler.require :default` in `config/application.rb` instead of the strange `Bundler.require :assets => ...` line.\r\n\r\n@gkop Could you update the changelog entry and rebase master? :heart:"}]},{"timestamps":[{"ts":1367344200000,"body":"We will have to wait the Rails 4.0.0 release to backport this one. I'll do it as soon it is released"},{"ts":1367344613000,"body":"Should I backport this to 4.0-stable ?"},{"ts":1367344812000,"body":"Only if it is needed to fix #10381 "}]},{"timestamps":[{"ts":1358773927000,"body":"Thanks for the comments, I've updated the code accordingly."}]},{"timestamps":[{"ts":1368031279000,"body":"We don't need to require this since it is required in `lib/active_support.rb`"},{"ts":1368031382000,"body":"Ok. Since it is in a core_ext I think we should require it. Thank you"}]},{"timestamps":[]},{"timestamps":[{"ts":1361455133000,"body":"The `opts` variable is unused, but the helper method call is necessary to prove that there's no mutation."},{"ts":1361458702000,"body":"Thanks!"}]},{"timestamps":[{"ts":1373558766000,"body":"Strange. Why travis is building it even with [ci skip]"},{"ts":1373560076000,"body":"The [ci skip] needs to be in the commit message. You have it in the PR title."},{"ts":1373560241000,"body":"On your local machine, you can do:\r\n\r\n`git commit --amend`   and change the commit message in the editor that pops up (be sure to save it before exiting)\r\n\r\n  ... then\r\n\r\n`git push --force`        to propagate the change to your fork, which will then automatically update the file in the PR."},{"ts":1373560366000,"body":"I'm an idiot. Should be fixed now."},{"ts":1373619088000,"body":"thanks for your contribution :yellow_heart: "}]},{"timestamps":[{"ts":1365851984000,"body":"I don't think we should point users to the edge guides."},{"ts":1365853710000,"body":"No we shouldn't. The code points to guides because that's where the stable guides are, and when Rails 4 is released, that's where it should point to.\r\n\r\nThanks @ogawaso!"}]},{"timestamps":[]},{"timestamps":[{"ts":1364824441000,"body":"`assert_not_nil` is not needed you're already asserting for some content"},{"ts":1364841060000,"body":"@choudhuryanupam there's no need to close the Pull Request and reopen. You can just modify the commits in your branch and do git push -f origin your_branch. Github will update the PR accordingly"},{"ts":1364922946000,"body":"@spastorino Thanks for the tip. Will follow in the future."}]},{"timestamps":[]},{"timestamps":[{"ts":1357683873000,"body":"cc / @carlosantoniodasilva "},{"ts":1357684376000,"body":"Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1371447859000,"body":"I think using `colspan` is ok. You would also need to edit the templates from the guides to match that change. And you should add a CHANGELOG entry.\r\n\r\n@carlosantoniodasilva @steveklabnik what do you guys think?"},{"ts":1371457678000,"body":"Thanks @senny. I made changes you referred."},{"ts":1371459481000,"body":"can you also squash all the commits into a single one and `force push` to update the PR?"},{"ts":1371476555000,"body":"Done. Created a new branch ```added-th-colspan-attribute``` and sent a new pull request(#10976). Thanks @senny!"},{"ts":1371488622000,"body":"I hope, it is ok now."},{"ts":1371534122000,"body":"thanks for your contribution :yellow_heart: "},{"ts":1371541433000,"body":"We love Rails. Thanks for your help @senny :+1:"}]},{"timestamps":[]},{"timestamps":[{"ts":1365439193000,"body":"I think `unmerge!` would be a better name."},{"ts":1365439920000,"body":"Can you show me a use-case for this method? We don't take adding methods to `Hash` lightly."},{"ts":1365442531000,"body":"My use case (i'm sure there are others):\r\nI have two hash: old_hash, new_hash (one is from a json api, the other a yaml file)\r\nI want to see what has changed (ie what's new in new_hash)\r\n```ruby \r\nwhat_was_added = new_hash - old_hash\r\nwhat_was_removed = old_hash - new_hash\r\n```\r\nI agree that commits to Hash should be examined very carefully. Maybe overwriting the \"-\" is an overreach. Let me know what you think.\r\n"},{"ts":1365444991000,"body":"Given hash doesn't even define `+`, defining `-` seems definitely like an overreach.\r\n\r\nI would also not combine deep and non-deep unmerges, just as .merge and .deep_merge are two separate methods. `unmerge`/`unmerge!`/`deep_unmerge`/`deep_unmerge!` would be the most logical names."},{"ts":1365448958000,"body":"`unmerge` in this case would be similar to diff (which is being deprecated)\r\nhttps://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/hash/diff.rb\r\n\r\nI'll modify the name to  `deep_unmerge` and `deep_unmerge!`"},{"ts":1365517945000,"body":"Thank you @elfassy, but we don't actually merge additions to active support unless they're required / could be useful in the Rails codebase and for the vast majority of users.\r\n\r\nSince this apparently does not pass these conditions, I'm giving it a close. Please feel free to come up with more suggestions on where it could be used and why, and if we get useful ones and more people to approve, we can think about reopening.\r\n\r\nThanks!"}]},{"timestamps":[{"ts":1373247547000,"body":":shipit: \r\n\r\n/cc @pixeltrix any comments on this?"},{"ts":1373297312000,"body":"My biggest problem with this is we are then committed to supporting this API which I think is something we'd rather not do as it'll make it harder to clean all this up later. There's essentially a dispatcher instance for every route and I think @tenderlove wanted to change that at some point so I'm :-1: for the moment.\r\n\r\n@tenderlove wdyt?"},{"ts":1373985894000,"body":"Let me know how I can assist."},{"ts":1374827329000,"body":"Closing since this is not a path we want to take. @xaviershay, I'll be starting work on a routing refactoring in a couple of weeks - I'll ping you when I've got something to show."},{"ts":1374887871000,"body":"Cool, happy to help when needed."}]},{"timestamps":[{"ts":1367616852000,"body":"Thanks! Please include benchmark in commit message :heart:"},{"ts":1367630804000,"body":"Sure! Will update in some time.\r\nOn May 4, 2013 3:04 AM, \"Jeremy Kemper\" <notifications@github.com> wrote:\r\n\r\n> Thanks! Please include benchmark in commit message [image: :heart:]\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/10453#issuecomment-17419512>\r\n> .\r\n>"},{"ts":1367771717000,"body":"@jeremy done. Will keep in mind to commit with benchmarks henceforth. :smile: "}]},{"timestamps":[{"ts":1373829707000,"body":"The commit that introduced the check was 19ac034bdc9be175eff7cf54208ba14b43d97681\r\n\r\n@spastorino as you are the author, can you take a look?"},{"ts":1373862560000,"body":"@MSch I've committed myself to both master and 4-0-stable because it's better to track that regression as a revert of the offender commit.\r\nThanks a lot for letting us know."},{"ts":1373875365000,"body":"@spastorino Sure thing, now I only need @fxn to merge https://github.com/fxn/rails-contributors/pull/21 :)"},{"ts":1373876199000,"body":"@MSch done, and deployed, thanks very much! http://contributors.rubyonrails.org/contributors/martin-schuerrer/commits"}]},{"timestamps":[{"ts":1356552074000,"body":"Original issue is here:\r\nhttps://github.com/rails/rails/issues/8619"},{"ts":1356552729000,"body":"@carlosantoniodasilva maybe I'm missing something, but I think this pull request is fine. Could you confirm?"},{"ts":1357484370000,"body":"Any update on this?"},{"ts":1357487043000,"body":"Yeah, the change seems fine. I'd like to confirm with @jonleighton if we're good by not responding to `is_a? Array` anymore, I think that was intentional, but it's always good to confirm."},{"ts":1357902518000,"body":"Yeah, I think it's fine that we don't respond to `is_a? Array`. People should check `to_ary` as this change does."},{"ts":1358037260000,"body":"Apologies for the late comment, but a couple thoughts on this:\r\n\r\n* the dummy class is spelled wrong. Minor, but bugs the heck outta me (`FakeAssociatonProxy` is missing an `i`).\r\n\r\n* the dummy object means that the behavior for *real* `CollectionProxy` objects is untested. For instance, if they stopped responding to `to_ary`, the tests would still pass despite the bug having reappeared.\r\n\r\n* the underlying change (`is_a?(Array)` no longer true for collection proxies) is going to break other people's code - maybe add a CHANGELOG entry for it?\r\n"},{"ts":1358040215000,"body":"True, I wanted to add an integration test for that first, but does Rails actually have them? I haven't found any: actionview is tested without any ties to activerecord."},{"ts":1358092496000,"body":"I fixed the spelling in a0265b98f16."}]},{"timestamps":[]},{"timestamps":[{"ts":1374055678000,"body":"#11469 to master is enough. It will be backported once it's merged to the relevant branches.\r\n\r\nThanks for your work :yellow_heart: "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1375750323000,"body":"Well, removing it will make the test useless. So I think it is not an option. Can we check if it is JRuby and skip these calls?"},{"ts":1375750969000,"body":"@rafaelfranca, done.\r\n\r\nDo you know what issue caused the switch from using ```/``` to ```div```? If I know the background maybe we can find a better way to test it."},{"ts":1375752154000,"body":"```ruby\r\n$ irb\r\n>> 3 / 2\r\n=> 1\r\n>> require 'mathn'\r\n=> true\r\n>> 3 / 2\r\n=> (3/2)\r\n>> 3.div 2\r\n=> 1\r\n```"},{"ts":1375753780000,"body":"@rafaelfranca, what do you think about a test like this instead?\r\n\r\n```ruby\r\n  def test_distance_in_words_with_mathn_required\r\n    require 'mathn'\r\n    from = Time.utc(2004, 6, 6, 21, 45, 0)\r\n    assert_distance_of_time_in_words(from)\r\n  end\r\n```\r\n\r\nIt fails with:\r\n```\r\nExpected: \"about 1 year\"\r\nActual: \"about 456/365 years\"\r\n```\r\n\r\nwhen ```/``` is used versus passing with ```div``` in place."},{"ts":1375754080000,"body":"Yes. I was thinking about this. If this pass on JRuby it is fine to me"},{"ts":1375754273000,"body":"@rafaelfranca, done. Thanks for your help."}]},{"timestamps":[{"ts":1357430702000,"body":":heart:"}]},{"timestamps":[{"ts":1357619526000,"body":"I wonder if this needed a CHANGELOG entry?"},{"ts":1357619598000,"body":"I don't think so, actually I think this code was left just by accident, afaik I removed all the code related to Turn before rails 3.2.0"}]},{"timestamps":[{"ts":1376579242000,"body":":+1:"}]},{"timestamps":[{"ts":1372709546000,"body":"/cc @rafaelfranca "},{"ts":1372709658000,"body":"Thank you. Remember you can push directly. Don't be afraid :wink:"}]},{"timestamps":[{"ts":1364242854000,"body":"@rafaelfranca could you merge this. Or fix the typo. pg is messed up for now."},{"ts":1364242880000,"body":"I already did this. Thank you"},{"ts":1364242910000,"body":"thanks!"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1372948880000,"body":"@senny @carlosantoniodasilva Removed the changelog entry :smiley:"}]},{"timestamps":[{"ts":1372881440000,"body":"@rafaelfranca @pftg This would need a CHANGELOG right?"},{"ts":1372881928000,"body":"@vipulnsward :+1: looks like @arunagw is already on it."},{"ts":1372882819000,"body":"Thanks guys!"}]},{"timestamps":[{"ts":1372917479000,"body":"@edogawaconan  Please add [ci skip] to your commit message"},{"ts":1372917710000,"body":"Sorry, didn't know that."},{"ts":1372917929000,"body":"Hi @edogawaconan no worries!\r\n\r\nPlease don't open a new PR.\r\n\r\nInstead change the commit message by \r\n\r\n`git commit --amend`\r\n\r\nand do a \r\n\r\n`git push origin -f patch-1`\r\n\r\nThat should do.\r\n"},{"ts":1372918260000,"body":"oo magic. Done."},{"ts":1372921651000,"body":"@edogawaconan can you open a new PullRequest targeting master? I will then backport it to `4-0-stable`."},{"ts":1372924796000,"body":"@senny saw the other PR before this thread and applied, are you going to backport?"},{"ts":1372925336000,"body":"@fxn will do."}]},{"timestamps":[{"ts":1363464171000,"body":"We'll need a test and a CHANGELOG entry."},{"ts":1363503684000,"body":"This don't need CHANGELOG entry since it is a regression. Please remove it and squash the commits"},{"ts":1363503990000,"body":"Ahh, I thought it was removed for some reason. I can see how it could be a regression instead. :+1:"},{"ts":1363504125000,"body":"It was removed by mistake on [this refactoring](https://github.com/rails/rails/commit/04338b9e3b6babdc4b5938d4eaf41de620985c41) done by @carlosantoniodasilva. "},{"ts":1363505738000,"body":"Ahhh yes. :D "},{"ts":1363513915000,"body":"Done :)"},{"ts":1363533538000,"body":"Oops, we didn't have a test for that =(, sorry about that.\r\n\r\nThanks @madmax."}]},{"timestamps":[{"ts":1369986262000,"body":"If the ActiveRecord::Migration::CheckPending is removed you still get an error because of a missing database from ActiveRecord::ConnectionAdapters::ConnectionManagement."},{"ts":1370895005000,"body":"I looked into this and `ActiveRecord::ConnectionAdapters::ConnectionManagement` does not appear to initiate a connection to the db if one doesn't already exist. Unfortunately `ActiveRecord::QueryCache` does initiate a connection. Right now if I skip `ActiveRecord::QueryCache` and `ActiveRecord::Migration::CheckPending` in my app, then i can get the homepage to load with no errors.\r\n\r\nRegardless of other middleware requiring database access, this one should not. Even if this does not full eliminate the problem, it is a required step on the way to fully solving the larger issue. "},{"ts":1370938172000,"body":"I think we are checking this already here. \r\n\r\nhttps://github.com/rails/rails/blob/4-0-stable/activerecord/lib/active_record/migration.rb#L364-L367 \r\n\r\nNo?"},{"ts":1371150515000,"body":"Yep good catch, that takes care of this use case. Closing this issue. "}]},{"timestamps":[{"ts":1373570495000,"body":"I appreciate you trying to improve the sample app, but it's what gets built with the Getting Started Guide. At the very least, each of these changes would need to be made in that guide, and that guide is just Getting Started, rather than 'build the best possible application.'\r\n\r\nIn that light, I don't think most of these changes make sense. What do you think?"},{"ts":1373571099000,"body":"Thanks @steveklabnik,  i had the same thought at the start, maybe i over engineered.  I think this doesn't makes sense, but i  was still in favor of doing the same thing that is done for post and comments with [accepts_nested_attributes_for](http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html)"},{"ts":1373574354000,"body":"I'm not totally opposed to validations or accepts_nested_attributes_for as long as the guide is updated to explain them well.\r\n\r\n/cc @fxn "},{"ts":1373576066000,"body":"Yeah, appreciate the effort spent working on this, thanks for it, but I do believe it goes way beyond the scope of the getting started guide.\r\n\r\nThe goal of this guide is to serve as a somewhat brief introduction to the framework. After reading this guide people would ideally have a general idea of what is Rails about, different components, main principles, etc.\r\n\r\nNested attributes are too much for this introduction in my view, you better get first an idea of what is an association at all. And Twitter bootstrap is also non-essential stuff, I agree with Steve in that it would be distracting. Adds nothing to the core goal, but yet the reader has something there to understand. Not worthwhile.\r\n\r\nThanks anyway!"},{"ts":1373576231000,"body":"@fxn thanks, that answers :)"}]},{"timestamps":[{"ts":1359116730000,"body":"Can you also add a changelog entry with a code sample please? Thanks."},{"ts":1359559118000,"body":"Can you squash your commits into one, and rebase from current master please? Github says it cannot be automatically merged anymore."}]},{"timestamps":[{"ts":1356720910000,"body":"I think this is a bug on ruby 2.0 and was fixed on trunk. cc @carlosantoniodasilva "},{"ts":1356757936000,"body":"Yep - fixed."}]},{"timestamps":[{"ts":1360268107000,"body":":+1:"},{"ts":1360268204000,"body":"I'm not sure about the special-casing you're doing here for integers.  Ideally *every* value should be quoted correctly?"},{"ts":1360269124000,"body":"> I'm not sure about the special-casing you're doing here for integers. Ideally every value should be quoted correctly?\r\n\r\nI'm not sure what you mean by here.  In the predicate builder it is because Fixnum and Bignum are handled as literals by Arel (https://github.com/rails/arel/blob/master/lib/arel/visitors/to_sql.rb#L557).  The quote method naturally is all special casing.\r\n\r\nPerhaps some work can be done on Arel's side to remove the special casing in the predicate builder, specifically to make sure last_column is cleared before reaching actual literal integers like the arguments to LIMIT and OFFSET.  After that it may be able to quote integers safely."},{"ts":1360269598000,"body":"Mostly I'm referring to say:\r\n\r\n```sql\r\nWHERE login_count = '0'\r\n```\r\nWe could actually quote that correctly for the column type.  All that this pull request has implemented is hardening for the problem we're aware of now, chances are there are other issues lurking in the crazed-mind that created mysql's type casting code."},{"ts":1360270545000,"body":"@NZKoz converting all values to their correct type if the column type is available would be great.  I tried taking the naive approach of doing .to_s on `:string` and `:text` fields for non-NULL values, but this will break the case where an attribute hash is passed in for a text field and expects `\"'#{quote_string(YAML.dump(value))}'\"` to be done to the value.\r\n\r\nI ended up deciding to simplify the scope of the fix to deal with the known security issue."},{"ts":1360630516000,"body":"I don't think this (or at least the 26e13c3 commit included in 3.1.11) is the right workaround for mysql.\r\n\r\nFirst, looking up columns_hash for all referenced table now means it tries to SHOW FIELDS FROM tables that don't exist whenever you use the join table syntax documented in the 'Table Aliasing' section of the ActiveRecord associations help (look up has_many on api.rubyonrails.org).\r\n\r\nOf course these tables don't actually exist, so the lookup fails, and the join query fails.\r\n\r\nSecondly, doing it only for columns in table is the wrong fix because it doesn't work for comparisons expressions, so you won't realise that you are only protected some of the time.\r\n\r\nIMHO because this is breaking apps upgrading to fix the other security vulnerabilities this should be reverted from 3.1 and 3.2 and have further discussion about the best solution for rails 4.  The announcement about the vulnerability said this would not be fixed in these versions, it's a breaking change, and it only comes up as a vuln if you are allowing JSON or XML parsing or otherwise writing vulnerable code."},{"ts":1360637391000,"body":"@willbryant I strongly disagree with reverting this,  however it's clearly broken things and we'll need to ship fixes which don't.\r\n\r\n'Only allowing JSON or XML' includes ~100% of applications, just because you're able to disable it and knew how doesn't mean others can or will and the consequences are too severe to just punt on it till 4.0 ships\r\n\r\nLet's make sure we fix the regressions so that we're only quoting when we *know* it's for a string column, but removing the quoting changes altogether isn't an option"},{"ts":1360637634000,"body":"Frankly I would disable JSON/XML params parsing by default if I had to pick one of the two to spring in an upgrade.  A lot fewer people use those than use joins.\r\n\r\nThe mysql behavior is only an issue when the bind values are params that came in forced to a type you don't expect, right?\r\n\r\nThis is the only time you'll hear me say this, but: Perl's hacky tainting concept does potentially have some useful ideas here."},{"ts":1360637670000,"body":"\"joins\" was an exaggeration, sorry.  \"joins that invoke table aliasing\"."},{"ts":1360637720000,"body":"joins that invoke table aliasing and include columns of those table aliases in their where clause.  You're getting much thinner there than your initial exaggeration :smiley: "},{"ts":1360637793000,"body":"Thinner than params from JSON or XML params being put straight into a comparison with string value in the database in a where clause? :)"},{"ts":1360637873000,"body":"lets keep it civil guys."},{"ts":1360638144000,"body":"For the record, and those who don't know us.  Will and I know each other from the 'real world', this isn't a stand up shouting match ;)"},{"ts":1360638257000,"body":"I knew that, but just wanted to say something before anyone who didn't know that jumped in."},{"ts":1360644054000,"body":"Trying to figure out what options we have to fix this permanently.\r\n\r\nI'm wondering if we could get away with *always* converting integer and float bind values to strings for mysql.\r\n\r\nThat works in a surprising number of places because most operations can only apply to one type or another (2 + '2' = 4, for example, not '22').  It doesn't give the same behavior in other places like COALESCE typing and so on, so I'm trying to figure out how many cases like that there are to assess the risk.  It would be a problem to change that, but at least it would be \"safe by default\" and you could use SQL literals to bypass the stringifying where you had to, right?\r\n\r\nI don't like it... but that's mysql eh.  At least then we'd be safe by default.\r\n\r\nThoughts?  I would love a better option.\r\n\r\nIf the problem is specific to JSON & XML params then I would like to consider tainting them and stringifying tainted values, and not touching other values.  But would need some careful thought about that too."},{"ts":1360653088000,"body":"@tenderlove: Updating from rails 3.2.11 to 3.2.12 also causes an issue like the one you mention. I can't migrate my database anymore, it seems to have to do with double quoting just like in your test case:\r\n\r\nPG::Error: ERROR:  relation \"users\" does not exist\r\nLINE 5:              WHERE a.attrelid = '\"users\"'::regclass"},{"ts":1360667045000,"body":"I'm not sure if @tenderlove and @ncri have the same problem.  @tenderlove I think yours is happening because the quoting is applied in the predicate builder and the results of that go into where_values, and that's what gets used to instantiate the new object, if I'm reading the code correctly.\r\n\r\n```ruby\r\n    def where_values_hash\r\n      equalities = with_default_scope.where_values.grep(Arel::Nodes::Equality).find_all { |node|\r\n        node.left.relation.name == table_name\r\n      }\r\n\r\n      Hash[equalities.map { |where| [where.left.name, where.right] }]\r\n    end\r\n\r\n    def scope_for_create\r\n      @scope_for_create ||= where_values_hash.merge(create_with_value)\r\n    end\r\n```\r\n\r\nTherefore:\r\n\r\n```ruby\r\n    scope = Minivan.where(:minivan_id => 1234)\r\n    puts scope.where_values.inspect\r\n    mv = scope.first_or_initialize\r\n```\r\n\r\n[#<Arel::Nodes::Equality:0x10fabd140 @left=#<struct Arel::Attributes::Attribute relation=#<Arel::Table:0x10faeeab0 @table_alias=nil, @aliases=[], @name=\"minivans\", @columns=nil, @primary_key=nil, @engine=Minivan(minivan_id: string, name: string, speedometer_id: string, color: string)>, name=:minivan_id>, @right=\"'1234'\">]\r\n\r\n/Users/will/youdo/rails/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb:44:in `quote'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/predicate_builder.rb:57:in `build_from_hash'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/query_methods.rb:327:in `map'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/predicate_builder.rb:4:in `each'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/predicate_builder.rb:4:in `map'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/predicate_builder.rb:4:in `build_from_hash'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/query_methods.rb:327:in `build_where'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/query_methods.rb:136:in `where'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/querying.rb:9:in `__send__'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/querying.rb:9:in `where'\r\ntest/cases/quoting_test.rb:20:in `test_string_ids'\r\n\r\nI guess this happens to work most of the time with ActiveRecord because generally the strings will get cast back to the appropriate type for the column.\r\n\r\n@ncri's bit of SQL comes from WHERE a.attrelid = '#{quote_table_name(table_name)}'::regclass and quote_table_name hasn't changed, and I'm struggling to see how it could hit the predicate stuff as it goes straight to quote_column_name and PGconn.quote_ident.\r\n\r\n@ncri, just to help eliminate some possibilities, were there any other gems (other than the v3.2.12 rails ones themselves) that changed in your Gemfile.lock when you upgraded?"},{"ts":1360667154000,"body":"Erm, I'll try the last two pastes again.\r\n\r\n```\r\n[#<Arel::Nodes::Equality:0x10fabd140 @left=#<struct Arel::Attributes::Attribute relation=#<Arel::Table:0x10faeeab0 @table_alias=nil, @aliases=[], @name=\"minivans\", @columns=nil, @primary_key=nil, @engine=Minivan(minivan_id: string, name: string, speedometer_id: string, color: string)>, name=:minivan_id>, @right=\"'1234'\">]\r\n```\r\n\r\n```\r\n\r\n/Users/will/youdo/rails/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb:44:in `quote'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/predicate_builder.rb:57:in `build_from_hash'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/query_methods.rb:327:in `map'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/predicate_builder.rb:4:in `each'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/predicate_builder.rb:4:in `map'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/predicate_builder.rb:4:in `build_from_hash'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/query_methods.rb:327:in `build_where'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/relation/query_methods.rb:136:in `where'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/querying.rb:9:in `__send__'\r\n/Users/will/youdo/rails/activerecord/lib/active_record/querying.rb:9:in `where'\r\ntest/cases/quoting_test.rb:20:in `test_string_ids'\r\n```"},{"ts":1360668327000,"body":"Also, could someone explain to me the bit about only needing to handle Integer?  I'm a bit nervous about it.\r\n\r\n```\r\n          when Integer, ActiveSupport::Duration\r\n            # Arel treats integers as literals, but they should be quoted when compared with strings\r\n            column = engine.connection_pool.columns_hash[table.name][attribute.name.to_s]\r\n            attribute.eq(Arel::Nodes::SqlLiteral.new(engine.connection.quote(value, column)))\r\n```\r\n\r\nBut in mysql, floats compare to strings the same way as integers:\r\n\r\n```\r\nmysql> select 0 = 'test';\r\n+------------+\r\n| 0 = 'test' |\r\n+------------+\r\n|          1 |\r\n+------------+\r\n1 row in set, 1 warning (0.00 sec)\r\nmysql> select 0.0 = 'test';\r\n+--------------+\r\n| 0.0 = 'test' |\r\n+--------------+\r\n|            1 |\r\n+--------------+\r\n1 row in set, 1 warning (0.01 sec)\r\n```\r\n\r\nI can't see what in Arel treats integers differently to floats?"},{"ts":1360668598000,"body":"> Also, could someone explain to me the bit about only needing to handle Integer? I'm a bit nervous about it.\r\n>          when Integer, ActiveSupport::Duration\r\n\r\nFrom my [earlier comment](https://github.com/rails/rails/pull/9207#issuecomment-13257925):\r\n> In the predicate builder it is because Fixnum and Bignum are handled as literals by Arel (https://github.com/rails/arel/blob/master/lib/arel/visitors/to_sql.rb#L557)."},{"ts":1360668715000,"body":"Ta."},{"ts":1360670388000,"body":"I think the correct fix will be to\r\n* revert the changes to the predicate builder\r\n* in Arel, fix the last_column value passed into the quote method by clearing it appropriately\r\n* in Arel, quote integers rather than treating them as literals"},{"ts":1360672020000,"body":"@willbryant: Nope, I didn't change any other gems. Reverting to 3.2.11 fixes this for me."},{"ts":1360680048000,"body":"My issue problem have to do with this issue: https://github.com/rails/rails/issues/9260"},{"ts":1360705233000,"body":"Agree with @dylanahsmith re best fix.  It'd be a bit of a rewrite to fix the attribute initialization stuff any other way.\r\n\r\nJust to confirm, this will only lead to integers being quoted on mysql?"},{"ts":1360705726000,"body":"@willbryant According to the [announcement of this exploit](https://groups.google.com/forum/?hl=en&fromgroups=#!topic/rubyonrails-security/ZOdH5GH5jCU) \"MySQL, SQLServer and some configurations of DB2\" are the affected databases.  So no, it isn't just mysql.\r\n\r\nThis will quote integers compared to string columns regardless of the database.  That way the behaviour is consistent and predictable, except that it won't be done when the column type being compared to is unknown."}]},{"timestamps":[{"ts":1366028023000,"body":":+1: I was looking for this feature before.\r\n\r\n/cc @carlosantoniodasilva "},{"ts":1366151624000,"body":":green_heart::yellow_heart::heart::blue_heart::purple_heart:"}]},{"timestamps":[{"ts":1366899250000,"body":"I reverted the changes since the tests are not passing. Please resubmit the pull request and make sure that at least the actionpack tests are passing"},{"ts":1366963092000,"body":"Sorry about that.\r\nStarted looking at the failing tests. And done the rabbit hole I went, where things got a whole lot more complicated.\r\n\r\nIn Rails:master the lookup of template formats does work... but only because Digestor is passing the format in the \"wrong\" argument. Digestor passes an options hash in the keys array argument of LookupContext. This is passed on down the line to PatSet and on to a Resolver. \r\n\r\nDigestor -> LookupContext -> PathSet ->...-> Resolver\r\n\r\nIn PathSet and Resolver there are several methods that just pass all this along as *args finally ending up in a find_all() where the signature does not match that in LookupContext. Down here the argument position that was \"keys\" is supposed to be a hash (details) which is supposed to contain a formats key.\r\n\r\nI am very unsure why it fails after my change. I see the same params being forwarded down to the resolver either way but still the Template comes back without any source contents.\r\n\r\nI'll dive back in few hours but if someone closer to this code has any hints that wouldn't be bad :)"}]},{"timestamps":[]},{"timestamps":[{"ts":1375025826000,"body":"@rafaelfranca thanks :green_heart: "}]},{"timestamps":[{"ts":1371652123000,"body":"Anything else you'd like to see done before I'm logging off for the day? :)"},{"ts":1371654988000,"body":"Thanks @fredwu .  I have squashed them into one and manually merged!"},{"ts":1371657607000,"body":"Thank you so much @fredwu :heart:"}]},{"timestamps":[{"ts":1371834568000,"body":"@neerajdotname You're right, I don't believe that changing the invalid id changes the intent of the original test. "}]},{"timestamps":[]},{"timestamps":[{"ts":1376900207000,"body":"Thanks but this is a cosmetic change and it won't be accepted, sorry. "},{"ts":1376901004000,"body":"@robin850 is right, please review: http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html\r\n\r\n> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted."}]},{"timestamps":[{"ts":1361750902000,"body":":+1: awesome"},{"ts":1361758330000,"body":":+1: :birthday: "},{"ts":1361759182000,"body":":+1: perfect"},{"ts":1361759387000,"body":":+1:"},{"ts":1361770556000,"body":":+1: "},{"ts":1361784063000,"body":":cake:"},{"ts":1361787428000,"body":"![](https://a248.e.akamai.net/assets.github.com/images/icons/emoji/cake.png)\r\n![](https://a248.e.akamai.net/assets.github.com/images/icons/emoji/+1.png)\r\n"},{"ts":1361843295000,"body":":+1: "},{"ts":1361877671000,"body":":thumbsup: :thumbsup: :thumbsup: \r\n"},{"ts":1377056464000,"body":"When I loaded one of my rails 3.2.8 project in Ruby 2.0.0, I got the following error:\r\n\r\nactivesupport-3.2.8/lib/active_support/dependencies.rb:251:in `require': cannot load such file -- iconv (LoadError)\r\n\r\nThis seemed to me that the Rails 3.2.* are not ready fro Ruby 2.0."},{"ts":1377060539000,"body":"@yzhanginwa please use 3.2.12 or newer"},{"ts":1377060717000,"body":"@yzhanginwa Please upgrade to 3.2.13. That was the first release that has this patch in."},{"ts":1377068108000,"body":"It still gave me the same error \"activesupport-3.2.13/lib/active_support/dependencies.rb:251:in `require': cannot load such file -- iconv (LoadError)\".\r\n\r\nI think the problem is in my project which uses \"require 'iconv' in code. I guess I have to replace the use of Iconv with the new String#encode. "},{"ts":1377068214000,"body":"@yzhanginwa yes, the problem is in your project, you're trying to use a library that was removed in Ruby 2.0.0"}]},{"timestamps":[{"ts":1375267977000,"body":"+1"},{"ts":1375274627000,"body":"cc @fxn"},{"ts":1375714770000,"body":"Looks good, only the word \"route\" would be better in regular font. I see the style was copied from the existing line, but since we are on it we could also fix it. Also we'd add an article:\r\n\r\n    As we have seen in the output of `rake routes`, the route for the `show` action is as follows:\r\n\r\nIf you were so kind as to revise that and rebase, we'd apply."},{"ts":1375717851000,"body":"@fxn Thanks for the review. I have made that change and rebased."},{"ts":1375725152000,"body":"Excellent, thanks."}]},{"timestamps":[{"ts":1362849778000,"body":"Thanks @rubys :smile:"}]},{"timestamps":[{"ts":1375106322000,"body":":heart:"}]},{"timestamps":[{"ts":1360710500000,"body":"(Oops, issued pull request against the wrong branch.)"}]},{"timestamps":[]},{"timestamps":[{"ts":1377154131000,"body":"/cc @tenderlove in case you would like to track this also :)"},{"ts":1377155115000,"body":"What's the rationale? Is this different from, say, trying to `.flatten` a recursive array, which Ruby protects against instead of causing an infinite loop/stack overflow?"},{"ts":1377157116000,"body":"The circular reference check currently relies on the developer implementing SomeClass#as_json being a good citizen and pass the same encoder instance when it makes any nested #as_json calls (e.g. Array#as_json calling #as_json on each of its elements). We previously agreed that this is a not the best idea, because 1. it places unreasonable burden on the developer, 2. it exposes internal states of the encoder to #as_json, and 3. it requires everyone along the chain to know what they are doing, otherwise it won't work at all (see #11460 for example).\r\n\r\nSo we agreed it's best to remove circular dependency detection from Object#as_json. The original argument for removing the support from the encoder as well was that Encoder#to_json depends on Encoder#as_json, which in turns depends on Object#as_json. Therefore, if we removed circular protection from Object#as_json and it recurses into an infinite loop, then it wouldn't matter if we have circular protection on the encoder because you'll get a StackError from Object#as_json anyway.\r\n\r\nHowever if people felt that this is too extreme, it would be possible to keep the protection on the encoder, provided that value.as_json itself does not recurse infinitely. (e.g. If `YourClass.new.as_json` returns `[[...]]`, then the encoder could be implemented to correctly detect this circular reference.)\r\n\r\nPersonally, I'm leaning towards we probably shouldn't bother with this (you should never get an infinite loop, the worse thing that could happen is a StackError, which is aliased as CircularRefernceError here). I'll let @jeremy chime in here."},{"ts":1377157627000,"body":"There's also the potential confusion. Both SomeClass#as_json and SomeClass#to_json are supposed to raise CircularReferenceError currently (with a lot of edge cases, again see #11460). Since SomeClass#to_json goes through the encoder and SomeClass#as_json does not (anymore), if we leave the protection on the encoder then CircularReferenceError will continue to work on SomeClass#to_json but not SomeClass#as_json. That's \"correct\", but perhaps a confusing change in behaviour, so given the very little benefit (there aren't much to \"protect\" here) I'm not sure if it's worth the trouble."},{"ts":1377682658000,"body":"Since I'm still adding more stuff to the branch, closing for now"}]},{"timestamps":[{"ts":1357934086000,"body":"Sorry but this version is not supported anymore."}]},{"timestamps":[{"ts":1373142486000,"body":"Thank you. You don't need to open a pull request to backport. We will backport the original pull request to all the relevant branches"}]},{"timestamps":[]},{"timestamps":[{"ts":1364386851000,"body":"Hey, we are discussing in Campfire."},{"ts":1364461572000,"body":"Applied in 341e61154715c7e0f9f4eee7dd90580202735db7 by hand."}]},{"timestamps":[{"ts":1362396191000,"body":"Thanks! I like how this brings it to be just like the 500 page. :+1: Thanks for getting the sample Guide application too."}]},{"timestamps":[{"ts":1371813838000,"body":"cc @fxn "}]},{"timestamps":[{"ts":1374781449000,"body":"Changed to `.empty?`"},{"ts":1374783989000,"body":"Please add this tests to your PR:\r\n\r\n```diff\r\n--- a/actionview/test/template/text_helper_test.rb\r\n+++ b/actionview/test/template/text_helper_test.rb\r\n@@ -255,6 +255,7 @@ class TextHelperTest < ActionView::TestCase\r\n     assert_equal(\"This is a...\", excerpt(\"This is a beautiful morning\", \"this\", :radius => 5))\r\n     assert_equal(\"...iful morning\", excerpt(\"This is a beautiful morning\", \"morning\", :radius => 5))\r\n     assert_nil excerpt(\"This is a beautiful morning\", \"day\")\r\n+    assert_nil excerpt(\"This is a beautiful morning\", \"a\", separator: nil)\r\n   end\r\n```\r\n\r\n__UPD.__: I updated it. it will break your current version."},{"ts":1375525152000,"body":"So is this ready to merge or what?"},{"ts":1375570468000,"body":"Could you squash your commits?"},{"ts":1375570649000,"body":"Done."},{"ts":1375571031000,"body":"@pftg is right about the test. It will break your code. Could you add this case?"},{"ts":1375572068000,"body":"This has been discussed above (https://github.com/rails/rails/pull/11600#discussion_r5409003). If separator is indeed `nil`, the original method will blow up on line 174 anyway. This looks like a case that hasn't been foreseen in the original implementation, thus handling it shouldn't be in the scope of this PR, IMHO."},{"ts":1375572515000,"body":"Fine. But I think it should be addressed at least giving a better error message.\r\n\r\nThank you for the Pull request."}]},{"timestamps":[]},{"timestamps":[{"ts":1369088981000,"body":"Thank you! In the future, please feel free to push these kinds of changes to docrails."}]},{"timestamps":[{"ts":1374608486000,"body":"/cc @kennyj, @senny, @rafaelfranca "},{"ts":1374621395000,"body":"In case of other fields that cannot parse, setting invalid value sets it to nil.\r\n\r\n```ruby\r\nrecord = SomeRecord.new\r\nrecord.updated_at = 'asdf'\r\nrecord.updated_at # => nil\r\nrecord.updated_at_before_type_cast # => 'asdf'\r\n```\r\n\r\nIf saved, `nil` will be set (subject to `NOT NULL` constraints, if present), not the raw value.\r\n\r\nShould the same behavior be preserved for other parseable fields like IP address?"},{"ts":1374656998000,"body":"cool idea, thanks, I thought about it. Have skipped it to be consistent with others casts for Postgresql. But, I think need to give it a chance. Will review more casts solutions."},{"ts":1374873021000,"body":"Changed fix with using as @egilburg mention `nil` strategy for invalid attributes assigns.\r\nAdded Changelog.\r\n\r\nSo, it's ready for reviewing. Thanks in advance.\r\n\r\nP.S. Build failed because of:\r\n```bash\r\n$ gem install bundler\r\nERROR:  Could not find a valid gem 'bundler' (>= 0), here is why:\r\n          Unable to download data from https://rubygems.org/ - Errno::ETIMEDOUT: Connection timed out - connect(2) (https://rubygems.org/latest_specs.4.8.gz)\r\nERROR:  Possible alternatives: bundler\r\n```"},{"ts":1376493498000,"body":"this no longer applies cleanly, can you rebase?"},{"ts":1376497204000,"body":"Thanks @senny for your comments. Updated with rescue only specific exception `ArgumentError`, tested for ruby __1.9.3__ and __2.0.0__. Awaiting for travis build. "},{"ts":1376504083000,"body":"@senny, updated with example of the issue in Changelog."},{"ts":1376504865000,"body":"Thank you :yellow_heart: "},{"ts":1376505314000,"body":"Thanks @senny! "},{"ts":1378703244000,"body":":+1: "}]},{"timestamps":[{"ts":1366566296000,"body":"I would argue that it is not part of Active Model responsibility to set a default context. It doesn't know anything about save and friends. For example, a search model is never saved, but it still can be `valid?` or not."},{"ts":1366569414000,"body":"@josevalim makes sense that Active Model should not know about `save` and friends.\r\n\r\nDo you have any suggestion in how to go about fixing this issue ?\r\n\r\nActive Model sets validation callbacks with condition `:save`. However Active Record only works with `:create` and `:update`.  \r\n\r\nOne solution could be that Active Model provides a hook for Active Record to override `:context` value before it is used in the condition . Not sure how complex it would be implementation wise."},{"ts":1366573191000,"body":"Deleting is not an option either because then it would be triggered on all contexts, no? I can only think of making `validation_context` an array which AR will always set to `[:save, :create]` or `[:save, :update]` and which we check the inclusion against."},{"ts":1366578000000,"body":"Yes by deleting it would execute for all contexts. But that's the goal here . `on: :save` does not mean anything in Active Record. It's as good as no option for `:on`.\r\n\r\nNow that I think about it, fixing by deleting feels like a hack. \r\n\r\nAs you suggested there should be a way to say in case of `:save` do both `:create` and `:update`. Will study the code a bit more. Thanks for the feedback @josevalim ."},{"ts":1366597259000,"body":"@neerajdotname, Check out https://github.com/rails/rails/blob/master/activerecord/lib/active_record/validations.rb#L68\r\n\r\nIt is not getting context at all and that is what causing the problem. So even if you have custom method for `on` like\r\n\r\n`validates :name, :presence => true, :on => :foo`\r\n\r\nThen also just `Bar.foo` will not trigger the callback.\r\n\r\n`Bar.foo.valid?(:foo)` will trigger it."},{"ts":1366597419000,"body":"@josevalim Setting if validation_context is set to array like `[:save, :create]` or `[:save, :update]`, then `:save` callbacks will be executed with both `:create` and `:update` right?"},{"ts":1366651329000,"body":"Here is what I did. Changed Active Model validations to support more than  one context.\r\n\r\n```\r\n    def valid?(context = nil)\r\n      current_context = validation_context\r\n      errors.clear\r\n      ctxs = Array.wrap(context)\r\n\r\n      ctxs.each do |ctx|\r\n        self.validation_context = ctx\r\n        run_validations!\r\n      end\r\n    ensure\r\n      self.validation_context = current_context\r\n    end\r\n```\r\n\r\nAnd then chagned Active Record validations to pass two contexts.\r\n\r\n```\r\n      #context ||= (new_record? ? :create : :update)\r\n      context ||= (new_record? ? [:create, :save] : [:update, :save])\r\n```\r\n\r\nThe issue now is that for `User.new.valid?` the error messages are happening twice because `validates :name, presence: true` does not put any if condition and thus both `:create` and `:save` fires the validation logic.\r\n\r\nOne way to fix that would be to assume that `validates :name, presence: true` is same as `validates :name, presence: true, on: :save` .  Now all the validation logics are bound to save explicitly. But that makes Active Modal aware of `:save` . "},{"ts":1366654068000,"body":"Now, if I only change the ActiveRecord valid? method and let the validations run as it is, then also I would get my problem solved...\r\nInstead of following line,\r\noutput = super(context) \r\nif I write \r\noutput = super(context) && super(:save)\r\nthen all the cases would be covered and the validations would still run for on: :save option also.\r\n\r\nIf the context is :update or :create then the second call to super(:save) would not run because the value returned by the first super function in both cases is true. \r\nIf no option is given then also we would be getting true because if first super call is false then the second call for :save would definitely be true. \r\nNow, if I give the on: :save option, then the first super call would be false but the second call to super would be true because we have explicitly created a context for save. In this way, we can control the behavior of validations without changing a line of code for validations... "},{"ts":1366812203000,"body":"@neerajdotname Any update?"},{"ts":1366812476000,"body":"@prathamesh-sonpatki As I mentioned in my previous comment the fix requires structural change. First the design  of the fix needs to be blessed by someone from core team before I can move ahead."},{"ts":1366815943000,"body":"@neerajdotname How about changing this in ActiveRecord than ActiveModel?\r\n\r\n`rails/activerecord/lib/active_record/validations.rb`\r\n\r\n```` \r\ndef valid?(context = nil)\r\n  context ||= new_record? ? [:create, :save] : [:update, :save]\r\n  output = Array.wrap(context).map { |c| super(c) }.inject(:&)\r\n  errors.empty? && output\r\nend\r\n````"},{"ts":1366817499000,"body":"@prathamesh-sonpatki In that case you are invoking the validation twice. Not good from performance point of view and running it twice could have side-effects too."},{"ts":1366817567000,"body":"@neerajdotname Any word on my solution????"},{"ts":1366817930000,"body":"@aditya-kapoor if you do \r\n\r\n```\r\noutput = super(context) && super(:save)\r\n````\r\nthen you are hardcoding code for `:save` . In the case of `:update` output will not have any value."},{"ts":1367313320000,"body":"The code is running correctly at my end...Sorry for late reply.."},{"ts":1368122058000,"body":"Closing this PR as the solution proposed by me is a no go ."},{"ts":1368122331000,"body":"Can you explain a bit more on this???"},{"ts":1368122362000,"body":"Why are you closing your request??"},{"ts":1368123663000,"body":"@aditya-kapoor  Please refer to the very first comment on this thread by @josevalim to see why this PR is a no go.\r\nhttps://github.com/rails/rails/pull/10287#issuecomment-16738053\r\n\r\nPRs which are no go should be closed to keep the pull requests list more manageable ."},{"ts":1368124566000,"body":"So this is a known issue in Rails and we cannot do anything about it???"}]},{"timestamps":[{"ts":1367770219000,"body":"Is this still present on master?\r\n\r\n3-2-stable only accepts bug fixes"},{"ts":1367772953000,"body":"Yes. I would consider this a bug fix for something I'm working on, but should I submit it to master anyway?"},{"ts":1367773690000,"body":"Yes, always to master. Also wold be great if you explain what you are trying to fix with this patch or we'd consider it only a cosmetic change."},{"ts":1367774051000,"body":"Thanks, I'll do that."}]},{"timestamps":[{"ts":1358855695000,"body":"Seems good to me"},{"ts":1358862305000,"body":"Looks fine here too, I can't think of anything you've forgotten. :shipit: "},{"ts":1358862576000,"body":"lol ok, I was going to push, but thanks :smile:"}]},{"timestamps":[{"ts":1375020628000,"body":"I don't see any problem on changing this but I don't have the historical reason for this decision.\r\n\r\n@josh @jeremy do you know why it works like this?"},{"ts":1375020774000,"body":"cc @dhh since you added the `require_self` at https://github.com/rails/rails/commit/2fbbd08616c25dc2931eca914349dd2161766f69"},{"ts":1375030048000,"body":"I don't follow. It's the documentation that's wrong, not the code. The stuff you define in application.css should be the stuff that wins, no? So if you add \"color: red\" in there, it'll overwrite whatever a plugin might have added. Which is how it is now, it's just wrongly documented."},{"ts":1375034405000,"body":"I'm sorry, I misread what the original code was. You're right."},{"ts":1375044427000,"body":":green_heart::yellow_heart::heart::purple_heart::blue_heart:"}]},{"timestamps":[{"ts":1366164775000,"body":":-1: you can get very similar behavior with `resources :media, concerns: %i(commentable taggable)` and no changes to rails to support it."},{"ts":1366165248000,"body":"@calebthompson Awesome, I hadn't seen https://github.com/ruby/ruby/commit/91bd6e711db3418baa287e936d4b0fac99927711. I definitely like your solution, thanks!"},{"ts":1366165402000,"body":"No problem! `%i` is imo one of the best and least-known features of Ruby 2.0.0, and I'm always happy to spread the `%i(nfection)`"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1365298945000,"body":"+1"},{"ts":1365415312000,"body":"Good writeup!\r\n\r\n/cc @steveklabnik @carlosantoniodasilva "}]},{"timestamps":[{"ts":1362576560000,"body":"Thanks. Just as a side note, you can push doc fixes freely to https://github.com/lifo/docrails, it's an open branch of Rails for documentation purposes, that's cross-merged with Rails master from time to time. All commits there are reviewed the same way and copy edited if necessary before being merged."},{"ts":1362576893000,"body":"Thanks, I didn't know. It's just easier to use the github's quick fork feature to edit and send small pull requests right from the site. Is it the preferable way to use lifo/docrails? "},{"ts":1362586322000,"body":"@RKushnir for docs it's usually preferable to go with lifo/docrails, but there's no problem in sending them as pull requests here, as long as you are contributing fixes, we are all happy :).\r\n\r\nAnother thing just came to my mind: when contributing doc patches, it's usually good to add `[ci skip]` to the commit message, so we skip running tests in travis ci. Thanks!"}]},{"timestamps":[{"ts":1360147362000,"body":"This looks like a duplicate of #9188. I'm closing this one because the other PR was a bit earlier. Thanks for your work though."}]},{"timestamps":[{"ts":1370865620000,"body":"@carlosantoniodasilva @rafaelfranca can you take a look?\r\n\r\n/cc @jeremy as you introduced this guard please let me know if there are problems with my approach."},{"ts":1370865911000,"body":"Seems fine to me."},{"ts":1371300641000,"body":":shipit:"},{"ts":1371307595000,"body":":+1:"},{"ts":1371312191000,"body":"@jeremy  do you think I can backport this to `4-0-stable`?"}]},{"timestamps":[{"ts":1377679025000,"body":"Please add `[ci skip]` to your commit message."},{"ts":1377681446000,"body":"he added \"[ci skip]\" on his PR not on his commit...please do `git commit --amend -m \" \tMention the fast `test_sqlite3_mem` option in `RUNNING_UNIT_TESTS.rdoc` [ci skip]\"`  and `git push...`"},{"ts":1377681939000,"body":"Hmm... I thought it belongs on the PR, that would make more sense, after all that's what triggers the CI build in the first place. Anyway, I added it to the commit message."},{"ts":1377688604000,"body":"@schuetzm actually it's the attached commits on the PR that trigger the build. For example if you rebase, squash or add new commits, Travis will run a new build even though it's the same PR."},{"ts":1377688625000,"body":"Thank you for your contribution :yellow_heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1366293850000,"body":"Could you add a test case?"},{"ts":1366301087000,"body":"Here is it"}]},{"timestamps":[{"ts":1372878207000,"body":"Looking into build fails."},{"ts":1372880082000,"body":"Fixing CHANGELOG now"},{"ts":1372880531000,"body":"Updated! "},{"ts":1372881408000,"body":"@arunagw I'm waiting for the build."},{"ts":1372881553000,"body":"@senny ruby-2.0.0 build looks fine for me. But yes let't wait :smile: "},{"ts":1372883043000,"body":"@arunagw can you check the build?\r\n\r\n> NamedScopingTest#test_eager_scopes_are_deprecated:\r\nNoMethodError: undefined method `welcome_2' for #<Class:0x00000007ab7398>\r\n    /home/travis/build/rails/rails/activerecord/lib/active_record/dynamic_matchers.rb:22:in `method_missing'\r\n    /home/travis/build/rails/rails/activerecord/test/cases/scoping/named_scoping_test.rb:442:in `test_eager_scopes_are_deprecated'\r\n"},{"ts":1372884470000,"body":"I have removed that deprecated test here https://github.com/rails/rails/pull/11277/files#L3L442\r\n\r\nAnd force pushed already. Don't know what needs to done to test again in travis."},{"ts":1372884546000,"body":"Rebased again. Travis might run again."},{"ts":1372921569000,"body":"@arunagw thanks very much :heart: "},{"ts":1375738302000,"body":"You guys forgot to remove the actual deprecated code. Fixed on https://github.com/rails/rails/commit/9281adc64acc5071c1d0d699158c97eae8430810"},{"ts":1375769267000,"body":"@rafaelfranca thank you for noticing cleaning up."},{"ts":1375773633000,"body":":cool: thanks"}]},{"timestamps":[]},{"timestamps":[{"ts":1377551896000,"body":"Thanks. We need to know if that works on master/4-0-stable, and backport if necessary. Can you please check on master branch and provide a fix there in case it does not work?"}]},{"timestamps":[{"ts":1369193111000,"body":"Use case:\r\n\r\n```ruby\r\ndef do_something(options = {})\r\n  options.to_options!.assert_required_keys(:first_name, :last_name)\r\n  # ...\r\nend\r\n```"},{"ts":1369226028000,"body":"Thanks for your contribution, but this has been already sent and denied in #7010 and #3770, so I'll have to close it. Please check those issues for more background."}]},{"timestamps":[{"ts":1376255918000,"body":"What's the motivation for this refactor?\r\n\r\nI can't see a real win, and changing those values makes it harder for subclasses to sensibly override the behavior - for instance, any code that adds to `timestamp_attributes_for_create` will now need to also add those changes to `all_timestamp_attributes`.\r\n\r\nThis change will also break any app which was using a solution like [this one](http://stackoverflow.com/questions/5173109/ruby-activerecord-how-to-use-alternate-updated-at-column) to get custom timestamp column names. At a minimum, a note in the CHANGELOG would be a good idea..."},{"ts":1376290045000,"body":"@al2o3cr is right, the methods need to stay. they could return the value of the constant but what is the intention behind the extract? To reduce object creation? How many times are those methods called?"},{"ts":1376291974000,"body":"@senny it gets called during record creations/updations.\r\n@al2o3cr  My first attempt was to just define the constants and leave the methods, but like the methods, the\r\nconstants too can be overwritten. The methods just act as placeholders here, without any purpose."},{"ts":1376310353000,"body":"I'm happy to extract the constants, but please leave the methods there, people may be relying on them so I'd rather not break existing code with this change. Thanks."},{"ts":1376314579000,"body":"@carlosantoniodasilva does this look good?"},{"ts":1376314922000,"body":":-1: From my side. It only make harder to understand the behavior. That methods were made to easier override on subclasses and I really don't see the point for defining these constants.\r\n\r\nWith this implementation is impossible to users do this and get the `all_timestamp_attributes` updated:\r\n\r\n```ruby\r\ndef timestamp_attributes_for_update\r\n  super + [:foo]\r\nend\r\n```"}]},{"timestamps":[{"ts":1364917656000,"body":"Thank you but I think we should not mutate the arguments inside these methods."},{"ts":1364917989000,"body":"cool, just thought would lose the multiple variable creations in loop and other places"},{"ts":1364918329000,"body":"I can't reopen the pull request :("},{"ts":1364918541000,"body":"@rafaelfranca  you can reopen now. I will investigate and confirm if this should be done."}]},{"timestamps":[{"ts":1367607263000,"body":"/cc @guilleiguaran "}]},{"timestamps":[{"ts":1357199991000,"body":"cc @guilleiguaran "},{"ts":1357213258000,"body":"Padding and the fix seem good, not sure I like the black header and the background though."},{"ts":1357213889000,"body":"If black header is really that bad and red looks better, let's at least make it a bit brighter red and get rid of the gradient. Also, background may be lighter, closer to `#FFF` (e.g. `#FAFAFA`):\r\n\r\n![](http://cl.ly/image/3F2a2r0L0y0a/download)\r\n\r\nAnd with red header color matching one on guides:\r\n\r\n![](http://cl.ly/image/1r3t1A2W1A1S/download)\r\n\r\nWhat do you think?"},{"ts":1357215066000,"body":"The background looks better than white. Do you see any problem with the gradient?"},{"ts":1357215272000,"body":"Current gradient just doesn't sense right to me. Flat colors feel better in this case."},{"ts":1357215813000,"body":"Ok, lets wait for some more feedback on that so."},{"ts":1357216203000,"body":"IMO I prefer the last one @goshakkk posted (http://d.pr/i/OjNr). I prefer a red header, black header and red letters don't look really good."},{"ts":1357221718000,"body":":+1: about the last one"},{"ts":1357222470000,"body":"Yup, last one seems good. Make sure you squash your commits, thanks!"},{"ts":1357222978000,"body":"@carlosantoniodasilva done."},{"ts":1357223778000,"body":"@guilleiguaran there are particular reason to use javascript inline in ```html```?\r\nthanks in advance"},{"ts":1357223878000,"body":"I believe the error page embeds CSS into the document and inlines JS to be self-contained."},{"ts":1357224120000,"body":"I know, but I'd like to understand if there are a specific reasons in the error pages....\r\nfor what reason js should be  self-contained?"},{"ts":1357224286000,"body":"Presume everything in the application breaks—even static file server—the error page will still be rendered properly. I think that's why they include CSS and JS in every page. "},{"ts":1357224671000,"body":"Yes but maybe I was not clear I think that the use of\r\n```\r\n<script> test = function(){....} </script>\r\n````\r\nas css\r\ncould be better, because the html is coming much complex."},{"ts":1357225185000,"body":"Oh, I get what you mean. Wondering about that as well.\r\n\r\ncc @guilleiguaran"},{"ts":1357228653000,"body":"Not sure if there is any reason for it, I just leave it as was before of the change the style :smile: "},{"ts":1357228779000,"body":":v: "},{"ts":1357228959000,"body":"So can I move js into functions inside `<script>` tag and make `onclick` trigger them? Or will be such PR rejected?"},{"ts":1357229112000,"body":"maybe a new PR is better\r\n"},{"ts":1357229171000,"body":"Yeah, of course I'll put it into a separate PR."},{"ts":1357229273000,"body":"but maybe it need  more feedbacks"},{"ts":1357230203000,"body":"#8723"},{"ts":1357238372000,"body":"Awesome! :heart:"}]},{"timestamps":[{"ts":1365862147000,"body":"I pretty sure this setup is to avoid order dependent tests. I prefer to leave it there.\r\n\r\nThank you"}]},{"timestamps":[]},{"timestamps":[{"ts":1371306090000,"body":"Any reason for removing the nodoc?"},{"ts":1371309772000,"body":"True it should not be included into doc. Just saw meaning of :nodoc: \r\n\r\nAs it's a private method."},{"ts":1371316292000,"body":"In order to be consistent with the rest of the docs, it would be nice to use real calls and return values. Something like:\r\n\r\n```ruby\r\nconst_regexp(\"Foo::Bar::Baz\") # => /Foo(::Bar(::Baz)?)?/\r\n```\r\n"},{"ts":1371316562000,"body":"make sense. Updated \r\n\r\nthanks :-) "},{"ts":1371322415000,"body":"Thanks Arun :)."}]},{"timestamps":[]},{"timestamps":[{"ts":1375209118000,"body":"/cc @rafaelfranca, @bobbdelsol"},{"ts":1375214180000,"body":"@rafaelfranca fixed! and updated PR. Thanks!"}]},{"timestamps":[]},{"timestamps":[{"ts":1361898179000,"body":"cc @fxn "},{"ts":1361898316000,"body":"Details about this subtle change is available in this blog  http://blog.bigbinary.com/2013/02/26/clear-and-delete-all-might-invoke-callbacks.html"},{"ts":1361898809000,"body":"Isn't this what was reported in #7832? I think we need to do something about this, something called `delete_all` cannot trigger any callback, it goes against what you expect.\r\n\r\nOf course we cannot just rename the method or change its behavior, but I believe we need to do something with the API rather (or in addition to) document."},{"ts":1361899118000,"body":"Yes that's what was reported in #7832. And I updated the `associations.rb` file to make it clear that those rules also apply for delete_all.\r\n\r\nToday during our internal discussion a developer started reading delete_all on `relation.rb` and he thought `dependent` option should not honored. The doc did not emphasize that delete_all behaves differently.\r\n\r\nI personally think that delete_all should behave consistently but that's a bigger discussion. In the meantime I was  trying to make docs clearer about the distinction between the two."},{"ts":1361899217000,"body":"If the core team is up for fixing delete_all then I can work on fixing the method `delete_all` itself. \r\n\r\nIt will break the way delete_all works in 3.2.12 but Rails4 is a good opportunity to break it."},{"ts":1361899222000,"body":"Problem is I feel like we are setting a bug in stone."},{"ts":1361899714000,"body":"@fxn so should I work on fixing `delete_all` ?"},{"ts":1361899845000,"body":"We cannot change it that way, thinking about how to better address this. Anyone has any suggestion?"},{"ts":1361911162000,"body":"Hard problem. I don't see any way to change this behaviour without breaking people code."},{"ts":1361911815000,"body":"I don't think there are many people who use `delete_all` and they are also using this behavior to fire callbacks. So not many code should break .\r\n\r\nNonetheless this change has the potential to break some code ."}]},{"timestamps":[{"ts":1371544062000,"body":"Agree @senny, fixed."},{"ts":1371544619000,"body":"thanks :yellow_heart: "}]},{"timestamps":[{"ts":1372356111000,"body":"Please add a changelog entry about the removal as well, thanks @kennyj "},{"ts":1372356755000,"body":"@carlosantoniodasilva I've added a changelog entry."},{"ts":1372357936000,"body":"Thanks."}]},{"timestamps":[{"ts":1377540394000,"body":"@senny @robin850 done."},{"ts":1377544335000,"body":"`where(...)` is not an equivalent to the old finders because it returns a relation, so there probably should be a statement below this section with something to the effect of, \"Note that `where(...)` returns a relation, not an array like the old finders. In some cases, the resulting relation can be treated similarly to an array, but if you require an array, use `where(...).to_a`.\"\r\n\r\nIf being really picky, you might also want to include a statement that the SQL executed may not be exactly the same, depending on how it is used.\r\n\r\nFeel free to disregard if you'd rather not make changes since it's committed."},{"ts":1377552060000,"body":"Sure, if you think this can be further improved, please submit a pull :)"},{"ts":1377552293000,"body":"Ok, cool. Just wanted to make sure it would be a good idea to clarify further."}]},{"timestamps":[{"ts":1361733611000,"body":"Should not we remove https://github.com/rails/rails/tree/master/railties/test/fixtures/lib/plugin_builders and https://github.com/rails/rails/tree/master/railties/test/fixtures/lib/app_builders?"},{"ts":1361733658000,"body":"sure!"},{"ts":1361733727000,"body":"Also https://github.com/sikachu/rails/blob/c3415ada58a8cf84b6e2da6664d4aadfae885781/railties/test/generators/plugin_new_generator_test.rb#L387-393 and https://github.com/sikachu/rails/blob/c3415ada58a8cf84b6e2da6664d4aadfae885781/railties/test/generators/app_generator_test.rb#L381-387"},{"ts":1361734135000,"body":"PR updated."},{"ts":1361734200000,"body":"whoops, hold on"},{"ts":1361734202000,"body":"Missing to remove the methods in my last comment "},{"ts":1361734323000,"body":"I ended up removed the whole class, since it's now a no-op."},{"ts":1361734508000,"body":":heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[{"ts":1369946637000,"body":"Thank you!\r\n\r\nIn the future, feel free to make these kinds of changes in docrails."}]},{"timestamps":[{"ts":1360772204000,"body":"I can see how that would break, but ... would you tell me why are you having a scope method which contains space? I don't think this is a general use case here as people would normally do `method_with_underscore`."},{"ts":1360782095000,"body":":-1:"},{"ts":1360782382000,"body":"I don't think this is something we should support"},{"ts":1360783391000,"body":"Definite :thumbsdown:.  Why do this?\r\n\r\n    scope :\"title containing space\", -> { where(\"title LIKE '% %'\") }\r\n\r\nWhen you could just do this?\r\n\r\n    scope :title_containing_underscores, -> { where(\"title LIKE '% %'\") }\r\n\r\nAll the [example documentation](http://guides.rubyonrails.org/active_record_querying.html#scopes) regarding `scope` uses symbols with underscores for scope names."},{"ts":1360783486000,"body":"FTR: I'm actually -1 on this one, but want to see the use case first. "},{"ts":1360796507000,"body":"Imagine the following model:\r\n\r\n```ruby\r\nclass Ticket < ActiveRecord::Base\r\n  @priorities = [\"not important\", \"minor\", \"major\", \"very important\"]\r\n\r\n  class << self\r\n    def valid_priority? priority\r\n      @priorities.include? priority\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThen I may want to ease filtering by those priorites, so I write the following code:\r\n\r\n```ruby\r\nclass Ticket\r\n  @priorities.each do |priority|\r\n    scope priority, where(:priority => priority)\r\n  end\r\nend\r\n```\r\n\r\nThis allows me to do things like\r\n\r\n```ruby\r\n@tickets = @tickets.send params[:priority] if Ticket.valid_priority? params[:priority]\r\n```\r\n\r\nwithout caring about string processing of priority names in the views and controllers. It may occur that those scope names won't be hand-typed anywhere in the code, but if there is such need, it still can be done with `send` or by employing `method_missing` to convert dashes to spaces.\r\n\r\nThe above probably isn't a very important and convincing use case, but this functionality is already present in the code — `delegate_to_scoped_klass` checks if method name looks like `/\\A[a-zA-Z_]\\w*[!?]?\\z/` and if not, it executes different code in module_eval, which calls the method with `send`. It's just the `def` which is written improperly. So my patch isn't essentially adding any new feature, it's just fixing the broken code. If you don't want to support non-standard scope names, then probably this part of code should be removed."},{"ts":1360812244000,"body":"@KrzysiekJ Agree this should work just on the basis of consistency. I wouldn't keep pushing it as a feature, though. If anything, we want to encourage using \"Ruby method\" naming for scopes. I made a couple comments on the patch. Thanks! :grin:"},{"ts":1360873734000,"body":"Thanks for the review. I've removed `module_eval` usage, added a comment to the test and amended those changes to the first commit."},{"ts":1363599678000,"body":"can you rebase your branch and add a CHANGELOG entry?"},{"ts":1363604541000,"body":"Ok, I've added the entry and rebased branch."},{"ts":1363605960000,"body":"@KrzysiekJ great! let's wait for @jeremy to merge it."},{"ts":1363618305000,"body":":thumbsdown: "},{"ts":1363621568000,"body":"@KrzysiekJ No need for a changelog entry. Sorry about that! Prefer to treat this as a cleanup & refactoring, not to advertise it as a new feature.\r\n\r\nThe comment on the unit test is good, but the test code itself doesn't communicate what's going on. Rather than defining the scope elsewhere then calling it in the test, consider defining the scope within the test. Also, asserting that no exceptions are raised is imprecise: \"nothing blows up!\" Assert that the scoping returns what you expect it to."},{"ts":1363638545000,"body":"@jeremy No problem, I’ve removed the changelog entry, improved the test and updated the pull request."}]},{"timestamps":[{"ts":1362148579000,"body":"/cc @tenderlove @jonleighton \r\n\r\n@rafaelfranca @carlosantoniodasilva could you review this patch?"},{"ts":1362160147000,"body":"These were never supported, so deprecating feels inappropriate. We support `#append` as an alias for `#<<` so we should add it to the proxy. Since `#prepend` doesn't make sense on an unordered collection, think it'd be clearer to undef the method: `NoMethodError` is what I'd expect."},{"ts":1362166522000,"body":"@jeremy `#append` was also not supported and did not work. Don't you think people will expect a `#prepend` if `#append` works? I'm fine either way but I would undef both methods."},{"ts":1362166703000,"body":":+1: for what @jeremy said. I think is good to support `#append` and not `#prepend` we don't need to be symmetrical. "},{"ts":1362167171000,"body":"good, I'll update."},{"ts":1362169512000,"body":"@rafaelfranca I updated the PR, can you take another look?"},{"ts":1362169830000,"body":"the latest version uses alias_method."}]},{"timestamps":[]},{"timestamps":[{"ts":1357887783000,"body":"Does session lazy loading still work?"},{"ts":1357921813000,"body":"@jeremy thanks for reviewing it :heart: :heart: :heart:"},{"ts":1357927479000,"body":"/cc @tenderlove too :)"},{"ts":1358825640000,"body":"For the record, [here is an updated branch with Rack 1.5 integration](https://github.com/carlosantoniodasilva/rails/compare/rack-15)."},{"ts":1359300882000,"body":"@carlosantoniodasilva the link doesn't work"},{"ts":1359313638000,"body":"@spastorino sorry, since it was merged, it's gone from my fork now."},{"ts":1359313745000,"body":"@spastorino I've pushed the changes again rebased from current master."}]},{"timestamps":[{"ts":1359138134000,"body":"Thank you, but we don't usually merge such changes because they fall into the \"cosmetic\" category, besides not helping much with the git history. Thanks again!"}]},{"timestamps":[{"ts":1357642719000,"body":"Makes sense. You'll need to update the doc examples of the method as well, and add a changelog entry. Thanks!"},{"ts":1357659542000,"body":":heart: :sparkling_heart: :heart:\r\n\r\nI love this kind of change. Thank you!"},{"ts":1357659674000,"body":"Nice, thanks!"},{"ts":1357726418000,"body":":heart: "},{"ts":1357727537000,"body":"Wonderful! :clap: "}]},{"timestamps":[{"ts":1372209067000,"body":"Sorry I don't follow how/what this is improving/fix, can you provide some code examples with some more context please? Also please rebase from master since there are some merge commits in the middle. Thanks."},{"ts":1372952575000,"body":"Thanks for responding, Carlos. This pull request can get be closed."}]},{"timestamps":[]},{"timestamps":[{"ts":1366561519000,"body":"Looks fine. I wonder whether you need to require the `PerThreadRegistry` file here, isn't that necessary?"},{"ts":1366565609000,"body":"Hmm, I think the require is necessary here, but for some reason, the tests pass just fine when I don't have a require.  It seems as though the ``PerThreadRegistry`` module is already loaded whenever the tests are called.\r\n\r\nI think this is because ``ActiveSupport::Notifications`` is already requiring the module, and one of the methods inside of ``ActiveSupport::Subscriber`` calls the notifications module. Do you think I should still include a require on the ``PerThreadRegistry`` just in case somehow the module doesn't get loaded?"},{"ts":1366633146000,"body":"That's probably the reason yeah. Anyway, it seems better to require it here as well, we should not rely much on a possibly require from other files, unless they're just \"master\" files that exist specifically for requiring a subset of functionality."},{"ts":1366636834000,"body":"Ya that sounds reasonable. The require has been added."},{"ts":1366637109000,"body":"Thanks @wangjohn :)"}]},{"timestamps":[{"ts":1370435783000,"body":"Kewl."},{"ts":1370435971000,"body":"We already agreed to make them deprecate in 4.0, then remove from master is the way to go."}]},{"timestamps":[{"ts":1367873741000,"body":"Not sure if I follow. The tests in only failing to 4-0-stable, master is green. What is the cause?"},{"ts":1367873951000,"body":"Hmm.. I'm not sure why it passed in master. It should have failed.\r\n\r\nEither way the current code where I'm putting a text column as an index is error prone. So I think the PR has better fix. \r\n\r\nAlso the code that is being tested does not care if it is string or text ."},{"ts":1367874969000,"body":"Weird, now it is faling on master"},{"ts":1367874974000,"body":"Thanks :heart: "}]},{"timestamps":[{"ts":1359972443000,"body":"sorry for my delayed response:\r\n* the schema change looks good\r\n* the tests look good\r\n* I personally don't mix `map` and `collect` and just use `map`\r\n* I would probably extract the retrieval into a method in `timestamp.rb`. ( @carlosantoniodasilva what do you think?)"},{"ts":1359975423000,"body":"Agree, seems like extracting the timestamp retrieval to a separate private method would clean things up.\r\n\r\n@jeremy @pixeltrix any concern about the time conversion?"},{"ts":1359981755000,"body":"Why is the `to_time` necessary? Are you thinking of a `created_on date` column?"},{"ts":1359994496000,"body":"@senny @carlosantoniodasilva a private would definitely make it more clear, I'll extract to `max_updated_column_timestamp`.  I initially hesitated because I'm shy/concerned about dropping in methods that'll end up in AR::Base, not sure the policy on that.\r\n\r\n@pixeltrix re: the `to_time`, you are correct;  I've seen a number of conversations around `created_on` refer to it as \"the date the record was created\".  If I create a `created_on` column cast as a Date, I get:\r\n\r\n```ruby\r\nArgumentError: comparison of Date with ActiveSupport::TimeWithZone failed\r\n```\r\n\r\nwhen comparing it to a DateTime cast column"},{"ts":1359996353000,"body":"I'll squash the commits if we like, btw."},{"ts":1359997116000,"body":"@bemurphy `to_time` should be consistent across `Date`, `DateTime`, `Time` and `ActiveSupport::TimeWithZone` now on master (it should a instance of `Time` in the local system timezone) so it should be fine. Let me know if you spot anything wrong."},{"ts":1360181810000,"body":"we also need an entry in the `CHANGELOG`."},{"ts":1361444074000,"body":"can you squash all commits into a single one and include \"Closes #9033.\" in the commit message?"},{"ts":1361856684000,"body":"@senny lost track on this, apologies. added commit message and squashed."},{"ts":1361864369000,"body":"looks good but it does no longer apply. Could you push a rebased version?"},{"ts":1361865419000,"body":"rebased against master.  I resolved the changelog conflict inline rather than pulling my addition to the top of the file, hope that's cool."},{"ts":1361865583000,"body":"no sadly you need to put it on top. Rails 4 beta1 has been released and it does not contain your change so we can't list it there. We always put the Changelog entries on the top. Also a nitpick: could you change \"Closes\" to \"Fixes\" in the changelog? Fixes is the term we use everywhere."}]},{"timestamps":[{"ts":1371292522000,"body":"Closing this. please open again if this required."}]},{"timestamps":[]},{"timestamps":[{"ts":1362525917000,"body":"Seems okay. This wasn't an issue before we got rid of the static pages, I guess."},{"ts":1362525929000,"body":"Oh, this needs a CHANGELOG entry."},{"ts":1362527425000,"body":"Thanks @steveklabnik. CHANGELOG entry added (might need a new section, not sure of the policy here) and cleaned up the commit message."},{"ts":1362528961000,"body":"Hopefully all good to go now."},{"ts":1362529331000,"body":"I'm :-1: on this change for this purpose. For your CMS to now work with a Rails app the developer must add this line of code to their app, and they also lose some non trivial pages such as `/rails/info/routes` which is unexpected. Instead it would be the same amount of work to add a route helper method for users of your CMS to the config/routes.rb file. Something like:\r\n\r\n`mount_cms`\r\n\r\nThat would only over-write that one route for the root."},{"ts":1362530052000,"body":"> For your CMS to now work with a Rails app the developer must add this line of code to their app\r\n\r\nThis option would be set by the CMS engine.\r\n\r\n> they also lose some non trivial pages such as /rails/info/routes which is unexpected.\r\n\r\nThese other pages are just used by the welcome page aren't they? Either way, I'd be happy as long as I can remove the welcome page route.\r\n\r\n> Instead it would be the same amount of work to add a route helper method for users of your CMS to the config/routes.rb file. Something like:\r\n>     mount_cms\r\n> That would only over-write that one route for the root.\r\n\r\nIs there a supported way to selectively remove an existing route? I can't override the route with another one since the home page needs to be rendered by the middleware which is run after the Rails routes."},{"ts":1364957714000,"body":"Any further thoughts on this? I've so far been unable to come up with any alternative workarounds, since there's no way to remove existing routes.\r\n\r\nAs you can imagine, this is a majorly critical issue for me, and probably other CMS apps also."},{"ts":1364960977000,"body":"Would defining a root route with an X-Cascade work in this scenario? Just wondering."},{"ts":1364961301000,"body":"@carlosantoniodasilva I did try that. The router appears to continue processing the remaining routes if an early one returns X-Cascade=pass."},{"ts":1364998527000,"body":"@spohlenz like @schneems I am :-1: on this\r\n\r\nRunning your dispatcher middleware after routes.rb is always likely to be a problem - for example adding a glob route will prevent all CMS pages from working. I would suggest either providing an explicit mechanism for adding it to routes.rb like Devise does or implement it as a Rack application and then mount it in routes.rb using [`mount`][1].\r\n\r\n[1]: http://api.rubyonrails.org/classes/ActionDispatch/Routing/Mapper/Base.html#method-i-mount"},{"ts":1364998744000,"body":"I agree with @pixeltrix."},{"ts":1365000502000,"body":"Let's close this one for now."}]},{"timestamps":[{"ts":1362420046000,"body":"/cc @josevalim (I saw that you merged 692b3b6)\r\n\r\n@rafaelfranca @carlosantoniodasilva could you take a look?"},{"ts":1362420384000,"body":"The change to `validates_confirmation` first commit is a bit controversial. One could argue that when you have a writer, you are also responsible for the getter and therefore it wouldn't override. Let me know If you like that approach better and I revert the change (I think we should keep the tests to document the behaviour though)."}]},{"timestamps":[{"ts":1363285014000,"body":"Noooooooooo…\r\n\r\nSeriously, given all the security problems we've had with JSON, YAML, etc. I don't think is a good idea and competing implementations of `to_json` stomping over each other led to the `as_json` solution introduced in Rails 2.3. Also the XML params parser has been removed in Rails 4.0 so if it was going to go anywhere I'd put it there."},{"ts":1363285388000,"body":"My intention was to create only generator of XML - parser will probably be too controversial. I believe that XML is still first-class citizen for some developers, especially if you are providing API for multiple devices."},{"ts":1363336509000,"body":"I think looking forward XML will no longer be relevant for the rails core. As @pixeltrix mentioned already the parser has been moved outside of Rails and this is a clear transition away from XML.\r\n\r\nBesides that we need to have very good reasons to add more methods to core classes. I think this is something that you can do in a gem or your application but should not go into Rails.\r\n\r\nI'm :-1: on this one."},{"ts":1363337340000,"body":"As @senny said, the direction of Rails core is away from XML so I closing this. However thanks @imanel for taking the time to try and help to improve Rails."}]},{"timestamps":[]},{"timestamps":[{"ts":1367820262000,"body":"cc @NZKoz "},{"ts":1367866227000,"body":"Can you add a test for this? You might want to take a look at `actionpack/test/template/html-scanner/sanitizer_test.rb` "},{"ts":1367990793000,"body":"Had to update to add `<video>` to acceptable tags which still wasn't. \r\nI was going to open another PR for adding more elements. There are a lot of them missing right now.\r\n@tenderlove will the new tags be pulled in or we are avoiding any further changes here, until new implementation gets done?"},{"ts":1372335577000,"body":"@tenderlove  @NZKoz \r\n2 month ping. "},{"ts":1372670721000,"body":":+1:  we use `poster` attribute in our project."},{"ts":1373156289000,"body":"@vipulnsward could you see if the ##11218 code make this test pass? Maybe you can include open a pull request to @kaspth to include your tests there.\r\n\r\nWe avoid to change html-scanner and since we want to get loofah on the next Rails release doesn't make sense merge this pull request. Thanks"},{"ts":1373163765000,"body":"@rafaelfranca that makes sense. I have been meaning to ask you about Loofah.\r\nWill help @kaspth there."},{"ts":1373188486000,"body":"Sweet, @vipulnsward!\r\nI have created a PR to Loofah for you :wink:\r\nLoofah already includes video.\r\n\r\nInterestingly Loofah doesn't include ```lowsrc``` in its uri attributes, though."},{"ts":1374385171000,"body":"Closing since https://github.com/flavorjones/loofah/pull/54 got merged in."}]},{"timestamps":[]},{"timestamps":[{"ts":1372844766000,"body":"@senny done"},{"ts":1372845582000,"body":"@senny updated again"},{"ts":1372845951000,"body":"thanks :yellow_heart: "},{"ts":1372846252000,"body":"Thanks! :smile: "}]},{"timestamps":[{"ts":1377063059000,"body":":+1: nice! "},{"ts":1377065312000,"body":"additional checkin eliminates a bunch of array allocations: \r\n\r\nBefore: \r\n\r\n```\r\nT_STRING 887\r\nT_ARRAY 215\r\nT_NODE 36\r\nT_OBJECT 26\r\nT_HASH 23\r\nT_DATA 10\r\nT_STRUCT 3\r\n\r\n```\r\n\r\nAfter: \r\n\r\n\r\n```\r\nwhere changes\r\nT_STRING 835\r\nT_ARRAY 163\r\nT_NODE 36\r\nT_OBJECT 26\r\nT_HASH 23\r\nT_DATA 10\r\nT_STRUCT 3\r\n```"},{"ts":1377072326000,"body":"Is this already fixed on `master`? Otherwise we should merge it to `master` and backport it to `4-0-stable` form there."},{"ts":1377558637000,"body":"@senny no. I asked @SamSaffron to send the PR to master and then we can backport.\r\n\r\nI'll close this."}]},{"timestamps":[{"ts":1362652471000,"body":"I'm not sure if introducing a new method is the best way to tackle the problem. I would expect that I always get the same result back and I don't care how the internals operate.\r\n\r\n@carlosantoniodasilva @rafaelfranca what do you think?"},{"ts":1362657976000,"body":"What @senny said makes sense to me. @guilleiguaran @jeremy thoughts?"},{"ts":1363621652000,"body":"Not a fan of a special option to reread. Perhaps a raw `#write` should return the raw string instead."},{"ts":1363622783000,"body":"We think if you are using memcache with the raw option you should make sure that you pass strings (this way you will also get strings back). In the end that's the point of the raw option so that you are in control of the serialisation process.\r\n\r\nI'm closing this PR but feel free to ping me if you have further questions."},{"ts":1363623022000,"body":"That's fair, I initially created this while working with Rails 3.2, which always returned objects (and therefore created really convoluted code paths.)  Since that's gone in Rails 4, it's a lot less of an issue."}]},{"timestamps":[]},{"timestamps":[{"ts":1365424685000,"body":"As discussed in the previous pull request, we're not going forward with this, it's better to just keep `default_scopes?` deprecated. Thanks @Agis- !"}]},{"timestamps":[{"ts":1364834514000,"body":"Forgot to /cc @neerajdotname @spastorino "},{"ts":1364834698000,"body":":+1:. @spastorino all yours"},{"ts":1364835784000,"body":":+1: nice work"}]},{"timestamps":[{"ts":1365594016000,"body":"Rails now has a [deep_symbolize_keys](https://github.com/RobWu/rails/blob/8c000989cec40b0ef79737f323f732f0467e005e/activesupport/lib/active_support/core_ext/hash/keys.rb#L123) method for that purpose. Thanks!"}]},{"timestamps":[]},{"timestamps":[{"ts":1375700035000,"body":"Please add `[ci skip]` to your commit message."},{"ts":1375706389000,"body":"Thank you. Added ``[ci skip]`` message."}]},{"timestamps":[{"ts":1357682431000,"body":"cc @tenderlove "},{"ts":1357682765000,"body":"Sorry, just fixed in 507d23c421b189ac8386e0605c57ab3db831001e. Thanks!"}]},{"timestamps":[{"ts":1362664986000,"body":"looks good, /cc @carlosantoniodasilva "}]},{"timestamps":[{"ts":1377716919000,"body":"Thank you but in my opinion this should not be public API. We added this only to make the min cost the default in the test environment. We don't expect people to using it."},{"ts":1377717282000,"body":"Actually could you change you PR to add `# :nodoc:` to it?"},{"ts":1377717734000,"body":"Sure.\r\nA question though: \r\nif this is private & people are not supposed to use it. How to change `MIN_COST` of the bcrypt algo to get faster test runs? currently, I have following line in `spec_helper.rb`\r\n\r\n```ruby\r\nActiveModel::SecurePassword.min_cost = true\r\n```\r\nso,\r\n1. is the above usage wrong?\r\n2. If yes, then is monkey patching way to go for such usage? or there is some other way that I am missing?"},{"ts":1377718161000,"body":"Rails already do this to you:\r\n\r\nhttps://github.com/rails/rails/blob/master/activemodel/lib/active_model/railtie.rb#L9"},{"ts":1377718523000,"body":"Perfect.\r\nPR Updated & squashed "}]},{"timestamps":[{"ts":1362042700000,"body":"@carlosantoniodasilva @rafaelfranca could you take a look?"},{"ts":1362053902000,"body":"Looks good :+1:"},{"ts":1362055460000,"body":"@carlosantoniodasilva I pushed an updated version. About the duplicated methods. They do in fact look exactly the same but the point is, that we need to use the PG specific classes and I don't think we should guess from the namespace what classes to try. In the end this gives the adapter the flexibility to return whatever."},{"ts":1362055804000,"body":"There we go, thanks!"}]},{"timestamps":[]},{"timestamps":[{"ts":1372727491000,"body":"This PR also removes deprecation message. Please take a look. Will rebase if things look good. /cc @rafaelfranca @carlosantoniodasilva "}]},{"timestamps":[{"ts":1371292106000,"body":"the commits attached to this PR are kind of messed up. Is this still necessary? If so, can you push a clean version only having the commit of your change?"}]},{"timestamps":[{"ts":1357123692000,"body":"Excellent, thanks!"}]},{"timestamps":[{"ts":1369412293000,"body":"Hm I'm afraid this wasn't intentional, it should be accepting both `put` and `patch` verbs interchangeably. At least that was the original idea of introducing `patch` as far as I know, so we may need to review it to see if we aren't missing some place that needs fixing. Thanks!"},{"ts":1369412841000,"body":"Yeah, this feels like an accident."},{"ts":1369415306000,"body":"Aha! I suspect this was introduced somewhere in between 4.0.0.beta1 and 4.0.0.rc1. At least that's when we noticed it in Basecamp."},{"ts":1369692047000,"body":"I'm digging into this a bit more... \r\n\r\nI don't think it was caused by the 4.0.0.beta1 -> 4.0.0.rc1 upgrade, I think we just didn't notice the bug right away. \r\n\r\nI think the change came from this commit: b7a094536de6fdeb428aa79d21f1e2128169f45e /cc @fxn \r\n\r\nI made a test app here to isolate the commit: https://github.com/trevorturk/rails-issue-patch\r\n\r\nAccording to this blog post we want to continue supporting PUT routes: http://weblog.rubyonrails.org/2012/2/25/edge-rails-patch-is-the-new-primary-http-method-for-updates/\r\n\r\nPerhaps this should be added to the Rails 4.0.0 milestone? It's a potential blocker for release. Perhaps it's worth considering making this a breaking change in the upgrade from 3.x?\r\n\r\nI'll dig some more to see if I can fix the issue, but I'm not 100% sure how to proceed. If we see a PUT route with no conflicting PATCH route, should we make one? (I haven't thought through all of the potential areas of conflict yet.)"},{"ts":1369694452000,"body":"Another option would be to undo some of b7a094536de6fdeb428aa79d21f1e2128169f45e. We could set `default_method_for_update` to `put` by default, but generate new apps with it set to `patch` to make the change opt-in for existing apps and set by default for new apps like ye olde `new_rails_defaults` did. "},{"ts":1369712783000,"body":"If we decide to leave things as-is, another possible note for the upgrade guide would be suggesting an alternative workaround. You can force `form_for` to use `put` instead of `patch` if, for example, you didn't want to upgrade your routes to avoid breaking API clients:\r\n\r\n```\r\n# Rails 3\r\n<%= form_for [ :update_name, @user ] do |f| %>\r\n\r\n# Rails 4\r\n<%= form_for [ :update_name, @user ], method: :put do |f| %>\r\n```\r\n"},{"ts":1370262007000,"body":"We've gone with PATCH, so I think we should stick to it and document the issue. Applying this. Please add further doc changes if necessary to make this clear."}]},{"timestamps":[{"ts":1374002309000,"body":"This is in reference to issue #2588"},{"ts":1374002971000,"body":"Aliasing has been rejected before. Please refer https://github.com/rails/rails/pull/10686 for more."},{"ts":1374003326000,"body":"cc @pixeltrix "},{"ts":1374012471000,"body":"If you want to do the comparison `begin <= time <= end` you can use the `Range#cover?` method, e.g:\r\n\r\n``` irb\r\n>> range = 10.days.ago..10.days.from_now\r\n=> Sat, 06 Jul 2013 22:56:43 BST +01:00..Fri, 26 Jul 2013 22:56:43 BST +01:00\r\n>> range.cover?(Time.current)\r\n=> true\r\n```\r\n\r\n"},{"ts":1374012786000,"body":"If that's the suggested solution for issue #2588, can that issue be closed?"}]},{"timestamps":[{"ts":1369077370000,"body":"thanks Steve!"},{"ts":1369077756000,"body":"@senny you can thank the readers of \"Rails 4 in Action\" :)"},{"ts":1369078106000,"body":" :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"},{"ts":1369078972000,"body":"Uhhhh, so this isn't actually working right now. Unsure what's up."},{"ts":1369088924000,"body":"Please review again, @josevalim @senny @rafaelfranca <3"},{"ts":1369090808000,"body":"I was just going to start working on a fix for that, glad I searched issues first! I'd been banging my head on this for a bit thinking I did something wrong heh. Thanks for all your work Steve."},{"ts":1369096208000,"body":" :shipit:"},{"ts":1369111396000,"body":"CHANGELOG added.\r\n\r\nUgh, so last minute checks, there is one other test failing:\r\n\r\n```\r\nConfirmationValidationTest#test_no_title_confirmation [/home/pairing/rails/activemodel/test/cases/validations/confirmation_validation_test.rb:24]:\r\nFailed assertion, no message given.\r\n```\r\n\r\nUnsure what that is right this second."},{"ts":1369128314000,"body":"@steveklabnik have you tried fixing this issue by just running the confirmation validation if the password is present? Basically, replacing this line:\r\n\r\nhttps://github.com/rails/rails/blob/master/activemodel/lib/active_model/secure_password.rb#L59\r\n\r\nBy something like:\r\n\r\n    validates_confirmation_of :password, if: lambda { |m| m.password.present? }"},{"ts":1369151338000,"body":"I have not. Let me try that now, that seems simpler, thanks."},{"ts":1369152065000,"body":"Updated trying that method (but a different conditional, since that one isn't right), but it still fails:\r\n\r\n```\r\nSecurePasswordTest#test_will_not_save_if_confirmation_is_blank_but_password_is_not [/Users/steve/src/rails/activemodel/test/cases/secure_password_test.rb:101]:\r\nExpected true to be nil or false\r\n```\r\n\r\nStill not sure. This bug makes me feel stupid, it should be so easy."},{"ts":1369172508000,"body":"Thanks to help from @pnc, this now works.\r\n\r\n:shipit: ?\r\n\r\nAlso, this should get backported to 4-0-stable and 4-0-0, I think?"},{"ts":1369181763000,"body":"Yes. It should.\r\n\r\nSeems good to me. @josevalim?"},{"ts":1369939682000,"body":":shipit:"},{"ts":1369940141000,"body":"In `4-0-0` as b965ce36 and in `4-0-stable` as 4e760511."}]},{"timestamps":[{"ts":1375343879000,"body":"Thanks @carlosantoniodasilva for notice. I updated PR."},{"ts":1375358154000,"body":"I have started [new topic](https://groups.google.com/forum/#!topic/rubyonrails-core/IClxihkcSIc) on google group with connected problem, so maybe rails does not need to support when `ASC` or `DESC` is not the last expression. "},{"ts":1376765030000,"body":"The same patch had been pushed before in #7423"}]},{"timestamps":[{"ts":1375275815000,"body":"Build failure is not related to this code change and is happening on master due to an earlier commit. "},{"ts":1375277151000,"body":"@gzohari thanks for your contribution :+1: "}]},{"timestamps":[{"ts":1356464214000,"body":"@rafaelfranca what do you think?"}]},{"timestamps":[{"ts":1372801432000,"body":"/cc @senny updated."},{"ts":1372817020000,"body":":heart:"}]},{"timestamps":[{"ts":1373123766000,"body":"@rafaelfranca done."}]},{"timestamps":[{"ts":1375962072000,"body":":+1: "},{"ts":1375962885000,"body":"thanks"}]},{"timestamps":[{"ts":1365121241000,"body":"Thanks!"}]},{"timestamps":[{"ts":1361985623000,"body":"/cc @fxn"},{"ts":1362308596000,"body":"Seems good. Why didn't you use docrails?"},{"ts":1362308633000,"body":"@schneems \r\n\r\n>  I wanted to open the discussion about what should go into the guide and what to remove."},{"ts":1362308673000,"body":"Can you wrap to 80 chars? :heart:"},{"ts":1362308683000,"body":"@steveklabnik will do :)"},{"ts":1362309721000,"body":"Awesome, will apply when wrapped :heart:."},{"ts":1362313217000,"body":"@steveklabnik wrapped up.\r\n\r\n@fxn can you take another look?"},{"ts":1362314993000,"body":"Thanks man!"},{"ts":1362315863000,"body":"@fxn :yellow_heart: :green_heart: :yellow_heart: "},{"ts":1362319202000,"body":":+1:"}]},{"timestamps":[]},{"timestamps":[{"ts":1360909540000,"body":"Why is `JSON` calling `#as_json` with a `State` object at all? We introduced this separate API to escape from its embraced-and-extended `#to_json` API."},{"ts":1360932093000,"body":"@jeremy it calls `to_json` with the `State` object, which ends up being passed to the `as_json` method."},{"ts":1360941915000,"body":"Thanks @lucasmazza. Drawing a line in the sand on this one. The JSON gem cannot expect to keep polluting APIs with its internals. Commented on intridea/multi_json#86 as well. Please consider using YAJL or Oj instead."},{"ts":1360942057000,"body":"@jeremy thank you for your valuable input :heart: "},{"ts":1360942772000,"body":"Thanks for the input @jeremy "},{"ts":1360945686000,"body":"@jeremy I'm :disappointed: by the decision not to merge this patch. I posted my full feedback here: https://github.com/intridea/multi_json/issues/86#issuecomment-13614424"}]},{"timestamps":[]},{"timestamps":[{"ts":1364613693000,"body":"wait... we already changed a lot of things to be compatible with the new Rails.version :grin:"},{"ts":1364613748000,"body":"/cc @jeremy "},{"ts":1364614458000,"body":"I did too, though maybe it's more appropriate for a 4.1.\r\n\r\nCan we somehow have both?"},{"ts":1364626496000,"body":"It's totally rails-core's call on whether this should be merged in. On this particular PR, I don't have a strong opinion either way.\r\n\r\nOn 30/03/2013, at 2:35 PM, Steve Klabnik <notifications@github.com> wrote:\r\n\r\n> I did too. Heh.\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub."},{"ts":1364841432000,"body":"I think by definition version check should be backward compatible, otherwise all the old code will fail miserably and unnecessarily instead of detecting incompatible Rails version. Just my $0.02"},{"ts":1364844737000,"body":"We could introduce `Rails.gem_version` to preserve compatibility.\r\n\r\nMerging this in the meantime!"},{"ts":1364845498000,"body":"Thanks!"}]},{"timestamps":[{"ts":1364925929000,"body":"Same everywhere else, I'd love me some 80 cols. Other than that, :+1:."},{"ts":1364928623000,"body":"@steveklabnik All wrapped!"},{"ts":1364928841000,"body":"Awesome. Thanks for helping out on the docs! :heart:"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1376939023000,"body":"Thanks."}]},{"timestamps":[{"ts":1373872755000,"body":"As for me this is pure cosmetic."},{"ts":1373873062000,"body":"@rajcybage please go through our [contribution guide](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html). It states:\r\n\r\n> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted.\r\n\r\nPlease don't submit more purely cosmetic pull requests. Thanks for your understanding :yellow_heart: \r\n"},{"ts":1373877027000,"body":"thank you for help me ....\r\n\r\nSorry guys a little mistake I will fix it and and send you PR "},{"ts":1373879167000,"body":"Please look into this https://github.com/rails/rails/pull/11449 \r\nThanks"}]},{"timestamps":[{"ts":1362126885000,"body":"This is so cool that I will apply these to my app immediately! Many thanks"},{"ts":1362128998000,"body":"So funny yeah...\r\nI think using same page for almost 9 years not cool"},{"ts":1362129260000,"body":"we will need a CHANGELOG entry.\r\n\r\n/cc @guilleiguaran @rafaelfranca "},{"ts":1362138245000,"body":"Looks nice, please do add a changelog entry, fix indenting and add a little bit of spacing so that it can get more readable. Thanks!"},{"ts":1362148004000,"body":"![422](https://f.cloud.github.com/assets/253398/209799/e0640880-827b-11e2-8d9e-0a365b0c4220.png)\r\n\r\n422 page looks incomplete IMO."},{"ts":1362153177000,"body":"@lucasmazza could you review this one?"},{"ts":1362153669000,"body":"Prefix, changelog fixed.\r\n@NARKOZ Yeah, it incomplete, because there are have not a message for admin, like in other pages. But it can be added."},{"ts":1362153672000,"body":"@Jacke the page looks nice! I left some inline comments about the code, and besides that there's a few bits that might need some work:\r\n\r\n* The shadows are good, but the top red bar doesn't go along too much with then. Maybe reducing the `border-width` or trying a different shade of red could look better.\r\n* As @NARKOZ pointed, the 422 page looks broken/incomplete. Maybe just that one should have a `border-radius` on all corners."},{"ts":1362155825000,"body":"@Jacke great work, please review all the changes mentioned and we will merge this!!\r\n\r\nThanks"},{"ts":1362155880000,"body":"Please also squash your commits in a single one, thanks!!!"},{"ts":1363299050000,"body":"good idea for redesign server error pages :+1: "}]},{"timestamps":[{"ts":1363714562000,"body":"The typo fixes are legitimate, the whitespace is not. We try not to touch formatting of code unless there's an actual reason to do so, as it obscures the git history.\r\n\r\nPlease either rebase to contain only the typos, or just push those typo fixes up to lifo/docrails, thanks."},{"ts":1363714702000,"body":"Ok. I will push only typos to docrails. Thanks :)"},{"ts":1363714871000,"body":"Thank you for fixing them!"}]},{"timestamps":[{"ts":1361972810000,"body":"Like it, even if it wont be part of public and maintained api."},{"ts":1361976961000,"body":"I'm :+1: on this, but let's wait for the opinion of other core members"},{"ts":1362056424000,"body":"I like the idea :+1:. I'm thinking if you should add a test-case that overwrites the `default_attributes` method. This way we can guarantee that it sticks around and won't be refactored again."},{"ts":1362059319000,"body":"It turns out this still runs into the same issue with the value not getting persisted due to the partial inserts change.  This is because the attribute still does not get marked as changed and, so, gets ignored through `ActiveRecord::AttributeMethods::Dirty#keys_for_partial_write`.  This fixes `initialize_dup` behavior, but not `initialize` behavior.  Seems I still have some work to do here."},{"ts":1362062930000,"body":"Closing this in favor of #9489 -- if that PR gets merged, developers will continue to be able to extend `column_defaults` to override defaults."}]},{"timestamps":[]},{"timestamps":[{"ts":1374503323000,"body":"Sorry, now that Rails 4 has been released, 3-2 is security fixes only, as per [our maintenance policy](http://weblog.rubyonrails.org/2013/2/24/maintenance-policy-for-ruby-on-rails/). Thanks."},{"ts":1374509251000,"body":"Hey @steveklabnik, good to know. Could you also close #4481? That's another 3.2 backport PR these changes are based on."}]},{"timestamps":[{"ts":1368392984000,"body":"@shime try to do this with your patch:\r\n\r\n```\r\n$ rails new --skip-bundle my_new_application\r\n```\r\n\r\nAnd post the result here please."},{"ts":1368393312000,"body":"@rafaelfranca throws the error that the application name is not provided, just like above. \r\n\r\nShould passing options before application name also be supported?"},{"ts":1368393530000,"body":"For that case the error message should be the former `Options should be given after the application name`"},{"ts":1368394869000,"body":"@rafaelfranca thanks for the feedback! \r\n\r\nUpdated to support both scenarios."},{"ts":1368395050000,"body":"Thank you"}]},{"timestamps":[{"ts":1371427713000,"body":"We came across this problem in Spree over the weekend: https://groups.google.com/group/spree-user/browse_thread/thread/152ceac667a80147. \r\n\r\n:+1: for this patch."},{"ts":1371429802000,"body":"@radar just to confirm, is this behavior the same on 3.2.x?"},{"ts":1371429911000,"body":"Yes, the behaviour is broken on 3.2.x as well: https://gist.github.com/radar/5793814."},{"ts":1371430688000,"body":"> URLs are case insensitive, so this regexp should be as well.\r\n\r\nThis is false: \r\n\r\n> When comparing two URIs to decide if they match or not, a client\r\n> SHOULD use a case-sensitive octet-by-octet comparison of the entire\r\n> URIs, with these exceptions: \r\n\r\n"},{"ts":1371430780000,"body":"that said, one of said exceptions is\r\n\r\n>         - Comparisons of scheme names MUST be case-insensitive;\r\n\r\nSo the initial need is correct, but making the whole thing insensitive is wrong."},{"ts":1371430856000,"body":"We are only comparing scheme on that regexp"},{"ts":1371430964000,"body":"Ah, the constant name led me astray. Carry on!"},{"ts":1371431281000,"body":"@radar @davidcelis fixed on all supported versions.\r\n\r\nThank you :heart: "},{"ts":1371431399000,"body":"Thank you @rafaelfranca :)"},{"ts":1371432330000,"body":"Awesome. Thanks @rafaelfranca!"},{"ts":1371432541000,"body":"@steveklabnik Right about that; I was just speaking in terms of what was being checked (the URI scheme in this case) but I should have been specific! :sweat_smile: "},{"ts":1372199100000,"body":":+1: "},{"ts":1372210272000,"body":":+1: "},{"ts":1372219693000,"body":"What's with all the +1s? This was already merged in..."},{"ts":1372219856000,"body":"I think they're just showing their appreciation by this point.\r\n\r\nOn Wed, Jun 26, 2013 at 2:09 PM, David Celis <notifications@github.com>\r\nwrote:\r\n\r\n> What's with all the +1s? This was already merged in...\r\n> ---\r\n> Reply to this email directly or view it on GitHub:\r\n> https://github.com/rails/rails/pull/10969#issuecomment-20026152"},{"ts":1372224354000,"body":"just showing my appreciation! Thanks guys."},{"ts":1372257767000,"body":":heart:"}]},{"timestamps":[{"ts":1371039685000,"body":"@rafaelfranca @carlosantoniodasilva can you take a look?"},{"ts":1371299996000,"body":":shipit:, see if the 4-0-stable and 3-2-stable branches needs this fix too and backport"}]},{"timestamps":[{"ts":1357387384000,"body":"Thanks."}]},{"timestamps":[{"ts":1356637266000,"body":"This is against 3-2-stable which wouldn't be acceptable since it may break existing apps. I did some similar work on master in 46492949b8c09f99db78b9f7a02d039e7bc6a702 - I may not have covered everything so do please check it works as you expect."},{"ts":1356643025000,"body":"@pixeltrix Yes, sorry I rushed in fixing it against my app and 3-2 and hadn't checked it against master. This doesn't have incompatible changes for now, couldn't it be acceptable anyway? If we can do some refactoring on 3-2 I'll check your changes and merge it with mine if they are back compatible. I meant just to pull that logic into Reflection. I'll check your commit against master."},{"ts":1356703672000,"body":"@route doesn't your commit use the table name rather than the class name? That's what your original message suggests."},{"ts":1356704586000,"body":"For now I just moved that logic to Reflection without any changes to ask opinions. So if we cannot use table_name there because it's not back compatible and we're not going to apply refactoring I tend to close this and keep checking master branch ;)"},{"ts":1356704677000,"body":"OK - closing"}]},{"timestamps":[{"ts":1363844058000,"body":"cc @carlosantoniodasilva \r\n\r\nNot sure, if I should have removed the extra hash form comments."},{"ts":1363857914000,"body":"@vipulnsward What do you think about this?\r\n\r\n   `failures = results.reject { |key, value| value }` "},{"ts":1363869038000,"body":"Thank you  :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"},{"ts":1363869273000,"body":":smile: "}]},{"timestamps":[{"ts":1361465400000,"body":"@pixeltrix I only moved the bare minimum. There could be other cases that still break but with these changes all the tests pass and we can fix #7554. Let me know if there are other cases to consider but I think this is already a step forward."},{"ts":1361475391000,"body":"@senny :heart:"},{"ts":1361475436000,"body":"@senny I think we can safely backport this to 3-2-stable"}]},{"timestamps":[]},{"timestamps":[{"ts":1375338202000,"body":"@schneems Good catch!\r\n\r\nMaybe we should change the sqlite3 adapter to ensure the directory for the file exists when it receives the configuration? Even if we put a `.gitkeep` or `.gitignore`, that doesn't change people can still remove the directories or clean up their `.gitnore` files, bringing the weird errors back.\r\n"},{"ts":1375365227000,"body":"I'll look into pushing the fix to sqlite3"},{"ts":1375723163000,"body":"closing in favor of #11763 "}]},{"timestamps":[{"ts":1363533715000,"body":"Thanks, but they were added together with the patch: 53f18f2c5475809f7f6c5576aba89d6340a57c06."},{"ts":1363572607000,"body":"ooo ok thx :) "},{"ts":1363572705000,"body":"hmmm maybe we should move that tests to inheritance_spec.rb...? base_test.rb is getting bigger and bigger..."},{"ts":1363575257000,"body":"@tkhr seems ok, can you update your pull request (or send a new one)? Thanks."},{"ts":1363579623000,"body":"> @tkhr seems ok, can you update your pull request (or send a new one)? Thanks\r\n\r\nok, will do :) "}]},{"timestamps":[{"ts":1373266879000,"body":"Should add [ci skip] to commit message.\n\n\n\n\n________________________________\n From: Shinichi Maeshima <notifications@github.com>\nTo: rails/rails <rails@noreply.github.com> \nSent: Sunday, July 7, 2013 11:54 PM\nSubject: [rails] Update 'Active Record Migrations' guide (#11359)\n \n\n\nDelete an unneeded line.\n________________________________\n \nYou can merge this Pull Request by running\ngit pull https://github.com/willnet/rails patch-1\nOr view, comment on, or merge it at:\n  https://github.com/rails/rails/pull/11359\nCommit Summary\n\t* Update 'Active Record Migrations' guide\nFile Changes\n\t* M guides/source/migrations.md (1) \nPatch Links:\n\t* https://github.com/rails/rails/pull/11359.patch\n\t* https://github.com/rails/rails/pull/11359.diff"},{"ts":1373268168000,"body":"Oh, sorry. Should I redo?"},{"ts":1373268985000,"body":"First, do:\n\ngit commit --amend\n\n\n... and you can add the [ci skip] to the commit message, then do:\n\ngit push --force\n\n... which will automatically update both your forked rails repo and your pull request to rails/rails.\n\n :-)\n\n\n\n\n\n\n________________________________\n From: Shinichi Maeshima <notifications@github.com>\nTo: rails/rails <rails@noreply.github.com> \nCc: Adrien Lamothe <alamoz@yahoo.com> \nSent: Monday, July 8, 2013 12:23 AM\nSubject: Re: [rails] Update 'Active Record Migrations' guide (#11359)\n \n\n\nOh, sorry. Should I redo?\n—\nReply to this email directly or view it on GitHub."},{"ts":1373269609000,"body":"@Alamoz thanks!"},{"ts":1373270114000,"body":"You're welcome :-)"},{"ts":1373273229000,"body":"thanks guys! :yellow_heart: "}]},{"timestamps":[{"ts":1363093009000,"body":"Sorry but we don't accept cosmetic changes. Thank you"},{"ts":1363094539000,"body":"@rafaelfranca: Could you please explain how the commit #e1f81dd is a cosmetic change, so that I can avoid making such commits in the future."},{"ts":1363094728000,"body":"It is not adding any feature, it is not fixing any behaviour, it doesn't improve the readability of the code (after it you will have to go up and down in the file in order to understand a test case).\r\n\r\nFor sure it is a good refactoring but it will messy up the git history and will make harder to track down real changes. This is why we avoid to accept this kind of change."}]},{"timestamps":[{"ts":1364137508000,"body":"It needs a changelog entry explaining the improvements on assert_template. Thanks."},{"ts":1364141810000,"body":"@carlosantoniodasilva This is nearly verbatim from #5808, which doesn't include a changelog entry because it's nearly all bugfix. The possible exception is allowing the expected layout to be a symbol."},{"ts":1364163772000,"body":"@jeremy Thanks!"}]},{"timestamps":[{"ts":1362044029000,"body":"I'm not sure we should backport the removal of features. This will make the upgrade harder for people who are using this particular feature. As we want to keep the upgrade effort to a minimum when releasing new patch versions I don't think this is a good fit for a backport. I might be wrong though...\r\n\r\n@rafaelfranca @carlosantoniodasilva what do you think?"},{"ts":1362052786000,"body":"It's not actually a complete removal, the related commit is already in 3-2-stable:\r\n\r\n```\r\n$ g br --contains 1716da0720419\r\n  3-2-stable\r\n* master\r\n```\r\n\r\nI tested here and it loads the csv file from the rake task, but internally it ends up trying to find the yaml file, if it doesn't exist, the loading explodes. So it actually only uses yaml, and I think it's fine to merge this. Thanks!"}]},{"timestamps":[{"ts":1358336038000,"body":":+1:"}]},{"timestamps":[{"ts":1377180771000,"body":"/cc @senny"},{"ts":1377204759000,"body":"Seems fine."},{"ts":1377512446000,"body":"thank you :yellow_heart: "}]},{"timestamps":[{"ts":1369847554000,"body":"@rafaelfranca @carlosantoniodasilva can you take a look?"},{"ts":1369848041000,"body":"I'm not sure if we should support this. Will these routes be matched?"},{"ts":1369852730000,"body":"@rafaelfranca we have test-cases that show that we support it: https://github.com/rails/rails/blob/master/actionpack/test/controller/routing_test.rb#L315"},{"ts":1369896193000,"body":"@carlosantoniodasilva I removed the blank line and the CHANGELOG entry."}]},{"timestamps":[{"ts":1372971833000,"body":"Thanks."}]},{"timestamps":[{"ts":1362639638000,"body":":+1:  users of _html methods are responsible for sanitize imo"},{"ts":1362652077000,"body":"We also need an entry in the CHANGELOG."},{"ts":1362652130000,"body":"Ahh didn't see your merge target was 2.3! ignore my ruby 1.9 hash comments ;)"},{"ts":1362676894000,"body":"@senny sorry about that, I will add a CHANGELOG entry. However, one thing I noticed is that `2-3-stable` is way behind `v2.3.17`. If I want this patch to make it out as `v2.3.18`, should I keep it targeted as-is and hope someone cherry-picks this onto `v2.3.17`?\r\n\r\nPerhaps?\r\n\r\n```diff\r\ndiff --git actionpack/CHANGELOG actionpack/CHANGELOG\r\nindex 3270c72..5ae4e5d 100644\r\n--- actionpack/CHANGELOG\r\n+++ actionpack/CHANGELOG\r\n@@ -1,3 +1,7 @@\r\n+*2.3.18 (unreleased)*\r\n+\r\n+* HTML safety: fix XSS vulnerability in the translate helper method for keys ending in 'html' not escaping variable interpolations. [Henry Hsu]\r\n+\r\n *2.3.11 (February 9, 2011)*\r\n \r\n * Two security fixes. CVE-2011-0446, CVE-2011-0447\r\n```"},{"ts":1362677210000,"body":"@hsume2 I'm guessing the `3-2-stable` branch is behind because of the security patches (but I don't know for sure). I would keep the merge target as is. You can add the CHANGELOG entry by simply `git commit --amend` it into your previous commit and then do a `git push -f` to force push the new version onto github. The Pull Request will then update itself. You can also put your name within `*` in place of `[`"},{"ts":1362686748000,"body":"Just remember guys, we won't release 2.3.x for this vulnerability.  Our maintenance policy is to do 2.3 releases only for severe vulnerabilities only and this doesn't cut it."},{"ts":1362687300000,"body":"@NZKoz Ahhh okay, then when do you think 2-3-stable will be fast-forwarded to v2.3.17?"},{"ts":1362687356000,"body":"It won't, unless there's some sort of quite serious vulnerability found."},{"ts":1362690563000,"body":"Yeah, 2-3-stable should be considered frozen unless another major vulnerability is found, if that happens we can tidy it all up"},{"ts":1362694706000,"body":"@senny I've added the Changelog update, I've marked it as unreleased.\r\n\r\n@NZKoz Okay, does it make sense to keep this against 2-3-stable then?"},{"ts":1362706197000,"body":"To be honest I don't think sending the pull request makes much sense at all, we're not going to ship a fix for it and it was disclosed years ago."},{"ts":1362706694000,"body":"@NZKoz understandable. I was just hoping for a better fix than the workaround suggested:\r\n\r\n```ruby\r\ntranslate('some_html', :some => h('<input>'))\r\n```\r\n\r\nEspecially since the workaround is quite prone to human error."},{"ts":1362828549000,"body":"@NZKoz If it does not make sense, should we consider closing the PR?"},{"ts":1363162561000,"body":"I am closing this for now. Thanks all!"}]},{"timestamps":[{"ts":1368135455000,"body":"There is a distinction between SQL-specific syntax and basic Ruby array syntax. For example as of Rails 4, `.distinct` would do an SQL count, but `.uniq` would load all into memory and use `Array`'s / `Enumerable`'s `uniq`. For your case, there is a method called `.exists?` that uses SQL, and `empty?` seems to map to it, while `blank?` seems not to.\r\n\r\nThat being said, I agree with latest direction of making all commands that have an SQL equivalent use that equivalent, unless the user explicitly states they want Ruby array, such as the latest change that makes `.all` return scope, forcing user to explicitly use `.to_a` if they _really_ want an array. This way novice users won't get burned if they use `.all` because they don't know about `.scoped`.\r\n\r\nSo I **support this change** - IMO all common methods (`.empty?`, `.blank?`, `.any?`, `.uniq`, I'd even go as far as `.select` and `.detect`) should map to their nearest equivalent SQL scope (`.exists?` for `blank?`/`any?`/ `empty?`, `.distinct` for `uniq`, `.where` for `select`, `.where` with `LIMIT 1 `for `.detect` etc.), unless user explicitly does `.to_a`. first. The idea is to make the commands work best for the common case and for the novice user - experienced users who have edge case requirements would figure out how to explicitly cast to array on their own.\r\n\r\n---\r\n\r\nMore importantly, however, I think Rails should **pick a direction and stick to it** - either map all common Ruby `Array` / `Enumerable` methods (and their Active Support extensions) to an SQL equivalent if it exists, or map none of them. The case where we map `.empty?` to `.exists?` but not `.blank?`, and similar cases like this, seem like a rather bad discrepancy.\r\n\r\nEdit - realized isn't not quite as simple - `exists?` comes from `Querying` while `blank?` is on `Relation`, but the idea stands."},{"ts":1368178985000,"body":"@egilburg It's even more complicated - `uniq` (and `distinct`), when applied to a `CollectionProxy`, return an array (and thus are non-chainable), but for scopes and models return a `Relation`. Do you want to open a bug report/feature request? Unfortunately I don't have time to do it myself right now."},{"ts":1368210477000,"body":"Unfortunately I never quite understood the intricate relationship details between `Relation` and `Association` - I kinda feel this should be better documented within Active Record, perhaps even mentioned in the Guides. It is indeed very confusing to see some calls dispatched here and others there, and even more confusing when you throw the occasional alias of some `Array`/`Enumerable` methods (but not others) into the mix.\r\n\r\nI remember a while back seeing a PR wanting to make `Association` subclass `Relation`, but not sure what happened to that."},{"ts":1368327898000,"body":"I agree with the change proposed here but I want to hear @jonleighton too."},{"ts":1369235574000,"body":"@rafaelfranca @jonleighton Where are we at with this?"},{"ts":1370322230000,"body":"Any update? I really think this should be a no brainer."},{"ts":1370627014000,"body":"Hi, the build failed and I have reverted. If you want to fix and submit a new PR, please ensure that the tests pass."},{"ts":1370628767000,"body":"I've fixed the actual build errors, it seems, but there's a failure proving a bit difficult to debug in `RelationsTest#test_presence`. It appears that `#empty?` is not properly loading the relation, resulting in additional queries for presence. That test probably passed because `#present?` calls `!blank?` which called `to_a` and explicitly loaded records. This makes `#test_presence` smell like a bad test to me."},{"ts":1370629006000,"body":"And, indeed, adding an explicit `to_a` into that test makes it pass:\r\n\r\n```ruby\r\ndef test_presence\r\n    topics = Topic.all\r\n\r\n    # the first query is triggered because there are no topics yet.\r\n    assert_queries(1) { assert topics.to_a.present? } # Test fails without this to_a\r\n\r\n    # checking if there are topics is used before you actually display them,\r\n    # thus it shouldn't invoke an extra count query.\r\n    assert_no_queries { assert topics.present? }\r\n    assert_no_queries { assert !topics.blank? }\r\n\r\n    # shows count of topics and loops after loading the query should not trigger extra queries either.\r\n    assert_no_queries { topics.size }\r\n    assert_no_queries { topics.length }\r\n    assert_no_queries { topics.each }\r\n\r\n    # count always trigger the COUNT query.\r\n    assert_queries(1) { topics.count }\r\n\r\n    assert topics.loaded?\r\n  end\r\n```"}]},{"timestamps":[]},{"timestamps":[{"ts":1362045526000,"body":"Is #9487 a duplicate?"},{"ts":1362045716000,"body":"The opposite,  #9487 is duplicate."},{"ts":1362046057000,"body":"/cc @spastorino @rafaelfranca "},{"ts":1362053385000,"body":"I think we prefer to have more fine control over rack upgrades. It's usually safe to have minor bumps in most gems, but even that can lead to some breakage so it's better to just allow patch versions of rack for now. Thanks!"}]},{"timestamps":[]},{"timestamps":[{"ts":1358207333000,"body":":+1: on the added test, but :-1: on the test naming convention. I don't think Rails does have a convention of 'prefix the test with method name'."},{"ts":1358209580000,"body":"@sikachu: What do you think now?"},{"ts":1358263684000,"body":"@carlosantoniodasilva: I moved it. Let me know if this works."},{"ts":1358284242000,"body":"Thanks!"}]},{"timestamps":[]},{"timestamps":[{"ts":1374751640000,"body":"<b>In travis it is throwing </b>\r\n\r\n\"Gem::RemoteFetcher::FetchError: Errno::ETIMEDOUT: Connection timed out - connect(2) (https://rubygems.org/gems/rake-10.1.0.gem)\r\n\r\n<b>An error occurred while installing rake (10.1.0), and Bundler cannot continue.\"</b>\r\n\r\n<b>This is not for my changes</b>"}]},{"timestamps":[]},{"timestamps":[{"ts":1371669350000,"body":"Yea when I introduced this option it was called `hidden_field_id` but must have been renamed."},{"ts":1371669362000,"body":"thanks :yellow_heart: "}]},{"timestamps":[{"ts":1357775269000,"body":"/cc @vijaydev @fxn"},{"ts":1357892663000,"body":"Hi @vijaydev and @fxn,\r\n\r\nAre there any other changes you would like me to apply before merging in the documentation?\r\n\r\nKind regards,\r\n   Nicholas"},{"ts":1358257911000,"body":"Hey, was the PR closed by accident?"},{"ts":1358258230000,"body":"No, I pushed to docrails instead as I thought the pull request went dead. Hope that's okay."},{"ts":1358259351000,"body":"It wasn't dead, there are some 400 issues going on and we do our best.\r\n\r\nIt is OK for this time, no need to revert, but take into account next time one pushes to docrails changes he is certain have to go in.\r\n"},{"ts":1358259899000,"body":"Sorry about that, didn't know the work flow. I'll stick to the conventions and avoid causing extra work cycles for you and the team."}]},{"timestamps":[{"ts":1367331880000,"body":"cc @fxn "},{"ts":1367332150000,"body":"Thanks!"}]},{"timestamps":[{"ts":1372923930000,"body":"Please add `[ci skip]` to the commit message and update with `git push -f`"},{"ts":1372925291000,"body":"thanks :yellow_heart: "},{"ts":1372925399000,"body":"I really dislike artificial spaces like this, could you please use the `{...}[...]` RDoc markup to avoid it?"},{"ts":1372925685000,"body":"@fxn I will fix it."},{"ts":1372925778000,"body":"Thanks @senny . @fxn will keep that in mind from next time.  Thanks!  "}]},{"timestamps":[{"ts":1362540026000,"body":"This is backported from master([365b8b6](https://github.com/rails/rails/commit/365b8b6db750151b786b0a7ef9e65a6824576f1b), [0f3901e](https://github.com/rails/rails/commit/0f3901e9101837eaab2daba5b01f67ed7e2c75d5))\r\n\r\n @jonleighton merged them to master. [8b941e9](https://github.com/rails/rails/commit/8b941e977c094bb2121f9eaef73f20392d20f581)\r\n\r\n @rafaelfranca @carlosantoniodasilva Could you take a look?\r\n"},{"ts":1362678004000,"body":"The build is broken. Could you take a look? https://travis-ci.org/rails/rails/builds/5317634"},{"ts":1362678336000,"body":"@rafaelfranca Ok, I will see what's going wrong."},{"ts":1362685498000,"body":"@rafaelfranca I've found the reason why this build is broken.  [@target](https://github.com/rails/rails/blob/3-2-stable/activerecord/lib/active_record/associations/association.rb#L141) may be nil when `Identity Map` is enabled. And also, we should reload the target only when it's stale state. I have sent another PR #9600 to fix this, sorry about that."}]},{"timestamps":[{"ts":1360412328000,"body":"The log level can be changed as per-app / env basis, and Rails logger has been by default :info for too long without much problems. I don't think it should change now, it's more a matter of preference, for some it might be good :warn, for others, :info, for others, using tags, and for some, a completely different logger. Thanks for your contribution."}]},{"timestamps":[{"ts":1375407939000,"body":"Thanks for the review rafaelfranca. I think I've fixed all the issued you'd highlighted."},{"ts":1375448116000,"body":"Seems great. Could you add a CHANGELOG entry and squash your commits?"},{"ts":1375456394000,"body":"Hmm.. Did I perform the rebase correctly?  It's strange that the pull request now has all those other commits from others in it now - I've never encountered that behavior before.   I didn't pull from upstream rails/rails so how did my branch contain them?\r\n\r\nShould I abort this pull request and start a new branch based off rails/master?"},{"ts":1375538986000,"body":"> Should I abort this pull request and start a new branch based off rails/master?\r\n\r\nYou certainly don't need to do that. \ta8ab4d7 is the commit you want, right? Try this, assuming `upstream` is a remote that points at `rails/rails`:\r\n\r\n```bash\r\n$ git fetch upstream\r\n$ git checkout extname_option\r\n$ git reset --hard upstream/master\r\n$ git cherry-pick a8ab4d7\r\n$ git push -f origin extname_option\r\n```\r\n\r\nDoes that make sense?"},{"ts":1375540486000,"body":"Awesome!  Thanks Steve - \"cherry-pick\" to the rescue.  \r\n\r\nI was going to delete my \"extname_option\" branch and start a new one with the same name, but wasn't sure if it'd still target this pull request if I did so."},{"ts":1375542287000,"body":"That would have worked too. :)"}]},{"timestamps":[{"ts":1372238253000,"body":"This is actually the expected behavior. One of your migrations, even if it's not the last one is not up. Therefore you need to execute it.\r\nMigrations aren't always run in their order. That's why you shouldn't version them manually with a number, but use the automatic timestamp.\r\n\r\nImagine the following:\r\nIn the master branch of your repository, you create migration A.\r\nThen you start working in a branch and create migration B. You don't merge your work yet.\r\nYou fix a bug in master and create migration C. You deploy with this new migration.\r\n\r\nWhen you're going to merge your second branch and your migration B will end up in master, it needs to be applied in production as it hasn't been yet. Your proposal breaks this, which is the common usage of migrations."},{"ts":1372247214000,"body":"@dmathieu That's right. But I don't understand what will be broken.\r\n\r\nPS. `needs_migration?` is used only in `development` and only for pending migrations checking."},{"ts":1372247784000,"body":"If you're two developers working on the same application. With the case explained above, the developer who never worked on the branch does not have migration B into his database.\r\nTherefore, he wouldn't get a `needs_migration?` while he would indeed need one.\r\n\r\nBasically: all migrations need to be run, not only the last one. Being able to have a migration not run and not seeing it would be a bug, not a feature."},{"ts":1372256805000,"body":"\"Being able to have a migration not run and not seeing it would be a bug, not a feature.\" It is the exact definition for the test case I proposed! "},{"ts":1372257004000,"body":"Ah, damn it I completely misread your point. You're right of course.\r\nA test case without any fix won't ever get merged though."},{"ts":1372257123000,"body":"I proposed PR #10859 to fix it... may be it too complex because it fixes several other issues too"},{"ts":1372258709000,"body":"Should I break it to several small PRs?"},{"ts":1374157303000,"body":"Yes. Pull Requests should have a single purpose, it makes them easier to review.\r\nPlease open one PR per issue you're trying tor resolve."},{"ts":1374204212000,"body":"Well"}]},{"timestamps":[{"ts":1357810097000,"body":":+1:\r\n\r\nAlso, keep in mind that you can freely commit documentation fixes (in either guides or code comments) to [lifo/docrails](https://github.com/lifo/docrails) without making a PR. It is periodically cross-merged with rails/rails#master."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1362947225000,"body":"looks good to me. /cc @carlosantoniodasilva "},{"ts":1362950068000,"body":":+1: thanks."}]},{"timestamps":[{"ts":1370611104000,"body":"Need to squash commits into one."},{"ts":1370611601000,"body":"I did it on @f0ba70c "},{"ts":1370611608000,"body":"Thanks @arunagw "},{"ts":1370851325000,"body":"Please remove other commits from this pull request. Or squash all into one.\r\n\r\n![screen shot 2013-06-10 at 10 01 12 am](https://f.cloud.github.com/assets/3948/630439/f3cbd390-d1a3-11e2-9c1e-b9c9bfc2089f.png)\r\n\r\n\r\n"},{"ts":1370856434000,"body":"Done please look into https://github.com/rails/rails/pull/10905\r\n\r\n"},{"ts":1370856502000,"body":"Closing this as #10905 is open."}]},{"timestamps":[{"ts":1373708259000,"body":"If this is going to make it in, we need some kind of deprecation and a fallback to work with the old keys. We need to give the users a chance to notice the problem when they upgrade so they can change the keys."},{"ts":1373902570000,"body":"+1\r\n\r\nI closed svenfuchs/rails-i18n#340 by adding temporary (ugly) matchers to accommodate these irregular key names (`:one` and `:many`), but I still think the @tigrish's proposal is valid."},{"ts":1373921758000,"body":"@senny any pointers on how to add the fallback given that we're not setting the message directly, rather we're adding an error to the model? I guess this also applies to the deprecation warning."},{"ts":1374476380000,"body":"@tigrish I only just now noticed that I merged this one by accident. (don't ask me how I could confuse it with another one). I reverted the commit as GitHub won't let me reopen the PR, can you please resubmit it?\r\n\r\nI think before thinking about the deprecation warning it's good to get more feedback if it's going to make it in or not."},{"ts":1374476401000,"body":"Sorry for the inconveniences :sweat: "},{"ts":1375136038000,"body":"Bummer, you totally got my hopes up :'(\r\nAnyway resubmitted..."}]},{"timestamps":[{"ts":1371292543000,"body":"Closing this. please open again if this required."}]},{"timestamps":[{"ts":1372986896000,"body":"Thanks"}]},{"timestamps":[{"ts":1374836241000,"body":"cc/ @fxn "},{"ts":1374836526000,"body":":+1: "}]},{"timestamps":[{"ts":1371689558000,"body":"@chapmajs Hi, I added a test case and fixed a warning which was happening due to commit 8cfdb72. Would help if u confirm the PR #11019 :smile: thx"},{"ts":1371695905000,"body":"Thanks for letting me know! Hopefully this will get merged, we're having to use a monkey patch against Rails in production currently."},{"ts":1371706871000,"body":":smile: "},{"ts":1372229013000,"body":"I'm closing this one as #11019 was merged."}]},{"timestamps":[{"ts":1362697001000,"body":"@jeremy `Savepoints` is `savepoints` now. Thanks. "},{"ts":1362701079000,"body":"@carlosantoniodasilva the extra space has been removed . Thanks. "},{"ts":1362702197000,"body":"Thanks."}]},{"timestamps":[{"ts":1358196889000,"body":"[triage] @floehopper it'd be helpful if you could squash your commits into 1 commit for this please.\r\n\r\n@carlosantoniodasilva this one seems right up your alley :-)"},{"ts":1358245713000,"body":"@parndt Can you explain why you want me to squash the commits? A very similar set of commits got merged into `3-2-stable` in #8200 as separate commits. Wouldn't it be more confusing to have these rolled up into a single commit here, but separate elsewhere?"},{"ts":1358283946000,"body":"@floehopper because that's what Rails core always ask for so I'm preempting the inevitable.  It also helps to identify the set of changes as one discrete unit of changes which is helpful if we need to revert this or for git blame / history.  It also appears like all of the changes require each-other so one single commit seems logical. :heart:"},{"ts":1358334576000,"body":"@parndt Ok. My plan is to remove 712db3528f85c7110f15341e51a83b8fa446380d (as @carlosantoniodasilva pointed out the equivalent commit was reverted in `3-2-stable`) and squash the other 3 commits into a single commit. Does this sound ok to you?"},{"ts":1358338252000,"body":"Yes, please squash the commits"},{"ts":1358338529000,"body":"Seems good :+1:\r\n\r\n\r\nOn Wed, Jan 16, 2013 at 10:10 AM, Rafael Mendonça França <\r\nnotifications@github.com> wrote:\r\n\r\n> Yes, please squash the commits\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8871#issuecomment-12315798>.\r\n>\r\n>\r\n\r\n\r\n\r\n-- \r\nAt.\r\nCarlos Antonio"},{"ts":1358343440000,"body":"As planned, I've removed the commit mentioned above and squashed the remaining 3 commits into 1. I've also rebased against `3-1-stable`."}]},{"timestamps":[]},{"timestamps":[{"ts":1365637496000,"body":":heart:"}]},{"timestamps":[{"ts":1370588363000,"body":"I like this, but \r\n\r\n> In the first line we do just that (remember that params[:post] contains the attributes we're interested in). \r\n\r\nIs now a bit out of date too. Strong params should be mentioned at least in passing here."},{"ts":1370641985000,"body":"I think that covers it."},{"ts":1370644312000,"body":"Two teeny edits, also, this needs squashed. Thanks! :D"},{"ts":1370651756000,"body":"squashed!"},{"ts":1370656069000,"body":"Thank you!"},{"ts":1370656102000,"body":"Should this go in `4-0-0` and `4-0-stable`, @fxn?"},{"ts":1370676501000,"body":"@steveklabnik :+1:, would you like to cherry-pick?"},{"ts":1370676568000,"body":"Oh, by the way, the quote looks a lot like an acute accent rather than an apostrophe."},{"ts":1370678642000,"body":"Will do. I'll check the `'` as well."},{"ts":1370679083000,"body":"Fixed with the `'` in master, then fixed/cherry-picked as 2b4fa6d in `4-0-stable` and https://github.com/rails/rails/commit/ffaa850 in `4.0.0`."},{"ts":1370716200000,"body":"Copy paste strikes again. Thanks for catching that."}]},{"timestamps":[]},{"timestamps":[{"ts":1357144187000,"body":"It's just clearer to return the variable instead. Thanks."}]},{"timestamps":[{"ts":1363643182000,"body":"Actually, they're not completely interchangeable, `blank?` will also check for strings with spaces =(. I'm gonna revert, sorry."},{"ts":1363643226000,"body":"This is what I'm was about to say"},{"ts":1363644021000,"body":":+1:  Thanks."}]},{"timestamps":[{"ts":1363050112000,"body":"@yahonda sent a PR with the fix https://github.com/rails/rails/pull/9676"},{"ts":1363050271000,"body":"@neerajdotname Thanks for the info. Will verity it it reproduces after #9676 merged to master."},{"ts":1363095753000,"body":"@neerajdotname Verified that no message appears since #9676 merged. Thanks! "}]},{"timestamps":[{"ts":1357822337000,"body":"I agree with this. Breaking the JSON specification is not the way to go. \r\n\r\nI can't currently say what the right way is though."},{"ts":1357826867000,"body":"Problem with serialize is not a problem - related to the initial issue."},{"ts":1357831031000,"body":"+1 on reverting it completely.\r\n\r\nMy take on this is that there wasn't a bug in the first place. The workaround in the <a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=892866\">bug report</a> is the actual solution. \r\n\r\nI.e. it's the responsibility of the developer (and not rails) to make sure parameters are sanitised.\r\n"},{"ts":1357832923000,"body":"Guys, before revert it completely we need to address the original issue. I'm not seeing the fix for the original issue anywhere."},{"ts":1357833689000,"body":"@rafaelfranca I'm not sure about that. If you are checking twitter then you should already know that there is huge amount of developers that are not updating Rails version because of this issue. That was little unfortunate to address really serious bug(CVE-2013-0156) in the same release that is breaking a lot of applications(not to mention JSON specification) So from my point of view it's much more important to deliver working version and patch more important bug.\r\n\r\nAfter we finish doing that then we should start thinking about how to fix CVE-2013-0155."},{"ts":1357834125000,"body":"Agree, but since we will not do another release without fixing CVE-2013-0155 too, I think you can use your fork now."},{"ts":1357835662000,"body":"BTW, I really don't recommend to use in your application this revert, unless you did the workaround. We are working to fix this issue. "},{"ts":1357835919000,"body":"Good to know that it will not be released - little unfortunate but at least I know on what should I focus now :)\r\n\r\nLet's then go back to provided example:\r\n\r\n```ruby\r\nunless params[:token].nil?\r\n  user = User.find_by_token(params[:token])\r\n  user.reset_password!\r\nend\r\n```\r\n\r\nIMHO this code have bug in first line, as in this situation we should use `blank?` instead of `nil?`. Correct code:\r\n\r\n```ruby\r\nunless params[:token].blank?\r\n  user = User.find_by_token(params[:token])\r\n  user.reset_password!\r\nend\r\n```\r\n\r\nThis would allow revert at least part about changing empty array and empty hash to nil(probably biggest problem and cause of #8832)\r\n\r\nThe only remaining problem is `[nil]` structure and this still need to be handled by JSON, as it is perfectly valid one. The problem is not with allowing such structure pass JSON decoding, but combination of passing through `blank?` and converting to NULL in ActiveRecord. Let's split problem to 2 parts:\r\n\r\n1. ActiveRecord will convert `User.find_by_token([nil])` to `WHERE token IN (NULL)`, which is **valid** - we are using it and preventing it would be confusing\r\n2. [nil].blank? returns false. This probably need to remain unchanged, as this array surely is not `nil?` or `empty?`\r\n\r\nSo using just this two cases we can't resolve this bug. This would probably require adding another method that would return true if only value would be nil:\r\n\r\n```ruby\r\ndef example_blank?\r\n  self.compact.blank?\r\nend\r\n```\r\n\r\nThis would fix passing `[nil]` to mentioned example, but there would be one another problem: `[nil, \"test\"]`.\r\n\r\nIn given example the only valid method would be always compacting array and then doing all checks on it. Unfortunately we can't do it by default, as nils are still valid values. What we need then is option to compact(or otherwise strip nils) passed parameters. Such method might be for example `to_s`(at least for given example), which would resolve all problems:\r\n\r\n```ruby\r\ntoken = params[:token].to_s\r\n\r\nunless token.blank?\r\n  user = User.find_by_token(token)\r\n  user.reset_password!\r\nend\r\n```\r\n\r\nWhat is funny this would mark whole CVE-2013-0155 as invalid because it's programmer bug and not framework bug. \r\n\r\nWe could be as secure as we want, but unfortunately sometimes we need to believe in programmer that is producing valid code. In this case we should propagate good practices and add notes to documentation, but there is no solution to such problem except of knowledge about framework behavior."},{"ts":1357836527000,"body":"```\r\nWhat is funny this would mark whole CVE-2013-0155 as invalid \r\nbecause it's programmer bug and not framework bug.\r\n````\r\n\r\n@imanel exactly!  CVE-2013-0155 isn't a bug.  It's an example of a programmer writing bad code.  All programmers should know that ANY incoming parameters cannot be trusted and always need to be sanitised. No framework can do that for you.\r\n"},{"ts":1357838040000,"body":"As I said, we are working to fix this issue, so please be patient."},{"ts":1357846248000,"body":"@imanel @lawrencepit https://lkml.org/lkml/2012/12/23/75 <== I think Linus got the bias right in this case.  Frameworks should make it hard to mess things up on accident.  But, what's more, frameworks shouldn't blame users wherever they can avoid it.\r\n\r\n@rafaelfranca and all the others putting time into this, thank you.  Has to be a pretty emotionally charged thing for some of you."},{"ts":1357879095000,"body":"We agree it's an app error. However, we should be secure by default. The combination of params parsing and Active Record API makes it easy to inadvertently open a vulnerability. This is a door that should take serious effort to open, not an accident or oversight. Hang in there.\r\n\r\nIn the meantime, you can work around this by swapping out the ParamsParser middleware with your own:\r\n\r\n```ruby\r\nconfig.middleware.swap ActionDispatch::ParamsParser,\r\n  ActionDispatch::ParamsParser,\r\n  Mime::JSON => lambda { |body| Yajl.load(body).with_indifferent_access }\r\n```"},{"ts":1357897822000,"body":"@jeremy Ooc, how does that work? With that workaround `rake middleware` reports that there isn't any `ActionDispatch::ParamsParser` middleware anymore. Afaics the lambda block is never called."}]},{"timestamps":[]},{"timestamps":[{"ts":1373659632000,"body":"it's good to add [ci skip] in commit message when doing guides changes."},{"ts":1373661512000,"body":"Sorry about that :/"},{"ts":1373708113000,"body":"@caike you can still add the `[ci skip]` and update the pull request:\r\n\r\n```\r\ngit commit --amend\r\n# => add [ci skip] to the message\r\ngit push -f origin\r\n```\r\n\r\nlet me know when you updated the PR."},{"ts":1373727753000,"body":"@senny updated, thanks!"},{"ts":1373727901000,"body":"@caike thanks :yellow_heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1359662938000,"body":"A test would be useful here.\r\n\r\nAlso note - if you're redirecting to arbitrary places specified in params, that's already bad, good regexes or not."},{"ts":1359726807000,"body":"@al2o3cr it's not fair 'if you touch it - write a test for it' :) it's just a slight fix.\r\nSure, but there are different situations. better to add one more check"},{"ts":1359740500000,"body":"If you don't want your change to inadvertently regress, you ought to write a test for it."},{"ts":1359931719000,"body":"But there is no difference:\r\n````ruby\r\n%r{\\A(\\w[\\w+.-]*:|//).*} === \"javascript:alert(123)\\n/localpath\" # => true\r\n%r{^(\\w[\\w+.-]*:|//).*} === \"javascript:alert(123)\\n/localpath\" # => true\r\n````\r\nYou can still send something nasty."},{"ts":1359965747000,"body":"@lexmag indeed. i don't understand the goal of such regexp.."}]},{"timestamps":[{"ts":1366027072000,"body":"I'm not sure this is unnecessary. It verifies the dirty behavior when the name is changed twice without saving."},{"ts":1366029082000,"body":"Agreed, the test checks for changing the attr multiple times, so the assign makes sense there. Thanks!"}]},{"timestamps":[{"ts":1374502563000,"body":"rake about shows this for me ...\r\n\r\n```\r\nMiddleware                ActionDispatch::Static, Rack::Lock, #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0x007ffd131a7c88>, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::RemoteIp, ActionDispatch::Reloader, ActionDispatch::Callbacks, ActiveRecord::Migration::CheckPending, ActiveRecord::ConnectionAdapters::ConnectionManagement, ActiveRecord::QueryCache, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ParamsParser, Rack::Head, Rack::ConditionalGet, Rack::ETag\r\n```\r\n\r\nSo the the change is still wrong.\r\nCan you make it match what I pasted?"},{"ts":1374503355000,"body":"@spastorino I think that is the output with released version of rails 4 \r\nhttps://gist.github.com/prathamesh-sonpatki/6054228\r\nBut with master it is https://gist.github.com/prathamesh-sonpatki/6054236"},{"ts":1374506165000,"body":"ok make `ActiveSupport::Cache::Strategy::LocalCache` point to an object not to the class"},{"ts":1374554456000,"body":"Thanks @spastorino and @prathamesh-sonpatki "},{"ts":1374555127000,"body":"Please look into this https://github.com/rails/rails/pull/11566 and closed it"},{"ts":1374582646000,"body":"@rajcybage You can close this PR also."}]},{"timestamps":[{"ts":1368196643000,"body":"That was fast, thanks!"},{"ts":1368196725000,"body":"@fxn would it be possible to backport it to 4-0-stable and perhaps 3-2-stable?"},{"ts":1368196969000,"body":"Makes sense, would you like to contribute the patches?"},{"ts":1368197005000,"body":"Sure!"},{"ts":1368197512000,"body":"@fxn I've created two PRs, one for 4-0-stable and one for 3-2-stable."},{"ts":1368198415000,"body":"Awesome, those patches were even faster :). Thanks a lot!"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1371510118000,"body":"Nice :+1:"}]},{"timestamps":[{"ts":1366823711000,"body":"@kennyj could you add a CHANGELOG entry with a description of the problem?"},{"ts":1366823794000,"body":"Also I think we should call the `dup` inside the instantiate metod like was did at #10067 (methods should not mutate their arguments)"},{"ts":1366824033000,"body":"ok. just a moment."},{"ts":1366825238000,"body":"Looks like there are some dupicate commits from master."},{"ts":1366825415000,"body":"@mattdbridges thanks for reporting. I've update this PR aginn. Is this ok ?\r\n@rafaelfranca  I've update this PR. "},{"ts":1366825822000,"body":"@kennyj  Looks like 2461deb4 is the only one still dangling. Can you squash your commits?"},{"ts":1366826619000,"body":"I've updated again.\r\n@mattdbridges I'm afraid that disappearing @derikson 's contribution. so I've squashed `my` commits only."},{"ts":1366829894000,"body":"@kennyj Gotcha. Looks good to me"}]},{"timestamps":[{"ts":1368143804000,"body":"Gross. Nice catches!"}]},{"timestamps":[{"ts":1366236124000,"body":"Thanks."}]},{"timestamps":[{"ts":1360301139000,"body":"@dylanahsmith there are a broken test in 3-2-stable with this, can you check it?"},{"ts":1360301191000,"body":"@dylanahsmith note that the error is happening only in 1.8.7 and 1.9.2, 1.9.3 is green"},{"ts":1360331605000,"body":"Oh, BigDecimal wants a string instead of an integer on ruby 1.8.\r\n\r\n```diff\r\ndiff --git a/activerecord/test/cases/relation/where_test.rb b/activerecord/test/cases/relation/where_test.rb\r\nindex 0529945..ba9df16 100644\r\n--- a/activerecord/test/cases/relation/where_test.rb\r\n+++ b/activerecord/test/cases/relation/where_test.rb\r\n@@ -52,7 +52,7 @@ module ActiveRecord\r\n     end\r\n \r\n     def test_where_with_decimal_for_string_column\r\n-      count = Post.where(:title => BigDecimal.new(0)).count\r\n+      count = Post.where(:title => BigDecimal.new('0')).count\r\n       assert_equal 0, count\r\n     end\r\n \r\n```\r\n\r\nThat probably needs to be fixed on 3-0-stable, 3-1-stable, 3-2-stable and master.  Should I open a new pull request for each with that change?"},{"ts":1360333410000,"body":"It's probably enough to open for one branch, and we can backport as needed. But you can open one for each if you want, of course :)."}]},{"timestamps":[{"ts":1372351891000,"body":"Looks good for me, lets wait for Travis :smile:"}]},{"timestamps":[{"ts":1374230027000,"body":"cc @senny "},{"ts":1374232521000,"body":"@nishantmodak looks good. Can you add `[ci skip]` to the commit message?"},{"ts":1374234683000,"body":"thanks @senny . updated."},{"ts":1374235269000,"body":"thanks for your contribution :yellow_heart: "}]},{"timestamps":[{"ts":1361833699000,"body":"Thanks! 202041e762a98cb433c3a24a0b03308d4e05a99d"}]},{"timestamps":[{"ts":1372183328000,"body":"cc @steveklabnik @fxn \r\nSorry about forgetting  the [skip-ci].\r\n\r\nAlso does \r\nhttps://github.com/vipulnsward/rails/blob/c66dbc1e5f9e031942b4f6fcadda2b2d1afae2d6/guides/source/_welcome.html.erb#L18 need to be changed to 3.2.x with 3.2 pointing to 3.2.13 ? "},{"ts":1372184524000,"body":"@vipulnsward I'd point to both, 3.2.x and 2.3.x"},{"ts":1372184550000,"body":"Amend all that to the commit with the skip-ci please!"},{"ts":1372184995000,"body":"Shouldn't this go to the 4-0-stable branch ?\r\nHere, it's not going to be published until 4.1."},{"ts":1372185165000,"body":"@spastorino updated. "},{"ts":1372191318000,"body":"oh yeah @dmathieu is right, please provide the PR for 4-0-stable"},{"ts":1372195303000,"body":":+1:"},{"ts":1372216795000,"body":"@fxn this should be merged on 4-0-stable"},{"ts":1372217104000,"body":"I backported in 52f62fe6b5850c976d1ca32bf4405646e6673487."},{"ts":1372225603000,"body":":+1: "},{"ts":1372274441000,"body":"@dmathieu all pull requests should be opened against master, and the person who merges will backport appropriately."},{"ts":1372359041000,"body":"@steveklabnik agree with you but this is kind of a special case because what we should add to master is different given master is 4.1"}]},{"timestamps":[{"ts":1362141425000,"body":"@rafaelfranca @carlosantoniodasilva what do you think?"},{"ts":1362142578000,"body":"I'm not sure if I like `with_transaction`... How about: `use_transaction = false`, or `skip_transaction = true`, or even `skip_ddl_transaction`."},{"ts":1362143608000,"body":"From the wording I would go with `skip_transaction` but I don't like the fact that it's a negative option I would like something that has the meaning of:\r\n\r\n* true => with transaction.\r\n* false => without transactions."},{"ts":1362143689000,"body":"Does it need to be an option?"},{"ts":1362143921000,"body":"My first implementation did not use an option but a method call like `without_transaction` but in the end I liked the option better because in my opinion it's easier to understand what happens.\r\n\r\nIf you don't like `with_transaction` I would rename it to `use_transaction=false` but I don't have a very strong opinion about it. If you'd like to change it let me know."},{"ts":1362488982000,"body":"Seems good @senny, I'm just not sure about the naming yet. `with_transaction` seems the best option so far, I though about `wrap_in_transaction` but that doesn't look that good. Wdyt, are we good with `with_transaction`?"},{"ts":1362496454000,"body":"@rafaelfranca @carlosantoniodasilva I pushed an updated and rebased version:\r\n\r\n* We now use a macro called `disable_ddl_transaction!`\r\n* I added documentation to the migrations guide\r\n* I edited the copy according to the feedback comments"},{"ts":1362586160000,"body":":+1:"},{"ts":1366047293000,"body":":+1:  Thanks Senny"}]},{"timestamps":[{"ts":1359213834000,"body":"Interesting, I can see the method being listed as public:\r\n\r\n```ruby\r\n>> Rails::Generators::NamedBase.public_instance_methods.sort.grep /singular/\r\n=> [:singular_name]\r\n>> Rails::Generators::NamedBase.protected_instance_methods.sort.grep /singular/\r\n=> [:singular_table_name]\r\n```\r\n\r\nBut I can't seem to reproduce the same with this (quick and dirty):\r\n\r\n```ruby\r\nclass Foo\r\n  attr_reader :pub\r\n\r\n  protected\r\n  attr_reader :prot\r\n  alias protalias prot\r\n  alias_method :protaliasmethod, :prot\r\n\r\n  private\r\n  attr_reader :priv\r\n  alias privalias priv\r\n  alias_method :privaliasmethod, :priv\r\nend\r\n\r\nf = Foo.new\r\n\r\nputs \"Public\"\r\nf.pub\r\n\r\nputs\r\n\r\nputs \"Protected\"\r\nf.prot rescue puts $!.message\r\nputs \"Protected alias\"\r\nf.protalias rescue puts $!.message\r\nputs \"Protected alias_method\"\r\nf.protaliasmethod rescue puts $!.message\r\n\r\nputs\r\n\r\nputs \"Private\"\r\nf.priv rescue puts $!.message\r\nputs \"Private alias\"\r\nf.privalias rescue puts $!.message\r\nputs \"Private alias_method\"\r\nf.privaliasmethod rescue puts $!.message\r\n\r\n=begin\r\nPublic\r\n\r\nProtected\r\nprotected method `prot' called for #<Foo:0x007f8eea1d35f0>\r\nProtected alias\r\nprotected method `protalias' called for #<Foo:0x007f8eea1d35f0>\r\nProtected alias_method\r\nprotected method `protaliasmethod' called for #<Foo:0x007f8eea1d35f0>\r\n\r\nPrivate\r\nprivate method `priv' called for #<Foo:0x007f8eea1d35f0>\r\nPrivate alias\r\nprivate method `privalias' called for #<Foo:0x007f8eea1d35f0>\r\nPrivate alias_method\r\nprivate method `privaliasmethod' called for #<Foo:0x007f8eea1d35f0>\r\n=end\r\n```\r\n\r\nThis smells like there's something else interfering, unless I'm missing something."},{"ts":1359225117000,"body":"You're right, I'm seeing the same thing:\r\n\r\n    f = Foo.new\r\n    %w[public protected private].each { |vis| puts \"#{vis} methods: \" + f.send(\"#{vis}_methods\", false).inspect }\r\n\r\n    public methods: [:pub]\r\n    protected methods: [:prot, :protalias, :protaliasmethod]\r\n    private methods: [:priv, :privalias, :privaliasmethod]\r\n\r\nHere's the issue in a clean Rails console (until now I've been whacking around inside the debugger):\r\n\r\n    $ rails console\r\n    Loading development environment (Rails 3.2.11)\r\n    irb(main):001:0> require 'rails/generators'\r\n    => true\r\n    irb(main):002:0> require 'rails/generators/active_record/migration/migration_generator'\r\n    => true\r\n    irb(main):003:0> ActiveRecord::Generators::MigrationGenerator.all_tasks.keys\r\n    => [\"singular_name\", \"create_migration_file\"]\r\n\r\nBut the alias visibility test appears to do the right thing.\r\n\r\n    irb(main):004:0> class Foo; protected; attr_reader :prot; alias :protalias :prot; end\r\n    => nil\r\n    irb(main):005:0> Foo.new.public_methods(false)\r\n    => []\r\n    irb(main):006:0> Foo.new.protected_methods(false)\r\n    => [:prot, :protalias]\r\n\r\nweird.  still looking..."},{"ts":1360349444000,"body":"Did you ever figure out the root cause or how to reproduce this outside of the existing rake task? Could it be something else? Does taking out the alias remove the output?"},{"ts":1360350104000,"body":"@schneems somehow the fix works, but I didn't look further at why it happens this way."},{"ts":1360355220000,"body":"I looked for an hour or two but couldn't figure out why it works one way in the migration generator and another way everywhere else.  I'm short on time now but plan on looking again late next week.\r\n\r\nWould be awesome if a Ruby guru just knows the answer."},{"ts":1360355364000,"body":"@schneems the middle code block in my reply above shows how to reproduce without rake."},{"ts":1361508790000,"body":"the code change in this one is pretty straight forward, wondering if there is a sane way to add a test for this fix. What are your thoughts @carlosantoniodasilva ?"},{"ts":1361559073000,"body":"It seems to me that Thor overwriting `attr_reader` (https://github.com/wycats/thor/blob/master/lib/thor/base.rb#L122) is the problem.\r\nVisibility is ignored in this way; i.e. any attribute defined using `attr_reader` shows up as public_instance_method.\r\nThe reason no task is created is of course because of the `no_tasks`-wrapper.\r\n\r\nAny method added using `alias` is less fortunate and becomes a public method *and* a task...."},{"ts":1361560366000,"body":"@schneems not sure, the only way I can think of is verifying that `singular_name` is not in the `public_instance_methods` list, but that doesn't seem very good :D.\r\n\r\n@eval weird, good catch on this one, thanks.\r\n\r\nPerhaps just a useful comment saying why the method is *not* an alias would be enough?"},{"ts":1364321632000,"body":"I think this was fixed on the latest thor release. Could you take a look?"},{"ts":1364326102000,"body":"Yes, that fixed it.  Thanks @eval!\r\n\r\nApologies for implicating the wrong project.  :)"},{"ts":1364458046000,"body":"@bronson my commit was reverted later on, so I assume this issue still applies..."}]},{"timestamps":[{"ts":1369391885000,"body":"@arunagw thanks - do you know what commits introduced this errors?"},{"ts":1369394195000,"body":"thanks for merge! \r\n\r\nd29399061e54092fdbf57780c38e19dd1921f45d and f8c4805a8247a62594d29c5f3ef634d57d2abbf1"},{"ts":1369400551000,"body":"Thanks. I was aware of this failure and would fix it today. Sorry :bow:"}]},{"timestamps":[{"ts":1372796923000,"body":"This should be fixed in 08f8c8aa52d7cefed7b8fb0ae2cffa3d77d3895f and backported to 4-0-stable, so we should be good to go I think (unless I'm missing something). Thanks."},{"ts":1372797285000,"body":":+1: "}]},{"timestamps":[{"ts":1376256472000,"body":"Agree with @arunagw, please update this and I'll merge :smiley: "},{"ts":1376281426000,"body":"Updated to use the master branch for sqlite,mysql & postgres"},{"ts":1376282986000,"body":"What about the changes to the Gemfile.lock? Should that be committed too?\r\n\r\nEdit: Nevermind, I guess Gemfile.lock is not checked in."},{"ts":1376283187000,"body":"`Gemfile.lock` is not [committed in the repo](https://github.com/rails/rails/blob/master/.gitignore#L8)"},{"ts":1376286814000,"body":"[Update]\r\n\r\nit seems the build broke :broken_heart: following test is failing on MRI `1.9.3` but passes on `2.0.0`.\r\n\r\n```ruby\r\n  1) Failure:\r\nMessageEncryptorTest#test_messing_with_either_encrypted_values_causes_failure [/home/travis/build/rails/rails/activesupport/test/message_encryptor_test.rb:40]:\r\n[ActiveSupport::MessageEncryptor::InvalidMessage] exception expected, not\r\nClass: <ArgumentError>\r\nMessage: <\"dump format error(0xee)\">\r\n---Backtrace---\r\n/home/travis/build/rails/rails/activesupport/lib/active_support/core_ext/marshal.rb:6:in `load'\r\n/home/travis/build/rails/rails/activesupport/lib/active_support/core_ext/marshal.rb:6:in `load_with_autoloading'\r\n/home/travis/build/rails/rails/activesupport/lib/active_support/message_encryptor.rb:93:in `_decrypt'\r\n/home/travis/build/rails/rails/activesupport/lib/active_support/message_encryptor.rb:63:in `decrypt_and_verify'\r\n/home/travis/build/rails/rails/activesupport/test/message_encryptor_test.rb:73:in `block in assert_not_decrypted'\r\n---------------\r\n```\r\nnot sure why upgrading AR:JDBC is affecting MRI as this is only only on `platform :jruby`. Time to rollback the build?\r\n\r\n\r\n\r\n"},{"ts":1376286899000,"body":"I restarted the build, I don't think the failure is related to this commit"},{"ts":1376287962000,"body":"its green now, seems like a false positive :relaxed: "}]},{"timestamps":[{"ts":1368242059000,"body":"I like \"dbs\" to \"databases\" but not so much the bit about portable schema\r\nfiles\r\n\r\nOn Friday, May 10, 2013, प्रथमेश wrote:\r\n\r\n> ------------------------------\r\n> You can merge this Pull Request by running\r\n>\r\n>   git pull https://github.com/prathamesh-sonpatki/rails rake-db\r\n>\r\n> Or view, comment on, or merge it at:\r\n>\r\n>   https://github.com/rails/rails/pull/10565\r\n> Commit Summary\r\n>\r\n>    - Improved grammar and replaced 'dbs' slang with 'databases'\r\n>\r\n> File Changes\r\n>\r\n>    - *M* activerecord/lib/active_record/railties/databases.rake<https://github.com/rails/rails/pull/10565/files#diff-0>(4)\r\n>\r\n> Patch Links:\r\n>\r\n>    - https://github.com/rails/rails/pull/10565.patch\r\n>    - https://github.com/rails/rails/pull/10565.diff\r\n>\r\n>"},{"ts":1368242294000,"body":"@zzak My first opinion was `portable` could be dropped altogether as `db/schema.rb file that can be used against any DB supported by AR` states that purpose very clearly."},{"ts":1368269751000,"body":"/cc @fxn"},{"ts":1368545731000,"body":"@fxn Please review this."},{"ts":1368546046000,"body":"Please be patient and wait for feedback, spamming is not acceptable\r\n\r\n\r\nOn Tue, May 14, 2013 at 11:35 AM, प्रथमेश <notifications@github.com> wrote:\r\n\r\n> @fxn <https://github.com/fxn> Please review this.\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/10565#issuecomment-17884042>\r\n> .\r\n>"},{"ts":1368609679000,"body":"Hey, I am doing some other stuff in my free time these days, will come back soon."},{"ts":1369753270000,"body":"@fxn ping"},{"ts":1369753515000,"body":"Hey, you've ping'ed three times, I said I was off and when I am back I know this issue is pending together with others."}]},{"timestamps":[{"ts":1372010828000,"body":"A changelog entry and guides update make feature complete. :smile: "},{"ts":1372012417000,"body":"something else?"},{"ts":1372018510000,"body":"I don't think we should add this. Using `slice` and `[]` should work fine:\r\n\r\n```ruby\r\nirb(main):002:0> {id: 7}.slice(:id, :other)\r\n=> {:id=>7}\r\nirb(main):005:0> {id: 7}[:other]\r\n=> nil\r\n```\r\n\r\nextracting stuff that wasn't there in the first place seems like a special case and I don't think it warrants a core extension.\r\n\r\n/cc @steveklabnik @carlosantoniodasilva "},{"ts":1372021032000,"body":"`extract!` used to return `nil` for non existent keys, and that was changed on master to simply not return those keys, which make it more consistent with things like `slice`. And I think `slice` works pretty well for such cases.\r\n\r\nThanks @mokevnin."}]},{"timestamps":[{"ts":1361327288000,"body":"/cc @pixeltrix "},{"ts":1361327303000,"body":"Seems legit to me. :+1:"},{"ts":1361345229000,"body":"Looks like the problem was introduced in 9dd64f2e0c1b3ce85b503b0f81c50c93f89ffbcd.\r\n\r\nThanks for catching this!"},{"ts":1361381847000,"body":"No problem and thanks for taking a look at it and merging it in so quickly guys.  It's really nice as a contributor to have a tight feedback loop!"},{"ts":1361459157000,"body":"We try, though sometimes things sit open for a while. :/"}]},{"timestamps":[]},{"timestamps":[{"ts":1372629229000,"body":"/cc @tenderlove "},{"ts":1373373706000,"body":"This is not a hash and not every merge method should works like a hash merge. Also this method is internal and in my opinion the name defines correctly the behavior.\r\n\r\nThank you"}]},{"timestamps":[{"ts":1372119180000,"body":"Can you change [here as well](https://github.com/rails/rails/blob/master/guides/code/getting_started/app/views/posts/_form.html.erb#L3)? Please squash the commits when doing so. Thanks."},{"ts":1372198163000,"body":"Merged, thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1377753887000,"body":"@Gaelan Can you explain what is the use case of this feature"},{"ts":1377754203000,"body":"A (IMO more readable) replacement for `a && !b`."},{"ts":1377837769000,"body":"Thanks, but without real use cases it's hard to add more methods to active support that might not be used by most of the users out there, and not used by rails itself. In any case, since it's a core extension, maybe you can try sending it to ruby itself."}]},{"timestamps":[{"ts":1361832498000,"body":"wait!! what?"},{"ts":1361832721000,"body":"Sorry, we can't merge master in 3-2-stable.\r\n\r\nThanks!!!"}]},{"timestamps":[{"ts":1360162879000,"body":"Makes sense to me, thanks.\r\n\r\n@jonleighton mind reviewing to see if I'm not missing anything?"},{"ts":1360382195000,"body":"@carlosantoniodasilva thanks!\r\n"},{"ts":1360740800000,"body":"@jonleighton How do you think about this patch?"},{"ts":1360926194000,"body":"This looks good to me. I agree the current behaviour is weird. @yaotti please rebase as this has merged conflicts currently."},{"ts":1360934573000,"body":"@jonleighton Thanks! \r\n\r\n> please rebase as this has merged conflicts currently.\r\n\r\n<del>I merged current master into the branch and resolve conflicts. Did you mean this?</del>\r\n\r\nI rebased & push -f to avoid merge commit."},{"ts":1360935900000,"body":"Ok, I can't merge it right now as we have failing tests on the CI and that needs to get fixed first (I may take a look in a bit)."},{"ts":1361805173000,"body":"@jonleighton would you please merge this pull request? I want to fix a bug on my service due to this weird behavior."},{"ts":1361805800000,"body":"This PR can't be merged cleanly anymore. Can you do another rebase and force-push?"},{"ts":1361806486000,"body":"@sikachu Thank you for your comment, I did rebase & push."},{"ts":1361809021000,"body":"Is this happening on `3-2-stable` as well? Would you mind checking that for me? We might want to backport this."},{"ts":1361841122000,"body":"@sikachu yes, `test/cases/dup_test.rb` failed on `3-2-stable` ( 0761bb029886bb6920a404ecf409013f83a44f58 ) too."},{"ts":1361844473000,"body":"@yaotti can you submit another PR to backport this to `3-2-stable` then? Thanks!"},{"ts":1361844615000,"body":"OK! :smiley: "},{"ts":1361847701000,"body":"I created a PR #9428 to backport this. "}]},{"timestamps":[{"ts":1373264404000,"body":"This is now https://github.com/rails/rails/pull/11353"}]},{"timestamps":[]},{"timestamps":[{"ts":1373202474000,"body":":+1:"},{"ts":1373208432000,"body":"Thank you but. This fall in the cosmetic change category to me. We don't accept cosmetic changes"}]},{"timestamps":[{"ts":1372706528000,"body":"@carlosantoniodasilva fixed as per your feedback."},{"ts":1372707890000,"body":"@neerajdotname :heart:"}]},{"timestamps":[{"ts":1366635377000,"body":"I would keep the use of `UnknownHttpMethod`. But send a 405 http status instead of a 500."},{"ts":1366636366000,"body":"@dmathieu yes I guess thinking about it the two exceptions do have slightly different meanings.\r\n\r\nUpdated to just return a 405 when `UnknownHttpMethod` is raised: 6ed222f"},{"ts":1366636760000,"body":"@lmars can you add tests to debug_exceptions_test.rb and show_exceptions_test.rb. Also, it'll need a CHANGELOG entry as well - thanks!"},{"ts":1366636809000,"body":"Good, thank you. You should also [test it](https://github.com/rails/rails/blob/master/actionpack/test/dispatch/debug_exceptions_test.rb)."},{"ts":1366637534000,"body":"Tests added and Changelog updated: ec462b4"},{"ts":1366639444000,"body":"@lmars - thanks!"},{"ts":1367229097000,"body":"@dmathieu @pixeltrix it looks like my changes didn't actually fix the issue.\r\n\r\nSince Rails::Rack::Logger is [inserted in the middleware stack before ShowExceptions](https://github.com/rails/rails/blob/master/railties/lib/rails/application.rb#L333), and it [calls ActionDispatch::Request#request_method](https://github.com/rails/rails/blob/master/railties/lib/rails/rack/logger.rb#L51), the Exception is not caught as intended.\r\n\r\nI was going to move the Logger beneath ShowExceptions in the stack, WDYT?"},{"ts":1367232179000,"body":"@lmars urgh - I'm not sure if that's going impact other things adversely. @jeremy @josevalim can you think of any negative impact of moving the `Rails::Rack::Logger` after the exceptions app ?"},{"ts":1370982332000,"body":"**bump** \r\n\r\nAny word on changing the default middleware ordering to have `Rails::Rack::Logger` come after `ActionDispatch::ShowExceptions`?\r\n\r\nIt seems like a simple enough fix to ensure we're not 500ing from a malformed client request."}]},{"timestamps":[{"ts":1357077495000,"body":"Great! Could you remove the FIXME comments?"},{"ts":1357077987000,"body":"Updated."},{"ts":1357078151000,"body":"Thank you"}]},{"timestamps":[{"ts":1361305520000,"body":"Wouldn't it be clearer to just solve the problem - namely that PG leverages the standard's rule \"if no ORDER BY is specified, return records in whatever order desired\" - and specify an explicit order?"},{"ts":1361306340000,"body":"@al2o3cr go for it"},{"ts":1361410324000,"body":"Done"}]},{"timestamps":[{"ts":1372050885000,"body":"For ref: https://github.com/rails/rails/blob/78dc995fff71dc09e8113ba5cfb91308ae42e274/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb#L286-L290"},{"ts":1372052462000,"body":"cc @tenderlove "},{"ts":1372319612000,"body":":+1: "},{"ts":1376204182000,"body":"2 month bump : @rafaelfranca @senny @tenderlove "},{"ts":1376205081000,"body":"Sorry, this isn't right.  We don't want to cache all statements, we only want to cache statements that have bind parameters.  Not all statement have bind parameters (the `binds` variable could be an empty list).  This change would cause statements *with* bind parameters to be evicted from the cache."},{"ts":1376207101000,"body":"Got it. Thanks @tenderlove "},{"ts":1376208992000,"body":"no problem.  Sorry it took so long to respond!\r\n\r\n\r\nOn Sun, Aug 11, 2013 at 4:45 PM, Vipul A M <notifications@github.com> wrote:\r\n\r\n> Got it. Thanks @tenderlove <https://github.com/tenderlove>\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/11066#issuecomment-22453911>\r\n> .\r\n>\r\n\r\n\r\n\r\n-- \r\nAaron Patterson\r\nhttp://tenderlovemaking.com/"}]},{"timestamps":[{"ts":1361900996000,"body":"Nice, thanks!"}]},{"timestamps":[{"ts":1369810084000,"body":"@fxn @rafaelfranca @kennyj can you take a look?"},{"ts":1370095368000,"body":"I thought two plans to resolve this original issue.\r\n\r\nFirst: HWIA should has two mode, deep convert mode and shallow convert mode in the API level.\r\nSecond: We not use HWIA in the place of problem (maybe two parts).\r\n"},{"ts":1370096140000,"body":"@kennyj could you explain with some pseudo code?"},{"ts":1370188166000,"body":"Second plan is easy. But this plan has one problem.\r\n\r\nfirst:\r\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/inheritance.rb#L173\r\n\r\nreplace\r\n```\r\nsubclass_name = attrs.with_indifferent_access[inheritance_column]\r\n```\r\nto\r\n```\r\nsubclass_name = attrs[inheritance_column.to_s] ||  attrs[inheritance_column.to_sym]\r\n```\r\n\r\nsecond:\r\nhttps://github.com/rails/rails/blob/master/activemodel/lib/active_model/dirty.rb#L122\r\n\r\nreplace\r\n```\r\nActiveSupport::HashWithIndifferentAccess[changed.map { |attr| [attr, attribute_change(attr)] }]\r\n```\r\nto\r\n```\r\nHash[changed.map { |attr| [attr, attribute_change(attr)] }]\r\n```\r\n\r\nBut The #changes method behavior is changeed . This is problem .\r\n\r\nPlease wait about first plan. I'm so sleepy :sleepy: .\r\n"},{"ts":1370273064000,"body":"About first plan.\r\n\r\nI thought that the first plan (HWIA has two mode) was good.\r\nBut I think this approach is no good now.\r\nBecause if HWIA has a flag about convert or no-convert, it isn't useful and this problem cann't be solved.\r\n\r\nSo, I thought the new plan.\r\n\r\nWe've had Hash#nested_under_indifferent_access already.\r\nIf Hash#nested_under_indifferent_access returns self, this hash isn't converted.\r\n\r\nThis idea's implementation is 759654e97d0e27ef0b5376b526564fb3da37354e , be3a7c7134a55fbcc12d6e66edd9ea524503c114 and 30baa5bd76153c3f8c83e9f7d60f42501a09b1fa .\r\n\r\n759654e97d0e27ef0b5376b526564fb3da37354e is testcase for this problem.\r\nbe3a7c7134a55fbcc12d6e66edd9ea524503c114 is necessary because subclass_from_attrs method is called before assigning every attribute .\r\n30baa5bd76153c3f8c83e9f7d60f42501a09b1fa is my new idea . \r\n\r\nIf HashWithoutIndifferentAccess isn't good naming, please teach me proper name.\r\n"},{"ts":1370274315000,"body":"@kennyj Can you explain what the problem with my proposed solution is? As I see it, `Hash#with_indifferent_access`, which returns a new hash, should never modify the contents of the original hash. As I see it the change from 8c07696f470cff823ad0b538ca4bea1594742580 has side-effects."},{"ts":1370274884000,"body":"@senny \r\nIMO, sometimes people want to convert nested hash, sometimes people don't want to convert nested hash.\r\nI thought we shouldn't change HWIA's behavior. wdyt?"},{"ts":1370275555000,"body":"From my perspective `Hash#with_indifferent_access` should never change the original hash. As this is the current behavior I think we need to fix it anyway. @kennyj maybe I missed it but does your proposed solution fix this problem? To me it looks like you only changed the behavior of the serialization part."},{"ts":1370277256000,"body":"Yes. I only changed the behavior of the serialization part (we also must confirm store ...etc) , and I didn't change the behavior of HWIA .\r\n\r\nI don't solve your mentioned point, because I'm not sure whether `Hash#with_indifferent_access` should never change the original hash (or nested hashes).\r\nPlease tell me more detail if I misunderstand ??"},{"ts":1370277787000,"body":"This `irb` session should illustrate what I'm trying to explain:\r\n\r\n```irb\r\nirb(main):002:0> original = {'array' => [:sym => :value, 'string' => 'value']}\r\n=> {\"array\"=>[{:sym=>:value, \"string\"=>\"value\"}]}\r\nirb(main):003:0> original.with_indifferent_access\r\n=> {\"array\"=>[{\"sym\"=>:value, \"string\"=>\"value\"}]}\r\nirb(main):004:0> original\r\n=> {\"array\"=>[{\"sym\"=>:value, \"string\"=>\"value\"}]}\r\n```\r\n\r\nDo you see how `:sym` was converted into `\"sym\"` on the original hash, this should not happen."},{"ts":1370301940000,"body":"Oops. I misunderstood ;)\r\nYou are right.  This behavior is no good .\r\n\r\n"}]},{"timestamps":[{"ts":1362009711000,"body":"/cc @steveklabnik @mikel "},{"ts":1362010385000,"body":"We need to check if it has any possible backward compatibility issues, @mikel should be able to confirm that. Thanks."},{"ts":1362010840000,"body":"Did the full rake on AM passed? It's probably be OK to merge onto master even there's some backward compatibility issue. My concern is more on the side if we need to backport to 3-2-stable. "},{"ts":1362010931000,"body":"A demonstration, which will also show new vulnerability issues in the future: https://gist.github.com/Peeja/5053136"},{"ts":1362011054000,"body":"Should Travis CI be running the commit?"},{"ts":1362011239000,"body":"Regardless, you should run the test case before submitting any pull request to any project.\r\n\r\nFor Rails, we don't have pull request test since it's taxing Travis-CI too much."},{"ts":1362011366000,"body":"Cool, I just wasn't sure what the procedure is. Hold please…"},{"ts":1362012912000,"body":"So 3-2-stable is not a concern because it is already running a newer version of mail.  I also checked with @mikel on twitter and he said there shouldn't be any gotchas:\r\n\r\nhttps://twitter.com/lindsaar/status/306920157677223936\r\n\r\nI also ran the full test suite before submitting:\r\n[josh:actionmailer(update-mail☠)][1.9.3-p327]$ rake\r\n/Users/josh/Code/OpenSource/rails/vendor/ruby/1.9.1/gems/rack-1.3.10/lib/rack/utils.rb:8: warning: assigned but unused variable - ruby_engine\r\nRun options: \r\n\r\n# Running tests:\r\n\r\n.....................................................................................................................................................................................\r\n\r\nFinished tests in 2.546984s, 71.0644 tests/s, 203.7704 assertions/s.\r\n\r\n181 tests, 519 assertions, 0 failures, 0 errors, 0 skips"},{"ts":1362012991000,"body":":shipit:\n\nAnd nice shell prompt."},{"ts":1362013009000,"body":"Thx"},{"ts":1362013192000,"body":"Thanks!!!"},{"ts":1362013273000,"body":"Thanks! :heart:"},{"ts":1362101529000,"body":"DId you guys plan to ship 3.1.12 soon?  One of the two vulnerabilities in the mail gem is marked as a High Severity: http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-2140.  Seems like something we would want patched sooner rather than later given the age of the notice: 07/18/2012. "},{"ts":1362102373000,"body":"We plan to have 3.2.13 final soon, but if that's critical i think we should release security advisory so people would put newer version of Rails gem in the Gemfile. Would you mind dropping that in our security email contact?"},{"ts":1362102439000,"body":"Oh wait? 3.1? ... Yeah, I guess that should be released as well ..."},{"ts":1362102927000,"body":"I dropped an email to the security email, as requested.  Sorry if I didn't clarify the severity of the issue in this thread sooner.\r\n\r\nTo be clear, this only affects the 3-1-stable branch, and the release version should likely be 3.1.12 from what I can see.  3.2 is fine and unaffected."},{"ts":1362103249000,"body":"I the meantime perhaps @mikel could push out a 2.3 fix for this one too?"},{"ts":1362103448000,"body":"You mean a 2.3.4 mail gem with the backported fix?"},{"ts":1362103524000,"body":"yep, exactly.  There's a risk of introducing bugs due to the version change otherwise."},{"ts":1362103624000,"body":"Assuming that's possible we can revert this change, which would be my preference.  Tests passing are a nice indicator, but they're not a water tight guarantee that people's apps don't break."},{"ts":1362103964000,"body":"I agree with you, @NZKoz, I know nothing about the completeness of the test suite around actionmailer.\r\n\r\nThis was the quickest way to fix the issue without having to dig into the mail gem."}]},{"timestamps":[]},{"timestamps":[{"ts":1359560770000,"body":"Lets get this fixed, thanks."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1368798591000,"body":"@neerajtuteja the taken message is added by active record. it is not part of active model because it does not have the uniqueness validation on its own. Thanks for the PR regardless!"}]},{"timestamps":[]},{"timestamps":[{"ts":1362935047000,"body":"Can you demonstrate some real-world code that this makes better? Extending `String` is something that should be done only when it's really important."},{"ts":1362935766000,"body":"I agree with @steveklabnik. We need to be cautious when adding such extensions. I think they should live in your personal application or a gem but please post the examples so we can see why you like to extend `String`."},{"ts":1362936112000,"body":"Contains only numeric values\r\n\r\n```ruby\r\nsome_arrays.select do |item|\r\n\titem.name.include?(entered_keyword) ||\r\n\t(entered_keyword.is_numeric? && item.price == entered_keyword.to_numeric)\r\nend\r\n```\r\n```ruby\r\nclass Validator\r\n\tdef self.valid?(field, value)\r\n\t\tcase field\r\n\t\twhen :name\r\n\t\t\t!value.nil? && !value.empty?\r\n\t\twhen :price\r\n\t\t\t!value.nil? && value.is_numeric?\r\n\t\telse\r\n\t\t\treturn false\r\n\tend\t\t\r\nend\r\n```"},{"ts":1362948065000,"body":"We already have http://guides.rubyonrails.org/active_record_validations_callbacks.html#numericality"},{"ts":1362976914000,"body":"@hbakhtiyor this would be better off in a Gem for now. It's interesting functionality and i'm sure some will want it, but I don't think we can fully justify having this in Rails. Active Support is extremely conservative when it comes to extending core classes, since it's so invasive. Because of this, we're very reluctant to accept pull requests that modify core classes unless there is an overwhelming need for the functionality. @steveklabnik and @senny seem to agree. I'm closing this issue for now. Let me know if you cut a gem."},{"ts":1363084735000,"body":"@schneems Added the gem https://github.com/hbakhtiyor/rcore-ext"}]},{"timestamps":[{"ts":1371415996000,"body":"/cc @jonleighton "},{"ts":1371423670000,"body":"Thanks for your PR! Some feedback:\r\n\r\n1. I remember there is/was an `.unscoped` method (as opposed to `.unscope`, note the ending 'd') - is/was there a difference between the two? Isn't the whole point of `.unscoped`/`.unscope` to remove the default scope - otherwise what's the use of that method at all?\r\n2. I agree that `.unscope`/`.unscoped` should remove/override `default_scope`, but not sure whether the same should apply to `.except`. I could argue that `.except` is used to override/customize other \"normal\" (e.g. not \"default\") scopes, such as those inherited from superclasses, and `.default_scope` should be as transparent to `.except` as it is to other clauses; to override a `.default_scope`, explicit `.unscope`/`.unscoped` should be used in addition or instead of `.except`, as required.\r\n3. If there is a desire for flexibility of `.unscope` to only remove some clauses such as `.where` but not others, I think `.unscope` should take array/varargs arguments that specify which clauses should be removed:\r\n\r\n```ruby\r\nUser.unscope(:where).where(...) # replace existing `.where` scopes but preserve other existing scopes.\r\n```\r\n\r\nRight now there are some custom method that do this, such as `.reorder` (which drops existing order clauses before setting new ones) as opposed to `.order` (which appends clauses without removing old ones), and I always felt that led to method sprawl and wasn't friendly to new users who didn't now the intimate details of all the API. I'd rather have a more explicit way of removing or replacing existing scopes (such as above `.unscope` with arguments)."},{"ts":1371476528000,"body":"@egilburg, thanks for the feedback.\r\n\r\n1. `.unscoped` still exists. It removes the default scope.\r\n2. I don't expect a method called `.except` to ignore the default scope. I think acting on the default scope should be `.except`'s default behavior. If people want to override that behavior, perhaps an option should be passed, e.g. `User.except(:where, with_default_scope: false)`\r\n3. `.unscope` already works like I think you suggested, e.g.\r\n\r\n```ruby\r\nUser.where(awesome: true).order('age DESC').unscope(:where, :order).order('age ASC').to_sql\r\n# => \"SELECT \\\"users\\\".* FROM \\\"users\\\"   ORDER BY age ASC\"\r\n```"},{"ts":1372143964000,"body":"As per discussion on https://github.com/rails/rails/issues/10643 in 4.1 default_scope would be applied first. This would mean that `except` and everything else would work on the relation on which `default_scope` has already been applied.\r\n\r\nI think all PRs dealing with `default_scope` should wait until that work is finished. Anyways these changes would not go in 4.0 ."},{"ts":1372353209000,"body":"OK, thanks. I wasn't sure if master was open for 4.1 so I figured I'd throw this pull request out there.\r\n\r\nIt sounds like the work here would be unnecessary if default scopes will be applied on the initial relation before anything else. Feel free to close this if that's the case. If the work here is similar to what will be done for 4.1, I'm happy to adjust the code here to reflect that. Let me know."},{"ts":1372356057000,"body":"@davejachimiak I've no idea how it this work be implemented. So the only thing  we can do is wait to hear from @jonleighton  and other core team members."},{"ts":1372423795000,"body":"Hi @davejachimiak, thanks for the pull request but really the problems with `unscope` and `except` were symptoms of a wider problem with the implementation of default scopes. Therefore I didn't want to just fix those methods in isolation. I've fixed the wider problem in 94924dc32baf78f13e289172534c2e71c9c8cade."},{"ts":1372554084000,"body":"@jonleighton, very cool. Thanks for the explanation."}]},{"timestamps":[{"ts":1372179695000,"body":"Thank you!"},{"ts":1372180104000,"body":"Thanks!"},{"ts":1372181071000,"body":"Yes, @rafaelfranca is right, this should not be deprecated. And my extra commit here is also wrong. Apparently I read sentences backwards this morning. :cry: \r\n\r\nWe deprecated `#scoped` in favor of all, so the original behavior should be correct."},{"ts":1372181542000,"body":"I was totally wrong, the scaffold generated correctly with no warnings (all works as intended on a model class) and I introduced the deprecation when scoping the association off of a user and leaving the .all\r\n\r\nsorry @rafaelfranca @steveklabnik "}]},{"timestamps":[{"ts":1369556296000,"body":"why is this model necessary? :O "}]},{"timestamps":[]},{"timestamps":[{"ts":1363626874000,"body":"Thinking about it now, there will be a problem with upgrade, when people will upgrade to the latest rails with the previous version of the schema migrations table.\r\n\r\nI will try and figure out (and implement) a solution for this case as well, if anyone has any input, would love to hear it."},{"ts":1363627107000,"body":"It's not much of a problem, just allow NULL for this field. And anyone who comes from older versions will know that if it's NULL it's before the upgrade..."},{"ts":1363627256000,"body":"@arikfr, the problem is not the null thing (that's easily solvable), the problem is the insert statement, when you don't have the column."},{"ts":1363627587000,"body":"Oh.\r\n\r\nI guess that you can query the table structure to check which version of the insert statement to use and give the users a way to generate the needed migration (to update schema_migrations table)."},{"ts":1370330281000,"body":"@KensoDev I believe NOW() is database specific, it might be a problem when migrating anything other than MySql.\r\n\r\nSkipping the cross vendors headache, It might just be better to log timestamp + timezone from the client end."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1357755923000,"body":"Rails doesn't usually accept this kind of cosmetic change. "},{"ts":1357756286000,"body":"Fair enough. Just saw it and figured I'd ask, so to speak."},{"ts":1357771645000,"body":"Curious what differentiates changes like this one from my recent one over at #8859, would help myself (and probably @mattdbridges) know what kind of contributions are wanted in the future."},{"ts":1357773746000,"body":"@tehgeekmeister That was actually fixing something, even though it was a minor typo. Yes it makes git story dirty the same way, but it was a fix of something that was previously wrong. On the other hand, this one is more aesthetic: whether we leave the code with the new or old hash style, doesn't actually matter. We set the convention for the new hash style for all new code, but old code is going to be migrated as we touch them. Similar changes for code conventions, like adding spaces around `{}`, indenting `private/protected` blocks, and stuff like that, all end up as cosmetic."},{"ts":1357773881000,"body":"recapping to ensure I understand: changing a thing that was wrong at time\r\nof commit is :+1:, but style changes should be dependent on touching the\r\naffected code for some other reason?\r\n\r\nOn Wednesday, January 9, 2013, Carlos Antonio da Silva wrote:\r\n\r\n> @tehgeekmeister <https://github.com/tehgeekmeister> That was actually\r\n> fixing something, even though it was a minor typo. Yes it makes git story\r\n> dirty the same way, but it was a fix of something that was previously\r\n> wrong. On the other hand, this one is more aesthetic: whether we leave the\r\n> code with the new or old hash style, doesn't actually matter. We set the\r\n> convention for the new hash style for all new code, but old code is going\r\n> to be migrated as we touch them. Similar changes for code conventions, like\r\n> adding spaces around {}, indenting private/protected blocks, and stuff\r\n> like that, all end up as cosmetic.\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8851#issuecomment-12072527>.\r\n>\r\n>"},{"ts":1357774393000,"body":"@tehgeekmeister That's what I am understanding as well. I've seen other hash changes in other commits which is why I made the PR.\r\n\r\n@carlosantoniodasilva Are we right in understanding you?"},{"ts":1357774613000,"body":"Yup! Fixing a mistake/typo in code is definitely :+1:. Changing hash styles or similar in a method/test you're touching because you're actually fixing something else related to that code should be fine as well (improve as you go). Globally changing hash style in a file or similar would probably be considered cosmetic."}]},{"timestamps":[{"ts":1361520427000,"body":"@pixeltrix could you review this?"},{"ts":1361522142000,"body":"Thanks @senny "}]},{"timestamps":[{"ts":1366040556000,"body":"Why this change? Is it only cosmetic or there is some performance reason behind it?"},{"ts":1366040707000,"body":"@rafaelfranca  performance related"},{"ts":1366041292000,"body":"So, could you provide some benchmarks?"},{"ts":1366041839000,"body":"https://gist.github.com/vipulnsward/ca439878a0cef1d6345e"},{"ts":1366042310000,"body":"Thanks"}]},{"timestamps":[{"ts":1357174364000,"body":"Sorry but we don't accept this kind of cosmetic change.\r\n\r\nThank you for the pull request."}]},{"timestamps":[{"ts":1367528901000,"body":"Could you add the benchmark results in the commit message?"},{"ts":1367529320000,"body":"@rafaelfranca Sure, just added it."},{"ts":1367529666000,"body":" :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"},{"ts":1367534527000,"body":":metal:"},{"ts":1367534803000,"body":":D"},{"ts":1367581609000,"body":"Hi guys, I've had to revert this in 30f297bef5fec202ee6b26e67c9e45fb7a500251 as it caused a test failure. @wangjohn if you can take a look at the problem and submit a new PR we can merge it again. thanks :)"},{"ts":1367583996000,"body":"@jonleighton Sorry, I only tested this on sqlite3 in activerecord and on activesupport. I'll take a look into the failing tests."}]},{"timestamps":[{"ts":1367574240000,"body":"If this looks I will do a PR for 4-0-stable also."},{"ts":1367589088000,"body":"Could you open a pull request to master and we choose which branch we will backport?"},{"ts":1367589507000,"body":"Here you go #10448 \r\n\r\nI was thinking for master do we need `assets=false` can't we live with `--no-assets' only?"},{"ts":1367589778000,"body":"`--assets=false` and `--no-assets` should be the same thing. If not there is something wrong on thor"},{"ts":1367590251000,"body":"Just checked. Doing the same thing. Nothing wrong here.  I got confused that we have two options fot the same thing to skip assets. \r\n\r\n#10448 will fix #9525 "}]},{"timestamps":[{"ts":1375711866000,"body":"Code, tests, and commit documentation look really solid to me. Well done :+1:"},{"ts":1375741635000,"body":"Thanks - took me ages to work this one out, and it boils down to a four line test and a one line fix. :smile:"},{"ts":1377258540000,"body":"/cc @fxn"},{"ts":1377258828000,"body":"ACK, I'll have a look.\r\n"},{"ts":1377556630000,"body":"This patch looks good to me, thanks for investigating the issue, it was far from trivial to spot. Well done!\r\n\r\nLet me suggest an edit to the changelog entry, now it reads:\r\n\r\n    Ensure constants in all-caps nestings are marked as autoloaded\r\n\r\nI'd like to suggest:\r\n\r\n    Ensure that autoloaded constants in all-caps nestings are marked as autoloaded.\r\n\r\nIt specifies the fix is for autoloaded constants, and adds a full stop.\r\n\r\nIf you were also so kind as to squash the commits, I'd apply and backport.\r\n\r\n"},{"ts":1377586950000,"body":"Updated the changelog and squashed as requested - thanks for reviewing!"},{"ts":1377587582000,"body":"Can't be merged, can you rebase please?"},{"ts":1377588159000,"body":"Ah, sorry - I rebased against my fork's master without fetching upstream first. Now rebased properly."},{"ts":1377588251000,"body":"That was fast :), thanks!"}]},{"timestamps":[{"ts":1364945620000,"body":"Nice catch."}]},{"timestamps":[{"ts":1377558571000,"body":"I guess this should be Minitest now"},{"ts":1377590422000,"body":"I don't think we should change `Rails` to `Ruby` but we should change `Test::Unit` to `Minitest`.\r\n\r\nRails actually ships with a lot of testing Components specifically for Minitest. All the glue is provided, which is why Rails ships with `Minitest` and not with `Rspec`. To use rspec the same way you need `rspec-rails`, which is not part of Rails itself."},{"ts":1377629854000,"body":"@alexaltair please add a `[ci skip]` to the commit message"},{"ts":1377667717000,"body":"@alexaltair thank you for your contribution :yellow_heart: "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1363028731000,"body":"Can you demonstrate a real-world use case of this making code cleaner? We don't add extensions to String unless it's really important."},{"ts":1363029666000,"body":":-1: "},{"ts":1363030425000,"body":"`if string.to_boolean` instead of `if string == \"true\" || string == \"t\" || string == \"1\"`\r\nFor instance, when you have to check the value of `_destroy` in `accepts_nested_attributes`"},{"ts":1363032680000,"body":"That's an issue of accept nested attributes for. Maybe it should yield this\r\nparameter by default?\r\n\r\nIn any case, -1 for this PR, even more because its implementation is very\r\ncouple to what Active Record consider to be Boolean conversions.\r\n\r\n\r\n-- \r\n\r\n\r\n*José Valim*\r\nwww.plataformatec.com.br\r\nSkype: jv.ptec\r\nFounder and Lead Developer"},{"ts":1363032691000,"body":"It would seem to be overkill to extend a Ruby core class to make the code in this one very particular use case a little terser. How about a helper function in `ApplicationController`?"},{"ts":1363032760000,"body":"I agree with @josevalim. Closing.\r\n\r\nThank you for the pull request."},{"ts":1363076577000,"body":"Thanks for reviewing and your fast feedbacks :-)\r\nI won't touch `core_ext` anymore :-)"}]},{"timestamps":[{"ts":1360021646000,"body":"Wrong target branch, please review. Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1371817713000,"body":"Correct, thanks."}]},{"timestamps":[{"ts":1367472522000,"body":"* Do you have evidence of speedup?\r\n* Do tests pass?"},{"ts":1367482040000,"body":"1. https://gist.github.com/vipulnsward/35b05d96d406fd941aa3\r\n2. Yes\r\n\r\nPlease ignore if you feel its a micro-optimization"},{"ts":1367616134000,"body":"@vipulnsward Thank you! Micro-optimizations are welcome as long as they have evidence :grin: Including benchmarks in the commit message itself is a good way to go."},{"ts":1367617445000,"body":"Ops, I forgot about adding them to the commit message, sorry :smile:"},{"ts":1367658577000,"body":"Why not add it to the changelog instead for this commit? :) "},{"ts":1367670608000,"body":"@robin850 because this change doesn't need CHANGELOG entry"},{"ts":1367672494000,"body":"Oh, I hadn't check. Sorry. ^^"}]},{"timestamps":[{"ts":1362916226000,"body":"@steveklabnik @guilleiguaran can you take a look?"},{"ts":1362931948000,"body":"I am afraid this will cause unintended side effects. If you have a mountable engine, the script_name will also be set but in this case, asset_path still should not consider script path because the entity responsible for delivering assets is in the main application (sprockets in this case).\r\n\r\nSo I think we should create a mountable engine and ensure we can still access its assets after this patch. Things can get even trickier, because you have can have a mountable engine with Passenger's script_name and in this case we should use only the one coming from passenger. Here are a couple places to look at:\r\n\r\n* `config.relative_url_root` - if this option still exist in action controller, it will give you only the passenger stuff therefore you can rely on it instead\r\n* If not, the code in this module is a good starting point: https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/url_for.rb"},{"ts":1362934945000,"body":"As far as I can tell AC still has a `relative_url_root` option but I think this won't fix the problem. If I interpret this test correctly: https://github.com/rails/rails/blob/master/actionpack/test/template/asset_tag_helper_test.rb#L558-L573\r\nThat option is already considered when computing the asset path and it won't be set when you change the rack mount point."},{"ts":1362945338000,"body":"@senny you're meant to set `config.relative_url_root` to the same as the mount point for the application. IIRC, the original intention for Rails 3.0 was to deprecate it and the environment variable `RAILS_RELATIVE_URL_ROOT` and use `SCRIPT_NAME` exclusively. However it was undeprecated because of the need to be able get the relative url root outside of a request context like precompiling assets.\r\n\r\nI think we need to have a CF chat about the various options and come up with a plan for sorting this out."},{"ts":1362945622000,"body":"@pixeltrix thanks for clarifying. I put my work on hold and catch you on CF."},{"ts":1363350370000,"body":"I'm closing this one as this is not a viable solution. I'm working on a different approach."}]},{"timestamps":[{"ts":1368881662000,"body":"Mocha warnings are removed https://travis-ci.org/rails/rails/jobs/7276356"}]},{"timestamps":[{"ts":1362555069000,"body":"@rafaelfranca @carlosantoniodasilva can you take a look?"}]},{"timestamps":[{"ts":1374823234000,"body":"While using constants instead of pure strings is a good idea, I don't see where is the point in doing all variable assignments in one line. This reduces readability."},{"ts":1374825955000,"body":"@dmathieu agreed and changed."}]},{"timestamps":[{"ts":1373822560000,"body":"If necessary, I'll backport this to 4-0-stable."}]},{"timestamps":[]},{"timestamps":[{"ts":1358876786000,"body":"This gemspec files are super silly. They have extra ifs and all kinds of junk in them."},{"ts":1358877117000,"body":"Should I steamline them? They're copied from the 2.3.15 gems (except for changing rack from 1.1.3 to 1.1.0 in light of 28cfd79e31eeb5923c51ea6c8410d98fb48efebf)"},{"ts":1358877491000,"body":"yeah, they're that way because they're generated: we don't need the extra generation stuff."},{"ts":1358884034000,"body":"Looking good. You can remove the encoding magic comments, the required rubygems version, and the rubyforge project. Do squash the commits into one, too. Thanks!"},{"ts":1358897096000,"body":"Sure thing. Done. Thanks!"},{"ts":1358897458000,"body":"Looks good. Thank you."}]},{"timestamps":[{"ts":1368416955000,"body":"Thank you"}]},{"timestamps":[{"ts":1362494208000,"body":"done :+1: "},{"ts":1362517142000,"body":"This will not work. `tr` does not work like `gsub` when the to_str is longer than the from_str. See\r\n\r\nFor example:\r\n\r\n```\r\n> \"yo  dawg\".tr(\"  \", \"&nbsp; \")\r\n => \"yonndawg\"\r\n\r\n> \"yo  dawg\".gsub(\"  \", \"&nbsp; \")\r\n => \"yo&nbsp; dawg\"\r\n```"},{"ts":1362517815000,"body":"@teeparham reverted on #9573 "},{"ts":1362594675000,"body":"@robertomiranda Thanks. I think the same problem exists on 2 of the other `tr` calls. See this comment: https://github.com/rails/rails/commit/588f267e71083928ee8b6375a444fb674dad8fcf#commitcomment-2746016"}]},{"timestamps":[{"ts":1358110577000,"body":"Thank you! This looks good to me. Can you squash your commits and add a CHANGELOG entry, please?"},{"ts":1358111194000,"body":"I think that's good to go..."},{"ts":1358111725000,"body":"Thank you! :heart:"},{"ts":1358122865000,"body":"Wait!\r\n\r\nI think this is already possible with `:select` option. I don't think we should add support a `:value` since all the select helpers use `:select`"},{"ts":1358123691000,"body":"It is not possible with `:select` but I think we should use that option instead of `:value` since all the select helpers use it.\r\n\r\nAlso this pull request lacks of documentation changes and tests to `datetime_select` and `time_select` (that were affected by this patch)"},{"ts":1358126298000,"body":"> It is not possible with :select but I think we should use that option instead of :value since all the select helpers use it.\r\n\r\nAh! I didn't realize this. Yes, I agree.\r\n\r\n> Also this pull request lacks of documentation changes and tests to datetime_select and time_select\r\n\r\nAlso my oversight.\r\n\r\n@colinbm would you like to submit another PR fixing these two things? If not, I will do it tomorrow, since that's my mistake.\r\n"},{"ts":1358126543000,"body":"Thank you guys. :heart: :blue_heart: :green_heart: \r\n\r\n@steveklabnik it is very common make some mistakes since you are getting used with the codebase. This doesn't mean you are not doing a great job."},{"ts":1358154865000,"body":"@steveklabnik Happy to give this a bash. Can I clarify though, should the code be modified to work more like the `select` helper, or should the option name just be renamed?\r\n\r\nAlso, in the select helpers I see a `:selected` option, rather than `:select` - should that be what's used?"},{"ts":1358157856000,"body":"> should the code be modified to work more like the select helper, or should the option name just be renamed?\r\n\r\nJust renaming the option. What else did you have in mind?\r\n\r\n> Also, in the select helpers I see a :selected option, rather than :select - should that be what's used?\r\n\r\nYep! That's just a typo."},{"ts":1358158459000,"body":"> Just renaming the option. What else did you have in mind?\r\n\r\nNothing - it just looked more complicated so thought I'd check - right answer though. :)\r\n\r\nI'll sort this out this evening and send over."},{"ts":1358159376000,"body":":heart:"},{"ts":1358186390000,"body":"@steveklabnik Sorry, git(hub) semi-novice here. I've committed further to my branch... can that be integrated into this pull request or does it need another?\r\n\r\nAlso, re documentation, I can't see anywhere in the main rails repo to add this, but I can edit https://github.com/lifo/docrails once done I think?"},{"ts":1358186780000,"body":"@steveklabnik I'm figuring it's a no, but want to keep things tidy if I can."},{"ts":1358186928000,"body":"Since I merged this pull request already, open another one.\r\n\r\n>  I can't see anywhere in the main rails repo to add this\r\n\r\nlifo/docrails IS a copy of the main repo, so it's there. I'm actually having a hard time at the moment too, let me dig."},{"ts":1358186991000,"body":"https://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/date_helper.rb#L248\r\n\r\nfor example"},{"ts":1358187116000,"body":"@steveklabnik Ah, don't know how I missed that. I was grepping! Ok, will sort the docs out then open another pull request. Thanks."},{"ts":1358187549000,"body":"It happens! I got it by grepping too:\r\n\r\n```\r\n$ ack -ri \"datetime_select\" *\r\nactionpack/lib/action_view/helpers/date_helper.rb\r\n297:      #   datetime_select(\"article\", \"written_on\")\r\n301:      #   datetime_select(\"article\", \"written_on\", start_year: 1995)\r\n305:      #   datetime_select(\"trip\", \"departing\", default: 3.days.from_now)\r\n308:      #   datetime_select(\"article\", \"written_on\", ampm: true)\r\n312:      #   datetime_select(\"article\", \"written_on\", discard_type: true)\r\n315:      #   datetime_select(\"article\", \"written_on\", prompt: {day: 'Choose day', month: 'Choose month', year: 'Choose year'})\r\n316:      #   datetime_select(\"article\", \"written_on\", prompt: {hour: true}) # generic prompt for hours\r\n317:      #   datetime_select(\"article\", \"written_on\", prompt: true) # generic prompts for all\r\n320:      def datetime_select(object_name, method, options = {}, html_options = {})\r\n1045:      def datetime_select(method, options = {}, html_options = {})\r\n1046:        @template.datetime_select(@object_name, method, objectify_options(options), html_options)\r\n```"}]},{"timestamps":[]},{"timestamps":[{"ts":1357304381000,"body":"#8737 fixes it in a more elegant way."},{"ts":1357311038000,"body":"I agree"}]},{"timestamps":[{"ts":1376016017000,"body":"Thanks. Can you also squash it in one commit and add. [ci skip] at the end of commit message.  So travis will not run tests when it gets merged"},{"ts":1376054815000,"body":"Yup, this no longer merges. Please rebase, squash, and add `[ci skip]` Thanks so much!"},{"ts":1376057903000,"body":"Cool, thanks for the hint. Obviously my first time on this. Trying again!"}]},{"timestamps":[{"ts":1356971595000,"body":"I really would not backport this change. It changes the behavior in a stable release."},{"ts":1356973565000,"body":"Hmmm, @rafaelfranca is right"},{"ts":1356973657000,"body":"feel free to revert then."},{"ts":1356973712000,"body":"Reverted https://github.com/rails/rails/commit/348870d5c53c94eb02135c04297c18be60bd3bb0"}]},{"timestamps":[]},{"timestamps":[{"ts":1356501148000,"body":"this is my 1st pull request to rails or otherwise too, please help me if I missed anything."},{"ts":1356509243000,"body":"You should add tests to cover this and make sure it's working."},{"ts":1356541615000,"body":"added tests are passing, let me know further, meanwhile I will cross check to add any important test case"},{"ts":1356542103000,"body":"Thank you so much but I don't think this belongs to Rails. The reasons:\r\n\r\n1) This implementation is not performatic. To each unique record in the table it perform a new query to get the groups.\r\n2) I don't see many applications using this code."},{"ts":1356542129000,"body":"Oops, closed by mistake."},{"ts":1356549856000,"body":"\r\n\"1) This implementation is not performatic. To each unique record in the table it perform a new query to get the groups.\"\r\n\r\nThis is similar to find_in_batches, it also has a new query to get each batch, it returns array as batch, this would return Relation, hence no query fired unless user calls all, first etc\r\n\r\n\"2) I don't see many applications using this code.\", \r\n\r\nyou might be right, \r\n\r\nI hope applications may use it and it will get enhanced\r\nhttp://stackoverflow.com/questions/2432412/group-by-country-with-activerecords-in-rails and related\r\n\r\nanyways thanks @rafaelfranca \r\n"},{"ts":1356552441000,"body":"There is an essential diference between `find_in_batches` and this one.\r\n\r\nIf you have 1.000.000 distinct records and use the first will you do 100 queries. Using the last will you do 1.000.000"},{"ts":1356558220000,"body":"off course, thats right. `find_in_groups` is not for batch processing for the reason divide and conquer, firstly it divides based on some other rule and for some other reason and not for \"divide and conquer\" purpose. as it returns Relation, one can do it further `group.for_each`.\r\n\r\nAs you were pointing out it may not be useful that much. application could write similar logic if they badly want something similar"},{"ts":1356603588000,"body":"thanks guys, closing for now."},{"ts":1356620525000,"body":"Thank you"}]},{"timestamps":[{"ts":1356799939000,"body":"Since this was a 1 character addition to fix an example in the docs, I didn't see the need to go through the full contribution workflow identified in http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html.\r\n\r\nIf that's not the case, let me know and I'll resubmit."},{"ts":1356800327000,"body":"@codeodor You're right, the workflow isn't for small documentation changes, we maintain a project named [docrails](http://weblog.rubyonrails.org/2012/3/7/what-is-docrails/) for these changes. The next time you can push your changes directly to [docrails](https://github.com/lifo/docrails) instead of send a PR here.\r\n\r\nThanks for your contribution!!!"},{"ts":1356800820000,"body":"Ok, thanks for the info! I have another one I'll send there now. "}]},{"timestamps":[{"ts":1364748899000,"body":"The sort comes from this commit: https://github.com/rails/rails/commit/5c8be9eb864886d7ba9abba0d59786614cca2a5a\r\n\r\nUnfortunately, I have no idea why it is required and the commit does not explain so."},{"ts":1364751639000,"body":"@josevalim I believe I've tracked the ``sort`` down to this issue: https://github.com/rails/rails/issues/2569, although I'm not sure if the sort is directly relevant because the fix was made in the hike gem. \r\n\r\nThe problem was that md5 fingerprints were different in development vs production because the dir file globs weren't sorted in the hike gem's ``entries`` method.\r\n\r\nThis makes me wonder if the ``sort`` in the ``expanded`` method actually is required since it seems like the fix was only required in the hike gem. @tenderlove do you remember if the ``sort`` in the ``expanded`` method was required to fix https://github.com/rails/rails/issues/2569? If so, I'll add some documentation as to why ``sort`` is called, otherwise I'll get rid of it."}]},{"timestamps":[{"ts":1365427536000,"body":":+1: "},{"ts":1365427900000,"body":":-1: this seems belongs to a gem.\r\n\r\nI don't see a lot of applications taking advantage from this feature.\r\n\r\nI have the same felling about has_strong_password.\r\nOn Apr 8, 2013 10:25 AM, \"Roberto Miranda\" <notifications@github.com> wrote:\r\n\r\n> [image: :+1:]\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/10137#issuecomment-16049972>\r\n> .\r\n>"},{"ts":1365428151000,"body":":-1: too, for the same reasons as @rafaelfranca."},{"ts":1365436666000,"body":"Even blogs are starting to use this :smile: \r\n\r\nhttp://en.blog.wordpress.com/2013/04/05/two-step-authentication/"},{"ts":1365436758000,"body":"I still think this should be a plugin."},{"ts":1365436952000,"body":"has_secure_password should be removed then?"},{"ts":1365437072000,"body":"NO!!! has_secure_password is fine :grin:\r\n\r\n--  \r\nGuillermo Iguaran\r\nSent with Sparrow (http://www.sparrowmailapp.com/?sig)\r\n\r\n\r\nOn Monday, April 8, 2013 at 11:02 AM, Roberto Miranda wrote:\r\n\r\n> has_secure_password should be removed then?\r\n>  \r\n> —\r\n> Reply to this email directly or view it on GitHub (https://github.com/rails/rails/pull/10137#issuecomment-16059502).\r\n>  \r\n>  \r\n>  "},{"ts":1365437231000,"body":"I would never include it, but since it was already included I think we can keep it :cry:\r\n\r\n@guilleiguaran I think we can go in the same path that we did with jbuilder, strong_parameters, etc. We build a plugin for, can be in the Rails organization if it make sense, and in a next release we can integrate if needed. With this path we can make this feature available in Rails 3 for example."},{"ts":1367542896000,"body":"I'm definitely a fan of the idea of extracting this into it's own gem. Whatever the decision is, can it be made official here and close this issue?"}]},{"timestamps":[{"ts":1361765190000,"body":"/cc @pixeltrix "},{"ts":1361780456000,"body":"@chris-baynes can you add a CHANGELOG entry - thanks!"},{"ts":1361784298000,"body":"@pixeltrix done! Is there any chance this fix can also be backported to 3.2?"},{"ts":1361785788000,"body":"Unfortunately this is a change of behaviour so semver prevents us from doing that. It could be argued that it's a bug but there may be someone somewhere relying on this behaviour.\r\n\r\nCan you squash and rebase your commits so I can merge them, thanks!"},{"ts":1361786950000,"body":"Ok, squashed and rebased."},{"ts":1361787162000,"body":"Merged - thanks!"}]},{"timestamps":[{"ts":1372232442000,"body":"Hey @carlosantoniodasilva, this is a Rails 4 regression. More evidence here: https://gist.github.com/Empact/5865483 for which the outputs are:\r\n\r\nSuccessful:\r\n```\r\nActive Record 3.2.13\r\n-- create_table(:users, {:force=>true})\r\n   -> 0.1359s\r\n-- create_table(:logins, {:force=>true})\r\n   -> 0.0004s\r\nBob has 0 logins\r\nBob has 0 logins\r\n```\r\n\r\nUnsuccessful:\r\n```\r\nActive Record 4.0.0\r\n-- create_table(:users, {:force=>true})\r\n   -> 0.1610s\r\n-- create_table(:logins, {:force=>true})\r\n   -> 0.0004s\r\nBob has 0 logins\r\n./proof.rb:37:in `announce': undefined method `owner' for nil:NilClass (NoMethodError)\r\n\tfrom ./proof.rb:44:in `<main>'\r\n```\r\n\r\nNot being able to fully use association extensions when called after scopes is going to significantly limit their usefulness. Should I re-open the pull request on 4-0-stable?"}]},{"timestamps":[{"ts":1374055255000,"body":"cc/ @senny "},{"ts":1374055334000,"body":"awesome :heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1369758063000,"body":"@aditya-kapoor Here is the benchmark I ran, using the same pattern as activerecord/examples/performance.rb: https://gist.github.com/kylerippey/5663887\r\n\r\nI performed three runs on each branch with the following results:\r\n**master**\r\n747.8 (±7.4%) i/s -      14874 in  20.003392s\r\n741.0 (±8.6%) i/s -      14697 in  19.993949s\r\n768.5 (±7.4%) i/s -      15264 in  19.975956s\r\nAverage: 752.43 i/s\r\n\r\n**minor_schema_migration_refactor**\r\n744.2 (±7.9%) i/s -      14784 in  20.000572s\r\n746.9 (±7.8%) i/s -      14839 in  19.993636s\r\n766.9 (±7.6%) i/s -      15264 in  20.020892s\r\nAverage: 752.67 i/s\r\n\r\nAdditionally, I noticed that \"SchemaMigration.table_exists?\" does not currently work as expected in rails master due to the fact that the ActiveRecord::Base implementation is passed through schema_cache. This is the current behavior:\r\n```\r\nActiveRecord::SchemaMigration.create_table\r\nActiveRecord::SchemaMigration.table_exists? # returns false in rails master\r\nActiveRecord::Base.connection.table_exists?(ActiveRecord::SchemaMigration.table_name) # returns true\r\n```\r\n\r\nThis change makes table_exists? work as expected by bypassing schema_cache."}]},{"timestamps":[{"ts":1357125735000,"body":"Can you add a test case?"},{"ts":1357180909000,"body":"+1 on this one - makes sense that sprockets' require should behave the same way that Ruby's does and not load files multiple times."},{"ts":1357267842000,"body":"Can you squash your commits? also what happens with this issue in master?. We prefer to handle pull requests directly to master and then we can backport to 3-2-stable.\r\nThanks for your help :)"},{"ts":1357268714000,"body":"Thanks for looking into it. The reason it's in 3-2-stable is because this logic has been moved to rails/sprockets-rails in master.\r\n\r\nI created a separate pull request to address it there."},{"ts":1357270323000,"body":"*sigh* -- I tried squashing it as best I could figure.. how would you like me to proceed?  issue a new pull request with the squashed commits?"},{"ts":1357270785000,"body":"I'll issue a different pull request -- pretend this one didn't happen and we'll all walk away winners. ;-P"}]},{"timestamps":[{"ts":1377612868000,"body":"Thanks a lot for your contribution! Could you please rebase your pull request ? This doesn't merge cleanly."},{"ts":1377617909000,"body":"Thanks @robin850 and @rafaelfranca, I updated by your feedback and rebased."},{"ts":1377622494000,"body":"Thanks! :heart: "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1361886083000,"body":"@rafaelfranca I'll need to move the Changelog entry into the unreleased section."},{"ts":1361886097000,"body":"@pixeltrix could you take a look?"},{"ts":1361895215000,"body":"@senny my only concern is why is this error occurring - the params value should only contain path parameters which should be strings (It should be accessing the environment key `action_dispatch.request.path_parameters`). Have you reproduced this in a simple Rails 4 app and does your test fail without the change?"},{"ts":1361896277000,"body":"@pixeltrix yes the test does fail indeed with the same exception as described in the referenced issue. As the title of the PR suggest my first implementation used to convert all params to strings but there were other unpleasant side-effects. I agree that the default's should always be strings the thing is, in 3.2.x it worked the way it does after this patch. "},{"ts":1361910542000,"body":"@pixeltrix how would you like to proceed on this one?"},{"ts":1361910689000,"body":"@senny I'm investing this at the moment to see why there are non-string params in path parameters"},{"ts":1361910859000,"body":"They are coming directly from the route definition and are added in this method: https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/routing/mapper.rb#L150-L171\r\n\r\nI don't think a normal request ever produces other values than strings but the defaults you can supply in the routes file can have different types and 3.2.x passed them through as is."},{"ts":1361911634000,"body":"Surprised this hasn't come up before we released beta1 - the responsible commit is quite old: 3fc561a1f71edf1c2bae695cafa03909d24a5ca3"},{"ts":1361911791000,"body":"@pixeltrix sometimes I am really surprised how long a particular bug will reside in rails without being noticed. I updated the CHANGELOG and pushed a rebased version."},{"ts":1361911960000,"body":"@senny can you edit the commit message so it's less about what we could do and just explain what the commit does - thanks."},{"ts":1361912121000,"body":"used the commit message you suggested."},{"ts":1361912487000,"body":"Sorry, my bad - it looks like GitHub uses the original commit message on the Commits tab for a PR even after you force push an update."},{"ts":1361912652000,"body":"@pixeltrix ah no you were totally right ;) I replaced the message and made the comment afterwards. Thanks for the good review."},{"ts":1361912911000,"body":"@senny I see what happened - the GH dynamic updating of comments on the PR showed me your new comment but didn't update the commits tab."}]},{"timestamps":[{"ts":1359730653000,"body":"Pointing to wrong branch"}]},{"timestamps":[{"ts":1368710524000,"body":"@drogus BTW, I don't where we are now branch-wise, but I guess this should also be merged in 4-0-0 or 4-0-stable?"},{"ts":1368712090000,"body":"Yes, it needs beckporting, I'll push it to both branches"},{"ts":1368741721000,"body":"@joelcogen before I backport, could you confirm that the issue is fixed with also with 89f558c?"},{"ts":1368772883000,"body":"@drogus Yes, everything works for me"}]},{"timestamps":[]},{"timestamps":[{"ts":1368640689000,"body":"Rake::Application is available every time you run rake. Why it is not avaliable in your case?"},{"ts":1369740353000,"body":"I'm not sure why, but it is not there when running from RubyMine, for example"},{"ts":1369745133000,"body":"So apparently Rake::Application need not necessarily be defined. This is the issue that is occurring with RubyMine. See https://github.com/rails/rails/pull/10708 for explanation (which is also a slighter superior duplicate of this pull request).\r\n\r\nOriginal issue raised on RubyMine but closed WONTFIX: http://youtrack.jetbrains.com/issue/RUBY-13638\r\n\r\n "}]},{"timestamps":[{"ts":1357239212000,"body":"/cc @pixeltrix "},{"ts":1357294757000,"body":"Looks like this has the added benefit of making partial dates work:\r\n\r\n``` irb\r\n>> \"3rd Feb\".to_date\r\nNoMethodError: undefined method `<' for nil:NilClass\r\n>> Date.parse(\"3rd Feb\")\r\n=> Sun, 03 Feb 2013\r\n```\r\n\r\n@kwstannard can you add a test for the partial date handling - I don't think we need a test for the ArgumentError. You'll also need to update the CHANGELOG as well - thanks."},{"ts":1357313918000,"body":"Sorry, let me see if I can figure out how to get that merge commit out of there.\r\n\r\n*Done"},{"ts":1357335043000,"body":"@kwstannard can you rebase against the current master and we're good to go - thanks for you work!"},{"ts":1357335774000,"body":"That should be it. Thanks for the help."},{"ts":1375429316000,"body":"It appears that this pull request also parses invalid dates that were previously not parsed.\r\n\r\nFor example, \"3333333INVALID\" is now parsed as a valid date, whereas in previous versions of rails it was not.\r\n\r\nI think this is a pretty big regression, and it means that I have to validate all of my user-entered dates manually now.\r\n\r\nWhat do you think?  If I reverted this commit, I think it would ease the Rails 4 transition considerably."},{"ts":1375446920000,"body":"To quote the [Ruby docs][1] on `Date::parse`:\r\n\r\n>  This method does not function as a validator.\r\n\r\nThe only reason it raised an error before is because the previous code assumed the presence of year, month and day values and passed nil for the latter two constructor arguments - `Date::_parse` still parses '333333INVALID' as a valid date. It's not advisable to rely on the internal implementation `String#to_date` to validate your dates for you. \r\n\r\n[1]: http://ruby-doc.org/stdlib-2.0/libdoc/date/rdoc/Date.html#method-c-parse"},{"ts":1375467075000,"body":"It appears that this patch was created to solve an issue related to an error message.   It happens to have a side effect of changing active record's date parsing.   \r\n\r\nThis change to date parsing is not mentioned in the guide and I can't find any reference to it on the mailing list.   Your opinion is that this unintended side effect is beneficial.   My opinion is this side effect will end up making rails developers lives more difficult unnecessarily.  \r\n\r\nIf the PR had been named \"allow to_date to accept invalid dates\", I imagine there would have been a little more discussion around it, and maybe a better plan for the migration.  \r\n\r\nAt the very least we could do what rails does in other instances - issuing deprecation warnings, creating a gem that gives old behavior, pointing it out in the guide etc...   These kinds of unpleasant surprises can costs people thousands of dollars to fix, and I think it will catch most developers by surprise. \r\n\r\nAs far as the behavior itself, Rails improves on ruby core methods all the time.  I can't find any discussions of people being unhappy with the old parsing behavior, and it's been that way for a while so I think it's safe to say that the rails community was basically fine with the old behavior.  \r\n\r\nOn Aug 2, 2013, at 6:36 AM, Andrew White <notifications@github.com> wrote:\r\n\r\n> To quote the Ruby docs on Date::parse:\r\n> \r\n> This method does not function as a validator.\r\n> \r\n> The only reason it raised an error before is because the previous code assumed the presence of year, month and day values and passed nil for the latter two constructor arguments - Date::_parse still parses '333333INVALID' as a valid date. It's not advisable to rely on the internal implementation String#to_date to validate your dates for you.\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub."},{"ts":1375504639000,"body":"> If the PR had been named \"allow to_date to accept invalid dates\", I imagine there would have been a little more discussion around it, and maybe a better plan for the migration.\r\n\r\nI think that's harsh - more accurate to say 'allow to_date to accept additional invalid dates' since `to_date` allows invalid dates in 3.2.x, e.g:\r\n\r\n``` irb\r\n$ rails c\r\nLoading development environment (Rails 3.2.13)\r\n>> '2000-07-01INVALID'.to_date\r\n=> Sat, 01 Jul 2000\r\n```\r\n\r\n>  I can't find any discussions of people being unhappy with the old parsing behavior, and it's been that way for a while so I think it's safe to say that the rails community was basically fine with the old behavior.\r\n\r\n[\"Absence of evidence is not evidence of absence\"][1]\r\n\r\nJust because you can't find any discussions that `to_date` parsing was too strict or incorrect doesn't mean that the Rails community was fine with it's behavior. I think it's better that we are internally consistent with Ruby core and stdlib methods.\r\n\r\n[1]: http://en.wikipedia.org/wiki/Evidence_of_absence"},{"ts":1375689487000,"body":"Well, regardless of whether this change is good for rails, I think it needs a little more documentation and a smoother upgrade path.\r\n\r\nI just created a pull request that updates the documentation: https://github.com/rails/rails/pull/11756\r\n\r\nI also created a gem that can help ease the transition:\r\n * https://github.com/zilkey/stricter-string-to-date\r\n * http://rubygems.org/gems/stricter-string-to-date\r\n\r\nFor anyone coming to this thread, you can get the old behavior back with something like this:\r\n\r\n```ruby\r\nString.class_eval do\r\n  def to_date\r\n    unless blank?\r\n      date_values = ::Date._parse(self, false).values_at(:year, :mon, :mday)\r\n      ::Date.new(*date_values)\r\n    end\r\n  end\r\nend\r\n```\r\n"},{"ts":1376338339000,"body":"@zilkey  nice gem. I recently did something similar with javascript."}]},{"timestamps":[{"ts":1370020731000,"body":"The inflector code is generally frozen because modifications break applications.\r\n\r\n@fxn can you take a look?"},{"ts":1370030314000,"body":"Just a thought - if there is a perennial dilemma on whether or not to make changes to inflector because it's \"frozen\" - would it make sense for inflector to be extracted into a separate gem and depended on by Rails (or more specifically, Active Support)? This way it can be versioned like any other gem by those who need an older version."},{"ts":1370030589000,"body":"Anyone is free to do that with the Inflector if they wish. People have talked about it, nobody has done it.\r\n\r\nAnyway; we'd have to remove 'the reddit' as well if we did this, I think. ;)\r\n\r\n/cc @dhh "},{"ts":1370194213000,"body":"I remember @pixeltrix commented something about removing `kine`, so just ccing him."},{"ts":1371541635000,"body":"Just don't touch Inflector, people built million of applications relaying on this. If you want to fix this, just define own override. This is 3 or 4th attempt to fix inflector."},{"ts":1371541939000,"body":"People could write a gem which is the inflector with rules in flux, but the one in Rails is better not to touch it."},{"ts":1375274035000,"body":"just out of curiosity, why was this finally changed in https://github.com/rails/rails/commit/c300dca9963bda78b8f358dbcb59cabcdc5e1dc9 ?"},{"ts":1375276430000,"body":"We just shipped 4.0 and it'll be a while before 4.1 so now's the time to do it. I also went back to the original Trac report to see why it was added and it turns out it was to test that irregular inflections cope where words start with different letters."}]},{"timestamps":[]},{"timestamps":[{"ts":1362071612000,"body":"Just to clarify this regression is introduced in Rails 4 changes -- the functionality works as expected in Rails 3."},{"ts":1362748724000,"body":"Title updated to make it a little clearer what the core issue is."},{"ts":1362867636000,"body":"+1 for this"},{"ts":1363337621000,"body":"+1, waiting for this changes :+1: "},{"ts":1363476291000,"body":"+1"},{"ts":1363486843000,"body":"+1"},{"ts":1363502211000,"body":"Seems good. Could you change the commit message to explain the issue and the solution in the commit message like you did in the pull request description?"},{"ts":1363659812000,"body":"@rafaelfranca Updated the commit message -- let me know if you'd like it worded differently"},{"ts":1364149576000,"body":"+1"},{"ts":1364172295000,"body":"Thanks @jeremy!"},{"ts":1366788253000,"body":"Thanks, this also fixes persistence of state_machine's initial value for a state: pluginaweek/state_machine#248"}]},{"timestamps":[{"ts":1371021031000,"body":"Thank you for the PR, I have added some comments!  :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"},{"ts":1371021216000,"body":"Thanks for the feedback, and the hearts! I'll make the changes requested."},{"ts":1371055275000,"body":"@josevalim I've made the changes and added test cases you asked for. Let me know if there's anything else I can do here."},{"ts":1371158356000,"body":":+1: looks good to me. @josevalim are the tests good enough for you? You need to rebase this PR"},{"ts":1371273605000,"body":"Good catch @egilburg , made the quick fix. @josevalim ?"},{"ts":1371638061000,"body":"there is another PR implementing the same: #10992"},{"ts":1372202562000,"body":"Closed by #10992 in 840c552047a660d0a66883fb9c0cb144d5e728fb, thanks."}]},{"timestamps":[{"ts":1364495433000,"body":"Feel free to add [skip ci] in the commit message next time so it won't trigger the CI. :D"},{"ts":1365249893000,"body":"@sikachu ok :)"},{"ts":1365253314000,"body":"@sikachu @prathamesh-sonpatki I think it's `[ci skip]` :smile:"}]},{"timestamps":[{"ts":1376858880000,"body":"I think should fix some tests that are failing right now on Travis but I think this shouldn't have a changelog entry since it wasn't broken in last released version."},{"ts":1376862481000,"body":"Merged manually in adf6e30 "}]},{"timestamps":[{"ts":1375623940000,"body":"A test case would be great"},{"ts":1375629171000,"body":"Could you add a CHANGELOG entry?"},{"ts":1375629385000,"body":"> A test case would be great\r\n\r\n@rafaelfranca Agreed, but I didn't see any tests for `assert_dom_equal` in ActionPack as it stands now. Should I just modify an existing test case in ActionView to utilize this argument or would you like to see real unit tests for `assert_dom_equal` created in ActionPack?"},{"ts":1375629637000,"body":"> Could you add a CHANGELOG entry?\r\n\r\n@rafaelfranca No problem. Changelog entry added and squashed."},{"ts":1375629918000,"body":"I just saw @kaspth already did the same changes on #11218.\r\n\r\nI'll merge and work to add these tests."}]},{"timestamps":[]},{"timestamps":[{"ts":1375558186000,"body":"This is a bit strange, there are any related issue in JRuby bug tracker?"},{"ts":1375564322000,"body":"This looks like an issue with JRuby and not with Rails. Can't it be fixed in JRuby?"},{"ts":1375571467000,"body":":+1: for a JRuby bug report."},{"ts":1375578787000,"body":"My guess is that this has something to do with jruby/jruby#405, though I haven't looked too deeply into it."},{"ts":1375626004000,"body":"**[Update]**\r\nI did more research & this issue is weird.  So bear with me, but here is what happening:-\r\n\r\nminitest's [`setup` & `teardown` hooks](https://github.com/rails/rails/blob/master/actionview/test/template/digestor_test.rb#L24-L36)are not being executed On JRuby & get executed on MRI. Exact same code but different behaviour:\r\n\r\n```ruby\r\ndef setup\r\n    @cwd = Dir.pwd\r\n    @tmp_dir = Dir.mktmpdir\r\n\r\n    FileUtils.cp_r FixtureFinder::FIXTURES_DIR, @tmp_dir\r\n    Dir.chdir @tmp_dir\r\n  end\r\n```\r\nSince these methods are not being called, hence the code in this methods is simply not being executed hence there is no tempdir being created, causing the tests to fail.\r\n\r\n so to test this hypothesis, I Added `raise` in setup method to see what happens.\r\n\r\n```ruby\r\ndef setup\r\n    @cwd = Dir.pwd\r\n    @tmp_dir = Dir.mktmpdir\r\n   raise \"Hey look, I only cause an RuntimeError Exception on MRI\"   \r\n    FileUtils.cp_r FixtureFinder::FIXTURES_DIR, @tmp_dir\r\n    Dir.chdir @tmp_dir\r\n  end\r\n```\r\nThis is were wierd part happens, this  gets raise RuntimeError Exception on MRI. nothing happens on JRuby :warning: \r\nso, wondering can anyone people can replicate this behaviour? \r\n\r\nPS:  I am guessing this behaviour has something to do with the way minitest runs these hooks"},{"ts":1375638893000,"body":"@gaurish, how are you running the tests? I've been using the command:\r\n\r\n```\r\nruby -w -Ilib:test test/template/digestor_test.rb -n test_top_level_change_reflected\r\n```\r\n\r\nWhen I run the tests on jruby-1.7.4 and I put prints in the setup and teardown methods above the call to ```Dir.mktmpdir``` I see the prints. But if I put prints below the call to ```Dir.mktmpdir``` I don't see the prints. So something weird is going on with mktmpdir."},{"ts":1375639875000,"body":"@atambo \r\nyes, exactly. anything after `Dir.mktmpdir` doesn't gets executed. I have corrected `raise` statement. This will raise `RuntimeError` Exception only on MRI & not of JRuby. Tested this against the jruby-head as well, same behaviour. \r\n\r\nfurther, I run my tests using same command, just adding `--client` flag for faster execution:\r\n\r\n```sh\r\n$ jruby -w --client -Ilib:test test/template/digestor_test.rb -n test_top_level_change_reflected\r\n```\r\n\r\n**[Update]**\r\n if you call the class isolated & run it, the `setup` method works as expected. so this behaviour seems to be caused down the stack. \r\nhttps://gist.github.com/gaurish/6151315\r\n"},{"ts":1375642790000,"body":"So this line is what's causing the problem:\r\n\r\nhttps://github.com/rails/rails/blob/master/actionview/test/abstract_unit.rb#L7\r\n\r\nIf we stop explicitly telling ruby where to put the tmpdir it will just create it in your systems tmp directory and everything runs fine. I'm not really sure why that is though or why we are explicitly telling ruby where to put the tmpdir.\r\n\r\nThere's also another instance of overriding the tmpdir here:\r\n\r\nhttps://github.com/rails/rails/blob/master/actionpack/test/abstract_unit.rb#L7\r\n\r\nWhat do you guys think about just stopping overriding the tmpdir?"},{"ts":1375643792000,"body":"Not sure about the reason but the change was done a long time ago: https://github.com/rails/rails/commit/7a26c21d8e853ed648e4668843a3958de4ac5791"},{"ts":1375644055000,"body":"@guilleiguaran, in that commit it looks like the tmp dir is already created using a .gitignore to hold it in git. Then actionpack abstract_unit file was copied over to actionview without creating the tmp directory in this commit https://github.com/rails/rails/commit/eb23754ebbfbf2d465cc0f900720704fb3703633. So if we want them to be the same we can just go with @gaurish patch above."},{"ts":1375644199000,"body":"I have updated the PR to remove `ENV['TMPDIR']` to see if this change is acceptable & are we still all green. If not, then I would revert back to old change of adding an empty tmp directoy. \r\n\r\n@atambo \r\nGreat Catch :+1: \r\n\r\n"},{"ts":1375645537000,"body":"@atambo right, we are keeping tmp folder in actionpack and makes sense do the same for actionview"},{"ts":1375646208000,"body":"PR Updated to empty `tmp` directory :smile:  "},{"ts":1375747337000,"body":"@guilleiguaran, can this be merged?"},{"ts":1375747556000,"body":"@atambo @gaurish merged!!! \r\n\r\nThanks for your contributions"}]},{"timestamps":[]},{"timestamps":[{"ts":1363452490000,"body":"/cc @Pliny"},{"ts":1363463872000,"body":"Stalkers? :/"},{"ts":1363474349000,"body":"Less creepy now."},{"ts":1363492594000,"body":"Squashed"},{"ts":1363500154000,"body":"@rafaelfranca That's what it amounts to. I was using Friendship to try to replicate #9263, but I stopped because I couldn't use it to actually join 2 People. The test isn't necessary, but the restructuring of Friendship makes it do what the naming indicates it should do."},{"ts":1363500339000,"body":"I'm :+1: fot the model changes, but I think we don't need the test since it is not testing behaviour, but the model structure."},{"ts":1363500801000,"body":"@rafaelfranca Removed the test and squashed."},{"ts":1363500871000,"body":"Thank you  :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[{"ts":1359114165000,"body":"Makes sense, thanks."}]},{"timestamps":[{"ts":1360281256000,"body":":+1: looks good to me! Can you write a test that demonstrates the old version failing?"},{"ts":1360282773000,"body":"should it be here   actionpack/test/activerecord/controller_runtime_test.rb ?"},{"ts":1360500311000,"body":"Maybe go ahead and put it there. I'm sure a maintainer will chime in if that's not the best place and help fix it."},{"ts":1360579080000,"body":"added test, without patch it outputs   (ActiveRecord: 0.0ms instead of 100 ms)\r\n```\r\n1) Failure:\r\ntest_log_with_active_record_when_post(ControllerRuntimeLogSubscriberTest) [test/activerecord/controller_runtime_test.rb:79]:\r\nExpected /ActiveRecord: ([1-9][\\d.]+)ms\\)/ to match \"Completed 302 Found in 12ms (ActiveRecord: 0.0ms)\".\r\n```"},{"ts":1360585009000,"body":"should I add something to changelog ?"},{"ts":1360920971000,"body":"@Fivell yes please create a CHANGELOG entry describing the change."},{"ts":1360922679000,"body":"done"},{"ts":1361961135000,"body":"Also please squash all the commits into a single one."},{"ts":1361965334000,"body":"@senny , I hope I've  squashed it right way...Can you look again?"},{"ts":1361967440000,"body":"@Fivell I made some more comments, can you please review them? Also, github is showing 7 commits, and it says it cannot be merged, so you'll have to rebase again from current master and squash into 1. Let us know if you need anything! Thanks."},{"ts":1361967762000,"body":"@carlosantoniodasilva , thanks I'll try rebase again after reformatting source code"},{"ts":1361975888000,"body":"@carlosantoniodasilva , can you look now?"},{"ts":1361976567000,"body":"Merged, thanks!"}]},{"timestamps":[{"ts":1372708880000,"body":"/cc @fxn @rafaelfranca "},{"ts":1372709744000,"body":"Needs rebase. But is better to you push directly"},{"ts":1372709864000,"body":"@rafaelfranca thanks, will do"}]},{"timestamps":[]},{"timestamps":[{"ts":1363632044000,"body":"Thank you! :heart:\r\n\r\nIn the future, feel free to push the comment changes to lifo/docrails, which is a fast-track for documentation changes. Anything that touches code, even typo fixes, should go through a pull request, though, so :+1: "},{"ts":1363632292000,"body":"Thanks @steveklabnik I do push documentation changes to lifo/docrails, this had changes to code, so pushed here."},{"ts":1363632663000,"body":"Absolutely, this was 100% right, I just wanted to mention in case you didn't know. :D"}]},{"timestamps":[{"ts":1363535428000,"body":"@carlosantoniodasilva @NZKoz let me know what you think."},{"ts":1363537000000,"body":"It seems good to me"},{"ts":1363537098000,"body":"please hold the merge, there is something weird with mocha. It does not let the test fail but only prints the error message. I'm investigating."},{"ts":1363537597000,"body":"Seems good :+1:"},{"ts":1363539221000,"body":"@rafaelfranca I fixed the things @carlosantoniodasilva pointed out. Feel free to merge. The mocha thing is related to a big `rescue Exception` around the code so I guess it would be a bigger unrelated change."}]},{"timestamps":[{"ts":1367885059000,"body":"Seems good. Could you add a CHANGELOG entry?"},{"ts":1367889142000,"body":"Sure thing.  Just added.  \r\n\r\nThis bug also exists in 3-2-stable, would you accept a PR there as well?"},{"ts":1367889327000,"body":"I'll backport it. Thank you"},{"ts":1367889601000,"body":"Great, thanks!"}]},{"timestamps":[{"ts":1372186869000,"body":"/cc @rafaelfranca, @senny "},{"ts":1372186952000,"body":"Thank you but this will add backward incompatible changes."}]},{"timestamps":[{"ts":1364332156000,"body":"@rafaelfranca Thanks!"}]},{"timestamps":[]},{"timestamps":[{"ts":1374460986000,"body":"/cc @senny "},{"ts":1374664197000,"body":"@senny Can you take a look"},{"ts":1374664398000,"body":"@prathamesh-sonpatki sorry I'm traveling at the moment and I can't take a look in the upcoming days. I'll ping you when I'm back.\r\n\r\n/cc @carlosantoniodasilva "},{"ts":1375949325000,"body":"@senny any thoughts?"},{"ts":1376045468000,"body":"@pftg Please review again :)"},{"ts":1376412510000,"body":":+1:, now I understand what's happen there."},{"ts":1376414793000,"body":"Maybe we could add a changelog entry? :-)"},{"ts":1376450816000,"body":"@robin850 Added :)"},{"ts":1376452744000,"body":"Also rebased to latest master."},{"ts":1376471690000,"body":"looks good :yellow_heart: "},{"ts":1376472747000,"body":"@senny Thanks. Should it be backported to 3-2-stable?"},{"ts":1376485796000,"body":"no, this is more a feature than a bug fix. Let's keep it just on `master`."},{"ts":1376486684000,"body":"Agreed! :+1: "}]},{"timestamps":[{"ts":1365668105000,"body":"@rafaelfranca as you merged the original PR, can you take a look and see if we can safely apply this one?"},{"ts":1365679695000,"body":"Merge looks good to me."},{"ts":1365683864000,"body":"Looks fine :+1:"}]},{"timestamps":[{"ts":1361792056000,"body":"@rafaelfranca @jonleighton could you take a look?"},{"ts":1361802550000,"body":"@rafaelfranca removed the silencing."},{"ts":1361812014000,"body":"@rafaelfranca added an assertion. It's not the most useful but I guess it's good enough to lock the behavior."},{"ts":1361813539000,"body":"Seems good. I'll wait the release to merge"},{"ts":1361850401000,"body":"@rafaelfranca already released."},{"ts":1361874333000,"body":"Is this patch applied to rails 4.0.0.beta1? Because I am getting errors on queries with column aliases, like this:\r\n\r\n    Post.select('DISTINCT EXTRACT(year from face_date) AS year').order(:year)\r\n\r\n    ActiveRecord::StatementInvalid: PG::Error: ERROR:  column posts.year does not exist"},{"ts":1361874411000,"body":"@khustochka no it's not yet applied."},{"ts":1361874508000,"body":"@khustochka but looking at your example this will certainly result in problems when this patch is applied. I think you should not use a Symbol in this case."},{"ts":1361874904000,"body":"@senny, thank you. I am just wondering as for me order(:symbol) is already expanded to \"table\".symbol, or rather \"table\".\"symbol\".\r\n\r\nMy example works on 3.2.12 because it never adds table name to this symbol. Looks like a new feature in rails 4."}]},{"timestamps":[{"ts":1369027007000,"body":":heart:\r\n"},{"ts":1369027457000,"body":":smile: "}]},{"timestamps":[]},{"timestamps":[{"ts":1372587306000,"body":"Thanks @senny!"},{"ts":1372587468000,"body":"thanks for your contribution :yellow_heart: "},{"ts":1372680919000,"body":"Backported in c119faa86458fb614ae8f453faf4ba4afde3e2ea, thanks!"},{"ts":1372681965000,"body":"@fxn : neat, thanks!"}]},{"timestamps":[{"ts":1365117144000,"body":"@rafaelfranca Fixed the failing tests in this one — sorry about that! Thanks."},{"ts":1366591061000,"body":"bump"}]},{"timestamps":[{"ts":1377262179000,"body":"It was actually changed in Rails 4 6acebb38 but I haven't used it before."},{"ts":1377264047000,"body":"The commit you referenced was later reverted 5e7d6bb but the path change was kept with the `.rb` extension. Looks good to me."},{"ts":1377264126000,"body":"@semaperepelitsa for further documentation patches you should include `[ci skip]` in your commit message. Thank you for your contribution :yellow_heart: "}]},{"timestamps":[{"ts":1360096336000,"body":"`.ruby-version` is like `Gemfile.lock`. It's your Ruby version dependency. It should not be gitignored. Reverting."},{"ts":1360096422000,"body":"Nevermind, this is for Rails' root dir! :+1: "},{"ts":1360096425000,"body":"Wait, Gemfile.lock is gitignored."},{"ts":1360096444000,"body":"ahh, fine then"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1361121839000,"body":"Sure, :+1: "},{"ts":1361123337000,"body":"O, ok thx! I'll try to send more :) Currently reading the code so yea..."}]},{"timestamps":[{"ts":1368910719000,"body":"Wrong branch. "},{"ts":1368910795000,"body":"Ugh, hit some key that submitted the pull request before I was ready.  Sorry."}]},{"timestamps":[{"ts":1375823234000,"body":"I don't really see the point of updating this just for a p version."}]},{"timestamps":[{"ts":1362521014000,"body":"The bump is a little bit bigger in 3-0, so it's a little bit more likely to have backward compat issues. Just as a note."},{"ts":1362567992000,"body":"@jeremy what do you think?"},{"ts":1367258637000,"body":"This seems important? Users of 3-0-stable won't be able to upgrade given Rails' dependency specification."},{"ts":1367260443000,"body":"Not sure about this, is a big jump and we aren't accepting security patches for 3.0.x anymore :grin: "},{"ts":1367267300000,"body":"Yup, that's why I haven't merged."},{"ts":1367267449000,"body":"OK; we should just close this then?"},{"ts":1367267494000,"body":"ok!!!"}]},{"timestamps":[{"ts":1359410811000,"body":"Gemspecs for 2.3 were added by 06b33a8. Unfortunately 1169552 didn't bump the version on them."},{"ts":1359411128000,"body":"Thanks @pietro."}]},{"timestamps":[]},{"timestamps":[{"ts":1374050518000,"body":"cc/ @fxn "}]},{"timestamps":[{"ts":1374565989000,"body":"/cc @spastorino @prathamesh-sonpatki @senny @rafaelfranca \r\n\r\n"}]},{"timestamps":[{"ts":1357730124000,"body":"Also remember to squash your commits"}]},{"timestamps":[{"ts":1367891412000,"body":"What is the difference between this and not using any option?\r\n\r\n```ruby\r\nvalidates_presence_of :title\r\n```"},{"ts":1367914968000,"body":"If you use validates_presence_of :title, :on => :save then the validations are bypassed for it....\r\nSee this issue https://github.com/rails/rails/issues/10248 which was created by me some 20 days back\r\n"},{"ts":1375535572000,"body":"@aditya-kapoor i think u should squash ur commits into 1 commit :smile: "},{"ts":1375537713000,"body":"I posted a new comment related to this PR, https://github.com/rails/rails/issues/10248#issuecomment-22055131"},{"ts":1375572785000,"body":"This will perform the validation twice. I think we should fix the documentation as provided on #11737"}]},{"timestamps":[{"ts":1372844320000,"body":"@senny  updated"},{"ts":1372845750000,"body":"@senny updated."},{"ts":1372855813000,"body":":+1:"},{"ts":1372857864000,"body":"@carlosantoniodasilva updated :smile: "},{"ts":1372858311000,"body":"@vipulnsward thanks.\r\n\r\n@senny all yours :)"},{"ts":1372858667000,"body":"@thanks guys! :yellow_heart: "}]},{"timestamps":[{"ts":1376650957000,"body":"Please add `[ci skip]` to commit message"},{"ts":1376651409000,"body":"Ok, I could do that in future, but isn't it too late to do that now or do you want me to throw out this pull request and do another?"},{"ts":1376651999000,"body":"you can do it now, by amend commit message and `git push -f` without creating new PR"},{"ts":1376652986000,"body":"There you go."},{"ts":1376654194000,"body":":cool:"},{"ts":1376654223000,"body":":+1:"},{"ts":1376655144000,"body":"Thanks."},{"ts":1376679577000,"body":"Yay! First Rails patch lol! ;)"}]},{"timestamps":[]},{"timestamps":[{"ts":1366517417000,"body":"> These three examples have consistently been asked about in my classes when students first encounter the inflector, so I thought it would be nice to contribute these exceptions.\r\n\r\nWouldn't this be a great opportunity to let students know that Rails won't cover all inflections and that they will need to write their own in some cases? :)"},{"ts":1366517861000,"body":"I certainly do, and they quickly discover the comments in the initializer, etc. :-)  But I thought it might be worthwhile to add just a couple that have come up the most."},{"ts":1366532997000,"body":"Yes, the inflector is frozen, sorry. If you need these changes, please add them to your app."},{"ts":1367053739000,"body":"@steveklabnik : Why is it frozen please?"},{"ts":1367062401000,"body":"@robin850 because whenever it was changed, it ended up breaking someone's app somewhere and obviously the more entries in the list there are then the more it slows down."},{"ts":1367062881000,"body":"@pixeltrix : Thanks for the nice explanation! :) "}]},{"timestamps":[{"ts":1359544722000,"body":"It seems a fine change, although [I'm not sure we're raising at `DatabaseTasks`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/tasks/database_tasks.rb#L122-L125) when adapter cannot be found there, perhaps I'm missing something there? Otherwise I'd say we should raise there. Thanks."},{"ts":1359544796000,"body":"Ok, I just saw the next pull request adding that :smile:."},{"ts":1359545295000,"body":"I'm merging this and we can get the other merged after the discussion there. Thanks!"}]},{"timestamps":[{"ts":1362851035000,"body":"Thanks! In the future, you can use docrails for these kinds of changes, don't forget!"},{"ts":1362851267000,"body":"Ah, wasn't aware of docrails. Thanks for the heads up, I'll use that in the future."},{"ts":1362851355000,"body":"Any time! It's not required, you just don't have to wait for me to merge. :)"}]},{"timestamps":[{"ts":1361479213000,"body":"Can you add a CHANGELOG entry - thanks"},{"ts":1361480470000,"body":"Added CHANGELOG entry and corrected the typo - sorry about that!"},{"ts":1361480645000,"body":"One more thing - can you squash the commits into one commit and I'll merge thanks."},{"ts":1361485085000,"body":"Ok, squashed those commits! Thanks!"},{"ts":1361485383000,"body":"Thanks @gaganawhad !"}]},{"timestamps":[{"ts":1367350736000,"body":":+1:"}]},{"timestamps":[]},{"timestamps":[{"ts":1375445072000,"body":"Thanks."}]},{"timestamps":[{"ts":1366971732000,"body":"Where's it failing? The Travis CI isn't showing anything."},{"ts":1366972029000,"body":"Without the patch, when I run the test suite (with `bundle exec rake test`) I've got:\r\n\r\n~~~\r\n1) Failure:\r\nActionController::LiveStreamTest#test_exception_callback [/home/robin/code/contribute/rails/actionpack/test/controller/live_stream_test.rb:185]:\r\nExpected /An\\ exception\\ occurred\\.\\.\\./ to match \"Processing by ActionController::LiveStreamTest::TestController#exception_with_callback as \\nCompleted 500 Internal Server Error in 0ms\\n\".\r\n~~~"},{"ts":1366972607000,"body":"Yep, that happens systematically in the dev box. Had it pending for PDI."},{"ts":1369561518000,"body":"Should I close this or it will be merge later please? :smile: "},{"ts":1370021739000,"body":"/cc @fxn "},{"ts":1372208822000,"body":"Closing here guys, please feel free to reopen if you want to track anything from here. Thanks."}]},{"timestamps":[{"ts":1368403815000,"body":"@julianvargasalvarez this is causing also a failure in Railties test suite according to TravisCI (in asset tests): https://travis-ci.org/rails/rails/jobs/7107821, can you check this?"},{"ts":1368403929000,"body":"Sure, I am already working on it"}]},{"timestamps":[{"ts":1367354481000,"body":"Thanks!"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1372935190000,"body":"As @pftg mentioned the original exception message was about semantics not really about the value of `record`. I'm closing this one."}]},{"timestamps":[{"ts":1364484995000,"body":":heart:"}]},{"timestamps":[]},{"timestamps":[{"ts":1363470608000,"body":"Mea culpa"}]},{"timestamps":[{"ts":1371158024000,"body":"Is this not tested anywhere else? If you take out the feature and run the tests do they still pass?"},{"ts":1371292972000,"body":"related to #10730. There is a test-case for `reset_counters`: https://github.com/rails/rails/blob/master/activerecord/test/cases/counter_cache_test.rb#L44-L52\r\n\r\nI agree with @carlosantoniodasilva, this method always returns `true` and we should not care about the return value."},{"ts":1371333984000,"body":"> I agree with @carlosantoniodasilva, this method always returns true and we should not care about the return value.\r\n\r\nok, i guess i'll close this then :) thx !"}]},{"timestamps":[{"ts":1369140064000,"body":"@jonleighton this is the patch I asked you about. What do you think?\r\n\r\n/cc @rafaelfranca @carlosantoniodasilva "},{"ts":1369837057000,"body":"@neerajdotname maybe you could give me your thoughts on this one?"},{"ts":1369856116000,"body":"@senny PR looks good to me. +1."},{"ts":1370599273000,"body":"@senny sorry for my slowness. I am happy to merge this, but it needs a rebase. Also could you expand the changelog message to note that the previous behaviour was untested and surprising, which is why we're making this change. Also would be good to note in changelog that people can do `count(:all)`, as explained in your message above."},{"ts":1370775855000,"body":"@jonleighton I rebased the PR and extended the CHANGELOG to include the pieces that you mentioned. Can you take another look?"}]},{"timestamps":[{"ts":1375561937000,"body":"I'm merging this one. However I don't think we need to find and change every occurrence of that pattern right away. It's fine when it happens as part of a bigger patch but I feel that just applying `flat_map` is a [cosmetic change](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#write-your-code)."}]},{"timestamps":[{"ts":1364572354000,"body":"You were reading the edge getting started guide, correct? `attr_accessible` isn't in Rails any more, use the edge guide with the master branch (or 4.0.0.beta1) or the non-edge guide with 3.2."},{"ts":1364593423000,"body":"Hi Steve,\r\n\r\nI was reading the guide at this link: http://guides.rubyonrails.org/getting_started.html. My installation has the latest stable versions of Ruby (2.0.0p0) and Rails (3.2.13). \r\n\r\nWhen I tried the guide with the current comment.rb (sans the attr_accessible line), I got an error \"Can't mass-assign protected attributes: commenter, body\" when attempting to add a comment. \r\n\r\nCould you clarify whether there is another place I should be making this edit?\r\n\r\nThanks!\r\n"},{"ts":1364599730000,"body":"Ah ha! You have in fact found a bug: The original guide shows it in `Post`s, but not `Comment`s. The Rails 4 version shouldn't show it at all, because `attr_accessible` is gone from Rails 4. Thanks for clarifying, I mis-understood you.\r\n\r\nI've committed bac6928 for you; it's the same patch, but against 3-2-stable, rather than master.\r\n\r\nThank you! :heart:"},{"ts":1364618694000,"body":"Awesome! Thanks Steve!!"}]},{"timestamps":[{"ts":1370598397000,"body":"Happy to merge once the above is dealt with."},{"ts":1371159066000,"body":"@jonleighton your feedback has been taken into account and the unnecessary line has been removed. There is already another test confirming that inverse is being set on the records. "},{"ts":1371594947000,"body":"Could you rebase? Thanks"},{"ts":1371595379000,"body":"@jonleighton rebased. "},{"ts":1371637241000,"body":"Broke the build for mysql and postgresql.\r\n\r\nhttps://travis-ci.org/rails/rails/jobs/8224880#L119\r\n\r\n\r\nthanks"},{"ts":1371643400000,"body":"When I run full stack test `bundle exec rake test_mysql` then the test is failing  but when I run that test individually then it is passing. \r\n\r\nThe failing test is \r\n\r\n```\r\n    invalid_id = 2394823094892348920348523452345\r\n    assert_raise(ActiveRecord::RecordNotFound) { man.interests.find(invalid_id) }\r\n```\r\n\r\nI think it should be ok to reduce the invalid_id number from such a larger number to a bit smaller number since the intent is to test `ActiveRecord::RecordNotFound` ."},{"ts":1371648169000,"body":"@arunagw thanks for the heads up\r\n\r\n@neerajdotname I've reverted for now until we can figure out the problems."}]},{"timestamps":[{"ts":1373121218000,"body":"cc @tenderlove "},{"ts":1373142308000,"body":"This seems fine to me, but I prefer to leave this to @tenderlove "},{"ts":1373985204000,"body":":+1: \r\n\r\nIt seems that the `select_all` method of all adapters (mysql / mysql2 / postgresql / sqlite3) always return an ActiveRecord::Result instance. "}]},{"timestamps":[{"ts":1366643739000,"body":"@pixeltrix updated"},{"ts":1366644335000,"body":"@vipulnsward sorry to be a pain - can you fix the typo in the commit message (i.e. constants not contants)."},{"ts":1366649751000,"body":"@pixeltrix updated."},{"ts":1366650167000,"body":"@fxn updated the variable"},{"ts":1366656764000,"body":"@pixeltrix  thanks!"}]},{"timestamps":[{"ts":1371248827000,"body":"Thanks."},{"ts":1371248998000,"body":"No, thank you!"}]},{"timestamps":[{"ts":1372352854000,"body":"@carlosantoniodasilva Thanks for the comments, I've made some changes to the PR."},{"ts":1372359542000,"body":"@carlosantoniodasilva Thanks for the rdoc catch =), PR has been updated."}]},{"timestamps":[{"ts":1367201146000,"body":"Looks good to me :+1:"},{"ts":1367205668000,"body":" :shipit:"}]},{"timestamps":[{"ts":1370675488000,"body":"You should squash the commits into one. \r\n\r\n"},{"ts":1370683533000,"body":"oups, yes of course. done."},{"ts":1370771166000,"body":"@carlosantoniodasilva can you take a look?"},{"ts":1371189558000,"body":"I think we need to also remove the sentence:\r\n\r\n> This is the default cache store implementation.\r\n\r\nFrom the `MemoryStore` paragraph."},{"ts":1371198383000,"body":"Or perhaps to indicate this is the case only if using ActiveSupport::Cache directly (I don't even know if this is possible and what are the use cases)\r\n\r\n> This is the default cache store implementation when using ActiveSupport::Cache directly\r\n  \r\nhttps://github.com/ifeelgoods/rails/blob/3-2-stable/activesupport/lib/active_support/cache.rb#L32"},{"ts":1371632248000,"body":"@mtparet I see, what do you think about:\r\n\r\n**MemoryStore:**\r\n> This is the default cache store implementation if you call `ActiveSupport::Cache.lookup_store` without arguments."},{"ts":1371632502000,"body":"Yes, seems perfect for me."},{"ts":1371632509000,"body":"On the other hand looking at the edge-guide shows that there is nothing mentioned specifically for the `MemoryStore`:\r\n\r\nhttp://edgeguides.rubyonrails.org/caching_with_rails.html#activesupport-cache-memorystore"},{"ts":1371632581000,"body":"@mtparet let's just drop the sentence from the `MemoryStore`. If you are using `#lookup_store` then you are already digging in the API and the API documentation shows what to expect. I think it's fine without explaining it in the guide."},{"ts":1371632931000,"body":"I agree, it's less confusing of removing it."},{"ts":1371633599000,"body":"@mtparet thanks :yellow_heart: "}]},{"timestamps":[{"ts":1357333889000,"body":"cc @guilleiguaran "},{"ts":1357334219000,"body":"@noah256 can you send this PR also to sprockets-rails repository?"},{"ts":1357334628000,"body":"@noah256 let me explain a bit more: usually we fix bugs in edge versions first and later with backport the fixes to stable versions, then this should be fixed first in sprockets-rails (if is affected) and later we should backport it to 3-2-stable"},{"ts":1357337331000,"body":"This doesn't seem to apply to rails/master and sprockets-rails, where the asset is found without an attempt to compile. As far as I can tell, only Rails 3 is impacted."},{"ts":1357451784000,"body":"@noah256 seems fine for me, can you add a CHANGELOG entry?"},{"ts":1357683349000,"body":"@guilleiguaran CHANGELOG updated."},{"ts":1357846744000,"body":"@noah256 can you rebase this? GH reports \"This pull request cannot be automatically merged.\""},{"ts":1357850646000,"body":"Thanks!!!"}]},{"timestamps":[{"ts":1362867333000,"body":"Thank you."}]},{"timestamps":[{"ts":1366465298000,"body":"Whoops - apologies, not sure how that cruft got in there!"},{"ts":1366466614000,"body":"No problem :). Can you please squash your commits into one? Thanks."},{"ts":1366467959000,"body":"Gotta love interactive rebase and git push --force. Now you wouldn't even know the cruft was there!"},{"ts":1366469170000,"body":":smile: thanks!"},{"ts":1366471073000,"body":"Any time, good to meet you @carlosantoniodasilva!"},{"ts":1366471667000,"body":"Good meeting you too :)"}]},{"timestamps":[{"ts":1371650791000,"body":"4-0-0 doesn't accept pull requests."},{"ts":1371650814000,"body":"We will backport when the another pull request is done. Please don't open more than one PR."},{"ts":1371650913000,"body":"Ah okay no problems."}]},{"timestamps":[]},{"timestamps":[{"ts":1363067914000,"body":"Here is the commit that this reverts along with some internal monologue from when I was looking into the problem: https://github.com/rails/rails/commit/b4051edf841c8a6780df9af7afa9892bfd811c79"},{"ts":1363068086000,"body":"Regression test would be good too. (presuming there wasn't a test failure accompanying b4051ed)"},{"ts":1363068279000,"body":"There wasn't a test failure but that's because the test was modified and === was stubbed out on the regexp to return something it shouldn't.  Will try to come up with a suitable regression test."},{"ts":1363070101000,"body":"I amended my commit to take a stab at a regression test.  The test cases are so mocked up though that it's somewhat contrived.  It should at least make it clear to the next person that tries to replace the #select call with a #grep call that it won't work in the real world."},{"ts":1363089360000,"body":"@bdmac please issue a revert commit of the original one, then add yours on top of it with a regression test, it's better if they are different commits.\r\n\r\nI still wonder whether we should fix AS::TZ instead =("},{"ts":1363101145000,"body":"The problem is that the current implementation of =~ checks two values against the regex. It would appear the fix to get pattern === TZ (for grep to work) would require the addition of a #to_str method on TZ but not sure how we can handle the two values from =~ to maintain parity between the two versions. If we just add to_str that returns @name then we would still be breaking anyone using priority_zones regexes that are matching on the other =~ value. Maybe that's ok?\r\n—\r\nSent from Mailbox for iPhone\r\n\r\nOn Tue, Mar 12, 2013 at 4:56 AM, Carlos Antonio da Silva\r\n<notifications@github.com> wrote:\r\n\r\n> @bdmac please issue a revert commit of the original one, then add yours on top of it with a regression test, it's better if they are different commits.\r\n> I still wonder whether we should fix AS::TZ instead =(\r\n> ---\r\n> Reply to this email directly or view it on GitHub:\r\n> https://github.com/rails/rails/pull/9680#issuecomment-14771083"},{"ts":1363102088000,"body":"I added a #to_str on AS::TZ and ran the tests and they still passed including the modified version from https://github.com/rails/rails/commit/b4051ed.  I'm still not entirely comfortable whether that's a good indication that we're not \"really\" breaking any backwards compatibility since there were no tests to catch this problem in the first place.  The amount of stubbing happening makes it hard to really see in testing."},{"ts":1363624082000,"body":"Any further word on this PR?"},{"ts":1363624352000,"body":"@bdmac It's on my hands now to take a look, thanks."},{"ts":1364335865000,"body":"@carlosantoniodasilva anything I can do to help here? My app makes use of this feature so I'd love to at least see this fix merged as a stop-gap so I can bundle update rails to get my TZ selects working again. :)"},{"ts":1364387261000,"body":"@bdmac I'm having some rush days traveling/working here, sorry. Can you separate the changes in two different commits? One is reverting the original so that it's more trackable, other adding your test on top of the revert commit.\r\n\r\nAlso, not sure if we can use something like real TZ instead of stubbing, or at least make the stub raise an error instead of returning `[]` because it should never receive `===`, wdyt?"},{"ts":1364387272000,"body":"Btw, thanks for keeping this up! :smile:"},{"ts":1364418827000,"body":"@carlosantoniodasilva split the commit in two and swapped in an exception instead of returning `[]` as requested."},{"ts":1364770013000,"body":"@bcmac Thanks!"}]},{"timestamps":[{"ts":1366029748000,"body":"By `does not work` you mean what? It raises something? It just does nothing?\r\n\r\n/cc @tenderlove "},{"ts":1366031481000,"body":"It does nothing. Is it correct? And how can I prepare my test db now?"},{"ts":1366070544000,"body":"@Slike9 `db:test:prepare` doesn't usually have any _output_, even if it is syncing the schema between your development and test databases.\r\n\r\n1. What database are you using in development (and is it the same as the test database)?\r\n2. Does the default `rake` command normally run your tests, and if so do they seem to be working correctly afterward?  The default `rake` command usually runs the test suite, and has a dependency on `db:test:prepare` so in most cases you don't even need to call `db:test:prepare`."},{"ts":1366092518000,"body":"@calebthompson `db:test:prepare` does not work, really: `rake db:test:prepare --trace` outputs almost nothing (only `db:test:prepare` executing ), my test db is not updated. \r\nNow in \r\n```ruby\r\ntask :prepare do\r\n  unless ActiveRecord::Base.configurations.blank?\r\n    db_namespace['test:load'].invoke\r\n  end\r\nend\r\n```\r\nwithout `'db:abort_if_pending_migrations'` dependency (it is in rails 3) `ActiveRecord::Base.configurations.blank?` is true, so nothing is done.\r\n\r\nA1) I have different databases for development and test. \r\n\r\nA2) 'rake spec' works, but I don't want to use it every time in development instead of 'rspec'."},{"ts":1366104485000,"body":"This works `rake environment db:test:prepare`. Maybe, this dependency should be used in `db:test:prepare` task?"},{"ts":1366117594000,"body":"Sorry, my first question was unclear. I meant, are you using the same _type_ of database for both development and test i.e., `postgresql`?"},{"ts":1366118626000,"body":"@calebthompson Yes, I use postgresql for both environments."}]},{"timestamps":[]},{"timestamps":[{"ts":1361765871000,"body":"This seems good. Can you please amend the commit to include a CHANGELOG entry please?"},{"ts":1361805378000,"body":"Sure thing, CHANGELOG entry added above."},{"ts":1363631634000,"body":"Ping!  @steveklabnik Anything else you need here?"},{"ts":1363632214000,"body":"Also, I need a squash + rebase."},{"ts":1363632805000,"body":"Done and done.  Thanks!"},{"ts":1363632992000,"body":"Thank you! :heart:"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1368193634000,"body":"Is this working? Or it is ignoring the select again?"},{"ts":1368193980000,"body":"Yes it's working. Test seems green for me. Also added one more test to make sure pluck itself work when you have more columns in select. \r\n\r\n```ruby\r\n  def test_pluck_does_not_replace_select_clause\r\n    taks_relation = Topic.select(\"approved, id, id AS foo_id\").order(:foo_id)\r\n    assert_equal [1,2,3,4], taks_relation.pluck(:id)\r\n    assert_equal [false, true, true, true], taks_relation.pluck(:approved)\r\n  end\r\n```"},{"ts":1368194094000,"body":"I think it is ignoring the relation that it was builded in the first line, not?"},{"ts":1368194355000,"body":"Maybe is good to change the test case to change the order to be DESC to be sure it is not ignored"},{"ts":1368194509000,"body":"I think it's working and including all columns that we asked in select. Because we are doing ```select_all(select(column_name).arel) ``` \r\n\r\nyou mean like this right ? \r\n\r\n```ruby\r\n  def test_pluck_does_not_replace_select_clause\r\n    taks_relation = Topic.select(\"approved, id, id AS foo_id\").order('foo_id DESC')\r\n    assert_equal [4,3,2,1], taks_relation.pluck(:id)\r\n    assert_equal [true, true, true, false], taks_relation.pluck(:approved)\r\n  end\r\n```\r\n\r\nSeems to pass for me. "},{"ts":1368194654000,"body":"And inside select_all block attributes looks like\r\n\r\n\r\n```ruby\r\n{\"approved\"=>\"t\", \"foo_id\"=>4, \"id\"=>4}\r\n{\"approved\"=>\"t\", \"foo_id\"=>3, \"id\"=>3}\r\n{\"approved\"=>\"t\", \"foo_id\"=>2, \"id\"=>2}\r\n{\"approved\"=>\"f\", \"foo_id\"=>1, \"id\"=>1}\r\n{\"approved\"=>\"t\", \"foo_id\"=>4, \"id\"=>4}\r\n{\"approved\"=>\"t\", \"foo_id\"=>3, \"id\"=>3}\r\n{\"approved\"=>\"t\", \"foo_id\"=>2, \"id\"=>2}\r\n{\"approved\"=>\"f\", \"foo_id\"=>1, \"id\"=>1}\r\n```"},{"ts":1368194807000,"body":"Good. Thank you"},{"ts":1368194910000,"body":"Thanks :-) "}]},{"timestamps":[{"ts":1377564433000,"body":"Thank you  :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[{"ts":1363282208000,"body":"/cc @tenderlove"}]},{"timestamps":[{"ts":1373142260000,"body":"cc @guilleiguaran "},{"ts":1373262870000,"body":"Unable to commit another file for a separate issue, so I'm closing this. Apologize again for my lack of git understanding, but the other change is a bug fix.\r\n"},{"ts":1373265280000,"body":"New PR is https://github.com/rails/rails/pull/11358\r\nI hope this is the last time I do this!\r\n"}]},{"timestamps":[{"ts":1375538576000,"body":"thank you :yellow_heart: "},{"ts":1375539066000,"body":"thanks :smile: "}]},{"timestamps":[{"ts":1363869543000,"body":"It seems fine, thank you and [welcome to Rails contributors](http://contributors.rubyonrails.org/contributors/intrepidd/commits) :)"},{"ts":1363871797000,"body":"Thanks ! Feels great :)\r\n\r\nI'll try to hack with rails when I can."}]},{"timestamps":[{"ts":1375608835000,"body":"btw this closes #10248 as well"}]},{"timestamps":[{"ts":1359679221000,"body":"Thank you :heart: "},{"ts":1359679594000,"body":"Np :relaxed: :+1: "}]},{"timestamps":[{"ts":1374583512000,"body":"Could you add a CHANGELOG entry?"},{"ts":1374587416000,"body":"Please squash it into one commit then it will be better"},{"ts":1374648071000,"body":"Cleaned & squashed"},{"ts":1374658768000,"body":":+1:"}]},{"timestamps":[{"ts":1357466635000,"body":"Are you sure tests pass? I get a syntax error."},{"ts":1357467890000,"body":"Indeed they do pass. No syntax error."},{"ts":1357470938000,"body":"They should pass as internally `delegate` transforms them to `self.class`: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/module/delegation.rb#L137-L138\r\n\r\nThe feature was added in ad5f18e6e936e783e0e97a9315ed4a72f333a2cd. Whether you want to merge it or not is purely aesthetic.\r\n\r\n"},{"ts":1357476081000,"body":"@pixeltrix I missed the commit ad5f18e, thanks. I have just tried it locally, but I wasn't on master. Your call. :)"},{"ts":1357477345000,"body":"Normally I'm not a fan of purely cosmetic changes due to them polluting the history but I'm feeling generous this morning :smile:"},{"ts":1357477861000,"body":"Thanks for merging :smile: Though, I think it's important to keep Rails sources as clean as possible — a lot of people use them to study Rails internals or just get better at Ruby generally, so the usage of as many own features as possible makes the sources feel consistent. \r\n\r\nI'm seeing a lot of inconsistency in Rails currently. It's mostly small things, but that's what makes an impression of code quality. Starting from `'self.class` vs `:class` in `delegate` to different indentation styles around `private`/`protected` keywords to use of either `&:name` or `{ |u| u.name}` to different hash syntaxes. This list is actually even longer.\r\n\r\nI think Rails should be example of consistent and elegant Ruby code which others can learn from. That is my point."},{"ts":1357484544000,"body":"> I think it's important to keep Rails sources as clean as possible — a lot of people use them to study Rails internals or just get better at Ruby generally, so the usage of as many own features as possible makes the sources feel consistent.\r\n\r\nTrust me, there are better resources for getting learning Ruby :smile:\r\n\r\nI'd hate to think that people are copying how we do things - Rails has a very special set of requirements that anyone developing Rails applications doesn't need to worry about. For example I know Rails is often criticised for not maintaining backwards compatibility but we do try not break people's apps unnecessarily and this can leave code being quite messy at times.\r\n\r\n> I'm seeing a lot of inconsistency in Rails currently.\r\n\r\nI think that's inevitable given the number of contributors, the fact that we're all volunteers and that it's been around for so long now. A lot of the inconsistency is purely subjective and changes over time - for example your change has only been possible for a couple of months and the code you changed predates then.\r\n"}]},{"timestamps":[]},{"timestamps":[{"ts":1372866145000,"body":":+1: \r\n\r\nplease add a `[skip-ci]` in the commit message."}]},{"timestamps":[]},{"timestamps":[{"ts":1359570060000,"body":"Thanks @semaperepelitsa. As a side note, you can always squash and push force to your branch, that github updates the pull request properly (so you can use the same pull request :)."},{"ts":1359570858000,"body":"Thanks for the tip! I didn't know that."}]},{"timestamps":[]},{"timestamps":[{"ts":1377253226000,"body":"@senny Done"},{"ts":1377253703000,"body":"@prathamesh-sonpatki merged and backported. Thank you for your contribution :yellow_heart: "}]},{"timestamps":[{"ts":1357168730000,"body":"Guys, remember to use the Ruby 1.9 hash syntax"},{"ts":1357168799000,"body":"thanks @rafaelfranca, will update this"},{"ts":1357168887000,"body":"Some tests using `update_attributes` and `update_attributes!` would be great, to make sure the alias will not be removed."},{"ts":1357168909000,"body":"It is very good. Awesome work guys :clap: "},{"ts":1357169473000,"body":"Looking great :+1:"},{"ts":1357232994000,"body":"Thanks guys, everything updated, I'm merging this :smile: "},{"ts":1357594024000,"body":":metal:"}]},{"timestamps":[{"ts":1358283920000,"body":"Thanks."}]},{"timestamps":[{"ts":1361333545000,"body":"Sorry! One more change and I'll merge."},{"ts":1361333909000,"body":"done! :smile: "},{"ts":1361333981000,"body":":+1:"}]},{"timestamps":[{"ts":1373144091000,"body":" :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[{"ts":1374356381000,"body":"I would say to remove the elements that don't have a link like `Google security changes`, and Future."},{"ts":1374358321000,"body":"removed"},{"ts":1374359504000,"body":"Seems good. @senny care to take a look?"},{"ts":1374404089000,"body":"awesome! :yellow_heart: :sparkles: :green_heart: "}]},{"timestamps":[{"ts":1375191566000,"body":" :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"},{"ts":1375191829000,"body":"I'll backport to 4-0-stable after the build is finished"}]},{"timestamps":[]},{"timestamps":[{"ts":1375823192000,"body":"Please squash commits and add `[ci skip]` to your commit message"},{"ts":1375823363000,"body":"What's the point of updating this?\r\nI doubt anyone would think there is a problem because he's seeing 1.9.3 instead of 1.9.2.\r\nMoreover, if we're updating this, why not use 2.0.0?"}]},{"timestamps":[{"ts":1367166803000,"body":"Yes, they changed this and their docs are a bit outdated..."}]},{"timestamps":[{"ts":1375229672000,"body":"Any chance you could link me to the line where we are setting the default? "},{"ts":1375230224000,"body":"The default is set here: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/message_verifier.rb#L31\r\n\r\nBut I don't think this can be configurable"},{"ts":1375232801000,"body":"You're right, it would have to be some direct ruby configuration, not a configuration file, maybe we should add a config option? Want I should open a pull request?"},{"ts":1375233137000,"body":"I don't think is worth to add a configuration option for this one. If someone want increase the security they can create their own verify and sign the cookie value."},{"ts":1375262941000,"body":"It would be better if the docs were corrected and open another issue about discussing whether we should add an way of configuring it or explaining how to do it."},{"ts":1375274405000,"body":"Discussions can't be done on issues. :-1: from my side to add this configuration."},{"ts":1375305754000,"body":"I fixed the language about configuration - this should be ok to merge now @rafaelfranca"}]},{"timestamps":[{"ts":1367581742000,"body":"This has been fixed by @jonleighton in 66982772b7b019505870a65b38af076d509ffd53, thank you very much!"},{"ts":1367581893000,"body":"Sorry @smasry, I didn't see this PR. It might have saved me some debugging time!"}]},{"timestamps":[{"ts":1362694511000,"body":"cc @tenderlove "},{"ts":1362715802000,"body":"@josevalim Changed to only return the html redirect for html requests. Am I correct in assuming we want a plaintext error output otherwise?"},{"ts":1362860782000,"body":"@sgrif I don't think we should output anything at all. For server sent events, there is nothing we could output that would make sense. Even more, the failure could even be due to errors in the socket, so pushing anything could just make things worse. Maybe we would provide a on_error callback in the response stream that users could customize, but i don't think we should do anything out the box."},{"ts":1362864657000,"body":"@josevalim Both of those make sense, I'll just need to make sure that an error in the on_error block doesn't cause additional problems. It seems like it might not be immediately apparent that all requests to a controller using Live are streamed, even if you're just `render`ing a view as normal. Do you think it would make sense to only stream when stream.write is called directly from the controller, or if stream: true is passed to render? If not, we should probable change the wording in the documentation from \"all actions in that controller will be able to stream\" to \"all actions will stream\""},{"ts":1363525439000,"body":"@josevalim I've made the changes requested."},{"ts":1363622933000,"body":"@sgrif would you mind rebasing this against master and force push to your branch again? It's not mergeable right now. Thanks!"},{"ts":1363624948000,"body":"@sikachu Sure. I squashed down to a single commit as well."},{"ts":1364509652000,"body":"Just checking in on this PR. I'm curious to know what are necessary next steps before this can be merged."},{"ts":1364510424000,"body":"/cc @josevalim"},{"ts":1365196492000,"body":"This seems good to me.  @josevalim?"}]},{"timestamps":[{"ts":1368308551000,"body":"Could you add a CHANGELOG entry?"},{"ts":1368357091000,"body":"How about that?"}]},{"timestamps":[{"ts":1374085104000,"body":"You can also add an example with a `Hash` argument to preload nested associations."},{"ts":1374085250000,"body":"Like this?\r\n\r\n``` Ruby\r\nUser.includes(:address, friends: :address)\r\n```"},{"ts":1374085624000,"body":"let's add an array to the mix:\r\n\r\n```ruby\r\nUser.includes(:adress, friends: [:adress, :followers])\r\n```"},{"ts":1374086160000,"body":"@henrikhodne looks good. Can you add `[ci skip]` to the commit message and squash the two commits together?"},{"ts":1374086369000,"body":"@senny Squashed and pushed. Sorry for not adding the CI skip message in the first two commits."},{"ts":1374086525000,"body":"no worries. Thanks for your contribution :yellow_heart: "}]},{"timestamps":[{"ts":1358305345000,"body":"Ahh, that is super subtle. Nice catch."},{"ts":1358344429000,"body":"@steveklabnik Thanks :)\r\n\r\n@carlosantoniodasilva I've added your suggestions."},{"ts":1358344784000,"body":"Thank you"},{"ts":1358346405000,"body":"Thanks, Rafael :)\r\n\r\nDoes it make sense to backport this to older versions? This exists as far\r\nas I could see.\r\nOn Jan 16, 2013 11:00 AM, \"Rafael Mendonça França\" <notifications@github.com>\r\nwrote:\r\n\r\n> Thank you\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8959#issuecomment-12319416>.\r\n>\r\n>"},{"ts":1358425886000,"body":"The far I can backport it is to 3-2-stable, but I don't think is worth"},{"ts":1358429625000,"body":"Agreed. If this code haven't changed since 2.3, and no one noticed, it's\r\nbecause all interpreters order the Hash key in a way that don't triggers\r\nit. So leave it only on master :+1:\r\n\r\n2013/1/17 Rafael Mendonça França <notifications@github.com>\r\n\r\n> The far I can backport it is to 3-2-stable, but I don't think is worth\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8959#issuecomment-12366097>.\r\n>\r\n>"}]},{"timestamps":[]},{"timestamps":[{"ts":1361676719000,"body":"Thanks @yahonda."}]},{"timestamps":[{"ts":1367789285000,"body":"Thank you! Also, don't forget that you can make these kinds of changes in docrails."},{"ts":1367791066000,"body":"I see. Thank you for your advice."}]},{"timestamps":[]},{"timestamps":[{"ts":1372229303000,"body":"You need to `require \"active_model\"` before requiring any of its children."},{"ts":1372230321000,"body":"OK. I see. :+1: "}]},{"timestamps":[]},{"timestamps":[{"ts":1364137769000,"body":"This looks a lot better, did you tested it? :smile: "},{"ts":1364137956000,"body":"@guilleiguaran  yes, I did"}]},{"timestamps":[{"ts":1371865741000,"body":"I'm backporting, thanks."}]},{"timestamps":[{"ts":1358797300000,"body":"@fxn could you take a look?"},{"ts":1358798161000,"body":"Wrap to 80 chars maybe? :heart:"},{"ts":1358798388000,"body":"Normally I'd wrap that too but I looked around in the guides and there are a lot of very long lines. So I tried to adhere to the current style.\r\n\r\nOf course I'll wrap it if thats the way we write the guides now."},{"ts":1358798500000,"body":"That particular guide does not wrap paragraphs, we have a mix here. In the past we never wrapped, but I believe now we have some wrapping in some guides.\r\n\r\nI'll do minor copy edits but looks good to me, in!\r\n"},{"ts":1358798501000,"body":"I am slowly wrapping them as I work on Guides. When I asked the team about it, I'm the only one that cares, so 80 cols it is ;)"},{"ts":1358798525000,"body":":metal: I really like this regardless of style."},{"ts":1358798643000,"body":"thanks!"}]},{"timestamps":[{"ts":1377057728000,"body":"@steveklabnik \r\nYes, makes sense. Updated the PR to define wrapper method called `jruby_skip` as per your suggestion. "},{"ts":1377106286000,"body":"@rafaelfranca Done. Moved `jruby_skip` to abstract unit."},{"ts":1377106717000,"body":"needs a rebase"},{"ts":1377107265000,"body":"Well. I'll fix the conflicts manually "},{"ts":1377107890000,"body":"Oh my bad, forgot the `rebase`. And thank you  for taking time to fix conflicts :heart: "}]},{"timestamps":[{"ts":1360138464000,"body":"The 2-3-stable branch is only updated with critical security fixes. I don't mind applying this patch since it is easy and fixes something that is wrong anyway. Thanks."}]},{"timestamps":[{"ts":1364156080000,"body":"Looks good. Could you add a test case for this error that demonstrates that it's fixed? Thanks!"},{"ts":1364274911000,"body":"Yes, I can.\r\nCould you give me a hint as to where to which file should I add this test, or does it not really matter as long as it is in a reasonable location.\r\nI want to make sure that I am following the rails best practices.\r\nThanks"},{"ts":1364393052000,"body":"I added the test for this fix. Let me know anything else is needed to accept the pull request"},{"ts":1364393326000,"body":"@egjiri the test looks good but since you are using `send` I didn't undertand how this argument can be `nil` in a normal workflow.\r\n\r\nMaybe, to make easier to write a test can you tell what are the reproduction steps for this issue?"},{"ts":1364394428000,"body":"I am not too sure why options would even be nil...\r\n\r\nThis started happening when I switched to ruby 2.0.0 in the Gemfile and since then every page I try to open results in a 500 error (see above erro message).\r\nSwitching back to ruby 1.9.3 which I had before results in no problems and I am able to run my site without problems.\r\n\r\nI am sure why upgrading ruby would result in this issue but I decided to just make that detail_args_for method a little more robust in case this happens."},{"ts":1364399919000,"body":"I think is not a good idea to be defensive like this. We really don't need to change the code to check if one argument is a unexpected value.\r\n\r\nI think is better to try to reproduce in a new application and fix the real cause of this issue."},{"ts":1364608662000,"body":"@egjiri I think I found the root cause of your issue. Do you have the `new_relic` gem installed? See https://github.com/rails/rails/issues/8885#issuecomment-14039547"},{"ts":1364608960000,"body":"Yes, I had new_relic gem version 3.5.5.38.\r\nA couple hours ago I updated my gems and I was able to run my app in ruby v2 without this error"},{"ts":1364609037000,"body":"It looks like an older version of new_relic was the issue all along"}]},{"timestamps":[{"ts":1365373661000,"body":"Wouldn't it be better to use `_`?"},{"ts":1365374028000,"body":"That was my initial thought, but then again I thought that it may be sweeter for people who read the code if we take advantage of the \"don't care variables\" that ruby 2.0 has, in order to make maintenance easier and not hide information regarding the API.\r\n\r\nWhat do you think?"},{"ts":1365377250000,"body":"I personally would just use `_`, but let's wait for someone else to chime in. I'm not sure what's standard here."},{"ts":1365423892000,"body":"I kinda like the idea of named variables to make them more explicit."}]},{"timestamps":[{"ts":1362572786000,"body":"I don't think this change is necessary. The tests just happen to have the same setup but the actual code they are testing does not rely on that setup. Hence I don't think we should generalize and make the tests harder to read and reason about. In my opinion this refactoring does not help the expressiveness of the tests and does not make them less brittle or easier maintainable."},{"ts":1362579182000,"body":"From my point of view, the setup is necessary to stop declaring the same instances multiple times in the test case and that is the whole reason to add a setup here. It's true that the setup doesn't necessarily add expressiveness or maintainability, but surely it stops repetitive use of same code."},{"ts":1362579404000,"body":"I don't think the repetition in the test is a problem. Because it's not relevant for the use-case under test. It would be even better if the queries in each example would be different. There is no duplication of concept only a duplication of characters, which can't be resolved anyway ;)"},{"ts":1362579626000,"body":"Yeah. I'm with @senny here. Also only two of the five tests are taking advantage of this setup method."},{"ts":1362579644000,"body":"Thank you for your contribution"}]},{"timestamps":[{"ts":1367697528000,"body":"This seems really straightforward. Why not close this issue and submit a pull request to [lifo/docrails](https://github.com/lifo/docrails) as suggested by the [API Documentation Guidelines](http://edgeguides.rubyonrails.org/api_documentation_guidelines.html) Feedback section\r\n\r\n> If you see any typos or factual errors you are confident to patch, please clone docrails and push the change yourself. That branch of Rails has public write access. Commits are still reviewed, but that happens after you've submitted your contribution. docrails is cross-merged with master periodically.\r\n"},{"ts":1367795024000,"body":"Pushed to docrails here: https://github.com/lifo/docrails/commit/ebfe41ca2126132e780b47f73245d8f4e4a13187. I'll close this one, thanks."}]},{"timestamps":[{"ts":1363862574000,"body":"This seems like a bad idea."},{"ts":1363866692000,"body":"Yeah... this will add more confusion that benefits.\r\n\r\nWhy do you need this?"},{"ts":1363868491000,"body":"Example I have one page for several resources, and after updates I should be redirected to the page with minimal changes to code.\r\n\r\n```ruby\r\n# config/routes.rb\r\nget 'homes', to: 'homes#index', as: [:home, :customers, :sellers, :visitors]\r\n```\r\n\r\n```ruby\r\n# app/controllers/{users|sellers|visitors}_controller.rb\r\n\r\nrender_with(@user, location: customers_path)\r\nrender_with(@seller, location: sellers_path)\r\nrender_with(@visitor, location: visitors_path)\r\n```\r\n\r\nIt could be done via this:\r\n```ruby\r\n%w(home customers sellers visitors).each {|name| get 'homes', to: 'homes#index', as: name}\r\n```\r\n\r\nI could not remember the real example, why I need this, it was long time ago.\r\n\r\nSo the main goal is add ability to create aliases to url helpers. "},{"ts":1363868673000,"body":"I see. Thank you for the explanation.\r\n\r\nSince you can do the same using the loop in the routes I think is better to not include this on the rails code.\r\n\r\nThank you for the contribution. We really appreciate :heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1359114023000,"body":"cc @pixeltrix "},{"ts":1359118314000,"body":"The patch seems greater but I want a extra pass from @pixeltrix since he have more knowledge about dates."},{"ts":1359118522000,"body":"Yup, seems good since other attributes already work like that :+1:. Thanks @lilibethdlc."},{"ts":1359119868000,"body":"Got a deadline this afternoon - I'll take a look this evening"},{"ts":1359144895000,"body":"Yes @carlosantoniodasilva, I was surprised when it didn't work as I expected in this case. I expected it to behave like the other attributes. I just worked around it until I could find out what was going on."},{"ts":1359219592000,"body":"Merged in bc982cbcb34129ea2cfe8aa1f8e0b40e444e68db"},{"ts":1359219701000,"body":"@lilibethdlc  - thanks for you contribution"},{"ts":1359219790000,"body":"@lilibethdlc welcome to Rails contributors!!! http://contributors.rubyonrails.org/contributors/lilibeth-de-la-cruz/commits"},{"ts":1359243424000,"body":"Will this patch make it into Rails 3.x?"},{"ts":1361118166000,"body":"@gonzedge since it was a regression (#8898) I've backported it"}]},{"timestamps":[{"ts":1366200323000,"body":"/cc @NZKoz "},{"ts":1366234418000,"body":"Do you have a reference for this? Seems fine if so"},{"ts":1366296859000,"body":"http://www.ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/OpenSSL/Cipher.html#method-i-random_iv\r\nhttp://www.ruby-doc.org/stdlib-2.0/libdoc/openssl/rdoc/OpenSSL/Cipher.html#method-i-random_iv"},{"ts":1366300080000,"body":"I added another change:\r\n\r\nOpenSSL::CipherError was moved to OpenSSL::Cipher::CipherError in Ruby 1.8.7. Since Rails 4 requires at least Ruby 1.9.3, support for the old location can be dropped."},{"ts":1366321083000,"body":"Please don't remove the cipher error constant though, other people may be referencing it. Just assign OpenSSL::Cipher::CipherError to it."},{"ts":1366324501000,"body":"Done.\r\n\r\n(I'm not sure about people referencing it, though, since the constant is undocumented.)"},{"ts":1366325772000,"body":"There's still a few things bugging me about MessageEncryptor:\r\n\r\n1) The output is not URL-safe, which limits it's use for e.g. verification codes in URLs.\r\n2) The ciphertext and initialization vector is doubly base64-encoded (because of MessageVerifier).\r\n3) If Ruby 2 and OpenSSL 1.0.1 were required, the authenticated cipher aes-256-gcm could be used instead of a custom authentication, which would be safer and faster. Also, it wouldn't need two keys.\r\n\r\nI guess there's not much chance of incompatible changes being pulled, is there?"},{"ts":1366326783000,"body":"Never underestimate the ability of exactly, pulling in incompatible changes is not going to happen.  We could add an option to MessageEncryptor which uses aes-256-gcm for people with the relevant pre-requisites but we'd never just remove support for the old code.\r\n\r\nYour first point is taken, but it's an orthogonal issue from my POV."}]},{"timestamps":[{"ts":1372420384000,"body":"/cc @fxn"},{"ts":1372498837000,"body":"@pftg : Thanks, updated!"}]},{"timestamps":[{"ts":1368739696000,"body":"Sorry but I didn't get why we need this.\r\n\r\nDoesn't this work?\r\n\r\n```erb\r\n<%= content_tag(:ol, class: 'nav') do %>\r\n  <%= nav.navigation_link %>\r\n<% end -%>\r\n```\r\n\r\nor\r\n\r\n```erb\r\n<% what, who = ['Hello', 'world'] -%>\r\n<%= content_tag(:div) do %>\r\n  <%= \"#{what} #{who}!\" %>\r\n<% end -%>\r\n```"},{"ts":1368741422000,"body":"Sorry, my example was not really good.\r\n\r\nI was thinking on methods like form_for that need to pass arguments (like the form builder) that are not available in the context. This will allow us to make something like:\r\n\r\n~~~ ruby\r\ndef form_for args, &block\r\n  builder = Builder.setup args\r\n  content_tab :form, arguments: builder, &block\r\nend\r\n~~~\r\n\r\nCurrently, the form_for helper capture the block inside the same method and do not use the content_tag helper."},{"ts":1368741680000,"body":"I'm fine with the capture inside the same method. If is the possible to make the same thing without this patch I'd add it. I really don't want to complicate the API of the content tag more.\r\n\r\n@carlosantoniodasilva @jeremy thoughts?"},{"ts":1368741722000,"body":"BTW thank you for the pull request.\r\n\r\nLets wait more feedback on this one to see what we will do."},{"ts":1368742329000,"body":"@rafaelfranca Thanks for the fast answer.\r\n\r\nPlease let me know if there is something to change on this so I can work on it, this would be my first contribution to rails. :station: "},{"ts":1369582834000,"body":"There is an alternative way to handle this situation.\r\n\r\n~~~ ruby\r\ndef form_for args, &block\r\n  builder = Builder.setup args\r\n  content = capture builder, &block\r\n  content_tab :form, content, other_options\r\nend\r\n~~~\r\n\r\nSo I close this now as it is not really necessary."}]},{"timestamps":[]},{"timestamps":[{"ts":1360615273000,"body":"@rafaelfranca @carlosantoniodasilva could you take a look?"}]},{"timestamps":[{"ts":1359445295000,"body":"I just realized it's possible the test is there to exercise [this bit](https://github.com/bemurphy/rails/blob/bae92681be97191edda90990e08b5275d187107f/actionpack/lib/action_dispatch/middleware/params_parser.rb#L68) of code,  still seems a bit dubious though.  \r\n\r\nEdit:  Though, that test passes if I comment out the referenced line so, probably not."}]},{"timestamps":[{"ts":1370961661000,"body":"I'm not sure this is necessary. On output, the string will be escaped automatically if it's not already HTML safe.\r\n\r\nAre there similar places in Rails where it's done this way?"},{"ts":1370962370000,"body":"It can be a problem if you want to implement a helper method with link_to_unless.\r\n\r\n```ruby\r\ndef do_something(condtion)\r\n  \"Do something with #{link_to_unless(condition, '<b>x</b>', 'github.com')}\".html_safe\r\nend\r\ndo_something(false)\r\n# => \"Do something with <a href=\\\"github.com\\\">&lt;b&gt;x&lt;/b&gt;</a>\"\r\ndo_something(true)\r\n# => \"Do something with <b>x</b>\" # x is bolded this time\r\n```\r\n\r\nI think it is very confusing."},{"ts":1370981772000,"body":"I see, this makes sense...\r\n\r\nAre there maybe other helpers in Rails where sometimes an argument is returned without modification? This should then be changed too."},{"ts":1371006152000,"body":"As far as I checked the action_view codes of v3.2.13, there is no other similar helper methods."},{"ts":1371291938000,"body":"/cc @NZKoz"},{"ts":1371306346000,"body":"@dtaniwaki avoid to call  `.html_safe` on string interpolations using helpers.\r\n\r\n```ruby\r\ndef do_something(condtion)\r\n  \"Do something with \".html_safe + link_to_unless(condition, '<b>x</b>', 'github.com')\r\nend\r\n```\r\n\r\nShould give the same result and `do_something(true)` will not have the bold text"},{"ts":1371306496000,"body":"Also always escaping will not allow us to give html safe string as argument if we need to."},{"ts":1371306592000,"body":"Oops, it will since `html_escape` check `.html_safe?`"},{"ts":1371306624000,"body":"Mind to open a pull request against master?"},{"ts":1371335468000,"body":"You shouldn't really ever call html_safe in your helpers, you should create\r\na new SafeBuffer and append to it. It's uglier to read but it's much much\r\nmuch safer.\r\n\r\nAs for this change, it's harmless unless someone can think of a case where\r\nyou'd want the unsafe strings. There's no security reason not to change\r\nthis.\r\n\r\nOn 16/06/2013, at 2:26 AM, \"Rafael Mendonça França\" <\r\nnotifications@github.com> wrote:\r\n\r\n@dtaniwaki <https://github.com/dtaniwaki> avoid to call .html_safe on\r\nstring interpolations using helpers.\r\n\r\ndef do_something(condtion)\r\n  \"Do something with \".html_safe + link_to_unless(condition,\r\n'<b>x</b>', 'github.com')end\r\n\r\nShould give the same result and do_something(true) will not have the bold\r\ntext\r\n\r\n—\r\nReply to this email directly or view it on\r\nGitHub<https://github.com/rails/rails/pull/10910#issuecomment-19497182>\r\n."},{"ts":1371434223000,"body":"This change makes sense to me, a test would be helpful too :)"},{"ts":1371434343000,"body":"Seems github fucked up the formatting of my comment, so here's repeat:\r\n\r\nYou shouldn't really ever call html_safe in your helpers, you should create a new SafeBuffer and append to it. It's uglier to read but it's much much much safer.\r\n\r\nAs for this change, it's harmless unless someone can think of a case where you'd want the unsafe strings. There's no security reason not to change this."},{"ts":1371448639000,"body":"I'm closing this one in favor of #10971, which points to `master`."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1363942030000,"body":"/cc @pixeltrix "},{"ts":1367368906000,"body":":+1:\r\n\r\nLoad balancers probably shouldn't reject a server for 500, either!"},{"ts":1367368951000,"body":":+1: "},{"ts":1367377375000,"body":"Jeremy, I tried to have that argument with the linode channel, but most people there seemed to disagree with me.  *shrugs*"},{"ts":1367416289000,"body":"Hey folks, I'm wondering whether this needs a changelog entry or not, wdyt?"},{"ts":1367425981000,"body":"I can't say for sure... but I don't think it could hurt since some people might be depending on the old behavior in weird edge cases...  I think an entry would be nice actually.  It's a nice little improvement."},{"ts":1368765909000,"body":"we're hitting this right now in a production app and it's a PITA.   *heavily* agree and think it warrants a point release: it's a serious error for api based apps.\r\n\r\nregarding load balancers not barfing on 500: most can be configured that way, and we configure ours thusly for this reason."},{"ts":1369044741000,"body":"Any chance this will be backported to 4-0-stable?"},{"ts":1369046347000,"body":"This should totally be in 4.0.  When tenderlove merged it I surely imagined it would go into 4. "},{"ts":1378463985000,"body":"Hi guys, I'm hitting the 400 status code fine but the response's body is always html even when the format of the request is :json. What is the best way of wrap this and return a nice JSON error message in the body?"},{"ts":1378466196000,"body":"@etdsoft is this in development or production? If it's the former then you're probably seeing the output from [`ActionDispatch::DebugExceptions`][1]. If it's the latter then it should return a JSON response.\r\n\r\n[1]: https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb"},{"ts":1378466702000,"body":"Thanks @pixeltrix yes, this is in development, I'm just trying to wrap the error into a nice JSON response for an API endpoint, something like (keeping the 400 status)\r\n\r\n```\r\n{\"message\": \"Could not parse request body\"}\r\n```\r\n\r\nI've seen this, but it seems a bit overkill for a simple task that sure is quite common?\r\n\r\nhttp://stackoverflow.com/questions/15459143/how-to-rescue-from-actiondispatchparamsparserparseerror-in-rails-4"},{"ts":1378469838000,"body":"@etdsoft in production (and your tests) you will get something like this:\r\n\r\n``` json\r\n{\"status\": 400, \"error\": \"Bad Request\"}\r\n```\r\n\r\nA custom exceptions app would be the way to do it properly but you could set `config.consider_all_requests_local = false` in `config/development.rb` and override `show_detailed_exceptions?` to return true or false depending on whether `xhr?` is true or not, e.g:\r\n\r\n``` ruby\r\n# This should go in ApplicationController\r\ndef show_detailed_exceptions?\r\n  if Rails.env.development?\r\n    request.local? && !request.xhr?\r\n  else\r\n    false\r\n  end\r\nend\r\n```\r\n\r\nThis will show debug information for non-XHR requests made to 127.0.0.1 and use the production exceptions code otherwise."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1360197116000,"body":"Looking good John. Nice work!\r\n\r\nThink order/reorder/reverse_order should be unscoped all at once with unscope(:order).\r\n\r\nAlso, not sure whether we should try hard to unscope already-generated SQL. Seems brittle."},{"ts":1360215368000,"body":"Thanks for all the comments, I've implemented what you've said. I also added more tests for other methods from the query interface."},{"ts":1360263518000,"body":"Would be useful to have some documentation about when this is appropriate vs. `ActiveRecord::SpawnMethods#except`, which otherwise seems very similar."},{"ts":1360277058000,"body":"Good point @al2o3cr. Problem with `#except` is that it affects that relation's values only. It won't wipe out the order, grouping, etc when the relation is merged. So `post.comments.except(:order)` will still have an order if it comes from a default_scope on Comment. Example:\r\n\r\n```ruby\r\n>> t.comments.except(:order).to_sql\r\n=> \"SELECT `comments`.* FROM `comments`  WHERE `comments`.`trashed` = 0 AND `comments`.`commentable_id` = 223304243 AND `comments`.`commentable_type` = 'Todo' ORDER BY created_at\"\r\n```\r\n\r\nPerhaps `#except` should take on this larger role, but it'd need deeper consideration."},{"ts":1360354304000,"body":"I've included the comments that were made. I've also added documentation and more extensive test coverage."},{"ts":1360606726000,"body":"Now unscope() called without any arguments will raise an ArgumentError. I've added a test to make sure that it does."},{"ts":1360608943000,"body":"Cool. Last thing: update `CHANGELOG.md` to introduce the new feature. And, if you're feeling ambitious, update the active_record_querying guide :grin:"},{"ts":1360616133000,"body":"Cool, added a changelog and active_record_querying guide entry."},{"ts":1361394219000,"body":"I've updated this to use the has_arguments? method to check to make sure that there are actually arguments to ```.unscope()```."}]},{"timestamps":[{"ts":1360162765000,"body":"@spastorino mind reviewing?"},{"ts":1360326289000,"body":"Looks good, can you squash the two commits into one and add a CHANGELOG entry in the same commit please ?\r\nThanks!"},{"ts":1360327165000,"body":"Done."},{"ts":1360339583000,"body":"@AndreyChernyh Hey for some reason I can't merge this PR. Can you rebase it?"},{"ts":1360347924000,"body":"alright, should be good to merge now."},{"ts":1360355249000,"body":"@AndreyChernyh thanks!"}]},{"timestamps":[{"ts":1372335728000,"body":"thanks."},{"ts":1372335774000,"body":"@khustochka @senny thanks :smile: "}]},{"timestamps":[{"ts":1364584006000,"body":"Thank you! Don't forget that you can push these kinds of changes to lifo/docrails!"},{"ts":1364584189000,"body":"thanks @steveklabnik  . I push changes to guide to lifo/docrails. But for code comments my self imposed rule is to send PR so that any mistake can be caught. You are right. For minor changes in comments I should push to docrails directly."},{"ts":1364584857000,"body":"You always can open a pull request if you want, that's fine. I just wanted to make sure that you knew it existed! I'll check you off of my mental list. :)"}]},{"timestamps":[{"ts":1372972647000,"body":"@ankit8898 this PR provides only cosmetic changes. Please review 7.2 section of http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html"},{"ts":1372973185000,"body":"@pftg Thanks for the info. Understand this  \"Changes that are cosmetic in nature and do not add anything substantial to the stability...\".  I added  this commit just to keep the latest test migrations in sync with how latest Rails version creates.  Will keep in mind that these change are treated cosmetic.. thanks again!"},{"ts":1373009536000,"body":"As the article linked to by @pftg explains, we don't merge pure cosmetic changes. I'm closing this one.\r\n\r\n@ankit8898 thanks for your work and helping to make Rails better :yellow_heart: "}]},{"timestamps":[{"ts":1365568680000,"body":":+1:"},{"ts":1365568987000,"body":"Word, thanks."},{"ts":1365608405000,"body":"This issues is not only with Active Record but also routes, rails rendering stack, anywhere that may call pluralize. This definitely needs to be reverted."}]},{"timestamps":[{"ts":1373441656000,"body":"@josevalim may your review this PR."},{"ts":1373442097000,"body":":+1: "},{"ts":1373442761000,"body":":+1:"},{"ts":1373446624000,"body":"Thanks @pftg ! Have you investigated why setting the config option is not enough?"},{"ts":1373448271000,"body":"@josevalim, default `config/environments/production.rb` has `config.eager_load = true` which invoked on loading environment https://github.com/rails/rails/blob/master/railties/lib/rails/application.rb#L295 and overide https://github.com/rails/rails/blob/master/railties/lib/rails/application.rb#L294. (Environment loads only on invoking rake task, after we setup `config.eager_load = false`). After in `initializer :eager_load! do` https://github.com/rails/rails/blob/master/railties/lib/rails/application/finisher.rb#L53 we have `config.eager_load == true`, but I think expected value should be `false`"},{"ts":1373455095000,"body":"@pftg Thanks a lot! Couldn't we simply then move the `config.eager_load=false` to the line after `require_environment!` and avoid overriding the whole `def eager_load` method?"},{"ts":1373455776000,"body":"I'm also looking for more clean solution, maybe adding new `initializer` with setting `eager_load` to `false`.\r\n\r\nBut for now `Finisher.initializers_for(self)` runs in `require_environment!`, and `config.eager_load=false` after `require_environment` will be usable only for next rake tasks only.\r\n"},{"ts":1373460955000,"body":"@pftg there is a before_initialize callback that we could use. Try this:\r\n\r\nActiveSupport.on_load(:before_initialize) { config.eager_load = false }\r\n\r\nOr:\r\n\r\nActiveSupport.on_load(:before_initialize) { |app| app.config.eager_load = false }\r\n\r\nCould you please give it a try?"},{"ts":1373462695000,"body":"Cool, thanks. I'm on my way to try it!"},{"ts":1373477675000,"body":"@pftg Nice, let me know so we can merge this, thanks! :)"},{"ts":1373481929000,"body":"@josevalim, sorry for delay. I updated PR. ` before_initialize ` works like a charm. Thanks!"},{"ts":1373481980000,"body":" :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"},{"ts":1373482193000,"body":"Thanks! :cool:"}]},{"timestamps":[{"ts":1358250095000,"body":"@joneslee85 `composed_of` was removed but reverted back to master, so I think it's fine to have its mention in these docs. Thanks!"},{"ts":1358250149000,"body":"Going to resubmit pull request to remove `composed_of`"},{"ts":1358251074000,"body":"Thanks, but unfortunately I think it's not going anywhere now, it's staying in AR for some more time, until someone come up with a plugin extraction or something like that I believe."}]},{"timestamps":[{"ts":1357812122000,"body":"So this allows you to do a global override of `foreign_key` for associations, etc. I can see how this could be useful with legacy schemas but as it currently stands the PR can't be accepted because it has no tests, no documentation and no CHANGELOG entry. Also I have doubts that the implementation is complete - for example if the model is the other end of a HABTM association you'd want to be the default for `:association_foreign_key` to be the value for `foreign_key` in the model. There's also how this affects `model_name` as well which isn't really used within AR but is used mainly in AP and i18n.\r\n\r\n@rafaelfranca @carlosantoniodasilva @jonleighton wdyt of the concept?\r\n\r\n"},{"ts":1357906793000,"body":":-1: I don't want to add more complexity to support legacy schemas. It will just result in more broken edge cases and more complexity in the code base. People using legacy schemas should expect to endure a little pain."},{"ts":1357906997000,"body":"I support @jonleighton opinion.\r\n\r\n@route thank you so much for the pull request"}]},{"timestamps":[{"ts":1368448689000,"body":"It's done in a different way here #10585"},{"ts":1368448702000,"body":"Will close this once #10585 merged."}]},{"timestamps":[{"ts":1364468305000,"body":":+1: "},{"ts":1365151982000,"body":"HWIA digs into nested arrays.\r\n\r\n    >> {a: 'a', b: [ {c: 'c'} ] }.with_indifferent_access\r\n    => {\"a\"=>\"a\", \"b\"=>[{\"c\"=>\"c\"}]}\r\n\r\n"},{"ts":1368749624000,"body":":thumbsup: "},{"ts":1369000933000,"body":":+1: \r\n\r\nTypo on line 95. ans --> and"},{"ts":1370686158000,"body":"Typo fixed and recreated PR #10887"}]},{"timestamps":[]},{"timestamps":[{"ts":1373260633000,"body":"In the change to actionpack/lib/action_dispatch/middleware/params_parser.rb, request.body is changed to request.raw_post as so:\r\n\r\n\\-          data = ActiveSupport::JSON.decode(request.body)\r\n\\+          data = ActiveSupport::JSON.decode(request.raw_post)\r\n\r\n... but the pull request comment says:\r\n\r\n\"In order to get raw_post to be not empty after ParamsParser#parse_formatted_parameters, added rewinding of body stream input.\"\r\n\r\nSo I think you meant to call request.body.rewind instead of changing JSON.decode(request.body) to JSON.decode(request.raw_post)\r\n\r\nI just tested rewinding the request body in actionpack-4.0.0/lib/action_dispatch/middleware/params_parser.rb and ran the curl test with Rails 4.0.0 and Ruby 2.0.0-p247 and the test now passes. Here is the code in params_parser.rb:\r\n\r\n        case strategy\r\n        when Proc\r\n          strategy.call(request.raw_post)\r\n        when :json\r\n          data = ActiveSupport::JSON.decode(request.body)\r\n          request.body.rewind if request.body.respond_to?(:rewind)\r\n          data = {:_json => data} unless data.is_a?(Hash)\r\n          request.deep_munge(data).with_indifferent_access\r\n        else\r\n          false\r\n        end\r\n\r\n... and here is the result of the test:\r\n\r\nProcessing by PostsController#create as */*\r\n  Parameters: {\"post\"=>{\"title\"=>\"my title\"}}\r\nthis is request.raw_post = \r\n{\"post\":{\"title\":\"my title\"}}\r\nthis is request.params = {\"post\"=>{\"title\"=>\"my title\"}, \"action\"=>\"create\", \"controller\"=>\"posts\"}\r\n  Rendered text template (0.0ms)\r\n\r\n============================================\r\n\r\n"},{"ts":1373263535000,"body":"@Alamoz try to create new branch and by using `git cherry-pick` move your commit to there and then with `git push -f HEAD:<your remote branch>`."},{"ts":1373264053000,"body":"OK, figured it out. Pull request for this fix is https://github.com/rails/rails/pull/11357\r\n\r\nThe reason to do the rewind in actionpack-4.0.0/lib/action_dispatch/http/request.rb, rather than in actionpack-4.0.0/lib/action_dispatch/middleware/params_parser.rb, is to set @env['RAW_POST_DATA'].  If raw_post_body isn't rewound there, then @env['RAW_POST_DATA'] is blank.\r\n\r\nThe baby steps continue, hopefully I now know what to do to not mess up pull requests anymore. Thanks for your patience.\r\n"},{"ts":1373264196000,"body":":+1: "},{"ts":1373264562000,"body":"Thanks @pftg. I created two branches for each change. Do you know how I can pull/refresh my rails fork on github?\r\n\r\n\r\n\r\n\r\n________________________________\r\n From: Paul Nikitochkin <notifications@github.com>\r\nTo: rails/rails <rails@noreply.github.com> \r\nCc: Adrien Lamothe <alamoz@yahoo.com> \r\nSent: Sunday, July 7, 2013 11:06 PM\r\nSubject: Re: [rails] Use Request#raw_post instead Request#body in ParamsParser#parse_formatted_parameters (#11353)\r\n \r\n\r\n\r\n@Alamoz try to create new branch and by using git cherry-pick move your commit to there and then with git push -f HEAD:<your remote branch>.\r\n—\r\nReply to this email directly or view it on GitHub."},{"ts":1373284026000,"body":"@Alamoz  why is using rewind better than just using raw_post?\r\nAnd when does the body doesn't have rewind? if there are such cases then stuff will continue to fail."},{"ts":1373302699000,"body":"@urielka please look at the code and comments in #11357"},{"ts":1373358930000,"body":"The right fix is this one. When @tenderlove cherry-picked the security fix from the others branches he missed this conflict and changed back to `body`. Thank @pftg @Alamoz for trying to fix this one."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1360630164000,"body":"We've had the issue #8673 which is from the same author, @mathie, and ended up with the fix in c75b5a88a82c79fdf95dfea4d72bf3c5a829930e. Can you please refactor this code to use a case statement similar to the linked commit, please? Also there's no need to add a changelog entry for that. Just ping me after you make the changes, and I'll merge (don't forget to squash everything). Thank you."},{"ts":1360686111000,"body":"Do you want me to issue a new pull request that only has a single commit after I make the modifications that you've suggested?"},{"ts":1360687572000,"body":"There's no need to create a new pull request, you can make the changes and squash all commits you have into 1, then push force to your branch (in your fork), that github will update this same pull request properly."},{"ts":1360718014000,"body":"I think I got everything squashed correctly.  Please take a look."},{"ts":1360806180000,"body":"I think I have this correct now."},{"ts":1360806570000,"body":"Awesome, thank you."}]},{"timestamps":[{"ts":1366733738000,"body":"Sorry, I meant to move to the [test/unit railtie](https://github.com/rails/rails/blob/master/railties/lib/rails/test_unit/railtie.rb). You need it loaded if you have test unit anyway."},{"ts":1366733757000,"body":"Btw, thanks for all your work! :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"},{"ts":1366746114000,"body":"@josevalim Thanks! I've moved it into the ``rails/test_unit``. Issue #10238 should now be fixed, but I'm having trouble thinking of a good way to test it."},{"ts":1366766360000,"body":"I'm not sure if we have a way to test this in our test suite."}]},{"timestamps":[{"ts":1363366711000,"body":"Seems legit. @carlosantoniodasilva ?"},{"ts":1363374780000,"body":"Thank you"},{"ts":1363399375000,"body":"@rafaelfranca: My pleasure :)\r\n"}]},{"timestamps":[{"ts":1368080869000,"body":"This is a documentation only change. You should probably submit it to [lifo/docrails](https://github.com/lifo/docrails). It has public write access."},{"ts":1368114312000,"body":"Can you add `[ci skip]` to the commit message pls?"},{"ts":1368121416000,"body":"@carlosantoniodasilva i'll add ````[ci skip]```` once I hear back about the wording from @rafaelfranca "},{"ts":1368165880000,"body":"updated the PR\r\n\r\n/cc @carlosantoniodasilva @fxn"},{"ts":1368168759000,"body":"thanks @fxn!\r\n\r\ndoes it help to have Doc changes like these go through rails/rails rather than lifo/docrails?"},{"ts":1368171268000,"body":"Going through rails/rails or lifo/docrails is about the same work for Rails committers, both changes have to be reviewed, there may be feedback, etc.\r\n\r\nlifo/docrails is more a convenience for people contributing, if you are sure about the change (or with a high degree of confidence), going via lifo/docrails is easier.\r\n"},{"ts":1368171793000,"body":"gotchya. \r\n\r\nwas not 100% sure on this one, so rails/rails was what i wanted.\r\n\r\nwill keep rails/rails vs. lifo/docrails for next time."}]},{"timestamps":[{"ts":1371729751000,"body":"That indentation follows our code conventions http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#follow-the-coding-conventions.\r\n"},{"ts":1371730599000,"body":"ahh. thanks for comment :-) "}]},{"timestamps":[{"ts":1361624681000,"body":"Nice catch, thanks."}]},{"timestamps":[{"ts":1360819856000,"body":"How is that any benefit over: `model.association.any?`"},{"ts":1360853141000,"body":"Using `model.has_foos?` allows rails developers to not violate the Law of Demeter by reaching through their models' values to ask further question.\r\n\r\nAdditionally, this specific syntax will allow for nicer tests with checks like `expect(author).to have_posts` or `assert author.has_posts?`, both of which are clearer of intent than `expect(author.posts).to be_present?` or `assert author.posts.any?`"},{"ts":1360853295000,"body":"I'd agree that this improved code readability in both the application and the tests. I've found myself wishing for this exact thing in rails for some time."},{"ts":1360855999000,"body":"@halogenandtoast just brought up that this will make stubbing a bit nicer as well, since `dave.stubs(has_posts?: false)` is nicer than `dave.stubs(posts: [])` for readability."},{"ts":1360862476000,"body":"@calebthompson this comes at the cost of expanding your surface API. Imagine this code:\r\n\r\n    if author.has_posts?\r\n      author.posts.each do |post|\r\n        ...\r\n      end\r\n    end\r\n\r\nAfter this patch, I would have to mock both `has_posts?` and `posts` in the cases where I have one or more posts. It is much more practical instead to work on a collection of posts (and since you mentioned Demeter Law, it would also be fine as long as you keep the posts interaction inside its own method).\r\n\r\nIn any case, Rails uses the approach of `posts <<`, `posts.build` and `posts.any?` instead of `author.add_post`, `author.build_post` and `author.has_posts?` for quite some time and I don't see a strong benefit to go astray in this particular case."}]},{"timestamps":[{"ts":1370939278000,"body":"Without performance measures, this is purely aesthetic. It might be better, it might not."},{"ts":1370942913000,"body":"Actually I think the `instance_variable_{get,set,defined?}` methods internally convert those to symbols and short literal strings are cached so there's probably no or little difference in GC performance and since the code is only executed while loading classes and modules there's little or no performance impact. I think it's probably okay to merge this one."},{"ts":1370944059000,"body":"Yeah, strings passed to `instance_variable_{get,set,defined?}` are auto-converted to symbols, so providing syms right away avoids the overhead. Literal strings are not cached, so this does indeed has some GC benefits, but that is irrelevant as this is a boot code."},{"ts":1370946696000,"body":"@thedarkone are you sure that literal strings aren't cached - I thought they were. See the section in this article on shared strings: http://patshaughnessy.net/2012/1/4/never-create-ruby-strings-longer-than-23-characters"},{"ts":1370947018000,"body":"This follow up discusses shared strings in more detail:\r\nhttp://patshaughnessy.net/2012/1/18/seeing-double-how-ruby-shares-string-values"},{"ts":1370952489000,"body":"@pixeltrix the string's content (`buf`) is cached, however a new `String` instance is created every time. It will be a glorious day when for example JVM's JIT will be able to finally EA away the `String` allocations in JRuby (actionview template rendering should then see some major performance improvements).\r\n\r\nSee the bench: https://gist.github.com/thedarkone/4243edcfd9165f139388"}]},{"timestamps":[{"ts":1372334001000,"body":"looks good. Thanks John :heart: "}]},{"timestamps":[{"ts":1377163455000,"body":"judging from this commit 1644663ba7f678d178deab2bf1629dc05626f85b the `# :nodoc:` is probably only for the `alias`. Can you move it on the same line as the `alias` call? This should then keep the following documentaiton."},{"ts":1377164394000,"body":"From what I can tell, it's not possible* to skip only on alias (adding nodoc to the alias line does nothing).\r\n\r\n\\* that is, unless you call adding `:(stop|start)doc:` as *possible*."},{"ts":1377165936000,"body":"you are right, it doesn't work. Let's just remove it then. Thank you for your contribution :yellow_heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1373710747000,"body":"thanks :yellow_heart: "},{"ts":1373735019000,"body":"Can you please cheery-pick this in 4-0-stable as well ?"},{"ts":1373798884000,"body":"@arunagw done: 4baddcc"}]},{"timestamps":[{"ts":1363620501000,"body":"@pixeltrix what do you think?"}]},{"timestamps":[{"ts":1363465926000,"body":"We don't accept changes into the release branch, sorry. Please make another one against 3-2-x, though I'm honestly not sure about adding new features to 3.2."},{"ts":1363466684000,"body":"I figured that might be the case.  I'll resubmit, but which branch should I submit to?  The only others I see are the -stable branches."},{"ts":1363467047000,"body":"3-2-stable will become 3.2.14 someday. (So submit it there)"}]},{"timestamps":[{"ts":1372423154000,"body":"Alright, please squash your commits :) Thanks."},{"ts":1372423967000,"body":"@carlosantoniodasilva done! :)"},{"ts":1372424424000,"body":"Thanks."}]},{"timestamps":[{"ts":1372553209000,"body":"I think expected to call `ActiveRecordTest` namespace."},{"ts":1372600784000,"body":"The other support files have an `ARTest` namespace."}]},{"timestamps":[{"ts":1377161355000,"body":"I'm not sure that this is security bug. Better to create this PR for master, because for 3.2 is not acceptable."},{"ts":1377161766000,"body":"Oh, only security fixes are applicable for the 3-2-stable branch? Ok, I'll make a pull request into the master."},{"ts":1377188493000,"body":"@Exoth always open pull requests to `master`. We will backport the fixes to the stable branches as needed.\r\n\r\nClosing this one in favor of #11979"}]},{"timestamps":[{"ts":1372628278000,"body":"Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1367595663000,"body":"Could you provide some benchmarks to compare your `group_by` implementation performance to one that was previously available via `Enumerable`? Try both lazy (e.g. relations stay relations) and non lazy (all relations eventually become arrays)"},{"ts":1367642130000,"body":"Here you go: https://gist.github.com/afeld/5516129\r\n\r\nThe new `group_by` is also more memory-efficient, in that it doesn't need to hold all records in memory after they're grouped."},{"ts":1367646777000,"body":"To have a basis for comparison, I was expecting to see your `group_by` vs `Enumerable`'s `group_by` (i.e. how much performance gain we get after this patch as compared to before this patch). It seems your gist only gives benchmarks for after-patch case, unless I'm missing something. Could you run the same benchmarks before the patch was applied, and compare them to after-patch?"}]},{"timestamps":[{"ts":1356987066000,"body":"Too soon, I will wait for ``2013-01-01 00:00:00 +0000`` to merge this :smile: "},{"ts":1356989922000,"body":"Awesome pull request"},{"ts":1356995892000,"body":":tada:"}]},{"timestamps":[{"ts":1372168255000,"body":"@JonRowe ping, what is the status of this PR? Did the fixing commit on `master` include a test-case to prevent regressions? What was the fixing commit on `3-2-stable`? Is this test still necessary?"},{"ts":1372201651000,"body":"```what is the status of this PR?```\r\n\r\nNoone seems to have looked at it.\r\n\r\n```Did the fixing commit on master include a test-case to prevent regressions?```\r\n\r\nNo. That's why I wrote this, I was originally attempting to fix a reported bug.\r\n\r\n```What was the fixing commit on 3-2-stable?```\r\n\r\nThe part of ActiveRecord which had this bug was completely rewritten, no one commit.\r\n\r\n```Is this test still necessary?```\r\n\r\nTo prevent regressions only."},{"ts":1372225533000,"body":"@JonRowe thanks for the detailed answer. I'm merging this one in."}]},{"timestamps":[{"ts":1367348358000,"body":"`remove_possible_method` -> `remove_method` in c6897b7d7b18b5c89aca46d4595b47c2590ce335. Looks good."}]},{"timestamps":[{"ts":1362483528000,"body":"Thanks."}]},{"timestamps":[{"ts":1359460633000,"body":"Because of the Rails 2.3.16 upgrade, the following snippet that used to work in Rails 2.3.15 does not work anymore:\r\n\r\n```ruby\r\nActiveSupport::JSON.decode(ActiveSupport::JSON.encode(\"foobar\"))\r\n```\r\n\r\nI've submitted a pull request to fix this problem."},{"ts":1359500341000,"body":"Yeah, you're right, thanks. It now properly encodes and decodes numbers as well as nil."},{"ts":1359576195000,"body":"Can this get into 3.0.20 as well?  It has the same issue"},{"ts":1359586520000,"body":"Hi, I've submitted a pull request for Rails 3.0.20 as well."},{"ts":1361824325000,"body":"Bare JSON values are NOT valid JSON - [the standard](http://www.ietf.org/rfc/rfc4627.txt) only allows for objects (`{..}`) and arrays (`[..]`) at the top level."},{"ts":1361825336000,"body":"The issue for us is that Rails 3.0.19 allowed this, among other things (like single-quotes rather than double-quotes), whereas rails 3.0.20 does not.  One does not typically expect this sort of drastic change in functionality in a point-release that may break lots of things.  We worked around it with a monkeypatch (based on this pull request), because we had to.  Given a time machine, rails would never have allowed this invalid json, but since it was allowed, many users consider the abrupt change a regression in functionality, even if it is technically \"correct\" now.\r\n\r\nTo anyone else refraining from updating to 3.0.20 because of this, the monkeypatch route may be your best option."},{"ts":1362008818000,"body":"It *seems* the general consensus is if a project wants to parse invalid JSON then they will have to monkey-patch Rails."},{"ts":1362344021000,"body":"I don't think that we should introduce or re-introduce improper parsing into Rails.. especially given the last couple of months."},{"ts":1362410920000,"body":"Agreed. Looks like this could be closed. No?"},{"ts":1362424496000,"body":"Yes."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1356724033000,"body":"Two things: How is adding this file removing the warning? Wouldn't this add a definition? It's not that I don't believe you, it's that I don't see it.\r\n\r\nSecondly, I'm not entirely sure this belongs inside the begin block: we know it will be always loaded, since it's also ActiveSupport."},{"ts":1356724913000,"body":"> Two things: How is adding this file removing the warning? Wouldn't this add a definition?\r\n\r\nThe warning occurred when I exec the command `$ cd activemodel && rake`.\r\n\r\n```\r\n/Users/tricknotes/rails/activesupport/lib/active_support/core_ext/hash/deep_merge.rb:16: warning: method redefined; discarding old deep_merge!\r\n/Users/tricknotes/.rbenv/versions/1.9.3-p362/lib/ruby/gems/1.9.1/gems/i18n-0.6.1/lib/i18n/core_ext/hash.rb:25: warning: previous definition of deep_merge! was here\r\n```\r\n\r\nIn `i18n` gem, the method definition of  `Hash#deep_merge!` is skipped when it is already defined.\r\n\r\nSo, I use `require 'active_support/core_ext/hash/deep_merge.rb'` before `require 'i18n'`.\r\n\r\n> Secondly, I'm not entirely sure this belongs inside the begin block: we know it will be always loaded, since it's also ActiveSupport.\r\n\r\nAh, that's right. It is unnecessary in begin block.\r\n\r\n"},{"ts":1356726633000,"body":"> In i18n gem, the method definition of Hash#deep_merge! is skipped when it is already defined.\r\n\r\nAhh, this is the part that I'm missing, thank you.\r\n\r\n> Ah, that's right. It is unnecessary in begin block.\r\n\r\nIf it's 'fixing' something in `i18n`, I don't think it matters if it gets moved.\r\n\r\nI'm :+1: but I'll let someone else merge this one."},{"ts":1356745294000,"body":"cc @fxn"},{"ts":1360506238000,"body":"Thought about fixing this warning, ended up to this pull request, and this looks good to me. nice :) "}]},{"timestamps":[{"ts":1364074615000,"body":"OMG!! Very cool! Thank you so much"},{"ts":1364075350000,"body":":heart: :heart_eyes: :+1: thanks!"},{"ts":1364077501000,"body":":shipit:"},{"ts":1370380960000,"body":"This is quite welcome, but now we're dumping superfluous `using: :btree` options in everyone's `schema.rb`. The using option should only be dumped if it isn't the default."}]},{"timestamps":[]},{"timestamps":[{"ts":1362518206000,"body":"We will need tests to ensure this will not occur anymore"},{"ts":1362518299000,"body":"@rafaelfranca :+1: sure, I merged the first one after of verify that all AP tests were passing"},{"ts":1362518617000,"body":"@rafaelfranca I'll add test for that \r\n \r\n "}]},{"timestamps":[]},{"timestamps":[{"ts":1376846987000,"body":"Thanks!!! I noticed this some days ago but I forget to fix it :)"},{"ts":1376847030000,"body":"can you add [ci-skip] to your commit message to avoid TravisCI tests for this commit?"},{"ts":1376847115000,"body":"Great to be helpful :)\r\n\r\nWell, I thought you wanted me change it's title, sorry to be a noob :D\r\n\r\n"},{"ts":1376847287000,"body":"Sure, you can do it in your local machine amending last commit (--amend) and forcing push (-f):\r\n\r\n```\r\ngit commit --amend -m \"blorgh_engine to blorgh [ci-skip]\"\r\ngit push -f origin master\r\n```"},{"ts":1376847367000,"body":"I did it via Github's web interface :(\r\n\r\nSo should I clone it, make the change and re-push ?"},{"ts":1376848291000,"body":"succeed? :)"},{"ts":1376848421000,"body":"Yes!!! Thanks!!!"}]},{"timestamps":[{"ts":1372274116000,"body":"I think I'm okay with this, but I'd like some feedback from others."},{"ts":1372615633000,"body":"Hi, did someone have the time to consider this PR ?\r\n\r\nWithout this or another fix, in rails 4 if you have a typo in your routes.rb file the error will be masked by the delegate error and this can be quite surprising."},{"ts":1372822407000,"body":"Helped me fix my error. My typo wasn't even in the routes file."},{"ts":1373530031000,"body":"Fixed by 07a4c76a07641840892463eb934400abdf694927"},{"ts":1373530101000,"body":"@Intrepidd thanks for your contribution but I'd rather we keep the semantics of `delegate` as is for backwards compatibility"}]},{"timestamps":[{"ts":1364143358000,"body":"I ment we need to wait OpenSSL::PKCS5 to be fixed."},{"ts":1364205723000,"body":"Updated :-) "}]},{"timestamps":[{"ts":1373397153000,"body":"Thank you. Added to docrails team, so feel free to push documentation changes to rails/docrails"}]},{"timestamps":[{"ts":1371817824000,"body":"How verbose can it get? :smile:"},{"ts":1371819499000,"body":"Nothing much :-) Basically warning mode is on now for every type of test. \r\n\r\nNot sure if this is required for isolated one so second commit can be removed :smile: "}]},{"timestamps":[{"ts":1363212997000,"body":"The docs look good, thank you."},{"ts":1363213016000,"body":"> Should I be seeing application/xml and application/json respectively?\r\n\r\nHmm, I am not sure, but yes, that looks funny to me. "},{"ts":1363213177000,"body":"I'm afraid people will look at the docs and ask themselves: \"wtf is app?\". I don't think the app should be mentioned in the docs."},{"ts":1363213374000,"body":"@carlosantoniodasilva What instead? `Rails.application`? I've seen `app` elsewhere, so it made sense to me, though I am admittedly outside of the norm. ;)"},{"ts":1363213705000,"body":"@steveklabnik I believe @garethrees has tested this in the console, where `app` is an instance of Rails' integration test class. I think it's not related with the request docs, so we should probably not mention it.\r\n\r\nHow about:\r\n\r\n```ruby\r\n#    # assume a GET to \"/articles\"\r\n#    request.fullpath # => \"/articles\"\r\n```\r\n\r\nOr just removing it seems ok:\r\n\r\n```ruby\r\n#    get \"/articles\"\r\n#    request.fullpath # => \"/articles\"\r\n```\r\n\r\nWdyt?"},{"ts":1363213795000,"body":"I'm happy if you're happy. You can go ahead and make that change, I'm done screwing up this simple commit. :)"},{"ts":1363214027000,"body":">  @garethrees has tested this in the console\r\n\r\nYup. Thought that was a common trick, but I agree it makes less sense when accessing `request` from a controller.\r\n\r\nThe main reason I was documenting it is because I kept having to check which would give me `base_url` / params etc.\r\n\r\nWhile we're at it, what does `original_fullpath` do? Could also be worth clarifying `original_url`?\r\n\r\n\r\n"},{"ts":1363214391000,"body":"@steveklabnik hehe alright :)\r\n\r\n@garethrees I think it is a common trick, it's just that might not be worth mentioning it in the docs regarding the request methods.\r\n\r\n`original_fullpath` was added by @drogus to fix an engine issue iirc, but I don't remember the details, maybe @drogus does. This is the commit that added it: 482ec2ac3f518c91544a3b3e92765eef41b91419."}]},{"timestamps":[{"ts":1377419929000,"body":"@gzohari : And why have you closed this one too? :smile: "},{"ts":1377422717000,"body":"It works, but it's not a good implementation.\r\nI'll re-open when i think of something better than this."}]},{"timestamps":[{"ts":1373274568000,"body":"The reason to do the rewind in actionpack-4.0.0/lib/action_dispatch/http/request.rb, rather than in actionpack-4.0.0/lib/action_dispatch/middleware/params_parser.rb, is to set @env['RAW_POST_DATA'].  If raw_post_body isn't rewound there, then @env['RAW_POST_DATA'] is blank."},{"ts":1373303475000,"body":"There is a rewind there already (after the read) do you want both?\r\n\r\nI don't think that this is the problem, the real problem (IMHO) is accessing the request.body directly when you do that you bypass raw_post and therefore bypass the @env['RAW_POST_DATA']\r\n\r\nAlso I don't think that doing rewind if rewind exists is a good practice,what are the cases that body doesn't have rewind? I suspect that if body is a raw socket then it won't have rewind..."},{"ts":1373304350000,"body":"@urielka - Please read discussions at:  #11356 - and - https://github.com/rails/rails/issues/11345#issuecomment-20573490 - it is explained there. Test it yourself to see why both rewinds are necessary and to also see why a rewind needs to occur in ActionDispatch::request#raw_post before @env['RAW_POST_DATA'] is set.\r\n\r\n\r\n\r\n\r\n________________________________\r\n From: Uriel Katz <notifications@github.com>\r\nTo: rails/rails <rails@noreply.github.com> \r\nCc: Adrien Lamothe <alamoz@yahoo.com> \r\nSent: Monday, July 8, 2013 10:11 AM\r\nSubject: Re: [rails] Fix request raw_post_body.rewind in actionpack-4.0.0/lib/action_dispatch/http/request.rb (#11357)\r\n \r\n\r\n\r\nThere is a rewind there already (after the read) do you want both?\r\nI don't think that this is the problem, the real problem (IMHO) is accessing the request.body directly when you do that you bypass raw_post and therefore bypass the @env['RAW_POST_DATA']\r\nAlso I don't think that doing rewind if rewind exists is a good practice,what are the cases that body doesn't have rewind? I suspect that if body is a raw socket then it won't have rewind...\r\n—\r\nReply to this email directly or view it on GitHub."},{"ts":1373358977000,"body":"Closed since #11353 was merged"}]},{"timestamps":[{"ts":1357331126000,"body":"Thanks."}]},{"timestamps":[{"ts":1374432354000,"body":"Please add `[ci skip]` for commit message."},{"ts":1374432508000,"body":":shit: my bad"},{"ts":1374433369000,"body":"About `rails/docrails`, from [weblog](http://weblog.rubyonrails.org/2013/6/14/docrails-back-to-the-roots/)\r\n>You can either ask for commit bit if you'd like to contribute to docrails regularly (please contact anyone from the >core team), or else propose documentation changes to Rails itself via pull requests to rails/rails.\r\n\r\nso get in touch with @fxn  or any other core team member."}]},{"timestamps":[{"ts":1364496399000,"body":"@ranjaykrishna we can remove the method from the sqlite adapter"},{"ts":1364496783000,"body":"@rafaelfranca done."},{"ts":1364497343000,"body":"Thank you"}]},{"timestamps":[{"ts":1361011954000,"body":"Why do you say that is not used?.\r\nTake a look here https://github.com/rails/rails/blob/master/activesupport/lib/active_support/message_encryptor.rb#L95"},{"ts":1361178232000,"body":"@spastorino That seems to be in a different namespace. That raises `ActiveSupport::MessageEncryptor::InvalidMessage`, which is already defined. \r\n\r\n`InvalidMessage` error in the `MessageVerifier` namespace doesn't appear to be used anywhere."},{"ts":1361277354000,"body":"You're right InvalidMessage is in a different namespace but still required.\r\nPushing a fix ..."}]},{"timestamps":[]},{"timestamps":[{"ts":1368036533000,"body":"Changing `attribute_names` directly means that scaffold/admin plugins that read a model's attribute names to show a table of records will now have duplicate columns.\r\n\r\nThink this is a good case for introducing new API that returns a list of all attributes that the model responds to."},{"ts":1368097766000,"body":"Ah yeah I didn't think of that. I guess since I'll be adding a new method and switching it out in the params wrapper I'll just add it to https://github.com/rails/rails/pull/10375"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1365518233000,"body":"Would be great if you put the benchmarks results in the commit message. Also this needs a CHANGELOG entry"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1358495391000,"body":"Oh, didn't see this pull request. I was going to close the issue and then realized it.\r\n\r\nI have done a broader revision here f71467ac605f2bd3fec08fe35c7d548b35ffb0cc.\r\n\r\nThanks anyway!"},{"ts":1358730275000,"body":"word -- i like your update to the docs. very clear."}]},{"timestamps":[]},{"timestamps":[{"ts":1361525936000,"body":"seems legit.\r\n\r\n/cc @carlosantoniodasilva "},{"ts":1361968269000,"body":"Thank you."}]},{"timestamps":[{"ts":1369852021000,"body":"I am not sure how `VERB=GET rake routes` is significantly better than `rake routes | grep GET`."},{"ts":1369852468000,"body":"I have to agree with @steveklabnik. This is the power of the unix commands"},{"ts":1369863096000,"body":"Hmm, alright. I've changed the so that it doesn't add any functionality and so that it just adds a test for ``CONTROLLER``.\r\n\r\nHowever, along the same lines, why do we keep the controller environment if you can just grep for it?"},{"ts":1369863142000,"body":"I didn't know there is one. Seems useless."},{"ts":1369863280000,"body":"Might want to deprecate it then?"},{"ts":1369863554000,"body":"I'm :+1: on that. @rafaelfranca ?"},{"ts":1369948001000,"body":"Well, I think it is useful. Diferen from the verb, it is not easier to use grep. For example:\r\n\r\n```\r\n\r\nGET /people/:id people#show\r\nGET /people/profile profile#show\r\nGET /people/something something#index\r\n```\r\n\r\nOnly the frist one is from the people controller"},{"ts":1370007568000,"body":"Failed the build \r\n\r\n```ruby\r\nErrno::ENOENT: No such file or directory - CONTROLLER=cart rake routes\\\r\n```\r\n\r\neither we need to use \r\n\r\n```\r\nDir.chdir(app_path){ `sh -c CONTROLLER=cart rake routes` }\r\n```"},{"ts":1370008292000,"body":"@arunagw Thanks for the catch! Sorry, I only tested this in ruby 2.0.0 and not 1.9.3. I'll make another PR with the fix."},{"ts":1370008516000,"body":"Cool :+1: thanks"}]},{"timestamps":[{"ts":1372622461000,"body":"@CKHere please review this one too. Thanks."},{"ts":1372751712000,"body":"Thanks @steveklabnik. I updated PR! Will be great to hear you opinion!"},{"ts":1372969749000,"body":"Thanks @steveklabnik! I updated PR."},{"ts":1372970082000,"body":"Thanks, sorry that was so much trouble o_O"},{"ts":1372970110000,"body":"Thanks :heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1359182959000,"body":"I corrected the code based on your suggestions. Also, it seems that all transactions, once they are rolledback or committed, are never changed so that the list of states in the TransactionState class is unnecessary. I've run a pretty simple test where I do the following:\r\n\r\nTopic.transaction do\r\n  while true\r\n    Topic.new\r\n  end\r\nend\r\n\r\nOn my machine (ruby 1.9.3), the amount of memory seems to stabilize pretty quickly and I was able to created millions of objects without any marked increase in memory. Note that the Topic class does not have callbacks."},{"ts":1359420555000,"body":"Thanks for all the comments! I've made changes so that my code reflects all of these. The tests still pass."},{"ts":1359458816000,"body":"Very good! :+1: "},{"ts":1359475710000,"body":"Ok, nodocs have been added."},{"ts":1359665259000,"body":"While its true that any? is not the same as !empty?, it doesn't matter because we are searching for non-nil callbacks from the _#{transactional}_callbacks stack. Technically, using any? is actually better than using !empty? because a nil callback should not set off the has_transaction_callbacks? method."},{"ts":1359673343000,"body":"`_#{transactional}_callbacks` could not contain `nil` object. Right? And `! + empty?` has better performance.\r\nThere is example https://github.com/rails/rails/commit/2ff47c48975b52a23982fc7bae592ab32d4fff2e"},{"ts":1361338554000,"body":"I've added a CHANGELOG entry for this PR, and have rebased it with master."},{"ts":1361365536000,"body":"It stills doesn't can be automatically merged"}]},{"timestamps":[]},{"timestamps":[{"ts":1371566582000,"body":"/cc @jonleighton "},{"ts":1371619492000,"body":"Will this regress 3.2 upgrades? In 3.2 there is no distinct, users use .uniq for sql distinct. A silent behavior change for all existing code would be an issue."},{"ts":1371626742000,"body":"@egilburg this is not at all related to `3-2`. My original commit a1bb6c8b06db8354617 was not backported to `3-2`."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1373041924000,"body":"Why this is needed?"},{"ts":1373043745000,"body":"Thanks for quick response.\r\n\r\nMy project would like to keep simple url to display users like the following.\r\nhttp://myapp.com/search?q=words\r\n\r\nCurrently my project remove `utf8` paramter by monkey patching \r\nunder document, but I think better more simple way to remove it. "},{"ts":1373044366000,"body":"If you are planning to support IE6-8 you will need that parameter. Or request coming from IE users will raise server errors if there are utf8 characters."},{"ts":1373045858000,"body":"Thanks for your kindness.\r\n\r\nYes, I understand such IE behavior, because of find this entry by google.\r\nhttp://stackoverflow.com/questions/3222013/what-is-the-snowman-param-in-ruby-on-rails-3-forms-for\r\n\r\nHowever my project is for smartphones, so this would work."},{"ts":1373046015000,"body":":+1:, it seems good to me. I'd love to remove this feature but we can't :cry:"},{"ts":1373048591000,"body":"Oh... sorry to remove review comments by squashing code. I modified to use `Hash#fetch` and `Hash#delete` under comments. The code is improved. Thanks @steveklabnik !"},{"ts":1373048739000,"body":"Nope, that's great! Hiding things once they're fixed is good. :)\r\n\r\nI think we need a CHANGELOG entry and that's it."},{"ts":1373206731000,"body":"Sorry for my late response.\r\n\r\nAdded tests to check html_safe. Tests are passing, but I think more clear code. So, added `''.html_safe` code.\r\n\r\nAnd I also updated CHANGELOG.md. Is it OK? I'd like to squash these commits, if OK."},{"ts":1373207932000,"body":"Seems good. Yes, please squash your commits"},{"ts":1373209109000,"body":"@rafaelfranca @steveklabnik\r\n\r\nThanks for many advice and your patience.\r\nSquashed commits."},{"ts":1373210433000,"body":"Thank you"}]},{"timestamps":[{"ts":1357251447000,"body":"Can you add `[ci skip]` to the commit message, to skip running the test suite?"},{"ts":1357251457000,"body":"Ops, @rafaelfranca was faster than my comment :smile:"},{"ts":1357251574000,"body":"@carllerche Alright. Will do so next time :)"}]},{"timestamps":[{"ts":1372540891000,"body":"Please remove  rails.komodoproject file from commit as it's not a rails related thing.\r\n\r\nAlso add [ci skip] in commit message and force push again.\r\n\r\nthanks."},{"ts":1372541250000,"body":"Sorry about that, just submitted a pull request without that file. Won't happen again.\n\n\n\n\n________________________________\n From: Arun Agrawal <notifications@github.com>\nTo: rails/rails <rails@noreply.github.com> \nCc: Adrien Lamothe <alamoz@yahoo.com> \nSent: Saturday, June 29, 2013 2:21 PM\nSubject: Re: [rails] Rails 4 update to 'The Asset Pipeline' guide. (#11188)\n \n\n\nPlease remove  rails.komodoproject file from commit as it's not a rails related thing.\nAlso add [ci skip] in commit message and force push again.\nthanks.\n—\nReply to this email directly or view it on GitHub."},{"ts":1372672102000,"body":"These need to be squashed into one commit."},{"ts":1372694486000,"body":"OK @steveklabnik the changes have been squashed into one commit. Did a git rebase on those commits and since then have done a 'git rebase -i HEAD~2' to squash it whenever updating the file.\r\n\r\n\r\n"},{"ts":1372695215000,"body":"Just added [ci skip], forgot to add it to comment after squash.\r\n"},{"ts":1372969817000,"body":"There are now 18 commits here. http://blog.steveklabnik.com/posts/2012-11-08-how-to-squash-commits-in-a-github-pull-request"},{"ts":1372981566000,"body":"Going to close this and open a different pull request. My squashed version is fouled up."},{"ts":1372981688000,"body":"New pull request for this at https://github.com/rails/rails/pull/11308"}]},{"timestamps":[{"ts":1367501361000,"body":"@carlosantoniodasilva updated :D "},{"ts":1367503193000,"body":"Great, thanks!"},{"ts":1367512603000,"body":":smile:"}]},{"timestamps":[{"ts":1358437092000,"body":":+1: this has been tripping up many people writing backends for I18n"},{"ts":1358623329000,"body":":+1: "}]},{"timestamps":[{"ts":1372320602000,"body":"Thank you!"},{"ts":1372321535000,"body":"You're welcome. My very first contribution :)"},{"ts":1372325132000,"body":"Wooo! :confetti_ball: "}]},{"timestamps":[{"ts":1374163487000,"body":":green_heart::yellow_heart::heart::blue_heart::purple_heart:"}]},{"timestamps":[{"ts":1364045932000,"body":"Thanks for the pull request but I don't think it is worthy changing Rails. People have their own customizations for responders and they should be done in their respective apps."}]},{"timestamps":[]},{"timestamps":[{"ts":1373808884000,"body":"/cc @neerajdotname, @rafaelfranca, @jonleighton "},{"ts":1373809017000,"body":"I used tests from #9828 but they need some cleanup to use old test models, instead of adding new one."},{"ts":1373823555000,"body":"Updated PR with clean tests and fixes based on feedback."}]},{"timestamps":[{"ts":1357135309000,"body":"This doesn't require a changelog"},{"ts":1357135491000,"body":"@vijaydev sorry, fixed."},{"ts":1357136126000,"body":"Thank you"}]},{"timestamps":[{"ts":1372087741000,"body":"Looks fine for me but I'll wait for the review from someone of rails security team before of merge"},{"ts":1372108740000,"body":"As far as security goes this does seem to be harmless, there's nothing sensitive in the HSTS headers so we're not leaking any information we shouldn't.\r\n\r\nMight be interesting getting an explanation from an HSTS expert, or someone who trawls through the list archives for an explanation, but for now I think it can be safely applied."},{"ts":1372108861000,"body":"@NZKoz thanks :+1: "}]},{"timestamps":[{"ts":1365078834000,"body":"Not sure it's completely necessary, the overall idea is to give you a minor set of running tests, not a comprehensive suite covering all cases, that's up to the developer to build the required scenario for testing the app's behavior. \r\n\r\nThanks for your contribution :)"},{"ts":1365086326000,"body":"Yeah, people change this all the time, and as CA said, it's not about providing a full suite."}]},{"timestamps":[{"ts":1365840141000,"body":"cc @vijaydev "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1367478451000,"body":"Could you please edit the commit message to say \"Active Support\"?"},{"ts":1367479717000,"body":"@fxn fixed"},{"ts":1367482433000,"body":"Thank you!"}]},{"timestamps":[{"ts":1376498736000,"body":"I don't think we need an `assert` on every assignment, it makes the intention of the test harder to understand because it's asserting everywhere. :+1: "}]},{"timestamps":[{"ts":1362923219000,"body":"Thanks. I think other methods like `update`, `delete_all`, `destroy_all` all work the same way, re-calling itself depending on specific conditions, so it seems ok to leave it like this to keep the consistency."}]},{"timestamps":[{"ts":1376314142000,"body":"@carlosantoniodasilva does this look good?"},{"ts":1376318163000,"body":"Sorry to ask but what's the point of this change please?"},{"ts":1376318920000,"body":"This will make harder to use inheritance."}]},{"timestamps":[{"ts":1357516655000,"body":":shipit:"},{"ts":1357516816000,"body":":+1:"},{"ts":1357518699000,"body":"![common bro](http://i.imgur.com/aomwY.jpg)\r\n\r\nI don't see any patches in my inbox. ಠ_ಠ"},{"ts":1357520352000,"body":"Nice! :+1:"}]},{"timestamps":[{"ts":1364885672000,"body":"looks good.\r\n\r\n/cc @carlosantoniodasilva "}]},{"timestamps":[{"ts":1376535293000,"body":"What does it bring? Is it fixing something or just for the sake of moving things around? Thanks."},{"ts":1376536190000,"body":"I think this make code clearer, I don't found any reason to have an extra module for this when we can just have an conditional for it in the same place where all the other parameters are normalized"},{"ts":1376863983000,"body":"I'm not much familiar with this part of code, so let's ping to some people that might be :smile: \r\n\r\n/cc @josevalim @spastorino "},{"ts":1376936750000,"body":"plus this https://github.com/rails/rails/commit/55360ddf7fd5f3fedc327476bf07aac3ba698e0d :)"}]},{"timestamps":[{"ts":1364928634000,"body":"Can you give a more detailed reason for the rationale for this patch?"},{"ts":1364931837000,"body":"I think we have enough information here"},{"ts":1364938912000,"body":"@stouset  the origin was #9913"}]},{"timestamps":[]},{"timestamps":[{"ts":1373272723000,"body":"This link is working for me, you see it broken?"},{"ts":1373272867000,"body":"@fxn when i click i am going here https://github.com/rails/rails/blob/master/guides/source/upgrading_ruby_on_rails.html#upgrading-from-rails-3-2-to-rails-4-0\r\n\r\nWhich is 404 !\r\n![screen shot 2013-07-08 at 9 40 28 am](https://f.cloud.github.com/assets/422039/760283/1ca53420-e7aa-11e2-9439-126bb12b1b47.png)\r\n"},{"ts":1373272951000,"body":"Ah, I understand.\r\n\r\nRelease notes are guides. You read those ones [here](http://guides.rubyonrails.org/4_0_release_notes.html)."},{"ts":1373273340000,"body":"@fxn  Ok, that's fine.  But shouldn't be the one under 4_0_release_notes.md be `upgrading_ruby_on_rails.md#upgrading-from-rails-3-2-to-rails-4-0` instead of `upgrading_ruby_on_rails.html#upgrading-from-rails-3-2-to-rails-4-0` .  It's a md file and not html which is breaking it."},{"ts":1373273402000,"body":"No."},{"ts":1373273910000,"body":"@fxn  Then can you please tell me what will make the Upgrading to Rails link work on [4_0_release_notes.md](https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md).  Because i feel specifying a md makes this [Correct link](https://github.com/rails/rails/blob/master/guides/source/upgrading_ruby_on_rails.md#upgrading-from-rails-3-2-to-rails-4-0) and with a html this [404 Error link](https://github.com/rails/rails/blob/master/guides/source/upgrading_ruby_on_rails.html#upgrading-from-rails-3-2-to-rails-4-0)"},{"ts":1373274487000,"body":"The github version of the guides isn't meant for reading, but editing.\r\nThe reading version is at [guides.rubyonrails.org](http://guides.rubyonrails.org/).\r\nLinks are broken on github, but that is not fixable without breaking guides.rubyonrails.org, which isn't going to happen."},{"ts":1373275986000,"body":"@dmathieu thanks for this info. "},{"ts":1373277279000,"body":"@ankit8898 Is what I tried to say [here](https://github.com/rails/rails/pull/11360#issuecomment-20592343) and [here](https://github.com/rails/rails/pull/11360#discussion_r5059682)."}]},{"timestamps":[{"ts":1374753089000,"body":"Thanks, but this branch is now closed, can you send it to master and we'll backport if necessary?"}]},{"timestamps":[{"ts":1364059658000,"body":"Thank you  :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[{"ts":1360260080000,"body":":+1:"},{"ts":1360262165000,"body":"I think if we are going on this direction there is no need to check `options[:daemonize]`"},{"ts":1360265120000,"body":"Another idea: we might remove the -d message altogether without replacing it with a -h message."},{"ts":1360265348000,"body":"But why you want to remove that message?"},{"ts":1360266156000,"body":"Occasionally I find a beginner that tries -d and then is unable to stop his server.  I figure, anybody who actually needs -d can figure out the flag without the message."},{"ts":1363600152000,"body":"how should we proceed on this one?\r\n\r\n@steveklabnik @carlosantoniodasilva @schneems thoughts?"},{"ts":1363620216000,"body":"I never noticed that there before. I'm in favor of pointing people at the help which has the `-d` option listed. Would be nice to give people the full command to eliminate ambiguity\r\n\r\n```\r\n\"Run `rails server -h` for more startup options\"\r\n```\r\n\r\n"},{"ts":1363624159000,"body":"@schneems :+1:\r\n\r\n@gkop Could you change it?"},{"ts":1363624448000,"body":"Hey @gkop, just added a comment about the changelog. Can you please check it and rebase again from current master? Just ping afterwards. Thanks."},{"ts":1363628944000,"body":"looks good to me :heart:"},{"ts":1363629604000,"body":"Thank you!"}]},{"timestamps":[{"ts":1368736583000,"body":"I [merged this](https://github.com/rails/rails/commit/711097e6a5af61a31a0547223038a4b5e1d59366), so closing."}]},{"timestamps":[{"ts":1356385205000,"body":"@zoltankiss Thanks!!"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1365155190000,"body":"looks good.\r\n\r\n/cc @carlosantoniodasilva @rafaelfranca "}]},{"timestamps":[{"ts":1365018446000,"body":"Nice! I was investigating the `to_d` issue, this is nicer."}]},{"timestamps":[{"ts":1375478683000,"body":"Looks fine to me.\r\n\r\nthanks :smile: "}]},{"timestamps":[{"ts":1372347888000,"body":"Please add `[ci skip]` to the commit message and re-push with force."},{"ts":1372347982000,"body":"Yes, ci skip would be great. Thanks!"},{"ts":1372356537000,"body":"thanks :yellow_heart: "}]},{"timestamps":[{"ts":1360068731000,"body":"Can you please add a test for it? Thanks."},{"ts":1360199516000,"body":"test added..."},{"ts":1362114101000,"body":"any plans to merge this in?"},{"ts":1362138427000,"body":"Please squash the commits.\r\n\r\n/cc @rafaelfranca @tenderlove "},{"ts":1362380629000,"body":"Apologies, I am new to this. I think I have squashed my commits: https://github.com/jlxw/rails/commit/8c0bce61444c845f760e3eeb34ba63b45ac253e3\r\n\r\nBut I am not sure how to update this pull request. Do I have to create a new pull request?"},{"ts":1362386181000,"body":"> But I am not sure how to update this pull request. Do I have to create a new pull request?\r\n\r\nJust force push to the branch (in this case, patch-2) and it'll update the PR."},{"ts":1362450271000,"body":"That's what I did, but I am getting very confused now, how come all these other commits have been added and what I need to do next to get this pull request accepted"},{"ts":1363460755000,"body":"@jlxw I think you want to use `git rebase master --interactive` on your dev box. That will start your editor with instructions in the comments. After you have the branch the way you want, use `git push --force` to update your github fork."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1364400483000,"body":"I did some comments in the code but the feature is good.\r\n\r\nCan you split the `using` dumping on schema in a separated commit on this pull request?\r\n\r\nAlso remember to add a CHANGELOG entry"},{"ts":1364407102000,"body":"Sure, I'll split this up tonight into two pull requests, one for each feature (and also make the whitespace changes, etc).\r\n\r\nShould I make a changelog entry for each change, or only adding the mysql index types?"},{"ts":1364408901000,"body":"Only the MySQL index types"},{"ts":1364442093000,"body":"@rafaelfranca I updated this, and did a force push.  I believe I addressed the issues you mentioned.\r\n\r\nFor reference, I kept the old commit around: https://github.com/where/rails/commit/0f9d45c7003fb60dfe985d963f66e9d604234798 if you want to compare the diffs."},{"ts":1364442376000,"body":"Very good. Thank you  :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[{"ts":1365155896000,"body":"/cc @NZKoz "},{"ts":1365191918000,"body":"@NZKoz This is a pretty simple doc improvement."},{"ts":1366986410000,"body":"@stouset thanks! Sorry it took so long to merge."}]},{"timestamps":[{"ts":1371980684000,"body":"can you wrap your additions and modifications to 80 chars?"},{"ts":1371980973000,"body":"Oops, sorry I forgot about that. Updated ; thanks!"},{"ts":1371981108000,"body":"I'm all for removing the WIP flag of guides, let's see if @steveklabnik can give this one a pass and note what needs to change before prime time."},{"ts":1371981995000,"body":"First of all, thanks!!!!!!!!! <heart\r\n\r\nSecond, a bunch of nitpicks. :)\r\n\r\nThird, I know that @blowmage was going to be working on this guide. So maybe he has some thoughts as to what still needs to be done?"},{"ts":1371982027000,"body":"I think I would support removing the WIP tag from this guide. @fxn?"},{"ts":1371982244000,"body":"@steveklabnik : Thanks for your comments ; normally, they all have been applied to the patch. :smile: "},{"ts":1372000034000,"body":"Updated thanks @egilburg!"},{"ts":1372057934000,"body":"I propose adding the following link to the links:\r\n\r\n```\r\n* [Fixture Builder](https://github.com/rdy/fixture_builder), a tool that compiles Ruby factories into fixtures before a test run.\r\n```\r\n\r\nPersonal note: I found this tool very useful as it allows best of both worlds - flexible easier to maintain factories (because of dynamic associations, sequences, callbacks, ruby validations, etc) with the performance of static fixtures (very fast transactional db rollbacks that go with them, as opposed to wiping and re-inserting in db large volumes of fixture data after every single test which is SLOW). For my projects I define a generic and representative set of factories to be compiled into fixtures using fixture_builder, and still use raw factories for the one-off cases.\r\n\r\n---\r\n\r\nAlso, the link to Shoulda seems to not be working (takes you to generic thoughtbot/community). Shoulda-matchers still work. I'm not sure whether shoulda itself (as opposed to shoulda-matchers) is discontinued."},{"ts":1372059420000,"body":"Hey guys, a little busy with EuRuKo this week but I'll try to have a look soon."},{"ts":1372191200000,"body":"@fxn : Nice, thanks!\r\n\r\n@egilburg : I've added your link at the end of the guide. Indeed, it seems to be another nice alternative to fixtures.\r\n\r\nAbout the shoulda link, I would love to have your feedback guys : shoulda is just a meta gems which ships with `shoulda-matchers` (which is an extensions for RSpec) and `shoulda-context` (which is an extension for `test/unit`). Should we update the link to point to the shoulda repository or only shoulda-context since we aren't speaking about RSpec in the guide (except a link at the end of the file)?"},{"ts":1372670057000,"body":"Any news on what should be done please?"},{"ts":1372677324000,"body":"@robin850 catching up, will have a look shortly."},{"ts":1373363035000,"body":"Seems good to me :shipit: "},{"ts":1373470029000,"body":"@rafaelfranca : Thanks but I think it's not yet complete. We would love to remove the \"WIP\" mention (but if it's still complete, let me know, I will update `guides/source/documents.yaml`). :smiley: "},{"ts":1374571056000,"body":"Any news on the roadmap please? :-) "}]},{"timestamps":[{"ts":1358874358000,"body":"Don't understand your problem.\r\n\r\nIn Rails do:\r\nvalidates_inclusion_of :duration, :in => 1..200\r\n\r\nIn Rails 3 do:\r\nvalidates :duration, :inclusion => 1..200"},{"ts":1358875166000,"body":"@chriskrams Yeah, there is that solution, but it wasn't necessarily clear to me that I could use it. It was nice to have this option in `validates_numericality_of` as it was the first option I think of when dealing with a numeric column.\r\n\r\n@steveklabnik Could you review this and see if this feature is even useful as @chriskrams has mentioned?"},{"ts":1358876550000,"body":"if you want to use 'validates_numericality_of'  u can use the :if option like that:\r\n\r\nvalidates_numericality_of :duration, :if => :in_range?\r\n\r\ndef in_range?\r\n  #validation\r\nend"},{"ts":1358877259000,"body":"Yes, very true. But why not have a similar interface to the `:inclusion` validation if the `:numericality` validation is the one that is used?"},{"ts":1358877298000,"body":":-1: This is what `validates_inclusion_of` is. No need to change a validation to works like another validation."},{"ts":1358878540000,"body":"@rafaelfranca Fair enough. Seemed like a logical addition, but I had forgotten about `validates_inclusion_of `."}]},{"timestamps":[{"ts":1366320312000,"body":"I thought so too.\r\n\r\nAccording to http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html  (the same paragraph is in other postgres version pages too):\r\n\r\n> If the configuration parameter standard_conforming_strings is off, then PostgreSQL recognizes backslash escapes in both regular and escape string constants. However, as of PostgreSQL 9.1, the default is on, meaning that backslash escapes are recognized only in escape string constants. This behavior is more standards-compliant, but might break applications which rely on the historical behavior, where backslash escapes were always recognized. As a workaround, you can set this parameter to off, **but it is better to migrate away from using backslash escapes**.  If you need to use a backslash escape to represent a special character, write the string constant with an E.\r\n\r\n\r\nBecause of the bolded part of the docs above I'm not entirely comfortable putting in backslashes to escape the quote characters, but there is another option; I could recursively call back into quote and have the normal quoting system handle converting the ruby object into a postgres compatible string literal.  I've tested this approach and it works too.  Also, the existing string quoting system appears to do what this change does.  \r\n\r\nOn a related note, I there might be a separate issue related to escaping the backslash character.  When I put a backslash in one of the strings in the test array they disappear after going to the db.  This happens when I gsub in another quote character and when I use a recursive quote call.  It might also have to do with how the 'standards_confirming_strings' configuration parameter is set in my setup (stock ubuntu, postgres 9.1)."},{"ts":1366382054000,"body":"Thank you for the detailed explanation. This seems good. Merging."}]},{"timestamps":[{"ts":1362011089000,"body":"We had it before for a while and it got reverted. I don't think we want to have that back. "},{"ts":1362013412000,"body":"Sorry but this was reverted some months ago, the reasons are explained in the revert commit: fb883318c8b82b3570cee0\r\n\r\nThanks for your contribution!!"}]},{"timestamps":[{"ts":1370160569000,"body":"cc @rafaelfranca "},{"ts":1370173427000,"body":"Can't you use `ENV['CONTROLLER'] = 'cart'` and let the unit-test process propagate the environment variable, instead of relying on `sh` to do so? I think that this will help with the portability of the tests."},{"ts":1370185631000,"body":"Make sense use `ENV`"},{"ts":1370262979000,"body":"@wangjohn did you get a time to fix this?"},{"ts":1370273430000,"body":"@arunagw @rafaelfranca Yes, I've changed the PR to use ``ENV`` now."},{"ts":1370273563000,"body":"@wangjohn thank you!!!\r\n\r\n@gsamokovarov thanks for your feedback!!"}]},{"timestamps":[{"ts":1372638155000,"body":"Thanks."},{"ts":1372679852000,"body":"Also backported in 49c3320fefffa4e1709fe6d1f9ef107c2a60d369."}]},{"timestamps":[{"ts":1364744567000,"body":"Thank you!"}]},{"timestamps":[{"ts":1363595838000,"body":"@carlosantoniodasilva @rafaelfranca review please :grin: "},{"ts":1363622032000,"body":":heart:"},{"ts":1363622350000,"body":"Should probably add a test to assert these are not frozen to ensure they don't regress."},{"ts":1363623665000,"body":"This change fall in the \"new feature\" category for me and I'd not backport in a stable branch, but I don't think will hurt."}]},{"timestamps":[{"ts":1371648784000,"body":"Done. \r\n\r\nThanks !"},{"ts":1372199693000,"body":"Thanks."}]},{"timestamps":[{"ts":1367092543000,"body":":+1:"},{"ts":1367149228000,"body":"@jeremy Thanks for the comments! The PR has been updated."},{"ts":1367165676000,"body":"Looks good :+1:"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1362851273000,"body":"If you do the change, make sure to squash your commits. Thanks."},{"ts":1362851386000,"body":"@carlosantoniodasilva  Sorry, I guess I'm confused what you mean by squash then."},{"ts":1362851433000,"body":"Make them all one commit: http://blog.steveklabnik.com/posts/2012-11-08-how-to-squash-commits-in-a-github-pull-request"},{"ts":1362851487000,"body":"It means that if you add a second commit changing anything, you should squash them to be only one. Or just amend the current commit with the change. We usually ask people to squash the commits so that it's only 1 full change, easier to track later."},{"ts":1362851532000,"body":"@steveklabnik @carlosantoniodasilva  oh, that's what I already thought it meant. It is one commit, so I was confused why you mentioned it but I see. Thanks for the heads up."},{"ts":1362853160000,"body":"@carlosantoniodasilva updated!\r\n\r\n@steveklabnik, thanks I'd never actually done that and your post was useful. It took me a minute to figure out that I needed to also specify the number of commits from HEAD I was squashing with HEAD~2, which I picked up from @qrush here http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html"},{"ts":1362854779000,"body":"Great, thanks!"},{"ts":1362855941000,"body":"@carlosantoniodasilva nice thanks! Shout @aviflombaum - we stumbled on this during a skillshare lecture at @flatironschool today. :heart: "},{"ts":1362856455000,"body":"Nice!\r\n\r\nIt's also worth to know that documentation patches can be sent straight to [lifo/docrails](https://github.com/lifo/docrails), it's an open branch of Rails specific for documentation purposes, so anyone can commit doc updates at anytime. From time to time it gets cross-merged with the main Rails repo, after some review/copy-edit.\r\n\r\nSo if you guys find anything else, please feel free to send a commit there fixing it (of course there's no problem sending in here too if you want it to get reviewed sooner ;)."}]},{"timestamps":[{"ts":1362424354000,"body":"We will need a CHANGELOG entry"},{"ts":1362475600000,"body":"@rafaelfranca I updated this PR to add a CHANGELOG entry. Thanks."},{"ts":1362486070000,"body":"Thanks!"}]},{"timestamps":[{"ts":1363262310000,"body":"If I add `validates_uniqueness_of` then record will be invalid: `ActiveRecord::RecordInvalid: Validation failed: ... has already been taken`.\r\n\r\nNext steps, I gonna to request feature to take in account `mark_for_destruction` in validation uniqueness and others constraints.\r\n\r\nElsewhere the destroy before insert was in versions before 3.2.7. And I reverted it."},{"ts":1363268912000,"body":"@pftg the test is not failing without the patch. I guess you can add a unique index on `birds` for `name` and `color` to make the test fail without the patch ."},{"ts":1363602320000,"body":"@neerajdotname I think comment about not failing tests was for old commit, which was without updated `schema.rb`. Will be great if you review updated PR."},{"ts":1364953417000,"body":"+1, I just ran into this problem today."},{"ts":1369261177000,"body":"Just saw this.  This issue has been fixed with PR #10417 \r\nThat's the master (4.x) branch.  I have a 3.2 backport PR @ #10681 that is awaiting attention.\r\n\r\n"},{"ts":1369262216000,"body":"Closed by #10417"}]},{"timestamps":[{"ts":1367774250000,"body":"Submitted this a few days ago:  https://github.com/rails/rails/pull/10352"},{"ts":1367774488000,"body":":sweat_smile: how we will handle this?\r\n\r\n#10352 needs a rebase but has better tests. The CHANGELOG message here seems better."},{"ts":1367776047000,"body":"Updated CHANGELOG. https://github.com/rails/rails/pull/10352\r\n"},{"ts":1367781807000,"body":"I hadn't seen @zohlgren's PR; I will close this one."}]},{"timestamps":[]},{"timestamps":[{"ts":1357157887000,"body":"@acapilleri I kind of prefer the current version. I know it has a little duplication but I like how it reads."}]},{"timestamps":[{"ts":1371159168000,"body":"@jonleighton can you look into this one too ?"},{"ts":1371844414000,"body":"@jonleighton sorry to ping you again but can you take a quick look at this one. Thanks. "},{"ts":1371850064000,"body":"Happy to merge, but needs a rebase."},{"ts":1371870327000,"body":"@jonleighton rebased. Thanks."}]},{"timestamps":[{"ts":1362539284000,"body":"Using a block in `link_to_if/unless` has a very special meaning when the condition evaluates correctly, and it's done like that by design, which means using a block does not match `link_to`. Please read the comments in #9066 for more background. Thanks for your contribution :)."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1362656007000,"body":"The first change seems a valid one, but the setup change has already been commented and rejected in #9583, so please remove it. Also make sure to squash your commits into one, thanks!"}]},{"timestamps":[{"ts":1372137974000,"body":"cc @rafaelfranca  @carlosantoniodasilva @guilleiguaran  @arunagw \r\n\r\nThanks"},{"ts":1372147318000,"body":"can you try to use commit messages not longer than 72 characters? Otherwise GitHub will wrap them and it looks strange."},{"ts":1372150282000,"body":"thank you for suggestion @senny \r\n\r\nok I will do it @senny \r\n\r\ncan you please look into this and merge it?\r\n\r\nthanks @senny "},{"ts":1372153469000,"body":"It's look like there are only cosmetics changes, no new logic have been added."},{"ts":1372157811000,"body":"yes no new logic but fix using local variables and older code "},{"ts":1372161057000,"body":"I don't really like these long-line assertions. To me they are hard to read."},{"ts":1372179506000,"body":"Yes, I think the old way was more clear. Thank you anyway.\r\n\r\n(updating to the new hash style is something we only do with refactorings, anyway)"}]},{"timestamps":[{"ts":1363182259000,"body":"can you squash your commits together?"},{"ts":1363182883000,"body":"Yes, here.\r\n\r\nBy the way, i do not really know how *docrails* project works.  If needed, i can submit a PR to *rails* `master` directly."},{"ts":1363182978000,"body":"Maybe i should use in 3-2 the usual hash notation in comments?"},{"ts":1363183212000,"body":"I think docrails only covers master. We don't do documentation backports for 3.2 (I may be wrong though).\r\n\r\nYou should definitely use 1.8 hash syntax on 3.2 :+1: "},{"ts":1363183239000,"body":"Changed to the usual hash syntax."},{"ts":1363212471000,"body":"Docrails only covers master, yes."},{"ts":1363245592000,"body":"If in the future i want to suggest a change in `master` documentation, is it better to use docrails or rails directly?"},{"ts":1363280906000,"body":"Docrails is a fast-track. If you commit there it doesn't go through the normal review process, because doc-only commits generally need less review. If you're unsure about something, open a pull request, but then it needs to be reviewed and merged by someone, which can take a while."},{"ts":1363281158000,"body":"Ok, thanks for there explanation. As this PR is also doc-only, i think it needs less review ;)."},{"ts":1363282278000,"body":"Right, but it gets lost in the 200 open pull requests, rather than just merged."},{"ts":1365876660000,"body":"This is already in master: 99c741e35ba4cefc8883681f2363092cb8f0723e"}]},{"timestamps":[{"ts":1357692880000,"body":"Could you please amend your commit message and add `[ci skip]` to it? Thanks."},{"ts":1357693110000,"body":"Done."},{"ts":1357693622000,"body":"Thanks."}]},{"timestamps":[{"ts":1362693070000,"body":"cc @dhh "},{"ts":1362697343000,"body":":heart:"},{"ts":1362775392000,"body":":+1:"},{"ts":1362775709000,"body":"@semaperepelitsa could you add a CHANGELOG entry?"},{"ts":1362775731000,"body":"Also if we are going to prefer `first_and_new` we have to update the test usage"},{"ts":1362776004000,"body":"1. `first_and_initialize` has to have a deprecation warning as well, if that will be removed in Rails 4.1.\r\n2. Please update tests.\r\n3. docs\r\n4. guides"},{"ts":1362922991000,"body":"And how about `find_or_initialize_by`?"},{"ts":1362975656000,"body":"I thought `find_or_*_by` methods were removed in favor of `where(...).first_or_*` but I see that they still do exist. As I said, it makes sense to use verb there, find_or_new_by doesn't sound right. I would leave it as is unless you have other ideas.\r\n\r\nDo we want to deprecate and remove first_and_initialize or have it as an alias? I'm fine with both options."},{"ts":1363015344000,"body":"I'm fine with the alias"},{"ts":1363015936000,"body":"`find_or_new_by_name` sounds weird though. But yeah, for consistency sake, we might need to make an alias."},{"ts":1363017713000,"body":"Relationships have used the term `build`.  If sticking with verbs for the case of `*_by` methods, what about `find_or_build` and `find_or_build_by`?"},{"ts":1363019181000,"body":"I particularly don't have any problem with `initialize` in the way it's used with `first` or `find by`, changing seems to add more confusion than solving anything."},{"ts":1365325930000,"body":"The `first_or_initialize` API is \"soft-deprecated\" in 4.0 in favour of the new `Relation#find_or_*_by` methods, so whilst I don't necessarily disagree with the rationale for changing these method names, I'm not sure there's any point (they are nodoc'ed in 4.0)"},{"ts":1365510759000,"body":"Since it is deprecated I don't think we need to rename it.\r\n\r\nThank you for the pull request."},{"ts":1365513824000,"body":"@jonleighton, thanks for the clarification. Release notes do recommend first_or_* though: http://edgeguides.rubyonrails.org/4_0_release_notes.html#active-record-deprecations. Are they outdated?"},{"ts":1365517912000,"body":"@semaperepelitsa yes"}]},{"timestamps":[{"ts":1361212364000,"body":"Thank you"},{"ts":1361212405000,"body":":thumbsup: and thank you."}]},{"timestamps":[{"ts":1370356008000,"body":"cc/ @tenderlove "},{"ts":1372883651000,"body":":+1:  nice typo you spotted there \"poistgresql\" :)"},{"ts":1373392058000,"body":"I pushed another approach for original issue. So I'm closing this PR. "}]},{"timestamps":[{"ts":1366930907000,"body":"@lellisga thanks for this!"},{"ts":1366941567000,"body":"@pixeltrix thanks to you. This is ready"},{"ts":1366965788000,"body":"Followup: see my comment [here]( https://github.com/rails/rails/commit/23b6e9d85d4a57ab0a24ae5e03965ff6c8de5bca#commitcomment-3093297)."}]},{"timestamps":[]},{"timestamps":[{"ts":1372978443000,"body":"Not sure what this adds over just setting `response` (in the above example) to a `Hashie::Mash` or equivalent."},{"ts":1372978905000,"body":"agree with @al2o3cr `serialize` is customizable, you can choose a lot of features which should be wrapped:\r\n\r\n```\r\nclas SomeModel < ActiveRecord::Base\r\n  class SymbolWrapper\r\n    def self.load(string)\r\n      string.to_sym\r\n    end\r\n\r\n    def self.dump(symbol)\r\n      symbol.to_s\r\n    end\r\n  end\r\n\r\n  serialize :value, SymbolWrapper\r\nend\r\n```"},{"ts":1373036357000,"body":"@al2o3cr  I didn't know `Hashie::Mash`, thanks for sharing it.\r\n\r\nAlthough `Hashie::Mash.new` or `include Hashie::Extensions::MethodAccess` should behave similar to my proposal, we need to add a new gem dependency. My proposal is only when using `delegate` to a Hash treat keys/values as attribute accessors.\r\n\r\n@pftg `serialize` was just an example, the focus is on the `delegate`.  \r\n\r\nBTW, it is only a proposal. Even being nice in my example, it may not be interesting to add it into `delegate`."},{"ts":1373151894000,"body":" @phstc sorry for my misunderstanding!"},{"ts":1373365182000,"body":"Definitely :-1: for this one. We can't change a core feature like this one to threat hashes in a different way.\r\n\r\nBTW you can use the `store` feature to do the same and get rid of the delegation.\r\n\r\n```ruby\r\nclass Order < ActiveRecord::Base\r\n    store :response, accessors: [:code, :message]\r\n\r\n    def place\r\n      # ...\r\n      response = json_response\r\n      save\r\n    end\r\n  end\r\n```\r\n\r\nSee http://api.rubyonrails.org/classes/ActiveRecord/Store.html"}]},{"timestamps":[{"ts":1361749999000,"body":"> CSRF protection does not only apply to HTML/JS requests anymore (as far as I can tell)\r\n\r\nIs this true? This seems bad."},{"ts":1361762385000,"body":"@steveklabnik that's what I noticed happening when I use it without explicitly disabling it. The logs showed the CSRF error and my session was being reset. I also couldn't find anywhere in the code where it checks the format and then only conditionally runs only for HTML/JS.\r\n\r\nEven the docs seem to contradict themselves. It first states:\r\n\r\n> Only HTML and JavaScript requests are checked, so this will not protect your XML API\r\n\r\nThen later it states\r\n\r\n> It's important to remember that XML or JSON requests are also affected\r\n\r\nWhy does it seem bad? It's easy enough to disable CSRF checks for API developers that don't feel it's a necessary step."},{"ts":1361778321000,"body":"omg wtf. we cannot remove CSRF token protection. If we do we must remove user session support too and consider only api_key based requests!"},{"ts":1361778408000,"body":"i think i will make a PR on this `session=nil`. there is nothing bad in cross site requests if they have no user cookie"},{"ts":1361778616000,"body":"https://github.com/lucisferre/rails/blob/cfcd0c8c28e234ef1b04757411379e71d851366c/actionpack/lib/action_controller/metal/request_forgery_protection.rb#L20-L25\r\n\r\ni don't like these lines. Did we forget Flash CSRF vuln with additional headers? Headers are not to trust in, CSRF token is that thing."},{"ts":1361796216000,"body":"/cc @NZKoz "},{"ts":1361821725000,"body":"Yeah, you *must* run CSRF validation on every single request, every format, every content type, no exceptions. The example in the docs is a _terrible_ idea, we should remove it.\r\n\r\nIf your api relies on sessions, you're doing something horribly horribly wrong ;)\r\n\r\nAs for the X-CSRF-Token header, you don't need to include that in your API requests, just use the :null_session or :reset_session."},{"ts":1361823912000,"body":"@NZkoz yes, so what exactly line would you recommend for null_session + switch off CSRF? Maybe there should be speaking method `treat_as_api` or such.."},{"ts":1361824138000,"body":"All you have to do is set the strategy to null_session, which is the default."},{"ts":1361830076000,"body":"I looked into this stuff before, for building an iOS client app, with a bit of confusion on how you should deal with this. Most stack overflow answers say to remove the verification. \r\n\r\nEventually my conclusion was:\r\nOn a login/new-session action, skip verify and put the token in `response.headers[\"X-CSRF-Token\"]`. The client can then watch for the header, and send back the last one it received.\r\n\r\nI haven't tested it to any good extent, but is this a good/safe way to go about it? "},{"ts":1361830427000,"body":"@Dan2552 are you relying on the client sending Cookie: headers back to do authentication?"},{"ts":1361831176000,"body":"@NZKoz after login? The iOS client will use the session cookie in the same way a browser would"},{"ts":1361831720000,"body":"@Dan2552 That's pretty gross.  You should be authenticating your API clients using API tokens, or something like OAuth.  That way both null_session and reset_session are completely harmless to you.\r\n\r\nCSRF protection is designed to protect the session, if you disable it on the login form then an attacker can make a victim log in to an attacker's account. At first glance this seems fine, but the user can then be tricked into associating their CC with that account etc.  This is still something you need to prevent.\r\n\r\n"},{"ts":1361835441000,"body":"@NZKoz sorry, I'm learning here, so please bear with me...\r\nSay instead we add a preliminary call:\r\n- 1st call: Pre-login call to get csrf token\r\n- 2nd call: Login with auth details and verify with csrf token\r\n- 3rd call: use session cookies to perform logged in action\r\n\r\nWould that not provide the same security as a browser? What's the benefit of an API token over this? \r\n\r\nAlso, you say sessions for an API are \"horribly wrong\", but _why_? Why do we need to be treating non-browser clients differently to browsers? They're both just clients between the user and the site."},{"ts":1361836847000,"body":"This isn't the place for that discussion, but the short version is that API tokens allow users to block or blacklist applications whereas your api exposes the user's password to the application. It also requires either the cookies last forever or you store the password on the device."},{"ts":1361841114000,"body":"@NZKoz @homakov I'm not sure I understand what is being discussed here, but this PR is simply to update the docs slight to be accurate with regards to current behaviour.\r\n\r\nI know, for example, that AngularJS (http://docs.angularjs.org/misc/faq) directly supports taking a CSRF token from a cookie and then sending it back in subsequent requests as a header value. Since a CSRF attack can't replicate this it avoids hijacking the session to submit to the API the same as for a standard form POST. I'm not sure I see the problem. I get that most *public* APIs wouldn't do this, but for people building simple single page apps on the same domain this doesn't seem all that unreasonable."},{"ts":1361841568000,"body":"Ok nevermind, I think I get what you're saying. The login shouldn't be exposed this way it means anyone can up and create a login form for your site that uses user credentials instead of revokable tokens. Makes sense."},{"ts":1361905984000,"body":"So what's the actual status here? Can this be closed?"},{"ts":1361907355000,"body":"There are doc fixes required but that can be handled through the docrails process.  I think we can close this and do any documentation changes through there. "},{"ts":1376474436000,"body":"I don't know if this is the right place for this discussion. Please redirect me to more proper place.\r\n\r\nI've been looking for a way to secure my API and reached this page. From what I can see on SO and on every blog post about creating Rails API, no one is mentioning how to protect your API from forgery, just how to disable protection, because then you can access the API. I think this is a big security issue.\r\nThere should definitely be some method treat_as_api or the like, because it's unclear how to make your API secure.\r\n\r\nFor the moment, I solved it like this:\r\nclass Api::V1::BaseApiController < ApplicationController\r\n  protect_from_forgery with: :null_session\r\nend\r\n\r\nIs this a good approach?"},{"ts":1376484040000,"body":"@vfonic please post to rubyonrails-talk or stack overflow"},{"ts":1377443258000,"body":"Thanks for the suggestion. I posted the question on SO. You can check it out here:\r\nhttp://stackoverflow.com/questions/18378902/how-to-make-sure-rails-api-is-secured-from-csrf/18382223"}]},{"timestamps":[{"ts":1366711132000,"body":"Turns out that this was actually a bug (#10306). Moscow didn't stop using DST until March 27, 2011 when the clocks went forward an hour and didn't go back in the autumn so the times in the tests are +0300 and not +0400."}]},{"timestamps":[{"ts":1371814316000,"body":"Hi @arunagw ,\r\n\r\ncan you please look into this and merge it please?\r\n\r\nThanks"},{"ts":1371815208000,"body":"Please rebase this branch with master"},{"ts":1371816445000,"body":"Hi Arun,\r\n\r\nThank you for reply.\r\nActually I removed the branch so should I again create a branch incorporated these changes?\r\nPlease help me\r\nThanks "},{"ts":1371817160000,"body":"I think you can create a new branch with same name using this SHA \"b0a8ea38ae4a87e60804f1cdabe93a33f1f6a9ee\" \r\n\r\nBut if that feel so complicated close this and open a new pull request.\r\n\r\nthanks."},{"ts":1371880869000,"body":"All you need to do is to push to your `my_new_branch` branch on GitHub, and it'll be fine. you may have deleted your local branch, but it's still up on your GitHub."},{"ts":1371887165000,"body":"And now you need a rebase with master. "},{"ts":1372097283000,"body":"I saw most of these changes are already in master. \r\n\r\nClosing this now. Please open a new PR if there are still left.\r\n\r\nthanks."}]},{"timestamps":[{"ts":1372882275000,"body":"cc @senny \r\n\r\nremoved from #11277 "}]},{"timestamps":[{"ts":1375766278000,"body":"please add `[ci skip]` to commit message"},{"ts":1375772442000,"body":"The latest pull request has`[ci skip]` in the message.  Again, couldn't find that in the guidelines - it seems like this simple doc commit is taking up a lot of time.  I'll try to update the guidelines with the github scrolling, double-period and [ci skip] guidelines added and shoot for getting a commit bit on docrails so this doesn't happen again."},{"ts":1375772778000,"body":":+1:\r\n\r\nYou may review http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html about `[ci skip]`.\r\n\r\nAbout long lines is not official, this is only to help others guys to better review your code."},{"ts":1375773075000,"body":"Please note that the guides say \r\n\r\n> you **can** add [ci skip]\r\n\r\nNot you must. I don't see the point of asking every doc pull request to rebase just to add ci skip."},{"ts":1375774247000,"body":"Thanks @dmathieu for your clarification.\r\n\r\nAs for me better to use contributed Travis CI computations for things which are needed that."},{"ts":1375774338000,"body":"When someone opens a pull request without the ci skip message, the Travis computation is already used since they ran the tests :wink: "},{"ts":1375774409000,"body":"But then on merge, Travis will re-run (I think so)"},{"ts":1375795651000,"body":"Yes, upon merge, the tests will re-run without the skip."},{"ts":1376463472000,"body":"Thank you for your contribution :yellow_heart: "}]},{"timestamps":[{"ts":1357930624000,"body":"Sorry, these changes are so minor that they fall under 'cosmetic.' I think that the `do/end` change is valid, but that should be done when this code is improved or changed in some bigger way."}]},{"timestamps":[]},{"timestamps":[{"ts":1377197583000,"body":"/cc @tenderlove "},{"ts":1377209364000,"body":"Thanks :heart:\r\n\r\nAny chance of having this on 4-0-stable as well?"},{"ts":1378215194000,"body":":+1: "},{"ts":1378215299000,"body":"@jhawthorn done."}]},{"timestamps":[{"ts":1357312516000,"body":"https://github.com/rails/rails/issues/8743"},{"ts":1357313022000,"body":"Cool! I'll take a look if it is present on master as well"},{"ts":1357314655000,"body":"I confirmed that this behavior is intentional. Your test pass if you disable `prepared_statements` in out database adapter.\r\n\r\nhttps://github.com/rails/rails/commit/fd398475afb64e362059a500e5cd54d08b9afdee"},{"ts":1357326939000,"body":"Closing this since behavior is correct. Thank you for the investigation"}]},{"timestamps":[]},{"timestamps":[{"ts":1361876427000,"body":"could you also add a CHANGELOG entry?"},{"ts":1361893083000,"body":"@senny You are right. Thanks for your suggestion."},{"ts":1361894432000,"body":"could you also remove the blank line? The rest looks good.\r\n\r\n@carlosantoniodasilva @rafaelfranca could one of you take this over?"},{"ts":1361895058000,"body":"@senny Done"},{"ts":1361895230000,"body":"@zires squash commits :cake: "},{"ts":1361898957000,"body":"Thank you"}]},{"timestamps":[]},{"timestamps":[{"ts":1357322779000,"body":"Not sure about adding more comments to this file (I always kill them as one of my first actions in a new app). Lets see other comments, thanks!"},{"ts":1357323262000,"body":"@carlosantoniodasilva That's because you're Carlos :) I think the comments are meant for beginners, no?"},{"ts":1357324086000,"body":":) yeah I agree they're meant for beginners, what I'm not sure is whether the concerns feature has the same \"appeal\". @rafaelfranca wdyt?"},{"ts":1357324287000,"body":"Concerns is an advanced feature like constraints. I don't think it should be on the generated routes file"},{"ts":1357325187000,"body":"Personally I think it is harmless but I completely agree that it is an advanced pattern. \r\n\r\nThe reason I leapt into sending the PR was because I was curious about using the \"syntax\" in a test rails 4 app i'm trying out and my initial instinct was to look into the generated route files to help me recall what the syntax was.\r\n\r\nIn an app earlier I had simply declared functions using `def` in my route.rb file and then calling those functions in the `resource` block to achieve the same `concern` effect."},{"ts":1357423905000,"body":"We were doing some cleanup in the generated files and we removed some things that doesn't are often used and I think this would fall in this case, so I'm closing.\r\n\r\nThank you"}]},{"timestamps":[{"ts":1369342511000,"body":"@rafaelfranca I pulled in that other commit."},{"ts":1369342757000,"body":"Seems good to me. :shipit: "},{"ts":1369344921000,"body":"This leads to dependency hell in a stable branch. Using master (targeting 4.1) is appropriate for a major upgrade."},{"ts":1369366687000,"body":":broken_heart: "},{"ts":1369369434000,"body":"Sad. I was eagerly waiting for this"},{"ts":1369865704000,"body":"@jeremy what was the dependency hell? Is there anything I can do to help?\r\n\r\nWouldn't you rather bump minitest to a dot-oh for your dot-oh?"}]},{"timestamps":[]},{"timestamps":[{"ts":1361217623000,"body":"Added all the feedback @jeremy gave me.\r\n\r\nWe don't seem to have any tests on the HTML format, so I didn't write a new one... is it worth it? Also, the `linkify` helper is a bit... yeah. But given that this is the only place it's currently used, should be fine.\r\n\r\nAny other thoughts, or should I :shipit: ? "},{"ts":1361220013000,"body":"Wouldn't it make more sense to just call `formatter.no_routes` and the formatter will generate the error message and show in the most appropriate format? This seems to be doing a lot of work and it would be easier/simpler to generate each message by hand."},{"ts":1361220062000,"body":"@josevalim yeah, especially since this is only happening in two places. I dig it. Changing!"},{"ts":1361220660000,"body":"Much cleaner, @josevalim. Good call. That's what happens when you start one place and end up another..."},{"ts":1361227671000,"body":":+1: I approve this message."},{"ts":1361232617000,"body":"@fxn fixed per your comments."},{"ts":1361232746000,"body":"Looks good to me, the space before the period hurts my eyes but it is easier that I edit later, good to go!"}]},{"timestamps":[{"ts":1356587233000,"body":"@rafaelfranca @schneems  There are many places across the codebase where \"old-style\" hash is still in use. Is it that the style change is expected to happen only at places required? "},{"ts":1356587515000,"body":"We don't accept this kind of change because it can invalidate many pull requests. This change is fine if you are touching related code."}]},{"timestamps":[{"ts":1357239335000,"body":"Please send your pull request against master, if it gets merged it might be backported if necessary. We don't usually merge things in 3-2-stable first. Thanks!"},{"ts":1357587561000,"body":"Right, will do. Cheers.\r\n\r\n\r\nOn Thu, Jan 3, 2013 at 10:55 AM, Carlos Antonio da Silva <\r\nnotifications@github.com> wrote:\r\n\r\n> Please send your pull request against master, if it gets merged it might\r\n> be backported if necessary. We don't usually merge things in 3-2-stable\r\n> first. Thanks!\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8687#issuecomment-11855804>.\r\n>\r\n>"},{"ts":1360349353000,"body":"Does this pull request need to remain open?  (If it was submitted against master, I couldn't find it.)"},{"ts":1360349667000,"body":"nope, been meaning to make against master haven't got to it yet. Will close.\r\n\r\n\r\nOn Fri, Feb 8, 2013 at 10:49 AM, Wally Altman <notifications@github.com>wrote:\r\n\r\n> Does this pull request need to remain open? (If it was submitted against\r\n> master, I couldn't find it.)\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8687#issuecomment-13305060>..\r\n>\r\n>"},{"ts":1364842745000,"body":"@benofsky Still planning to close/rebase? :)"},{"ts":1364843179000,"body":"sorry, yes, will do today.\r\n\r\n\r\nOn Mon, Apr 1, 2013 at 12:00 PM, Stephen Touset <notifications@github.com>wrote:\r\n\r\n> @benofsky <https://github.com/benofsky> Still planning to close/rebase? :)\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8687#issuecomment-15730728>\r\n> .\r\n>"},{"ts":1364846050000,"body":"re-opened against master #10034"},{"ts":1365023986000,"body":"I did this yesterday: https://github.com/rails/rails/pull/10034\r\n\r\n\r\nOn Mon, Apr 1, 2013 at 12:05 PM, Ben McRedmond <ben@benmcredmond.com> wrote:\r\n\r\n> sorry, yes, will do today.\r\n>\r\n>\r\n> On Mon, Apr 1, 2013 at 12:00 PM, Stephen Touset <notifications@github.com>wrote:\r\n>\r\n>> @benofsky <https://github.com/benofsky> Still planning to close/rebase?\r\n>> :)\r\n>>\r\n>> —\r\n>> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8687#issuecomment-15730728>\r\n>> .\r\n>>\r\n>\r\n>"}]},{"timestamps":[{"ts":1358429344000,"body":"@rafaelfranca could you merge this one?\r\n\r\nAlso while I added the example with the custom \"staging\" env I wanted to link to a section in a guide, describing how to create your own environments. I don't think it is documented anywhere. What do you think about adding it to the \"configuring rails\" guide?"},{"ts":1358430139000,"body":":+1: to cover environments in that guide, thanks!"},{"ts":1358430233000,"body":"Thanks @fxn. Will submit a PR."}]},{"timestamps":[{"ts":1362460156000,"body":"Nice catch @tmm1. Profile much? :grin:"}]},{"timestamps":[{"ts":1359836414000,"body":"It seems to be se to the wrong target branch, please open another pull request."}]},{"timestamps":[{"ts":1366989053000,"body":"Nice, @burke. We do this in our apps, but round-trip through UTF-16.\r\n\r\nCheck out the new `String#scrub` in Ruby 2.1 (trunk) that does this directly, without an intermediate encode step!"},{"ts":1366989437000,"body":"I tried UTF-16 at first but I ran into some weirdness with BOMs, so I switched to a different encoding rather than debugging it :). I didn't benchmark thoroughly but I remember finding this way to be a bit faster as well.\r\n\r\nI hadn't heard about `String#scrub` -- good news! Finally, tools to deal with encodings sanely are starting to show up."},{"ts":1367963043000,"body":"We just put this in production. It seems to be working well, except that the final line fails if the input string was UTF-16. On further investigation, so does the current implementation :)"},{"ts":1367973540000,"body":"Could you rebase against master and squash to a single commit?"},{"ts":1368032183000,"body":"Sure. Done."}]},{"timestamps":[{"ts":1365720314000,"body":"@egilburg I agree that is easier to read.  Changed, per your suggestion.  Thanks."},{"ts":1365732082000,"body":"@jholton First of all congratulations on making first PR. That's awesome.\r\n\r\nCan you add a test for your case ? You can look at this test file to see how to add index, remove index and test your stuff. https://github.com/rails/rails/blob/master/activerecord/test/cases/migration_test.rb\r\n\r\nIf you have any question do post your issue here. Thank you. "},{"ts":1365738739000,"body":"@neerajdotname I have added a test.  It passes with my fix.  It errors without it.\r\nLet me know if it's poorly written, or out of place.  Do I need to remove the index after the assertion?  (I'm more used to rspec).  Thanks.\r\n\r\n"},{"ts":1366045223000,"body":"@jholton please remove the added index in `ensure` block like the way it's done here https://github.com/jholton/rails/blob/fab8f204b64bbb32dcd89efca1b1b4e7f4fb3f72/activerecord/test/cases/autosave_association_test.rb#L1178 . Thanks. "},{"ts":1366046367000,"body":"@neerajdotname Change has been made.  "},{"ts":1366055193000,"body":"Looks good to me. Forgot to ask you to add changelog. And Can you make the commit message more descriptive. Commit messages by @jonleighton are very descriptive . I tried to mimick that  in https://github.com/rails/rails/pull/10211 . \r\n\r\nhttps://github.com/neerajdotname/rails/commit/98e883cf5f3d3890fdb0e88e5c18697a82e71134\r\n"},{"ts":1366059011000,"body":"Done!  Let me know if anything else needs attention.\r\n\r\nAlso, what is the process for submitting the same fix for previous version (3.2 stable), or should I not bother?\r\nJust submit another pull request?  \r\n "},{"ts":1366063787000,"body":"@jholton looks like your need to rebase your code. First lets see what the core team has to say about the PR. If merged into master then will discuss backporting."},{"ts":1366073566000,"body":"Rebase completed."},{"ts":1366082714000,"body":"/cc @jonleighton @rafaelfranca can you take a look? This is first PR from the author so let's have an up or down verdict. :-)"},{"ts":1366377711000,"body":"I am happy to merge this, but it needs a rebase first. Thanks."},{"ts":1366383123000,"body":"@jonleighton rebase complete."}]},{"timestamps":[{"ts":1360462028000,"body":"why did u delete `value.respond_to?(:length)` ? :O "},{"ts":1360484305000,"body":"because it is wrong read pr description"},{"ts":1360680596000,"body":"`validates_length_of` can also be used to validate size of associations and arrays, so we cannot change this behaviour without adding a deprecation and a proper mechanism to validate those.\r\n\r\nIn my opinion, this is more of a typecast issue. When you assign an array to title, it should be typecast to string. This way, the validator would already receive the properly typecast value. This conversion could also happen when accessing the `params` value, ensure `params[:title]` returns only strings unless explicitly said.\r\n\r\nThat said, I agree there is space for improvements here but it must be solved elsewhere, not in the validator."},{"ts":1360682449000,"body":"> can also be used to validate size of associations and arrays\r\n\r\nbut, why? how association or array can be a value for string column. Are you talking about NoSQL?\r\nAnd validator is supposed to *validate* strings. If i need to validate/typecast them before validator - this is wrong behavior. "},{"ts":1360683949000,"body":"This is no good for my use case. I have a tendency to validates_length_of Hash before saving to a postgres hstore column if I'm sure there is a fixed length. "},{"ts":1360728042000,"body":"> And validator is supposed to validate strings.\r\n\r\nNo, it is not. For example, if you have a model Recipe and you are using ingredients as nested attributes, you can do something like:\r\n\r\n    validates :ingredients, length: 1..10\r\n\r\nSomeone also mentioned an example with hstore.\r\n\r\n>  If i need to validate/typecast them before validator - this is wrong behavior.\r\n\r\nYou are not supposed to typecast because of the validator, you are supposed to typecast simply because it is the correct thing to do. In my opinion, the fact you can do this is wrong:\r\n\r\n    post = Post.new\r\n    post.title = [1,2,3]\r\n    post.title #=> [1,2,3]\r\n\r\nYou should not get an array back. It should be typecast to a string once you set it (or raise an exception)."},{"ts":1360730979000,"body":"I can't disagree that AR needs more \"typecasting\" under the hood. Let's leave it as a cool \"feature\" and wait for stringifier of strong_params."}]},{"timestamps":[]},{"timestamps":[{"ts":1374411893000,"body":":+1: "},{"ts":1374412626000,"body":"Done! & also removed space from `logger.debug { \"Person attibutes hash: #{@person.attributes.inspect}\" }` so it fits in one line as I noticed it was failing off to next line. now code snippet fits in exactly one line"},{"ts":1374448744000,"body":"Nice! Also, TIL `logger.debug { \"ZOMG I CAN USE BLOCKS\" }`, thanks!"}]},{"timestamps":[{"ts":1371365016000,"body":"@rafaelfranca Ok, thanks for the heads up, I've removed the deprecation warning. "},{"ts":1371414187000,"body":"@josevalim I've moved the validation check to happen at the ``intialize!`` method. "},{"ts":1371423364000,"body":"@josevalim Actually, I don't think the check for the secret token makes sense at initialization. This is because there are times when the application is initialization without the secret token (like for tests). \r\n\r\nAlso, it doesn't incur a performance penalty inside of the ``env_config`` method because the result is cached. "},{"ts":1371519123000,"body":"@wangjohn I've reverted https://github.com/rails/rails/commit/fa4cf9407c0a64d7c0a86da735b82aafb37f6866 because some tests are failing.\r\nCheck `ruby -I lib:test test/application/asset_debugging_test.rb`"},{"ts":1371538264000,"body":"> Also, it doesn't incur a performance penalty inside of the env_config method because the result is cached.\r\n\r\nPerfect. Thanks @wangjohn!"}]},{"timestamps":[{"ts":1371731792000,"body":"I see those all over the rails code base, but the `private` invocations apply only to instance methods. To make a class method really private, you have to call `private` in the context of the singleton class:\r\n\r\n```ruby\r\nclass PredicateBuilder\r\n  class << self\r\n    def public_class_method; end\r\n\r\n    private\r\n      def private_class_method; end\r\n  end\r\nend\r\n```\r\n\r\nBut, that's not that much of a big deal, just an interesting fact to know. I don't know if you should bother with this class as it is internally marked as \"private\" because of the `:nodoc:`  comment.\r\n"},{"ts":1371734022000,"body":"@gsamokovarov is right. Another way to me this method private if we really need is to use [`private_class_method`](http://ruby-doc.org/core-1.9.3/Module.html#method-i-private_class_method)"},{"ts":1371735005000,"body":"Closing this PR. Thanks for the feedback @gsamokovarov  and @rafaelfranca ."}]},{"timestamps":[{"ts":1358962209000,"body":"`ObjectSpace` is super mega slow; can we see some benchmarks?"},{"ts":1358968323000,"body":"@wangjohn: using `ObjectSpace` in production code is a huge anti-pattern, as its implementation requires a Ruby VM to do a full GC/traverse all of the memory, this is mightily expensive. This cannot go in."},{"ts":1358998932000,"body":"I removed the use of ObjectSpace.each_object and instead am using ObjectSpace._id2ref () so that I'm no longer iterating over all objects, but just pulling the objects out with object_ids which are associated with the transaction. I check if these objects have been garbage collected using a uuid in AR.\r\n\r\nI've made a particularly simple benchmark and tested AR speed inside of transactions with the speed using the current implementation in ruby 1.9.3: https://gist.github.com/4617394. It seems that speed of both are comparable, but I'd like to hear your thoughts on different benchmarks because I don't think I necessarily choose a good one."},{"ts":1359000199000,"body":"Nice work. Ruby 1.9.3 includes includes a GC profiler (and see https://github.com/tmm1/perftools.rb and https://github.com/rdp/ruby-prof) so you can profile memory usage, object allocation, etc, rather than just timings. That'll demonstrate that records can be garbage collected during a long txn."},{"ts":1359008823000,"body":"I think some parts of ObjectSpace are disabled by default in jruby because of the performance impact so this might be good to benchmark against jruby as well."},{"ts":1359026778000,"body":"I don't think `_id2ref` improves on anything as compared to `each_object` on modern Ruby VMs with moving generational GCs :(.\r\n\r\n@brixen @dbussink @headius am I right?"},{"ts":1359026949000,"body":"ObjectSpace#_id2ref suffers from the exact same problem (at least on Rubinius it does). In Rubinius it actually does a full GC traversal for each call to _id2ref, which can take a really long time. Basically this means this has to traverse all living objects to find the correct object."},{"ts":1359028803000,"body":"@dbussink any suggestions on how to solve this?"},{"ts":1359029845000,"body":"I don't completely understand the problem, but can't weakref's be used to solve this?"},{"ts":1359038717000,"body":"WeakRefs aren't being used because they're not available on all versions of ruby. It seems like using ObjectSpace is highly dependent on environment then. I'll try to come up with a better solution to this."},{"ts":1359040014000,"body":"Which version of Ruby doesn't provide WeakRef? It's available on MRI, Rubinius and JRuby. Are there any other versions that this code tries to target?"},{"ts":1359043573000,"body":"The stdlib weakref doesn't work since a GCed object's id may be reused.\r\n\r\nIn any case, the discussion is premature. We don't actually want records enlisted in a transaction to be GCed, since we need to run commit/rollback callbacks on them.\r\n\r\nClosing this PR pending a new approach. Talked to @wangjohn about selectively enlisting objects in the txn only if they actually have commit/rollback hooks."},{"ts":1359043709000,"body":"@jeremy BTW, using ObjectSpace._id2ref also suffers from the objects being reused with the same id, so you can get a random object there back too."},{"ts":1359043985000,"body":"@dbussink Yes—hence the additional uuid to ensure the weakly-referenced object is the same."},{"ts":1359044036000,"body":"Recapping a bit, but...\r\n\r\n_id2ref is no good because it's not universally supported, or it's implemented in a slow way (usually out of necessity), and it's actually considered internal to MRI by matz. As @dbussink points out, it also doesn't guarantee anything about which object you have, which is why MRI WeakRef doesn't work.\r\n\r\nMRI WeakRef doesn't work because it's implemented on _id2ref up until Ruby 2.0.0, at which point it is implemented using an internal GC-aware reference queue. If that version could be backported into my \"weakling\" gem, you'd have a safe WeakRef across impls. WeakRef on Rubinius and JRuby are already (and have always been) implemented correctly.\r\n\r\nHowever...WeakRef is no solution here either. WeakRefs are not guaranteed to collect in any specific amount of time, and using them for resource cleanup (as here) will *always* run the risk of eating up resources faster than they can be reclaimed. In practice, they do run...but under load, or if objects get promoted to older generations on JRuby and Rubinius, it may take a long time.\r\n\r\nIf you really want to manage a limited resource, you really should box their use inside a begin/ensure somewhere and clean them up actively rather than lazily."}]},{"timestamps":[{"ts":1367707461000,"body":"Thank you"}]},{"timestamps":[{"ts":1361304722000,"body":"This is the same test as https://github.com/acapilleri/rails/blob/40c1ee8b7d4b316638870210e4c75bf9e76e5ed3/activemodel/test/cases/errors_test.rb#L258 . Seem fine."}]},{"timestamps":[{"ts":1374274640000,"body":":+1:"},{"ts":1374275708000,"body":"Why not generate this route in users' routes.rb file? It makes it more obvious for users that this route exists with a new rails app, and makes it easier to alter or remove if the user so desires."},{"ts":1374302287000,"body":"@scneems https://github.com/rails/rails/blob/master/railties/lib/rails/templates/rails/welcome/index.html.erb#L230 \r\nThis line should be changed also. Because now it is in all environments. Not only in development mode."},{"ts":1374350270000,"body":"@prathamesh-sonpatki fixed the copy on that page. Good catch."},{"ts":1374387311000,"body":":smile: "},{"ts":1374436516000,"body":"Question:\r\nWhat if the `WelcomeController` stops being an internal thing & we make it a normal controller which resides in `app/controllers` dir, along with `ApplicationController`, so its completely transparent to the user.\r\n\r\nIn other words, \r\nWhat advantage do we gain out of keeping the controller inside `railties`. is it just the convenience of not having to delete/rename controller or are there other reasons to keep the index page private? "},{"ts":1374436882000,"body":"That was the original idea, it was shot down in favor of an internal\r\ncontroller/route combo.\r\n\r\nOn Sunday, July 21, 2013, Gaurish Sharma wrote:\r\n\r\n> Question:\r\n> What if the WelcomeController stops being an internal thing & we make it\r\n> a normal controller which resides in app/controllers dir, along with\r\n> ApplicationController, so its completely transparent to the user.\r\n>\r\n> In other words,\r\n> What advantage do we gain out of keeping the controller inside railties.\r\n> is it just the convenience of not having to delete/rename controller or are\r\n> there other reasons to keep the index page private?\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/11514#issuecomment-21315814>\r\n> .\r\n>"},{"ts":1374440021000,"body":"Read the entire [discussion](https://github.com/rails/rails/pull/7771). so it seems the main point of keeping this internal is skip to generate bunch of files which only have to be deleted; everytime you start an new rails project which makes sense. However, since its the proficient rubyists we are talking about -- I personally think their needs would have been better served by a [custom application template](http://edgeguides.rubyonrails.org/rails_application_templates.html) but since that PR(#8468) has already been merged & shipped. lets accept that this is the direction we would be going -- internal controllers.\r\n\r\nComing back to topic,\r\nI was hit by this Dev Vs Prod mismatch today(#11502) & ended up wasting an hour debugging.  if Development & Pro Env are identical, such silly issues can be prevented in future. Hence, I too was thinking submitting a PR on this. you happen to beat me to it.  \r\n\r\nThank you for doing the work, so I didn't have to :ghost:  Just kidding, hope you won't mind :wink:\r\n"},{"ts":1374450788000,"body":"@schneems could you add a test?"},{"ts":1374485900000,"body":"@drogus : Still the case [here](https://github.com/schneems/rails/blob/b0caea29c2da9f4c8bb958019813482da297067d/railties/test/application/routing_test.rb#L63) no?"},{"ts":1374488696000,"body":"@robin850 sorry, I totally missed that it's a test for production"},{"ts":1374489126000,"body":"@drogus : No problem! Glad to help. By the way, thanks for merging! :-) "},{"ts":1374498472000,"body":"I'm :-1: about this. If we are including the info page on production we are exposing information that should not be exposed."},{"ts":1374498614000,"body":"Also, due some mistake, if someone remove the root route in a production environment all users will see this page leaking a lot of important information like Rails version and Ruby patch level. Without this code the user will see the a 404 page, what is expected."},{"ts":1374498701000,"body":"I don't feel like exposing the welcome page on production (even though it could be overridden by a new root page added by the developer) is a really good thing."},{"ts":1374498886000,"body":"\r\n> Having a default index page serves as an excellent litmus test for a passed deploy on default apps, and it is very unexpected to have a page work locally, but not on production.\r\n\r\nAltough I never saw such usage of Rails index page I get why some people might try something like that, so maybe to address this Rails should render a minimal template for production env, instead of exposing that amount of information. Maybe just the \"Welcome aboard, You’re riding Ruby on Rails!\" + the Rails logo should be enough for this."},{"ts":1374499042000,"body":"Agreed, showing the full index page in production is not a good idea. Also keep in mind that some apps (APIs) may not even have an index page."},{"ts":1374499048000,"body":"Which critical information will get exposed?\r\n\r\n\r\n```ruby\r\n if Rails.env.development?\r\n          app.routes.append do\r\n            get '/rails/info/properties' => \"rails/info#properties\"\r\n            get '/rails/info/routes' => \"rails/info#routes\"\r\n            get '/rails/info' => \"rails/info#index\"\r\n          end\r\n        end\r\n```\r\n\r\n\r\nas you may notice, the critical information such ruby version etc will only\r\nbe available in `/rails/info/` routes which are only defined in\r\ndevelopment.\r\n\r\nthis static page exists in all rails version < 4. And gets displayed both production & development Envs even today."},{"ts":1374499091000,"body":"Another solution to this problem is to add a note to the regular index on development showing it is only available in development."},{"ts":1374499301000,"body":"I prefer to keep this page only on development, with 404 on production."},{"ts":1374499530000,"body":">Another solution to this problem is to add a note to the regular index on development showing it is only available in development.\r\n\r\nYes, we can add a simple conditional, `unless Rails.env.development`  & then only render [this line](https://github.com/rails/rails/blob/master/railties/lib/rails/templates/rails/welcome/index.html.erb#L214). Else it would a normal static page with no info"},{"ts":1374499727000,"body":"I still don't see any strong reason to render this page on production."},{"ts":1374504171000,"body":"Yup, I tend to lean towards 404 in production as well."},{"ts":1374505793000,"body":"I agree on the argument that not removing this page on production may expose information, but then I really think that this is a step backwards from having `index.html`.\r\n\r\nI will revert this thing, but please think what are we actually gaining by the original page - a bit more info on the index page in exchange for a lot of confusion. If you still think that this is a good direction, I won't argue, but please think about it for a moment."},{"ts":1374508200000,"body":"For a reference, reverted with 73bbf54"},{"ts":1374510212000,"body":"On security: right now serving this page in production gives away that we are running rails (though default error pages also do) and it may hint as to the version of rails since you could do a diff of the page versus known default rails index pages. Any of the app specific info is behind other urls that are not available in production.\r\n\r\nThe original intent of moving away from static `index.html` is to avoid confusion for new comers who will add a root but don't know you need to also delete a file to make that work. And for seasoned devs it removes one step from a \"typical\" rails app.\r\n\r\nUnfortunately it took away the quick `rails new ; deploy` check some people and quite a few tutorials are using.\r\n\r\nAn optimal solution will minimize confusion around deleting any pages, provide getting started information for new developers on first `rails new`, and minimize differences between dev and prod behavior. All of this without exposing any sensitive data. This PR was my attempt at addressing all of those points, I'm still open to alternative implementations. What are some other options for achieving all of these goals? \r\n"},{"ts":1374511817000,"body":"There are a some of differences between dev and prod behavior. For example, assets are not precompiled by default on production and production environment use eager loading of constants.\r\n\r\nI don't see any problem to have these differences, and the index page returning 404 is fine to me too.\r\n\r\nCan not these tutorials being updated to actually tell the people what is going on with the information page? Doing this I think will be more useful since can be a link to tell for the users that Rails, by convention, have diferrent behaviors depending on the environment."}]},{"timestamps":[{"ts":1356531562000,"body":"@rafaelfranca @carlosantoniodasilva could you review this please?"},{"ts":1356532892000,"body":"I'm not sure if quote all the columns is a good idea. This will make the yaml file more verbose and it is not close of the format the ruby community use. Maybe is better to only quote the reserved words.\r\n\r\nAbout the railties tests, they are asserting the whitespaces too. If we parse the content and assert it we will loose the whitespaces assetions what can cause some regressions."},{"ts":1356533254000,"body":"@rafaelfranca thanks. \r\n\r\nI'll modify the tests to verify the file contents and the parsed result. Is there a easy way to determine if a something is a reserved YAML keyword? I think adding a list with keywords is too error-prone."},{"ts":1356533586000,"body":"I think the only words are the booleans, and the only good way will use a list."}]},{"timestamps":[]},{"timestamps":[{"ts":1376328644000,"body":" :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[{"ts":1366207534000,"body":"More descriptive error messages are almost always better, :+1:"}]},{"timestamps":[{"ts":1375086445000,"body":"@senny done!"},{"ts":1375089145000,"body":"@senny Ah. You said it in your first comment itself. Sorry i missed it :)"}]},{"timestamps":[{"ts":1371660037000,"body":"@rafaelfranca @neerajdotname can you take a look?"},{"ts":1371793630000,"body":"Looks good to me, thanks!"}]},{"timestamps":[{"ts":1362776712000,"body":"This change doesn't need a CHANGELOG entry, could you remove?\r\n\r\nAlso would be good to have a test case"},{"ts":1362777882000,"body":"Would I put that in /test/cases/adapter_test.rb? Seems like the right place, but I wasn't sure if there's already a test for enable_extension somewhere else. Sorry, I'm new to this."},{"ts":1362778751000,"body":"We don't have any test of this. I'm thinking since this will change the global state of the database is better to not add a test.\r\n\r\nJust need to remove the CHANGELOG entry"},{"ts":1362788659000,"body":"Done."},{"ts":1362789806000,"body":"Please squash your commits "},{"ts":1362847395000,"body":"Squashed."}]},{"timestamps":[{"ts":1371649235000,"body":"Wait, I am slightly confused. Why are we splatting the hash?"},{"ts":1371649486000,"body":"@josevalim The super's initializer might not have an argument.\r\n\r\nSo, if we call `super(params)` we get:\r\n\r\n```shell\r\n# Running tests:\r\n\r\n......E......\r\n\r\nFinished tests in 0.017178s, 756.7819 tests/s, 2037.4898 assertions/s.\r\n\r\n  1) Error:\r\nModelTest#test_mixin_when_no_ancestors:\r\nArgumentError: wrong number of arguments (1 for 0)\r\n    /Users/fredwu/Projects/ruby/rails/activemodel/lib/active_model/model.rb:83:in `initialize'\r\n    /Users/fredwu/Projects/ruby/rails/activemodel/lib/active_model/model.rb:83:in `initialize'\r\n    test/cases/model_test.rb:63:in `new'\r\n    test/cases/model_test.rb:63:in `test_mixin_when_no_ancestors'\r\n\r\n13 tests, 35 assertions, 0 failures, 1 errors, 0 skips\r\n```"},{"ts":1371650193000,"body":"Just a note, we need to merge this into 4-0-0 too since I have pushed the previous fix there too."},{"ts":1371650708000,"body":"For 4-0-0: #11012"},{"ts":1371650873000,"body":"Closed in favor of #11010. We will backport for all the branches we need when #11010 is merged"}]},{"timestamps":[{"ts":1373372658000,"body":"@rafaelfranca Thanks for the comment, I've left ``argv`` as ``attribute_reader``. "}]},{"timestamps":[]},{"timestamps":[{"ts":1358364238000,"body":"@rafaelfranca @steveklabnik could you review this?"},{"ts":1358365466000,"body":"I think it is fine the staging, but better to call @fxn "},{"ts":1358377458000,"body":"I'd use lowercase for interceptor, but can edit later, let's merge, thanks! :heart:"},{"ts":1358381067000,"body":":+1:"}]},{"timestamps":[{"ts":1377808823000,"body":"Please add `[ci skip]` to commit message."},{"ts":1377809333000,"body":"Sorry about that, done"}]},{"timestamps":[{"ts":1364225322000,"body":"/cc @josevalim @fxn"},{"ts":1364235020000,"body":"Could you point where in the code your found this information? I searched and didn't find."},{"ts":1364259982000,"body":"I got to know about it from [Railscasts #269](http://railscasts.com/episodes/269-template-inheritance?view=asciicast). The partial template path to be resolved is set [at this method](https://github.com/rails/rails/blob/master/actionpack/lib/abstract_controller/view_paths.rb#L33).\r\n\r\nPrecisely saying, the view path prefixes are pushed tracing up controllers' inheritance tree.\r\n"},{"ts":1364306530000,"body":"So this patch is twofold: document that due to template inheritance the `application` directory is checked if exists, and implicitly push for this idiom as blessed way to share partials.\r\n\r\nIn principle I like the proposal, but since we are touching the generated skeleton and blessed way to organise these kind partials, I'd like also to know what @dhh thinks."},{"ts":1364308769000,"body":"I don't recall why we're checking the application directory if it exists, but I can't think of a good reason to do it now. It's just going to turn into a junk drawer. I'd rather remove this check in some version. Definitely not in favor of adding app/views/application to the skeleton by default."},{"ts":1364308978000,"body":"Ah, I see. It's a side-effect from this reasonable case: EmployeesController < PeopleController, which will look first for employees/show, then fall back to look for people/show. It was never intended to fall all the way back to look for application/show. That's an unintended side-effect."},{"ts":1364309034000,"body":"Yes, I thought the same"},{"ts":1364309115000,"body":"Now that we've confirmed what @dhh thinks about the issue, I agree with him; it should be removed later."},{"ts":1364309165000,"body":"Excellent!"}]},{"timestamps":[{"ts":1364832797000,"body":"I don't think we should revert that commit. What we need is change the bahavior to fallback to the default format"},{"ts":1364832847000,"body":"It's gonna need a test case to prove the point :)"},{"ts":1364833155000,"body":"@rafaelfranca i didn't revert the commit, just the behavior. Sorry for the confusion.\r\n\r\n@carlosantoniodasilva I'm aware of that. But, to be honest, I couldn't find the place to put the test in. :) Any ideas?"},{"ts":1364833177000,"body":"Oops. I saw it is not reverting the commit. So :+1: for what @carlosantoniodasilva said"},{"ts":1365578421000,"body":"Merged in d50df2f116bfb1f3e897746fb345a5e945650e31"}]},{"timestamps":[]},{"timestamps":[{"ts":1362193493000,"body":"+1"},{"ts":1362309309000,"body":":+1: for the functionality, I'm not the best to make the call on the API. I like the idea of the :using syntax that @jeremy mentioned in #6101. Could you give that change a shot and ping when done?"},{"ts":1362683250000,"body":":+1: for `:using`. I see no need to introduce a different name for the same thing."},{"ts":1362693262000,"body":"Yes. `:using` seems better"},{"ts":1363622711000,"body":"@techpeace would you mind updating this PR to use the `:using` key, and rebase it against `master`? Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1371058097000,"body":"Squashed all the commits into one. @tenderlove , please merge the branch whenever you have the time. If there is anything else that needs to be done, please let us know."},{"ts":1371090945000,"body":"Just changed the syntax to use the new hash function. anything else left before merging?"}]},{"timestamps":[{"ts":1363636745000,"body":"Seems legit."}]},{"timestamps":[]},{"timestamps":[{"ts":1356801002000,"body":"@vijaydev  Updated with keys usage and 'so that the YAML parser'"},{"ts":1356804924000,"body":"squash the commits into one please"},{"ts":1356813263000,"body":"@vijaydev finally. was able to squash. and learnt quite a lot of git in the process!"}]},{"timestamps":[{"ts":1357102585000,"body":"@amatsuda :+1: we don't need that wrapper anymore"},{"ts":1357102711000,"body":"This needs a CHANGELOG entry :smile: "},{"ts":1357129386000,"body":"Yes, this needs a CHANGELOG entry"},{"ts":1357163427000,"body":"@frodsan @rafaelfranca @guilleiguaran Added."},{"ts":1357163732000,"body":"@amatsuda it was merged. I'm not sure if @guilleiguaran added this changelog entry. Another thing maybe we will need a deprecation since the people can still rescue this exception."},{"ts":1357164884000,"body":"@rafaelfranca Yep. I firstly thought so, but in this case it's OK to just remove because\r\n* it's namespaced as ActiveSupport internal\r\n* and there's no code using this class outside of Rails, so far as I grepped\r\n\r\nOTOH there's another useless error class named `MissingSourceFile` https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/load_error.rb#L25\r\nI actually pushed another commit removing this https://github.com/amatsuda/rails/commit/4d0114eb9d4f06f461e786a44c5923e6e7dd39c9 (I'll make another PR for this soon, if you think it's worthy), but in this case I left the alias because it's declared as a top-level constant."},{"ts":1357165217000,"body":"@amatsuda just applied your commit with the changelog entry"}]},{"timestamps":[{"ts":1363593564000,"body":"@carlosantoniodasilva @rafaelfranca can you take a look?"}]},{"timestamps":[{"ts":1375001305000,"body":"@guilleiguaran thanks  :green_heart: "}]},{"timestamps":[{"ts":1375478618000,"body":"Looks fine to me. \r\n\r\ncc @guilleiguaran "}]},{"timestamps":[]},{"timestamps":[{"ts":1372688692000,"body":"It is not for me http://guides.rubyonrails.org/4_0_release_notes.html#major-features"},{"ts":1372710483000,"body":"The image works on the edge guides as well (http://edgeguides.rubyonrails.org/4_0_release_notes.html) it's also linked to show a bigger version.\r\n\r\n@grepruby can you provide more information what exactly is not working? Maybe a screenshot?"},{"ts":1372733296000,"body":"I think this is not an issue, maybe he was looking the file on GitHub."},{"ts":1372743649000,"body":"I'm closing this for now. @grepruby please report back if the guide websites don't display the image."},{"ts":1372745525000,"body":"@senny , Please take a look into https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md You will see the image is missing and giving 404 "},{"ts":1372747162000,"body":"@grepruby the guides are written for:\r\n\r\n* http://guides.rubyonrails.org/\r\n* http://edgeguides.rubyonrails.org/\r\n\r\nIf you are browsing them on GitHub there are certain links that won't work."}]},{"timestamps":[{"ts":1358188010000,"body":"Looks good to me. @rafaelfranca anything that was left out?"},{"ts":1358188591000,"body":":shipit:\n\nDon't we need to change the changelog?"},{"ts":1358190724000,"body":"Ah, right. It will say the wrong value now.\r\n\r\n@colinbm mind amending your commit and changing your previous CHANGELOG entry?"},{"ts":1358191147000,"body":"Ah of course - amended."},{"ts":1358194727000,"body":":metal: thank you so much! :heart: :sparkling_heart: "},{"ts":1358195966000,"body":"You're welcome :) Last question - would it be reasonable to open a pull request to apply the change to 3-2-stable or should this be just for 4?"},{"ts":1358196426000,"body":"Well, this really rides the fine line between a bugfix and an enhancement. I think I'd consider it an enhancement. @rafaelfranca ?"},{"ts":1358196526000,"body":"Yes, I would not backport. I consider it as an enhancement"},{"ts":1358197572000,"body":"Righto. Will attempt to add it to my local app. Thanks both!"}]},{"timestamps":[]},{"timestamps":[{"ts":1364440439000,"body":":+1: for the `algorithm` on the dump"},{"ts":1364442188000,"body":"Rad.  I'll make an algorithm schema dump pull request tomorrow night."}]},{"timestamps":[{"ts":1372499342000,"body":"Thank you! In the future, please add `[ci skip]` to your commit messages so we're nice to Travis CI :)"},{"ts":1372499422000,"body":"F***, I'm sorry, I __always__ forgot it! I'm silly. I will try to put it the next time. ;) "},{"ts":1372499474000,"body":"It's okay! I forget it a lot too. Now that Travis runs PRs it's more important."},{"ts":1372500033000,"body":"Yes, I found a [little trick](https://gist.github.com/robin850/5890596) not to forget about it! :smile: "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1359039771000,"body":"Thank you, but we don't usually add random methods to Active Support unless they bring real value for the framework itself, and for the majority of users. See discussion in #9020 for example, thanks!"}]},{"timestamps":[{"ts":1357648180000,"body":"@rubys Thanks!"},{"ts":1357648267000,"body":"Is the parameter as a hash supported since which Rack version? We may need to enforce the rack version in the actionpack gemspec."},{"ts":1357648518000,"body":"@josevalim checking."},{"ts":1357648597000,"body":"@josevalim apparently [since 1.4.2](https://github.com/rack/rack/blob/1.4.2/lib/rack/file.rb#L24), [1.4.1 doesn't accept a hash](https://github.com/rack/rack/blob/1.4.1/lib/rack/file.rb#L24)."},{"ts":1357648650000,"body":"I think I can lock rack in 1.4.3 for now? (it's probably going to be locked at 1.5 later anyway?)"},{"ts":1357651558000,"body":"Done in 4f002a1df3ee37349e278ba64ef29602ee637ac5."},{"ts":1357931359000,"body":"I'm getting the same error when using Webrick (Rails 4 Vanilla app). I switched to Thin in development and the error goes away."},{"ts":1357941049000,"body":"Reproduced: thanks!  Fixed by https://github.com/rails/rails/pull/8907"},{"ts":1357950638000,"body":"This fix isn't in Rails 3.2.11 right?"},{"ts":1357953735000,"body":"No, this fix is not in 3.2.11: https://github.com/rails/rails/blob/v3.2.11/actionpack/lib/action_dispatch/middleware/static.rb#L8"},{"ts":1357955238000,"body":"Thanks"},{"ts":1360664950000,"body":"Are these fixes in 3.2.12? I've just upgraded and now am getting the \"Rack::File headers parameter replaces cache_control after Rack 1.5\" warning."},{"ts":1360677670000,"body":"No they aren't, 3.2.12 was a security release and therefore didn't include\r\nfixes from 3-2-stable branch. You can either bundle from this branch or\r\nwait for a new release following the normal process. Or you can just ignore\r\nthe warning for now.\r\n\r\n\r\nOn Tue, Feb 12, 2013 at 8:29 AM, Luca Spiller <notifications@github.com>wrote:\r\n\r\n> Are these fixes in 3.2.12? I've just upgraded and now am getting the\r\n> \"Rack::File headers parameter replaces cache_control after Rack 1.5\"\r\n> warning.\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8812#issuecomment-13426495>.\r\n>\r\n>\r\n\r\n\r\n\r\n-- \r\nAt.\r\nCarlos Antonio"}]},{"timestamps":[{"ts":1372537233000,"body":"/cc @senny @rafaelfranca"},{"ts":1372588584000,"body":"Thanks @senny. I updated PR with changes based on your feedback."}]},{"timestamps":[]},{"timestamps":[{"ts":1365990638000,"body":":+1:"},{"ts":1366011275000,"body":"looks good.\r\n\r\n/ccc @carlosantoniodasilva "},{"ts":1366029934000,"body":"Thanks!"}]},{"timestamps":[{"ts":1368383246000,"body":"Could you add a CHANGELOG entry?"},{"ts":1368663898000,"body":"@rafaelfranca I have updated changelog, also I fixed the unit test. I have tested it with my application, and this should have fixed the issue."}]},{"timestamps":[{"ts":1374495920000,"body":"Actually, looks like this was fixed by: ee4c0a511a40530a"}]},{"timestamps":[]},{"timestamps":[{"ts":1358035426000,"body":"/cc @rafaelfranca \r\n\r\nlooks good to me."},{"ts":1358039188000,"body":"Renamed the test accordingly and squashed my commits into one. Hope this works."},{"ts":1358126103000,"body":"Thank you guys"},{"ts":1358127273000,"body":"Thank you!"}]},{"timestamps":[{"ts":1372735223000,"body":":bomb:"}]},{"timestamps":[{"ts":1357283510000,"body":":+1: "},{"ts":1357430908000,"body":"/cc @spastorino @josevalim "},{"ts":1357451673000,"body":"Assets URLs within the app should respect `SCRIPT_NAME` without having to set `relative_url_root`, so :-1: on this change. However, asset URLs within a mounted engine should use the *app's* `SCRIPT_NAME`, but that info is not available to the engine (yet).\r\n\r\nHow about exposing a new Rack env var for the root asset path? The app (or sprockets?) would set the root asset path based on `SCRIPT_NAME` and the engine wouldn't modify it."},{"ts":1357452015000,"body":"@jeremy That sounds like a great idea!"},{"ts":1357452533000,"body":"I'm good with whatever.  Just wanted to bring it to light and try to help out -- whatever the end solution is. :)"},{"ts":1357482167000,"body":"Agree with @jeremy script_name shouldn't be removed from there"},{"ts":1357492974000,"body":"How should I proceed?  I'm happy to open an issue and close this request.  To me it was more about getting the issue I opened in rails/sprocket-rails clarified than getting this specific fix in."},{"ts":1359089795000,"body":"@jejacks0n thanks, looks like a patch very similar to this was applied already and the error should be fixed now!!!"},{"ts":1359089871000,"body":"Awesome!  Thanks for the follow up. =)"},{"ts":1359841051000,"body":"For reference 445f14e97553de552745de26ebd5e49bc5c82f4e"},{"ts":1359854822000,"body":"Isn't that commit the same as this one was? =)"}]},{"timestamps":[{"ts":1361441740000,"body":"@rafaelfranca @carlosantoniodasilva could you take a look?"},{"ts":1361446810000,"body":":+1: Thanks."}]},{"timestamps":[{"ts":1368821620000,"body":"Nice."},{"ts":1368830378000,"body":"Thanks @jcoglan!\r\n\r\nThis is a major change from how the method currently works though and calling `create` can generate side effects which would be surprising given the function name (i.e. why it is attempting to create before it finds?). If we are going to have this functionality, I suggest to provide a `create_or_find_by` and document explicitly its use case and advantages over the current approach."},{"ts":1368831366000,"body":"So, I was half-trolling with this, in that I think Rails should encourage you to do the right thing for database integrity (i.e. use unique indexes rather than client-side query-then-insert), but I don't know if this is the right way to do it. I'm aware it entirely breaks back-compat and won't work unless you've indexed your DB correctly. Maybe the right thing to do is invent a new API and discourage use of this, like how the docs for `validates_uniqueness_of` tell you not to use it for concurrent requests.\r\n\r\nSo having said that I'd like to discuss what we can do to avoid DB consistency problems when people have > 1 server."},{"ts":1371408009000,"body":":+1: database constraints and encouraging their use. It's the number 1 criticism I hear from our postgres team about AR. What if we have the uniqueness validator take some kind of flag `db_constraint:  true` and all it does is check for a unique index and raise an error if not present. As @jcoglan mentioned, don't think this can go into AR as is for now. "},{"ts":1371417272000,"body":"On one hand, database constraints are not _required_, therefore Active Record cannot assume they are set.\r\n\r\nOn the other hand, `find_or_create` works with any set of attributes, not only supposedly unique attributes.\r\n\r\nThe API in 4.0.0 explains the race condition and how to deal with it given a unique constraint: http://edgeapi.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-find_or_create_by (I personally wrote that one.)\r\n\r\nLet's close this one, can't be merged.\r\n"},{"ts":1371417873000,"body":"Oh, let me add that the proposal has a race condition, since between the exception is raised and the `find` call happens, the record could be deleted."}]},{"timestamps":[{"ts":1373829043000,"body":"This looks good. I'll wait for Travis.\r\n\r\njust for reference, the commit that introduced the scanning was 46ea4442f3abc33d15e03487bae1c80346eab49a"},{"ts":1373829752000,"body":"Thanks for your contribution :yellow_heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1357775124000,"body":"Thank you, but the inflections are considered frozen, meaning they won't accept more changes since even a minor one can break lots of apps. :)"},{"ts":1357775388000,"body":"Sounds logical :)\r\n\r\nThx @carlosantoniodasilva"}]},{"timestamps":[{"ts":1364152768000,"body":"I believe such query should be build as:\r\n\r\n```ruby\r\nPost.joins(author: :organization).where(organizations: { name: 'Acme' })\r\n```\r\n\r\nSo that you don't need to use `authors` to get through the `organizations` table in the where. I think that's been done like that on purpose. /cc @jonleighton "},{"ts":1364239114000,"body":"Looking around a bit, it seems this has been reported a few times previously, and is causing problems for people who expect the nested syntax to work: https://github.com/rails/rails/issues/6718 as an example. The popular library CanCan generates nested conditions, so I imagine there are quite a few apps out there that would rely on this being supported, especially considering it used to work. Although I've been able to find a few mentions of this issue, I haven't found an explanation as to why the behavior was changed. Is there a reason not to support both authors: {organizations: {name: 'Acme'}} AND organizations: {name: 'Acme'}?\r\n\r\nOther issues I've found relating to this:\r\nhttps://github.com/ryanb/cancan/issues/646\r\nhttps://github.com/ryanb/cancan/issues/830\r\nhttps://github.com/rails/rails/issues/9511\r\nhttps://github.com/rails/rails/issues/6718 (mentioned above)\r\n\r\nCheers!\r\n"},{"ts":1365153158000,"body":"This was changed to fix a security issue, therefore it won't be changed back.\r\n\r\nSee https://groups.google.com/forum/?hl=en&fromgroups=#!topic/rubyonrails-security/l4L0TEVAz1k for more details."}]},{"timestamps":[{"ts":1364397686000,"body":"@rafaelfranca  updated"},{"ts":1364399729000,"body":"Right now this change is under the cosmetic category so I prefer to not merge.\r\n\r\n> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted.\r\n\r\nhttp://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#write-your-code\r\n\r\nThank you so much."},{"ts":1364399984000,"body":":+1: "}]},{"timestamps":[{"ts":1371194818000,"body":"I think this is too verbose. I would just add the query below the existing one and annotate it with a comment:\r\n\r\n```ruby\r\nPost.where('id > 10').limit(20).order('id asc').except(:order)\r\n```\r\n\r\nThe SQL that would be executed:\r\n\r\n```ruby\r\nSELECT * FROM posts WHERE id > 10 LIMIT 20\r\n\r\n# original query without `except`\r\nSELECT * FROM posts WHERE id > 10 ORDER BY id asc LIMIT 20\r\n```\r\n\r\nAlso if we are going to change it, I think we should also add it for the example describing `only`."},{"ts":1371195698000,"body":"@senny that sounds cool. I will update it in some time."},{"ts":1371200779000,"body":"@senny updated."},{"ts":1371201381000,"body":"@prathamesh-sonpatki can't you put the two queries and the comment into the same \\`\\`\\`? `#` should be a valid SQL comment."},{"ts":1371203475000,"body":"@senny Done"},{"ts":1371208377000,"body":"thanks :heart: "},{"ts":1371208535000,"body":":smile: "}]},{"timestamps":[{"ts":1376908647000,"body":"Edit: \"using **the** following methods\". Then open with a colon, and move the rest of the paragraph below the listing."},{"ts":1376922295000,"body":"@fxn Moved the description at the bottom of the section after all the names of the methods. This looks better IMO"}]},{"timestamps":[{"ts":1362261863000,"body":"/cc @tenderlove "},{"ts":1362372491000,"body":"I support the idea as I would really like to see such behaviour be automatic (I never understood why parent.children.build, a very commo pattern, doesn't set parent on children without :inverse_of which is a somewhat less known option). That being said, I have some questions about implementation. \r\n\r\nWould this work with `:class_name` option? I'm also concerned that there seems to be no caching, which can cause performance issues with those to_sym and rescue on every association call.\r\n\r\nAlso, if parent has_many children and child belongs_to parent, then when using syntax `parent.children.build`, parent.children is an association object and should know the parent's ruby class and association type. Would it be possible to use this information to deterministically find the parent rather than heuristically? (e.g. try to symbolize keys and rescue if not found)\r\n"},{"ts":1362374267000,"body":"@egilburg Your right, it seems like I should be excluding a bunch of cases when the association, as @jeremy said, has particular options on it. I'll also go ahead and implement some caching because it seems to have a small memory penalty in comparison with running this method multiple times.\r\n\r\nI'm going to make sure that this method isn't called when there are conditions on the association."},{"ts":1362412550000,"body":"I've been poking at a similar patch, but have never gotten it working quite right. Some thoughts:\r\n\r\n* it may be better to check `:foreign_key`, `:primary_key` and `:class_name` instead of relying on the name of the inverse association.\r\n\r\n* there needs to be some way to explicitly opt-out of the guessing. A fairly common Rails idiom is to make passing `false` explicitly turn off default behavior.\r\n\r\n* definitely want to avoid picking an association with `:conditions` or a lambda attached.\r\n"},{"ts":1362543075000,"body":"I've done a bunch of things to improve this PR. First, I've added caching as @egilburg suggested. The results for each reflection are computed once and stored in the ``@automatic_inverse_of`` (the user can also clear this cache using ``remove_automatic_inverse_of!``). \r\n\r\nSecond, I've added the ability for a user to opt out of having the reflection automatically find an inverse, as @al2o3cr  suggested. You can now use the following syntax to opt out of the automatic inverse finding:\r\n\r\n```ruby\r\nhas_many :posts, :automatic_inverse_of => false\r\n```\r\n\r\nThe option only works when you are given an explicit ``false`` value. \r\n\r\nThird, I've limited the method so that that when particular options are specified on an association, the automatic inverse finding will fail. The association options that cause a failure in the automatic inverse finder are specified in:\r\n\r\n```ruby\r\nINVALID_AUTOMATIC_INVERSE_OPTIONS = [:class_name, :conditions, :through, :polymorphic, :foreign_key]\r\n```\r\n\r\nThese options are checked for both the current reflection and the potential inverse. \r\n\r\nAs a side note: a couple of the models in the ActiveRecord tests had to be changed to ``:automatic_inverse_of => false`` because they relied on the models not have inverses."},{"ts":1362635179000,"body":"Looking good :+1:\r\n\r\n/cc @jonleighton @tenderlove "},{"ts":1362673608000,"body":"Wouldn't `:inverse_of => false` be equally descriptive to turn off guessing? Also avoids adding another config option..."},{"ts":1362673915000,"body":"@al2o3cr That's a good point. I don't really see any downside with that approach. I'll go ahead and change it."},{"ts":1362721995000,"body":"Does this work on both sides of a has_many relationship? Refer to issue: https://github.com/rails/rails/issues/8125"},{"ts":1362722687000,"body":"@Retistic No it doesn't, and in fact, it shouldn't because the belongs_to association isn't supposed to be invertible into a has_many. For example, see here in the documentation: https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations.rb#L933. \r\n\r\nEven more clear is inside the belongs_to_association file where ``invertible_for?`` is defined: https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/belongs_to_association.rb#L72-77. The code clearly only works for has_one associations, not has_many.\r\n\r\nI'm not adding any extra functionality to inverse_of, I'm simply making sure that if an inverse can be found easily, then Rails will automatically call that inverse instead of waiting for the user to add it."},{"ts":1362734161000,"body":"That makes sense and this is a great idea.\r\n\r\n+1 for this pull request"},{"ts":1362743203000,"body":"* I'm in favour of this feature in general, but I think it's too late to go in 4.0\r\n* For me `inverse_of: nil` reads a bit better than `inverse_of: false`. We're trying to express \"this association is not the inverse of anything\", i.e. \"the association is the inverse of nothing (`nil`)\".\r\n* I think we'll probably need a global config to turn this off, as people upgrading existing apps are likely to encounter problems and will need an easy escape route.\r\n\r\nI'm up for working on getting this merged, but let's wait til 4-0-stable has been branched."},{"ts":1362758920000,"body":"@jonleighton - the biggest reason I can see to prefer `inverse_of: false` is that it's trickier to distinguish an option explicitly set to `nil` from an option that wasn't passed at all. Using `false` also follows the pattern established by `autosave`, where omitting the option / setting it to `nil` gives the default behavior (for `autosave`, only autosaving on new records) while `false` completely disables the behavior."},{"ts":1362852066000,"body":"@al2o3cr probably we should just check for falsey values, which both `nil` and `false` are, so this probably doesn't need to affect the code. but perhaps the documentation. I still think `inverse_of: nil` makes more sense, and I don't think it needs to mirror `autosave: false` (which makes sense in the context of autosave)."},{"ts":1364513059000,"body":"Letting people know this is the current state of this PR (had to hunt for it in comments) \r\n\r\n> wait til 4-0-stable has been branched.\r\n\r\nAfter 4.0 has been branched we will re-visit this feature. "},{"ts":1367402821000,"body":"This is really exciting, my original intention for ``:inverse_of`` was that it be automatic.  Indeed in the [parental_control plugin](https://github.com/h-lame/parental_control/) the feature was extracted from, it always was automatic.  \r\n\r\nThere's some work in there that might be useful to look at, particularly https://github.com/h-lame/parental_control/blob/master/lib/parental_control.rb#L17 onwards.  It looks like you've got everything covered, but I notice that you explicitly discard associations with the ``class_name`` option set.  It's been a while since I used ``parental_control`` (it's a *plugin* after all) but I'm not sure that it has that constraint, so if you can stomach comparing rails 2.3 plugin code to rails 4.0-ish internals it might be worth comparing the approaches."},{"ts":1367420508000,"body":"@h-lame Thanks for the tip! I looked at the ``parental_control`` code and I think it can indeed be useful. I'm now checking the primary key, and making sure that ``klass.primary_key`` matches the reflection's primary key.\r\n\r\nI think this makes it possible to keep associations with the ``class_name`` option set. "},{"ts":1367985131000,"body":"/cc @jonleighton 4-0-stable is live now, this can be reviewed now :smile:"},{"ts":1370597477000,"body":"I don't think this was ready to be merged. It still has the `:automatic_inverse_of` option, which is unnecessary as discussed above. @wangjohn would you be up for removing that option please?\r\n\r\nAlso it really needs some documentation (changelog entry, edits to docs in `associations.rb`, edits to the associations guide)."},{"ts":1370617233000,"body":"@jonleighton Yep, I'll put this on my bucket list."}]},{"timestamps":[{"ts":1374609450000,"body":"Thank you so much :heart: \r\n\r\n@spastorino all yours, and don't forget to backport"},{"ts":1374609865000,"body":"@rafaelfranca @spastorino Thank you for the feedback! :heart: :purple_heart: :green_heart: "},{"ts":1374613762000,"body":"Seems @spastorino merged it manually"}]},{"timestamps":[{"ts":1375106139000,"body":"Thanks."}]},{"timestamps":[{"ts":1357686017000,"body":"/cc @fxn"},{"ts":1357686034000,"body":"Thanks for your contribution :)"},{"ts":1358200054000,"body":"It is fine for 4.0 in my opinion.\r\n\r\nA couple of remarks:\r\n\r\n* I believe it should also strip `[:space:]`.\r\n* The API and the AS guide should document this detail.\r\n* We need a CHANGELOG entry in Active Support, please follow the existing style.\r\n"},{"ts":1358696929000,"body":"Thanks. I will try to do my best."},{"ts":1358887378000,"body":"I updated the PR. Is it ok now ?"},{"ts":1358889275000,"body":"I think it would be better to say that you improve it to handle *Unicode* whitespace, rather than UTF8 whitespace. Because being whitespace is an abstract property defined by Unicode, it is not specific to an encoding.\r\n\r\nIf you edit that I think it is good to go."},{"ts":1358891274000,"body":"You're totally right. I did the modification. :up: "}]},{"timestamps":[{"ts":1363162366000,"body":"@carlosantoniodasilva  @steveklabnik This should be a quick one."},{"ts":1363231742000,"body":":thumbsup: "}]},{"timestamps":[{"ts":1364647606000,"body":"Personally I like the consistency this PR brings.\r\n\r\nCould you please post test summary before and after the patch to ensure that number of assertions is not lost during this translation? Thank you."},{"ts":1364647887000,"body":"@neerajdotname \r\n\r\n> Personally I like the consistency this PR brings.\r\n\r\nThx! :smile: It was really hard to reach to the tests when I was reading the codes for scoping/default.rb, scoping/named.rb so yea :D \r\n\r\n> Could you please post test summary before and after the patch to ensure that number of assertions is not lost during this translation? Thank you.\r\n\r\nSure thing! :smile:"},{"ts":1364654559000,"body":"@neerajdotname \r\n\r\n## output of `git log`\r\n\r\n![ 2013-03-30 23 14 11](https://f.cloud.github.com/assets/1095842/320472/bff9db9e-9944-11e2-952a-2651668ab2a3.png)\r\n\r\n## Tests result for 022ed6c763d91e1bb032150fc7ec5991141f8119\r\n\r\n`3635 tests, 10369 assertions, 0 failures, 0 errors, 27 skips`\r\n\r\n![ 2013-03-30 23 34 34](https://f.cloud.github.com/assets/1095842/320494/01925322-9947-11e2-8bdc-829f3e3cd630.png)\r\n\r\n## Tests result for 7be9e88\r\n\r\n`3635 tests, 10369 assertions, 0 failures, 0 errors, 27 skips`\r\n\r\n![ 2013-03-30 23 39 30](https://f.cloud.github.com/assets/1095842/320497/a93d3a24-9947-11e2-96c0-187e431da98b.png)"},{"ts":1364657520000,"body":"@tkhr thanks."},{"ts":1364659960000,"body":"Thanks."},{"ts":1364691075000,"body":"yw :smile: "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1374747587000,"body":"/cc @fxn "},{"ts":1374748056000,"body":"Maybe we should add a test for that? :-) "},{"ts":1374749315000,"body":"Thanks, but predicate methods don't need to return exactly a boolean (`true` or `false`), they can return any truthy/falsy value, which means `1` and `nil` are fine.\r\n\r\nFrom the method docs:\r\n\r\n    Returns truthy if a record exists in the table that matches the +id+ or\r\n    conditions given, or falsy otherwise.\r\n\r\nSo we're good.\r\n\r\nAlso, as a side note, this has been discussed previously in other issues, please do a quick github search and check them for more background."},{"ts":1374755357000,"body":":+1: "},{"ts":1376898442000,"body":"The docs also states:\r\n\r\n    No args - Returns false if the table is empty, true otherwise.\r\n\r\nWhich I interpreted as it actually should return true if it exists (and as it behaved in Rails 3.2.x)"},{"ts":1376909353000,"body":"@behe you are right.\r\n\r\nThe whole point of our approach to predicates is not to contort artificially the implementation. Since that particular use case documents singletons (which does not follow our project guidelines, but it is there), I see no point in having a different branch for it. I believe the best solution here is to go back to `present?` and document singletons in all cases.\r\n\r\nThis would be backwards compatible, you can always go from \"truthy\" to `true`."},{"ts":1376909464000,"body":"Well, not `present?`, since `present?` does not guarantee singletons. We need to explicitly return them.\r\n"},{"ts":1376940723000,"body":":+1: "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1356620423000,"body":"cc @vijaydev @fxn "},{"ts":1356721142000,"body":"I'm -1 on adding this in the generated file. I think that the api docs are the right place for such info."},{"ts":1356756965000,"body":"@vijaydev  #8647 - does this make sense? "},{"ts":1356777834000,"body":"Yes, I'll close this and merge that one. "}]},{"timestamps":[{"ts":1361740817000,"body":"I can squash and resubmit if you'd like."},{"ts":1361740928000,"body":"You don't need to resubmit, just squash and force push for your branch.\r\n\r\nThank you"},{"ts":1361741203000,"body":"All set, thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1375519291000,"body":"what warnings are avoided by this patch?"},{"ts":1375528786000,"body":"@senny \r\nI am guessing [these](https://travis-ci.org/rails/rails/jobs/9803362#L3283)\r\n```ruby\r\nrails/actionview/lib/action_view/helpers/url_helper.rb:531:in `current_page?': warning: URI.unescape is obsolete\r\n```"},{"ts":1375532021000,"body":"Yep these are warnings, Also these are master in AV so after this I can do a PR for that as well."},{"ts":1375534129000,"body":"Is this already fixed on `master` or is there another reason why this is pointing to `4-0-stable`?"},{"ts":1375534858000,"body":"Nope it's not fixed in master, it's there in ActionView folder. So i think both the places?"},{"ts":1375535089000,"body":"Yea I think we should fix it on `master` first."},{"ts":1375536732000,"body":"#11735 here you go"}]},{"timestamps":[{"ts":1372129215000,"body":"Did this or #9856 ever go anywhere?"},{"ts":1372137151000,"body":"Fixed by 37b4276dbf22382788f66bd5361f0736aadb0425"}]},{"timestamps":[{"ts":1358174218000,"body":"Note that this is a fix for `3-2-stable`."},{"ts":1358184686000,"body":"Right, because Ruby 1.8 doesn't count for master."}]},{"timestamps":[{"ts":1374254921000,"body":"You might want to fix typo in commit message(Hint: contant)  :thumbsup:"},{"ts":1374263414000,"body":":+1: to fix the typo"},{"ts":1374264292000,"body":"@rafaelfranca done.\r\n\r\nThanks @gaurish ."},{"ts":1374309968000,"body":"Thanks for your contribution :yellow_heart: "}]},{"timestamps":[{"ts":1361273530000,"body":"Can you also add a changelog entry please? Make sure you squash and rebase your commits, thanks!"},{"ts":1361286970000,"body":"Ok, I've made a changelog entry and have squashed the commits."},{"ts":1361769823000,"body":"@wangjohn hey John!! can you rebase this to merge it?"},{"ts":1361770199000,"body":"@guilleiguaran Yep, it's been rebased."},{"ts":1361770472000,"body":"Thanks!!"},{"ts":1361771698000,"body":"@frodsan Sure, I'll update the documentation in a new PR. "},{"ts":1361874859000,"body":"This patch breaks `belongs_to :foo, touch: true` associations:\r\n\r\n```ruby\r\nclass Order < ActiveRecord::Base; end\r\nclass Invoice < ActiveRecord::Base\r\n  belongs_to :order, touch: true\r\nend\r\n\r\ninvoice = Invoice.new\r\ninvoice.order = Order.new\r\ninvoice.save! # ActiveRecord::ActiveRecordError: can not touch on a new record object\r\n```\r\n\r\nHere's the relevant part of the backtrace:\r\n\r\n```\r\nactiverecord-4.0.0.beta1/lib/active_record/persistence.rb:378:in `touch'\r\nactiverecord-4.0.0.beta1/lib/active_record/callbacks.rb:293:in `block in touch'\r\nactivesupport-4.0.0.beta1/lib/active_support/callbacks.rb:373:in `_run__3041656240602960411__touch__callbacks'\r\nactivesupport-4.0.0.beta1/lib/active_support/callbacks.rb:78:in `run_callbacks'\r\nactiverecord-4.0.0.beta1/lib/active_record/callbacks.rb:293:in `touch'\r\nactiverecord-4.0.0.beta1/lib/active_record/associations/builder/belongs_to.rb:52:in `belongs_to_touch_after_save_or_destroy_for_order'\r\nactivesupport-4.0.0.beta1/lib/active_support/callbacks.rb:397:in `_run__798865968065935246__save__callbacks'\r\nactivesupport-4.0.0.beta1/lib/active_support/callbacks.rb:78:in `run_callbacks'\r\nactiverecord-4.0.0.beta1/lib/active_record/callbacks.rb:299:in `create_or_update'\r\nactiverecord-4.0.0.beta1/lib/active_record/persistence.rb:122:in `save!'\r\n```\r\n\r\nI don't know what the proper fix should be, but maybe until it's fixed, this patch should be reverted?"}]},{"timestamps":[{"ts":1374055638000,"body":"#11469 to master is enough. It will be backported once it's merged to the relevant branches.\r\n\r\nThanks for your work :yellow_heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1361420530000,"body":"Thank you but I fixed it 30 minutes ago. 66144711736a6f778cd1da7498e98db5130aa11d"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1368740385000,"body":"Got a :shipit: from TLo in campfire. Should this go into master or stable branch or both? "},{"ts":1368740504000,"body":"both. I'll merge"}]},{"timestamps":[{"ts":1373321489000,"body":"Will remove these commits from #11341 "}]},{"timestamps":[]},{"timestamps":[{"ts":1372178849000,"body":"I don't like this change, though I can't quite 100% articulate why it bothers me. Referencing that class explicitly seems like a smell."},{"ts":1372180415000,"body":"yes @steveklabnik I'm investigating"},{"ts":1372234069000,"body":"overwrite ```initialize``` with code that calls a ```HashWithIndifferentAccess``` method that have calls to ```new``` an infinite recursive calls to ```new``` happens.  With the explicitly call of ```HashWithIndifferentAccess.new```  we interrupt any recursive call. But I'm not sure if the logic of Inheritance is safe\r\n@fxn any thoughts?"},{"ts":1372245174000,"body":"+1\r\n\r\nIt is a mistake to instantiate a subclass of `HashWithIndifferentAccess` in the `new_from_hash_copying_default` method when you know (by definition) nothing about that subclass. Subclasses can always override `new_from_hash_copying_default` or `replace` if they need to. "},{"ts":1372273964000,"body":"Yup. This fix is untenable. Since we already have an issue tracking the bug, i'm giving this a close."}]},{"timestamps":[]},{"timestamps":[{"ts":1371045471000,"body":"@senny, @josh, @guilleiguaran I added this tests (connected with #10428 and rails/sprockets-rails#63) which should be passed as soon as`rails/rails.gemspec` will have fixed version of sprockets-rails 2.0.0."},{"ts":1371582560000,"body":"Any updates? Should I close it?"},{"ts":1371615716000,"body":"Waiting for travis to build this."},{"ts":1371767848000,"body":"@josh I tried to force push, but still have not found that travis starts building. Do I need to re-post new PR? "},{"ts":1371827517000,"body":"O, this pull is for rails/rails."},{"ts":1371827692000,"body":"@josh If this code seems good feel free to merge. I don't know why travis didn't run this PR."}]},{"timestamps":[]},{"timestamps":[{"ts":1368491412000,"body":"This is also solved better by #10482 . "}]},{"timestamps":[{"ts":1375215365000,"body":"@vipulnsward, your intention its one of the best ones here. But I hope that some of your code, changes the previous behavior of these methods, what we do not want.\r\n\r\nThe behavior is changed, once that you use ```map!``` or ```collect!``` (and any other method with ```!``` at the end), the content of the original instance is changed, then, you may use them with caution. For example, if you use the this ```highlight``` method after your change, it will change the content of the instance passed to ```phrases``` parameter.\r\n\r\ne.g.\r\n\r\n```ruby\r\nphrases = [\"phrase one\", \"phrase two\"]\r\n\r\nhighlight(\"my text with phrase one\", phrases)\r\n```\r\n\r\nAfter the method call the phrases value can be changed, what never will happen before. Please keep this behavior."},{"ts":1375245533000,"body":"@kelvinst thanks.\r\n@rafaelfranca updated\r\n"}]},{"timestamps":[{"ts":1362685802000,"body":"Thank you"}]},{"timestamps":[{"ts":1372754883000,"body":"/cc @carlosantoniodasilva, @senny "},{"ts":1372755574000,"body":"@pftg as I can remember there are still many PR's to this guide open. I think we should get them merged first and backport the whole diff."},{"ts":1372755894000,"body":"sure"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1368103882000,"body":"Might be a duplicate of https://github.com/rails/rails/pull/10057"}]},{"timestamps":[{"ts":1359061919000,"body":"@pixeltrix  can you take a look? \r\n\r\nThanks in Advance"},{"ts":1359065126000,"body":"Thanks but what's happening here is much deeper and this is just papering over the cracks.\r\n\r\nIt should pickup the `:format` from the recall parameters but a bug in the Journey code means its being ignored. I really want to fix this underlying bug rather than cover it up plus I can think of a couple of scenarios where your fix will break. I will use at least one of the tests so leave the PR open for the moment."},{"ts":1359067735000,"body":"Thanks for review. Could you provide a scenario where it will break, just curiosity to understand :)\r\n"},{"ts":1359070869000,"body":"For example the situation where the format is not optional so even the HTML mime type should have the extension."},{"ts":1359095692000,"body":"ok, you mean  a test like the following?\r\n```\r\ndef test_cheeseburger_redirects_to_https_with_extra_format_html\r\n  get :cheeseburger, format: :html\r\n  assert_response 301\r\n  assert_equal \"https://test.host/force_ssl_controller_level/cheeseburger.html\", redirect_to_url\r\nend\r\n```\r\nCurrently it fails on the master"},{"ts":1365085021000,"body":"@pixeltrix I updated the PR can you take a look?"},{"ts":1366875535000,"body":"@acapilleri I went with building the redirect url using request.fullpath rather than rebuilding it from options so this PR isn't needed anymore - thanks for your efforts though."},{"ts":1366875561000,"body":"Closed by 8227bf7ee9"},{"ts":1366900708000,"body":":+1: "}]},{"timestamps":[]},{"timestamps":[{"ts":1362473156000,"body":"@fxn what do you think?"},{"ts":1362477428000,"body":"Instead of \"real world examples\" I would use \"other examples\", \"more examples\", ... something weaker like that, since the examples in the rest of the docs also depict real use cases."},{"ts":1362477574000,"body":"@fxn I updated the heading and added a second example for nested attributes"},{"ts":1362477869000,"body":":metal: "}]},{"timestamps":[]},{"timestamps":[{"ts":1377794700000,"body":"I don't think we intend to take pull requests to the queue branch, sorry. We're still working out how we want this feature to work."},{"ts":1377807978000,"body":"/cc @jeremy "}]},{"timestamps":[{"ts":1364484163000,"body":"The above patch will at least re-raise the argument error. I'm not convinced we should ever swallow these exceptions though. When would we want to get a string of bad YAML back instead of being told our object is invalid? That seems surprising. \r\n\r\nIf we want to keep swallowing some errors, it might be nice to create another custom error class that gives the missing class name and suggests that the user require_dependency it. I'm happy to do that if there is interest."},{"ts":1364490703000,"body":"Is this really an ArgumentError? Seems more like TypeError or similar"},{"ts":1364491056000,"body":"The error comes from YAML, so I can't control that. We could wrap it, I'm just not sure if it makes sense."},{"ts":1364917549000,"body":"@tenderlove This has been updated as we discussed."}]},{"timestamps":[{"ts":1375880162000,"body":"Thank you!"}]},{"timestamps":[{"ts":1361694588000,"body":"nice"},{"ts":1361764610000,"body":"Honestly, I am very ambivalent about this. I don't hate it, but I'm not a fan of it either."},{"ts":1361784750000,"body":"> \t `xdg-open` for only linux|cygwin\r\n\r\nSorry, this comment is incorrect.\r\nI changed code to use `xdg-open` for linux and `cygstart` for cygwin\r\n\r\n\r\n```ruby\r\n...\r\n      case host_os\r\n      ...\r\n      when /linux/\r\n        `xdg-open #{url}`\r\n      when /cygwin/\r\n        `cygstart #{url}`\r\n      else\r\n        puts \"I don't know how to open your default browser...\"\r\n      end\r\n...\r\n```"},{"ts":1361808942000,"body":"I'm in the same boat, not overwhelmingly for or against. The wins seem somewhat meager. "},{"ts":1361809204000,"body":"If we are not convinced to merge this feature is better to close it. If someone from core want it in they will reopen and merge."},{"ts":1361840978000,"body":"All right. Thank you for reviewing!"}]},{"timestamps":[{"ts":1363686993000,"body":"@schneems can you rebase and I'll merge it - thanks!"},{"ts":1363714543000,"body":"Rebased"},{"ts":1363744249000,"body":"@schneems it's probably okay to backport this one - can you do a PR against 3-2-stable? Thanks!"}]},{"timestamps":[]},{"timestamps":[{"ts":1376653872000,"body":"You may replace `Hash` on https://github.com/PavelPenkov/rails/blob/6b5795cc745e6d87e69f7bac04afcac92e21b495/activemodel/lib/active_model/errors.rb#L73 by `HashWithIndifferentAccess`"},{"ts":1376653975000,"body":"As for me this is a little duplication of `HashWithIndifferentAccess`"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1376322330000,"body":"Quoting the docs:\r\n\r\n> An object is blank if it’s false, empty, or a whitespace string. For example, “”, “ ”, nil, [], and {} are all blank.\r\n\r\nThis would be a big breaking change so we need strong arguments to go ahead with this."},{"ts":1376324435000,"body":"Yeah, I'm gonna go ahead and say this doesn't make sense to me.  @eladmeidar if you're trying to test true/false, perhaps use the inclusion validator instead?"},{"ts":1376324784000,"body":"@mhuggins this is what i did. but it doesn't make sense that I need to use a different validation just to validate i got a value back. when every other data type can use :presence validations, it is just inconsistent,"},{"ts":1376325291000,"body":"There is the [acceptance validator](http://api.rubyonrails.org/classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_acceptance_of) to check that a boolean value is true."},{"ts":1376326498000,"body":"@dmathieu but only true, false is an acceptable value as well. it seems that the right way to handle booleans is as any other preset-acceptable-value field, with the inclusion validator. but in that case the error produced is not the right one. for a missing value you'll get \"xxx must be one of true, false\" and not \"xxx can't be blank\". the presence validator must support booleans as well in my opinion."}]},{"timestamps":[{"ts":1357169828000,"body":"Thank you"}]},{"timestamps":[{"ts":1371477666000,"body":"As mentioned in my previous comment on your other PR: https://github.com/rails/rails/pull/10970#issuecomment-19533196\r\n\r\nYou don't need to create a new PR, you can squash your commits and force push to the branch where you opened the PR from. GitHub will automatically update the PR accordingly. As the other PR is still open I'm closing this one. Can you try to update the other one?\r\n\r\nTake a look at the [contribution guide](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#squashing-commits) for more information,"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1369421424000,"body":"Addresses https://github.com/rails/rails/issues/10723"},{"ts":1369455412000,"body":"Same solution as #10740, though the other has more tests."},{"ts":1369483474000,"body":"I'm closing this one in favor of #10740 as it was earlier, has more discussion and tests."}]},{"timestamps":[{"ts":1372686260000,"body":"This is not a common pattern that needs your own generator. I'd say that of 10 application that I worked I never generate a new validator. Even if you need to generate a validator you will only generate one or two.\r\n\r\nSo :-1: from my side."},{"ts":1372692745000,"body":"I don't think this requires a generator as well."}]},{"timestamps":[{"ts":1372638231000,"body":"Thanks.\r\n\r\n*minor comment: please next time use `[ci skip]` in the commit message so we can avoid a travis run :).*"},{"ts":1372679625000,"body":"Awesome, backported to 4-0-stable in 4d3722a23fc477b5c93cda020e6448b746bf8a4b."}]},{"timestamps":[{"ts":1372358575000,"body":"Thanks."}]},{"timestamps":[{"ts":1374613780000,"body":"@spastorino merged it manually"}]},{"timestamps":[]},{"timestamps":[{"ts":1369127874000,"body":"Hey, this global var was never a public, it was an internal hack used by Rails.\r\n\r\nWhy do we need to readd it? Can you talk more about your use case?"},{"ts":1369128063000,"body":"Ah I found another gem that used it and expected it to be public since it was a global variable after all.\r\n\r\nI'm using it in https://github.com/sauspiel/postamt to determine if it should load or not (It doesn't load for db-related rake tasks) so for Rails 4 I now switched to `defined?(Rake)` instead but that seems like a bad workaround since Rake might be loaded for other reasons too.\r\n\r\nSee https://github.com/sauspiel/postamt/blob/bd6cbbc29682e8a7348d55c4be3af86f6429c365/lib/postamt/railtie.rb#L7"},{"ts":1369128496000,"body":"A global variable doesn't mean it is public. All named classes are global, it doesn't mean all classes are public. :)\r\n\r\nThe proper solution, regardless of the Rails version, is to move that initializer block inside a rake block. Try this:\r\n\r\n```ruby\r\nmodule Postamt\r\n  class Railtie < Rails::Railtie\r\n    railtie_name \"postamt\"\r\n\r\n    rake do\r\n      # We mustn't hook into AR when db:migrate or db:test:load_schema\r\n      # run, but user-defined Rake tasks still need us\r\n      task_names = []\r\n      tasks_to_examine = Rake.application.top_level_tasks.map{ |task_name| Rake.application[task_name] }\r\n      until tasks_to_examine.empty?\r\n        task = tasks_to_examine.pop\r\n        task_names << task.name\r\n        tasks_to_examine += task.prerequisite_tasks\r\n      end\r\n      next if task_names.any? { |task_name| task_name.start_with? \"db:\" }\r\n    end\r\n\r\n    initializer \"postamt.hook\", before: \"active_record.initialize_database\" do |app|\r\n      Postamt.hook!\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n"},{"ts":1369128699000,"body":"Got it. Thanks @josevalim!"},{"ts":1369144751000,"body":"Oops, just one note, the method is called `rake_tasks`, not `rake`. :) Here is [an example from Active Record](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/railtie.rb#L37)."},{"ts":1369144885000,"body":"@josevalim I already figured that out myself :) See https://github.com/sauspiel/postamt/commit/0b80d0c3fe810f31100a39f78839122ae3447e9e"}]},{"timestamps":[]},{"timestamps":[{"ts":1358034692000,"body":"Since this is only a test-case to lock in the current behavior I don't think we need a CHANGELOG entry ( @carlosantoniodasilva please correct me if I am wrong)\r\n\r\nOther than that it looks good to me."},{"ts":1358639742000,"body":"@senny @carlosantoniodasilva I agree. Removed the changelog entry."},{"ts":1358729931000,"body":"Looks good, thank you guys."}]},{"timestamps":[{"ts":1365016700000,"body":"Thanks."}]},{"timestamps":[{"ts":1371817470000,"body":"Hi @carlosantoniodasilva ,\r\n\r\nSquash into one please look into this,\r\n\r\nThanks you"},{"ts":1371822521000,"body":"It is fine to change the hash syntax but please don't change indentation or remove the spaces to align the statements"},{"ts":1371827579000,"body":"Yup, agreed with @rafaelfranca. Please review the changes and we can apply, thanks @rajcybage "},{"ts":1372053057000,"body":"Than you for considering my commits I have fixed what you have depicted and make a fresh pull request Please look into this https://github.com/rails/rails/pull/11067\r\n\r\nThanks @rafaelfranca \r\n\r\nThanks @carlosantoniodasilva \r\n\r\nThanks @arunagw  \r\n\r\n"},{"ts":1372055326000,"body":"Thanks "}]},{"timestamps":[]},{"timestamps":[{"ts":1364243967000,"body":"@rafaelfranca , @carlosantoniodasilva  : could you take a look at this?"},{"ts":1364274296000,"body":"fixed/rebased"},{"ts":1364315066000,"body":"@vipulnsward could you add a CHANGELOG entry?"},{"ts":1364323795000,"body":"@rafaelfranca  Added."},{"ts":1364324408000,"body":"@rafaelfranca thanks."},{"ts":1364324498000,"body":"Thank you!!\r\n\r\nRafael Mendonça França\r\nhttp://twitter.com/rafaelfranca\r\nhttps://github.com/rafaelfranca\r\n\r\n\r\nOn Tue, Mar 26, 2013 at 4:00 PM, Vipul A M <notifications@github.com> wrote:\r\n\r\n> @rafaelfranca <https://github.com/rafaelfranca> thanks.\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/9928#issuecomment-15480563>\r\n> .\r\n>"}]},{"timestamps":[]},{"timestamps":[{"ts":1357141688000,"body":"Thanks."},{"ts":1357142183000,"body":"This can be not necessary too https://github.com/goshakkk/rails/blob/aca0c6d315258fe83bea81ce4d5e606ac18856ec/actionpack/lib/action_dispatch/journey/formatter.rb#L50"},{"ts":1357142510000,"body":"#8697"}]},{"timestamps":[{"ts":1358207210000,"body":":+1:"},{"ts":1358207692000,"body":"Thank you so much for the pull request but our general policy is to not merge changes that are considered cosmetic. See the info box on http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#write-your-code"},{"ts":1358208103000,"body":"Okay no problem. Wasn't on the [regular guides](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#write-your-code).\r\n\r\nWas inspired by @rwz's #8887 – No big deal though :smiley: "},{"ts":1358208498000,"body":"Good point. We should put that info in the regular guides.\r\n\r\nAbout #8887 it was merged because it touch the generated files. It is fine to do cosmetic changes when changing/fixing some behaviour."},{"ts":1358208613000,"body":"Awesome, thanks :thumbsup: "},{"ts":1358208874000,"body":"@garethrees want to open a pull request to update the guide?"},{"ts":1358209367000,"body":"Looks like it's already in master both [here](https://github.com/rails/rails/blame/master/guides/source/contributing_to_ruby_on_rails.md#L204) and [docrails](https://github.com/lifo/docrails/blame/master/guides/source/contributing_to_ruby_on_rails.md#L204), just not deployed?"},{"ts":1358209450000,"body":"Ah, looks like they may not have been generated with `bundle exec rake guides:generate`?"},{"ts":1358209677000,"body":"@garethrees the links you pointed are from the master branch, and they generate http://edgeguides.rubyonrails.org/, whereas the current stable version, 3.2.11, generates http://guides.rubyonrails.org/. When Rails 4 comes out, guides.rubyonrails.org will point to 4.0, having the changes you linked."}]},{"timestamps":[{"ts":1362486540000,"body":"@carlosantoniodasilva force-pushing removed the commit you commented at :boom:. But I did what you suggested."},{"ts":1362487142000,"body":"Thanks."},{"ts":1362512566000,"body":"> orce-pushing removed the commit you commented at :boom:\r\n\r\nIt's supposed to, but github gives you an 'outdated diff discussion' link, so you can still read it. :)"}]},{"timestamps":[{"ts":1373148608000,"body":"seems reasonable. Thanks :yellow_heart: "}]},{"timestamps":[{"ts":1372311584000,"body":"hey Hector, thank you very much for trying to help but unfortunately this have been already discussed.\r\nTake a look at this https://github.com/rails/rails/pull/5815 to have more info about why this is not a good idea."}]},{"timestamps":[{"ts":1359730867000,"body":"Single quotes have been added to the HTML_ESCAPE hash in output_safety.rb, but they are currently being replaced with their hex code equivalent (& #x27;), which Chrome/Safari will display as-is in the form field. If they are replaced with the decimal equiv (& #39;) instead, the browser will properly display a single quote in their place, as is already done with other escaped characters (& gt;, & amp;, etc.)."},{"ts":1359730925000,"body":"@morgancurrie could you update the tests? I'll merge"},{"ts":1359731868000,"body":"Good, this change is already in master. :+1:"},{"ts":1359810225000,"body":"Already applied. Thanks"},{"ts":1360356140000,"body":"For clarification, this wasn't a webkit issue. The issue was that escape_once was double-escaping the hex-encoded entity. i.e. It was\r\n`<input type=\"text\" value=\"Schrodinger&amp;#x27;s Cat\" />`\r\nwhen it should have been\r\n`<input type=\"text\" value=\"Schrodinger&#x27;s Cat\" />`\r\n\r\nRelated #9088 #9101 #9102"}]},{"timestamps":[]},{"timestamps":[{"ts":1376654063000,"body":"Is there any guides how to install memcache. Maybe will be great to add links to them?"},{"ts":1376655177000,"body":"Was considering it but wasn't sure how dogmatic people are about using brew vs macports and apt-get vs whatever package managers on linux. Will add something now."},{"ts":1376655884000,"body":"@pawel2105 Please squash those commits into 1"},{"ts":1376656818000,"body":"Squashed into https://github.com/pawel2105/rails/commit/7889e3da6c3f41ecff7dc6075a6fce9c597d56be"},{"ts":1376657052000,"body":"As for me better to add links to the guides, not to describe ourselves."},{"ts":1376863879000,"body":"IMO is fine since we are explaining how to install SQLite, MySQL, Postgres and Git already :smiley: "}]},{"timestamps":[{"ts":1362931042000,"body":"I am slightly confused by the need of this patch.\r\n\r\nYou don't need to require rails generators by hand. If you generator follows the proper naming convention, it will be loaded just when required. What am I missing?"},{"ts":1362975513000,"body":"Agreed, I read through the linked issue and through this description, i'm not sure I fully understand the problem or this solution, could you give me some more information?"},{"ts":1362975800000,"body":"Here's the situation. We need to redefine the default `scaffold_controller_generator`. One way to do that is something like this:\r\n```ruby\r\nclass MyEngine < ::Rails::Engine\r\n  config.generators.scaffold_controller = :my_scaffold_controller\r\nend\r\n```\r\nSo, now when you invoke `scaffold`, which hooks for `scaffold_controller`, `my_scaffold_controller` gets invoked instead — just what we need. BUT, when you try to invoke `scaffold_controller` directly, the override doesn't work, and rails run original `scaffold_controller`\r\n\r\n\r\nSo, the other solution would be to augment the original `scaffold_controller` to do what we need. I've found the only way  to do that, which is something like that:\r\n\r\n```ruby\r\nrequire 'rails/generators'\r\nrequire 'rails/generators/rails/scaffold_controller/scaffold_controller_generator'\r\n\r\nmodule Rails\r\n  module Generators\r\n    class ScaffoldControllerGenerator\r\n     \r\n      # redefining methods and adding hooks\r\n    \r\n    end\r\n  end\r\nend\r\n```\r\n\r\nAnd that approach breaks a lot of things. First, it requires generators all the time, even when we don't need them .Second, it preemptively triggers generators configuration to be build, so other gems trying to change generators config later fail, because the configuration does not pick changes from engines after being loaded."},{"ts":1362975958000,"body":"So, I think we might need a load hook for generators. I understand that it might be silly to add a load hook for each particular generator, but what about load hook for all generators? For example for `rails/generators`. That would solve the problem I've stated above."},{"ts":1363034490000,"body":"I've never been involved in any of the decision making regarding any of the AS hooks, so i'm not sure if this is the best place to address this issue, or somewhere else. Seems like adding one hook after all generators are loaded would be more useful. @josevalim, what do you think?"},{"ts":1363107727000,"body":"Changed the pull request to actually run hook on `rails/generators` load."},{"ts":1363439236000,"body":"Ok, I've figured out how to trick the configuration without load hook. Seen how it's implemented in [active_model_serializers](https://github.com/rails-api/active_model_serializers) gem. This code does the trick:\r\n\r\n```ruby\r\nclass MyRailtie < ::Rails::Railtie\r\n  generators do |app|\r\n    Rails::Generators.configure! app.config.generators\r\n    Rails::Generators.hidden_namespaces.uniq!\r\n    require 'file_with_generator_overrides'\r\n  end\r\nend\r\n```\r\n\r\n...but it is quite untrivial code that relies on undocumented (AFAIK) private APIs. I'd rather have a load hook for `rails/generators` instead of doing this."},{"ts":1365882724000,"body":"Do we want to add this hook?"},{"ts":1365938247000,"body":"Well I've solved my problem without this hook. Yet I think it might be helpful in the future.\r\n—\r\nPavel Pravosud\r\n\r\nOn Sun, Apr 14, 2013 at 2:52 AM, Philip Arndt <notifications@github.com>\r\nwrote:\r\n\r\n> Do we want to add this hook?\r\n> ---\r\n> Reply to this email directly or view it on GitHub:\r\n> https://github.com/rails/rails/pull/9647#issuecomment-16339564"}]},{"timestamps":[]},{"timestamps":[{"ts":1363732818000,"body":"You can confirm this here: https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/strong_parameters.rb#L170"}]},{"timestamps":[{"ts":1364236134000,"body":":+1:\r\n\r\nMySQL has a similar directive for INPLACE vs COPY vs DEFAULT index creation."},{"ts":1364236545000,"body":"@jeremy So have `:algorithm` as the argument instead of `:concurrently` and move the code to this up to the AbstractAdapters `add_index_options` and `add_index`?\r\n\r\n    add_index(:people, :last_name, algorithm: :concurrently)\r\n\r\nCorrect?"},{"ts":1364239292000,"body":":+1:"},{"ts":1364241275000,"body":"@jeremy Let me know about the latest iteration. If all is good, I can squash the commits"},{"ts":1364242234000,"body":"It seems good to me. Needs a rebase thought."},{"ts":1364243470000,"body":"Nicely done!"},{"ts":1364243479000,"body":":thumbsup: "},{"ts":1364243865000,"body":"I'll rebase this within the next hour or so"},{"ts":1364248779000,"body":"The tests in question already have extra strings, so I went with the example that was there.\r\n\r\nI rebased against master. I can pull out the extra spaces if necessary"},{"ts":1364265734000,"body":"Let me know if you want me to squash this PR"},{"ts":1364307394000,"body":"@rafaelfranca: Cleaned up that call, I had a ternary operator there, and pulled that out in favor of inspect"},{"ts":1364307507000,"body":"Thank you"},{"ts":1364673691000,"body":"Hello, guys. This is greate feature, I like \"algorithm: :concurrently\". But right now this feature doesn't work for PostgreSQL (I didn't check MySQL). First of all we should look at PostgreSQL documentation:\r\n\r\nhttp://www.postgresql.org/docs/9.2/static/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY\r\n\r\n> Regular index builds permit other regular index builds on the same table to occur in parallel, but only one concurrent index build can occur on a table at a time. In both cases, no other types of schema modification on the table are allowed meanwhile. **Another difference is that a regular CREATE INDEX command can be performed within a transaction block, but CREATE INDEX CONCURRENTLY cannot**.\r\n\r\nAnd of course each migration for PostgreSQL works in transaction block (it's perfect, because on fail it will rollback all changes). \r\n\r\nI worked under this feature also and when I saw this pull request, I didn't found in changes, how this solved.\r\n\r\nSo right now for such migration:\r\n\r\n```ruby\r\nclass CreateUsers < ActiveRecord::Migration\r\n  def change\r\n    create_table :users do |t|\r\n      t.string :email\r\n      t.timestamps\r\n    end\r\n    add_index :users, :email, algorithm: :concurrently\r\n  end\r\nend\r\n``` \r\n\r\nwe have such problem:\r\n\r\n```bash\r\n$ rake db:migrate\r\n \r\n==  CreateUsers: migrating ====================================================\r\n-- create_table(:users)\r\n   -> 0.0274s\r\n-- add_index(:users, :email, {:algorithm=>:concurrently})\r\nrake aborted!\r\nAn error has occurred, this and all later migrations canceled:\r\n\r\nPG::Error: ERROR:  CREATE INDEX CONCURRENTLY cannot run inside a transaction block\r\n: CREATE  INDEX CONCURRENTLY \"index_users_on_email\" ON \"users\"  (\"email\")/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:128:in `exec'\r\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:128:in `block in execute'\r\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:425:in `block in log'\r\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activesupport/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\r\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:420:in `log'\r\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:127:in `execute'\r\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb:416:in `add_index'\r\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-...\r\n...\r\nTasks: TOP => db:migrate\r\n(See full trace by running task with --trace)\r\n\r\n```\r\n\r\nTo create such indexes, I think in code should exists some queue, which will collect all such indexes in migration and execute this indexes after success execution of transaction block.\r\n\r\nP.S. rails tested version:\r\n\r\n```ruby\r\nGIT\r\n  remote: git://github.com/rails/rails.git\r\n  revision: 3b0b573ac3ecbec5b1fa021abbe86b267bbefb8c\r\n  specs:\r\n    actionmailer (4.0.0.beta1)\r\n      actionpack (= 4.0.0.beta1)\r\n      mail (~> 2.5.3)\r\n    actionpack (4.0.0.beta1)\r\n      activesupport (= 4.0.0.beta1)\r\n      builder (~> 3.1.0)\r\n      erubis (~> 2.7.0)\r\n      rack (~> 1.5.2)\r\n      rack-test (~> 0.6.2)\r\n    activemodel (4.0.0.beta1)\r\n      activesupport (= 4.0.0.beta1)\r\n      builder (~> 3.1.0)\r\n    activerecord (4.0.0.beta1)\r\n      activemodel (= 4.0.0.beta1)\r\n      activerecord-deprecated_finders (~> 0.0.3)\r\n      activesupport (= 4.0.0.beta1)\r\n      arel (~> 4.0.0.beta2)\r\n    activesupport (4.0.0.beta1)\r\n      i18n (~> 0.6, >= 0.6.4)\r\n      minitest (~> 4.2)\r\n      multi_json (~> 1.3)\r\n      thread_safe (~> 0.1)\r\n      tzinfo (~> 0.3.37)\r\n    rails (4.0.0.beta1)\r\n      actionmailer (= 4.0.0.beta1)\r\n      actionpack (= 4.0.0.beta1)\r\n      activerecord (= 4.0.0.beta1)\r\n      activesupport (= 4.0.0.beta1)\r\n      bundler (>= 1.3.0, < 2.0)\r\n      railties (= 4.0.0.beta1)\r\n      sprockets-rails (~> 2.0.0.rc3)\r\n    railties (4.0.0.beta1)\r\n      actionpack (= 4.0.0.beta1)\r\n      activesupport (= 4.0.0.beta1)\r\n      rake (>= 0.8.7)\r\n      thor (>= 0.18.1, < 2.0)\r\n```\r\n\r\nThanks for all."},{"ts":1364675594000,"body":"@le0pard 4ce98432512d11ac2f0330e2313c2c031552ffff introduced `disable_ddl_transaction!` method for migrations, which you can use to turn off the wrapping transaction for the specific migrations you need. That should solve your issue I think, by disabling the transaction in this migration. Hope that helps!"},{"ts":1364676193000,"body":"Yep, I understand your point @carlosantoniodasilva, but I didn't see any notice, what \"algorithm: :concurrently\" must(!!!) running with \"disable_ddl_transaction!\". Also, in this case we have \"add_index\" method which always will work correctly in migration except with this option \"algorithm: :concurrently\". I think we should fix \"add_index\" for this option or create separate method \"add_index_concurrently\" with notice, what user should run this without ddl transaction."},{"ts":1364679049000,"body":"@carlosantoniodasilva , also can we have such problem:\r\n\r\n```ruby\r\nclass AddToFirstField < ActiveRecord::Migration\r\n  self.disable_ddl_transaction!\r\n  def change\r\n    add_index :users, :first_field, algorithm: :concurrently\r\n    add_column :users, invalid, :integersss\r\n  end\r\nend\r\n```\r\n\r\nStart migration first time:\r\n```bash\r\n==  AddToFirstField: migrating ================================================\r\n-- add_index(:users, :first_field, {:algorithm=>:concurrently})\r\n   -> 0.0066s\r\n-- invalid()\r\nrake aborted!\r\nAn error has occurred, all later migrations canceled:\r\n\r\nundefined local variable or method `invalid' for #<AddToFirstField:0x007fedc2aec1a0>/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/migration.rb:621:in `block in method_missing'\r\n```\r\n\r\nStart migration second time:\r\n```bash\r\n==  AddToFirstField: migrating ================================================\r\n-- add_index(:users, :first_field, {:algorithm=>:concurrently})\r\nrake aborted!\r\nAn error has occurred, all later migrations canceled:\r\n\r\nIndex name 'index_users_on_first_field' on table 'users' already exists/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb:806:in `add_index_options'\r\n```\r\n\r\nAnd this case:\r\n```ruby\r\nclass AddToFirstField < ActiveRecord::Migration\r\n  self.disable_ddl_transaction!\r\n  def change\r\n    add_index :users, :second_field, algorithm: :concurrently\r\n    add_index :users, :third_field, algorithm: :concurrently\r\n  end\r\nend\r\n```\r\n\r\nStart migration first time:\r\n\r\n```bash\r\n==  AddToFirstField: migrating ================================================\r\n-- add_index(:users, :second_field, {:algorithm=>:concurrently})\r\n   -> 0.0075s\r\n-- add_index(:users, :third_field, {:algorithm=>:concurrently})\r\nrake aborted!\r\nAn error has occurred, all later migrations canceled:\r\n\r\nPG::Error: ERROR:  column \"third_field\" does not exist\r\n: CREATE  INDEX CONCURRENTLY \"index_users_on_third_field\" ON \"users\"  (\"third_field\")/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:128:in `exec'\r\n```\r\n\r\nStart migration second time:\r\n```bash\r\n==  AddToFirstField: migrating ================================================\r\n-- add_index(:users, :second_field, {:algorithm=>:concurrently})\r\nrake aborted!\r\nAn error has occurred, all later migrations canceled:\r\n\r\nIndex name 'index_users_on_second_field' on table 'users' already exists/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb:806:in `add_index_options'\r\n```\r\n\r\nConclusion: we should create separate migration for each concurent index with \"disable_ddl_transaction\" and without any aditional migration commands (add_index, add_column, etc.):\r\n\r\n```ruby\r\nclass AddToFirstField < ActiveRecord::Migration\r\n  self.disable_ddl_transaction!\r\n  def change\r\n    add_index :users, :first_field, algorithm: :concurrently\r\n  end\r\nend\r\n\r\nclass AddToSecondField < ActiveRecord::Migration\r\n  self.disable_ddl_transaction!\r\n  def change\r\n    add_index :users, :second_field, algorithm: :concurrently\r\n  end\r\nend\r\n```\r\n\r\nThis isn't Rails way (I hope)."},{"ts":1364680210000,"body":"This is a database limitation and we (Rails) are providing an API to make this possible. So, yes, if you need to add an index concurrently you should know you can't do inside a transaction and with additional migration commands.\r\n\r\nYou should know your database and its limitation. We can't provide everything."},{"ts":1364680580000,"body":"Thanks, @rafaelfranca. Ok, but is it good idea fix this limitation by concurent index queue and execute such indexes after success ddl transaction? Like it done in [pg_power](https://github.com/TMXCredit/pg_power#concurrent-index-creation). I just thinking add this fix in Rails in such way."},{"ts":1364680747000,"body":"No. I don't think is worth to add this complexity to Rails code base right now due a database constraint."},{"ts":1364680817000,"body":"If this feature become popular and we have to support more feature like this one so we can think to add this to Rails"},{"ts":1364680995000,"body":"Thanks, @rafaelfranca, this is reasonable. In conclusion, I think we should write about this limitation in readme about this feature and what \"disable_ddl_transaction\" help to use it."},{"ts":1364681130000,"body":"Totally agree. We can put this in the CHANGELOG entry and also in the RDOC documentation. Want to open a pull request?"},{"ts":1364681463000,"body":"My English is bad, I just can write good code. You can do this (or maybe someone can finish this). Thanks anyway for all."},{"ts":1364681653000,"body":"Ok. I'll do later"},{"ts":1364681665000,"body":"BTW, Thank you so much :heart: "},{"ts":1364690545000,"body":"+1 for adding a notice somewhere about running it without a transaction :+1:"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1357255492000,"body":"Could you squash your commits?"},{"ts":1357256125000,"body":"Done"},{"ts":1357256201000,"body":"Thank you"},{"ts":1357802699000,"body":"Is this available in 3-2 stable ?"},{"ts":1357817680000,"body":"Yes"},{"ts":1357818512000,"body":"Thanks !"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1362390524000,"body":"@rafaelfranca @carlosantoniodasilva can you take a look?"}]},{"timestamps":[{"ts":1359147295000,"body":"/cc @dhh "},{"ts":1359150660000,"body":"Seems good. I think we should update the guides in the scope of this pull request. Unless you think it will need a lot of work."},{"ts":1359150786000,"body":"Yeah, I'm working on the guide right now. Going to submit that as a separate commit, just in case if someone want to merge this in first."},{"ts":1359153835000,"body":"Documentation updated.\r\n\r\nAlso, add some more stuff to my todo list."},{"ts":1359159921000,"body":"Cool stuff @sikachu :+1:"},{"ts":1359160230000,"body":"@sikachu Awesome!"},{"ts":1359162716000,"body":"Code updated based on @carlosantoniodasilva's review. Thanks!"},{"ts":1359185853000,"body":"good job"},{"ts":1359219862000,"body":"Is this going to be smart enough to run tests/specs for the appropriate test framework for those of us who don't use MiniTest?"},{"ts":1359220112000,"body":"@calebthompson no, not for now. We might provide a hook later, but it's not currently in our radar.\r\n\r\nActually, we were thinking about making `./bin/test` to run the test (which would be closely to `./bin/rspec`) but then it would conflict with `/usr/bin/test`."},{"ts":1359220254000,"body":"I feel like this is just going to be cumbersome unless/until rspec and cucumber specifically pick it up. You'll end up with two ways of running tests, and frankly the gems that people prefer to test with are going to win out over Rails conventions here I think."},{"ts":1359220416000,"body":"With `rake`, `rspec`, or `cucumber` commands being the way people run their tests, over anything `rails`."},{"ts":1359220808000,"body":"Right. I understand what you mean, and I like that.\r\n\r\nHowever, the goal of this ticket was to fix the slow `rake` test runner. I think we achieve that. From now on, though, only the sky is the limit. :)"},{"ts":1359225084000,"body":"I feel like we do need some way to hook into this. On many projects, I use different frameworks for unit tests, acceptance tests, and JavaScript tests (e.g., rspec/cucumber/jasmine or minitest/cucumber/jasmine). `rake test` can run them all, and it's a command that everyone expects to run all the tests. If `rails test` becomes the new standard, but can't be used for the same situations, I expect things to be more confusing for newcomers and experienced folks alike."},{"ts":1359226565000,"body":"Please Do Investigate. \r\n\r\nOn Jan 26, 2013, at 19:31, Andy Lindeman <notifications@github.com> wrote:\r\n\r\n> I feel like we do need some way to hook into this. On many projects, I use different frameworks for unit tests, acceptance tests, and JavaScript tests (e.g., rspec/cucumber/jasmine or minitest/cucumber/jasmine). rake test can run them all, and it's a command that everyone expects to run all the tests. If rails test becomes the new standard, but can't be used for the same situations, I expect things to be more confusing for newcomers and experienced folks alike.\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub.\r\n> "},{"ts":1359228723000,"body":"I really don't see the motivation for having `rails test` running cucumber, rspec and what not. How would it even pick which one to run when I am using both rspec and cucumber? Who uses `rake test` to run specs today anyway?\r\n\r\nAlso, given that `rspec` accepts command line options completely different than `rails test` would, I just see this bringing **more** confusion."},{"ts":1359228883000,"body":"For last, why would you bind your test framework runner to Rails when there isn't a need in the first place? If you guys are having extra free-time, we still have ~400 issues open that would love some attention. :wink: :wink:"},{"ts":1359239937000,"body":"> the goal of this ticket was to fix the slow `rake` test runner\r\n\r\nWhat work was done to make the `rake` test runner faster? This appears to be a complete replacement that doesn't use or touch rake at all.\r\n\r\nSince this is a replacement for existing working (if slow) code I would like to see evidence of why it is pointless to try to make `rake` or the rails test running tasks faster.\r\n\r\nCould it be something I can improve in rake?"},{"ts":1359240274000,"body":"@drbrain the original problem was that running test via `rake` had to load the Rails environment twice. (One for `rake`'s environment, then `rake` would call `ruby -Itest ...` which is the second.) We kinda want to eliminate that by just load the test files into the runner; hence the usage of `load` command. On a rainy day, that could mean the test took twice the load time than running the test directly via some command."},{"ts":1359240470000,"body":"@drbrain @sikachu \r\n\r\n@myronmarston seems to think it's a '(mis?)-use' of Rake that's causing the problems:\r\n\r\nhttps://twitter.com/myronmarston/status/295296519203065856\r\n\r\nhttps://twitter.com/myronmarston/status/295296827350200320\r\n\r\nMyron, how _should_ we be improving this?"},{"ts":1359243638000,"body":"> Myron, how should we be improving this?\r\n\r\nLet me preface my suggestions with two quick comments:\r\n\r\n* Calling rails' use of rake a \"misuse\" has more to do with twitter-imposed terseness than with the actual way I would categorize it.  I do think rails' use of rake is suboptimal and has room for improvement, but that's more nuanced than fits in a tweet.\r\n* I haven't worked on a rails app in a long time (I've never used rails 3.1 or 3.2, for example, and barely used rails 3.0). The apps I've been working on are very, very far from rails-style CRUD apps, and, as @dhh has [stated elsewhere](http://david.heinemeierhansson.com/2012/the-parley-letter.html), the more your app is dissimilar from Basecamp, the worse fit rails is for your application.  I'm not sure if/when I'll be working on another rails app, so I'm not going to invest lots of time in an extended discussion here.\r\n\r\nWith that said, I think there's an optimal way to use rake that's quite different from how rails uses it.  Specifically, it leverages the fact that rake, like most ruby programs, has two run-time phases:\r\n\r\n* Phase 1 is \"task definition time\" -- during this phase, rake is evaluating your `Rakefile` (which involves loading other files `require`d or `load`ed by your Rakefile).\r\n* Phase 2 is \"task execution time\" -- during this phase, rake is executing the specified task(s).\r\n\r\nMy preferred way to use rake is to make phase 1 as lightweight and minimal as possible.  My rule of thumb is to only require files that define rake tasks during this phase, and to defer all other requires to phase 2.  Each task becomes responsible (either through the code directly in the task, or via a prerequisite task) for loading the files and libraries it needs to run.  This goes hand-in-hand with [the way I use bundler](http://myronmars.to/n/dev-blog/2012/12/5-reasons-to-avoid-bundler-require), and fits right in with my preferred approach of explicitly loading dependencies at runtime...but I know that [DHH prefers](https://twitter.com/dhh/status/281106285024407552) the convenience of not having to manually manage dependencies at runtime.  (As usual, this is about trade offs.  The particular things I value most differ from the things DHH values most and that's fine).\r\n\r\nRails has, for as long as I know, chosen to load the entire rails environment at task definition time, which essentially causes the environment to be double-booted when running a task that spawns a new process that boots the environment.  Changing to my preferred approach would be a large change, but if there's desire to move in that direction, a major release (like rails 4) is the right time to do it.  As a point of comparison, here's the kind of speed I get out of rake.  This is on a large app that I (and an entire team at @seomoz) have been working on full time for 9+ months:\r\n\r\n```\r\n$ time bin/rake -T > /dev/null\r\nbin/rake -T > /dev/null  0.21s user 0.04s system 98% cpu 0.255 total\r\n```\r\n\r\nThat's 255 ms wall clock time, which is barely noticeable.\r\n\r\nAs for the idea of having a more full-featured test runner...I heartily support such a thing (one of my favorite parts of rspec is the super flexible test runner, complete with the binary that supports a plethora of options), but I wonder if it's better suited as an external gem that can be used by any T::U/minitest project?  Is there anything about this that needs to be coupled to rails?"},{"ts":1359243914000,"body":"> Calling rails use of rake a \"misuse\" has more to do with twitter-imposed terseness than with the actual way I would categorize it. I do think rails' use of rake is suboptimal and has room for improvement, but that's more nuanced than fits in a tweet.\r\n\r\nYes, that's why I wanted to make sure you came here, and why I made sure to copy the tweet and the (mis?) part of it. The `?` says to me that you weren't trying to make a super big statement, just Twitter. Since you are on the rspec team, I figured that your insight here is important, along with @alindeman's."},{"ts":1359244836000,"body":"> Yes, that's why I wanted to make sure you came here, and why I made sure to copy the tweet and the (mis?) part of it. The ? says to me that you weren't trying to make a super big statement, just Twitter.\r\n\r\nThanks...it's nice to know my tweet was interpreted in the spirit it was intended :)."},{"ts":1359380483000,"body":"Prem, before we apply this, please get -n and fixture loading implemented. I don't think it's a full replacement before that happens."},{"ts":1359758203000,"body":"@dhh `-n` get added to this feature. I'm not sure what you mean by \"fixture loading\", since I thought Rails doesn't load fixture by default unless you run `rake db:fixtures:load` ?"},{"ts":1359797740000,"body":"Rails loads fixtures by default when you run the rake suite tasks. So \"rake test\" and \"rake test:units\" will load fixtures. This should do the same. But don't load fixtures when running one specific file or test within that file. In that case, we should have an option like --load-fixtures/-f that does it. \r\n\r\nOn Feb 1, 2013, at 23:37, Prem Sichanugrist <notifications@github.com> wrote:\r\n\r\n> @dhh -n get added to this feature. I'm not sure what you mean by \"fixture loading\", since I thought Rails doesn't load fixture by default unless you run rake db:fixtures:load ?\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub.\r\n> "},{"ts":1360131557000,"body":"Code update with not loading fixture by default. @dhh can you give it another look?"},{"ts":1360160006000,"body":"Looks good to me. I think this is good enough to merge and start using.\r\n\r\nI say we deprecate the \"rake test\" tasks. No reason to have two ways to do this.\r\n\r\nAlso, we should pull in the test:prepare stuff so it doesn't go through Rake."},{"ts":1360969275000,"body":"Hmm, I just realized that 0ba5229 breaks backward compatibility. I need to fix that before adding the deprecation warning."},{"ts":1361833346000,"body":"Code updated. Backward compatibility fixed. Now the only thing I need is to use AS::Notification ..."}]},{"timestamps":[{"ts":1360786370000,"body":"This looks fine to me, but we do need a CHANGELOG entry please. Just roll that into the first commit."},{"ts":1360787414000,"body":"Thank you! Sorry again it took me a while to review :heart:"},{"ts":1360787508000,"body":"No problem at all! You're awesome."}]},{"timestamps":[{"ts":1367588471000,"body":"Seems good. Could you squash your commits?"},{"ts":1367590314000,"body":"@rafaelfranca sure thing.\r\n\r\nWould you mind also reviewing #10234? I'm afraid it's been forgotten.\r\n\r\nThanks!"},{"ts":1367590913000,"body":"@josevalim WDYT?"},{"ts":1367590923000,"body":"@dasch sure think. Will do in a minute"},{"ts":1367594563000,"body":"Thanks!"},{"ts":1367835572000,"body":"@rafaelfranca done!"}]},{"timestamps":[{"ts":1376613341000,"body":"This illustrates how it can be used in a polymorphic situation: \r\n\r\n```ruby\r\nguest_entry.employee_id # => \"N/A\"\r\n```\r\n"},{"ts":1376613975000,"body":"How will this combine with allow_nil? Will it return nil or the default?\r\n\r\nOther than that, it seems fine, except I have a slight concern about the growth of scope of the delegation to the point where it just recreates a manually defined method. For example, your default value may require to use an instance attribute or call an instance method, so now we're into lambda territory (`default: -> { ... }`). There is a point at which it's just easier to define a method manually and handle all the logic there."},{"ts":1376623173000,"body":"Good instincts @jackxxu. It's a nice pattern for your case, but agreed with @egilburg that it doesn't fit within `delegate`'s domain. Better to create a new DSL-like declaration for your case than to push its scope even further, considering it's already been saddled with too much complexity.\r\n\r\nAnother way to approach your model is to wrap your polymorphic targets with presenter classes. The presenter may take the responsibility of implementing the complete interface and return \"N/A\" or whatever default where appropriate."},{"ts":1376884152000,"body":"@jeremy, if I understand your comment correctly, the presenter pattern you suggested will look something like this.\r\n\r\n```ruby\r\nEmployee  = Struct.new(:name, :employee_id)\r\nGuest     = Struct.new(:name)\r\n\r\nPerson = Struct.new(:record) do\r\n  def employee_id\r\n    if @record.respond_to?(:employee_id)\r\n      @record.employee_id\r\n    else\r\n      'N/A'\r\n    end\r\n  end\r\n\r\n  def name; @record.name; end\r\n\r\n  def name\r\n    if @record.respond_to?(:birth_date)\r\n      @record.birth_date\r\n    else\r\n      nil\r\n    end\r\n  end\r\n\r\n  def ssn; 'N/A'; end\r\nend\r\n\r\nEntry     = Struct.new(:person) do\r\n  delegate :name, :to => :person, :allow_nil => true\r\n  delegate :employee_id, :to => :person\r\n  delegate :birth_date, :to => :person\r\n  delegate :ssn, :to => :person, :allow_nil => true\r\nend\r\n\r\nguest_entry = Entry.new(Person.new(Guest.new('John'))\r\n```\r\n\r\nAs you can see, it just seems to be quite a bit of code, for what a simple DSL can cover. Also, one layer of more layer of presenter adds an additional delegation. \r\n\r\nIt depends on how much functionalities are best suited for the delegate domain. If we feel that it should strictly be a simple delegate, the default option is better suited in a presenter class somewhere; however, enriching the delegate DSL a little by this optional param seems to make the code more concise and readable.\r\n"}]},{"timestamps":[]},{"timestamps":[{"ts":1375321568000,"body":"Thanks!"},{"ts":1375323667000,"body":"thanks :smile: "}]},{"timestamps":[{"ts":1362306405000,"body":"This underlying behavior is incorrect since the interceptors are designed to interact with an email after it has been generated, but before it has ben sent. While it could be useful to interact with the email before it is generated, an interceptor would not be the desired place to do this, there is a `before_action` that already exists to do this.\r\n\r\nWhat are you trying to do exactly? You could modify the locale using a `before_action` in the mailer itself:\r\n\r\n```\r\n  #   class Notifier < ActionMailer::Base\r\n  #     before_action :add_inline_attachment!\r\n  #\r\n  #     def welcome\r\n  #       mail\r\n  #     end\r\n  #\r\n  #     private\r\n  #\r\n  #       def add_inline_attachment!\r\n  #         attachments.inline[\"footer.jpg\"] = File.read('/path/to/filename.jpg')\r\n  #       end\r\n  #   end\r\n```\r\n\r\n"},{"ts":1362329401000,"body":"I have to agree with @schneems, the interceptor needs to receive the email ready to be sent, which means everything should have already been generated at that point. What if you want to somehow process the email output like you can change headers? You'd now not be able to do that because the order is changed.\r\n\r\nAnyway, As @schneems pointed, a good place for doing that would be a before/around action/filter, seems like the best solution :+1:"},{"ts":1362330438000,"body":"Going to close this for now. Feel free to ping with questions."},{"ts":1362437640000,"body":"Looks like https://github.com/rails/rails/pull/8465 and https://github.com/rails/rails/pull/5372 are related to this. I tried doing this in a rails 3.2.11 app, but I got undefined method for both `before_filter` and `before_action`. \r\n\r\nWhat version is this behavior supported in?"},{"ts":1362522105000,"body":"Actually I might just have an app specific problem with this. I haven't had time to dig into it quite yet, but looks like rails does supply this functionality. Will report back if I have any follow-up questions. Thanks for the help!"},{"ts":1362620639000,"body":"So, it looks like rails does have the before_filter in the code, but it's never been released. I'm still getting \"undefined method before_action / before_filter\". I was bundling rails 3.2.13.rc2 and also 3.2.12 and in the same exists in both cases. It indeed looks like this has not been released, confirming by the following in a debugging session with those versions of rails:\r\n\r\n<pre>\r\n[4] pry(TrialMailer)> ActionMailer::Base.included_modules.include?(AbstractController::AssetPaths)\r\n=> true\r\n[5] pry(TrialMailer)> ActionMailer::Base.included_modules.include?(AbstractController::Callbacks)\r\n=> false\r\n</pre>\r\n\r\nCan you confirm and/or comment on when this functionality should be available, or help me understand where I've gone wrong.\r\n\r\nThanks."},{"ts":1362620941000,"body":"This PR is against master, you'll need to look at Rails 4 master. You can try it out with the beta if it's more convenient. \r\n\r\nhttps://github.com/rails/rails/blob/master/actionmailer/test/base_test.rb#L588\r\n"},{"ts":1362638002000,"body":"Ah, overlooked v4. Thanks!"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1363017944000,"body":"Sorry, I'm :-1: on this. It pollutes the git history and makes it harder to track why the tests were added. It's nothing to do with the code - if the change was the opposite way round I'd still be :-1: on it.\r\n\r\nThanks for your contribution though."}]},{"timestamps":[{"ts":1373471835000,"body":"Minor grammar/wording bikeshedding. Thank you!!!!"},{"ts":1373477630000,"body":"@steveklabnik : Thanks for the quick feedback, all typos have been fixed."},{"ts":1373481577000,"body":"Thank you! :heart:"},{"ts":1373485181000,"body":"Thanks you too!"}]},{"timestamps":[]},{"timestamps":[{"ts":1372273295000,"body":"/cc @tenderlove @jonleighton "},{"ts":1372585805000,"body":"@awilliams this fix is already present in `mysqladapter`. Rather than duplicating the code I would suggest to extract that method to `AbstractMysqlAdapter` since both `mysqladapter` and `mysql2adapter` subclass `AbstractMysqlAdapter` . \r\n\r\n"},{"ts":1372676299000,"body":"Thanks @neerajdotname, I missed that they both subclassed `AbstractMysqlAdapter`. I've updated my PR accordingly. "},{"ts":1373617845000,"body":"looks good. Can you add an entry to the CHANGELOG?"},{"ts":1373617985000,"body":"What versions does this affect?"},{"ts":1373644585000,"body":"@senny thanks, I've updated the activerecord/changelog. @pixeltrix I noticed this problem while using v4.0.0, but cannot say if it affects other versions"},{"ts":1373968975000,"body":"@awilliams looks good. Can you push a rebased version to make it mergeable?"},{"ts":1373969840000,"body":"@senny I've rebased the PR, parent is now 754a373"},{"ts":1373970193000,"body":"@awilliams thanks for your contribution :yellow_heart: "}]},{"timestamps":[{"ts":1364744533000,"body":"This makes one test instead of 4 separate tests, which means if one fails the other ones don't get run. :-1:"},{"ts":1364744758000,"body":"Will split up into four individual methods again. The problem was same method was getting called again"},{"ts":1364748248000,"body":"OK fixed."}]},{"timestamps":[{"ts":1376881407000,"body":"/cc @josevalim "},{"ts":1376883606000,"body":"Thanks, but I think this is unnecessary api that can bring more confusion, given that this is supposed to be used for serialization (ie json/xml) and I don't think these guarantee any ordering."}]},{"timestamps":[{"ts":1371695823000,"body":"+1 -- We're still using a monkey patch in production code to get around the base issue at play. Travis build fail seems to be unrelated."},{"ts":1371706883000,"body":"@chapmajs thx! :smile: "},{"ts":1371969255000,"body":"@senny are there anything else i can do to get this commit merged? :smile: "},{"ts":1371972181000,"body":"1. It will need to be squashed into one commit\r\n2. Why is this at 3-2-stable? Does it not happen on master?"},{"ts":1371981070000,"body":"@steveklabnik thx! commit squashed :+1: \r\n\r\nAnd this bug doesn't occur in master since it got fixed in https://github.com/rails/rails/commit/dae7b6545372cba40e08554b9a7b2f391eaa5c6e#L15L146 :smile: "},{"ts":1371981487000,"body":"PR updated :smile: \r\n\r\nShould i backport this to 3-2-13 aswell? ref: https://github.com/rails/rails/blob/3-2-13/activerecord/lib/active_record/model_schema.rb#L159-L166"},{"ts":1371986566000,"body":"No, 3-2-13 is a branch for the 3-2-13 release, which has already been released. Since it doesn't happen on master, 3-2-stable is fine."},{"ts":1371996026000,"body":"@steveklabnik ok! thx"},{"ts":1372001670000,"body":"As this is a bugfix, can you also add a CHANGELOG entry?"},{"ts":1372042249000,"body":"@senny Added :smile: thx for the review!"},{"ts":1372225136000,"body":"because of the CHANGELOG it does no longer apply, you need to push a rebased version but then we should be good to go :sparkles: "},{"ts":1372226202000,"body":"@senny thx for the review, i updated it again :)"},{"ts":1372226319000,"body":"btw this PR closes #10393 "},{"ts":1372226348000,"body":"ok, good to go, thanks for your patience :heart: "},{"ts":1372226399000,"body":"I'm waiting for the build and merge afterwards."},{"ts":1372226467000,"body":"thx for the review :smile: !"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1365788825000,"body":"Hi @hollanddd, thanks very much for your pull request.\r\n\r\nGenerally speaking, in Rails predicates return booleans whose exact value is undocumented. So, predicates are used this way\r\n\r\n```ruby\r\ndo_this if locking_enabled? # does not depend on the exact value being returned\r\n```\r\n\r\nSimilarly, predicates are tested this way\r\n\r\n```ruby\r\nassert foo.locked_enabled? # good\r\n```\r\n\r\nrather than\r\n\r\n```ruby\r\nassert_equal true, foo.locked_enabled? # wrong\r\n```\r\n\r\nThe boolean interpretation is all that matters, and since you do not commit to a particular value in your contract/documentation, there is no particular value to test, only its boolean meaning. That's why you have to use a bare `assert`.\r\n\r\nThis has been extensively discussed in the past, but since this is your first contribution I am sure you were not aware of it and I am glad to explain the rationale here.\r\n\r\nThanks anyway!"}]},{"timestamps":[{"ts":1374239016000,"body":"Can you squash the commits and maybe also improve the docs on `ActiveRecord::Result`? That would be awesome :yellow_heart: "},{"ts":1374496536000,"body":"hi @senny.\r\nI've squashed the commits.\r\n\r\nI also try to add some usage comments. Please some advise for me :)\r\n"},{"ts":1374511638000,"body":"@kennyj looks great! :yellow_heart: "},{"ts":1374513078000,"body":"thank you for your advises, @senny\r\nI've updated this PR."},{"ts":1374513579000,"body":"This looks good. Can you add `[ci skip]` to the documentation commit?"},{"ts":1374513746000,"body":"okay. I've already updated."}]},{"timestamps":[]},{"timestamps":[{"ts":1374451790000,"body":"@Empact could you fix commit messages, especially in 5e0d1fd?"},{"ts":1374451870000,"body":"This will also need a CHANGELOG entry: http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#updating-the-changelog"},{"ts":1374497053000,"body":"Added!"},{"ts":1374507765000,"body":"@Empact github says that I can't merge it automatically, could you rebase?"},{"ts":1374509988000,"body":"Should be good now."},{"ts":1374922987000,"body":"I feel somewhat strange, being left left out of the loop after waiting for some one to get engaged in the topic for 16 months.\r\n"},{"ts":1374924732000,"body":"@tandem-softworks I'm sorry if you feel that way and it's sad that nobody responded in your PR for so long. I'm working on rails when I have time and motivation to do it, which happens not really regularly and then I usually go through random issues and PRs (there is so many of them that I don't have any system for it). I just saw this one and wanted to act to hopefully get it merged.\r\n\r\nIf you have any suggestions or if you want to add something, I'm sure we can sort it out. One thing that I see is missing is CHANGELOG entry for your fix, there is only one for `add_to_target` changes."},{"ts":1374941397000,"body":"@drogus - thanks for your comment, @Empact got back to me as well."},{"ts":1374953726000,"body":"Updated to include a changelog entry for the original fixes, c/o @tandem-softworks "},{"ts":1374957317000,"body":"Looks good to me!\r\n\r\nSo we are all set to merge from this PR. Then I close mine.\r\n"},{"ts":1375264485000,"body":"Took another look at this and realized it didn't make sense to run the association update code if we're not going to do any changes due to `call_reject_if`, so I reapplied it to the whole block in c42264a. It had been removed in de4b6ce.\r\n\r\nAlso rebased."},{"ts":1375305132000,"body":"I follow you on your current version getting call_reject_if out of the way at the beginning.\r\n\r\nI removed the first call_reject_if, because the second one still did the job, and the code in between merely changes the association target array but does not touch the database.\r\n\r\n"},{"ts":1376300024000,"body":"@Empact could you rebase? I will merge as soon as Travis finishes running the tests."}]},{"timestamps":[{"ts":1375860807000,"body":"This is cosmetic changes too :smile:, please review: http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html\r\n\r\n> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted."}]},{"timestamps":[{"ts":1364191351000,"body":"Hey @jacobo - thanks for digging in! The concern isn't with using the `Marshal` format, but with marshal*ing* the entire job object. Switching formats won't address this :)"},{"ts":1364234678000,"body":"Thanks for the feedback @jeremy I hope you don't mind that I keep trying :wink: https://github.com/rails/rails/pull/9924"}]},{"timestamps":[{"ts":1368190890000,"body":"Merged by mistake, but it's there. Next time please describe the commit message a little bit more please. Thanks!"},{"ts":1368191063000,"body":"Sure, what exactly @carlosantoniodasilva ? This should have included a bm too? Or just bit more informative"},{"ts":1368191415000,"body":"It's always good to include why the change is there, ie does not need to create a new object, or performance, etc. Just a small note. In this particular case I'd think a benchmark might not be needed."},{"ts":1368191469000,"body":"Thanks, will keep in mind"}]},{"timestamps":[{"ts":1363697387000,"body":"Can you use `git revert` of that commit in one step, and add your test in another? I think it's easier to follow."},{"ts":1363697606000,"body":"Also, according to the issue, this happens on 3.2.13 as well right? So it's apparently a regression?"},{"ts":1363698507000,"body":"Single commit broken up into two separate.\r\n\r\nThe issue is a regression that also happens on 3.2.13. We've installed our own rails-3.2.13 fork in production with this patch applied, and I'd be happy to open a separate pull request for that if need be."},{"ts":1363702184000,"body":"The goal of the previous patch was to make it thread safe, so we need to ensure we won't have a regression on that side too. So simply reverting the commit won't cut, we need to make `@visible_actions` be a threadsafe hash."},{"ts":1363708684000,"body":"Why have a `@visible_actions` hash at all?\r\n\r\n```ruby\r\ndef visible_action?(action_name)\r\n  not self.hidden_actions.include?(action_name)\r\nend\r\n```\r\n\r\nGranted, I'm still a stranger to thread safety, but I'd consider `hidden_actions` to fit the bill."},{"ts":1363716890000,"body":"@gufo's suggested `!hidden_actions.include?(action_name)` is thread safe and seems pretty straightforward."},{"ts":1363762506000,"body":":+1: for fixing this asap, it broke a large section of our site, we've applied band-aids in the mean time"},{"ts":1363764262000,"body":"I've implemented the suggested change. Since this is now a very small patch, I also squashed it into a single commit, removing the revertion."}]},{"timestamps":[]},{"timestamps":[{"ts":1373118136000,"body":"Thanks for your contribution. The `USAGE` files are used by Thor (a gem on which Rails generators are based) to display a help message in the terminal. I'm not sure we can move them to a specific markup since it will be displayed as is in the terminal."},{"ts":1373118512000,"body":"True. \r\n\r\nClosing this now. thanks guys. "},{"ts":1373129887000,"body":"thanks for this info guys."}]},{"timestamps":[{"ts":1377894125000,"body":"I'm going to /cc @tenderlove on this according to the git blame"}]},{"timestamps":[]},{"timestamps":[{"ts":1357398004000,"body":"Can you please remove mentions of block as secret [above](https://github.com/jcoglan/rails/blob/b7993abe463186be3b5c65d19fc59f17e73e8186/actionpack/lib/action_dispatch/middleware/session/cookie_store.rb#L24-26)?"},{"ts":1357399030000,"body":"@goshakkk Done."},{"ts":1357411368000,"body":"Also backported to 3-2-stable in 1506d4d9e4fcf7abb94574bf8d0d58672b04a736"},{"ts":1357415045000,"body":":+1:"}]},{"timestamps":[{"ts":1367334191000,"body":"This seems legit to me. I'm not sure why numbers aren't in there, is there a reason?"},{"ts":1367889685000,"body":"Could you add a CHANGELOG entry and squash your commits? Thanks"},{"ts":1367890524000,"body":"@rafaelfranca :thumbsup: Done. Any possibility of this making it into the next RC (or final release) of Rails 4.0? Thanks."},{"ts":1367890583000,"body":"@bricker no idea. Have to ask @dhh."}]},{"timestamps":[{"ts":1367581967000,"body":"Sorry, I didn't see this PR but I've fixed it in ffaceaa8cf1381acbf1becf0f50cade88eafdc4c."},{"ts":1367582113000,"body":"We'll need to backport the changes to 4-0-stable. I did the same change in da47960893c51e65f2ccae9a272a4d441f73c6b7 for Active Support tests that use a FakeRunner class.\r\n\r\n@jonleighton are you going to backport (including my commit), or should I do that?"},{"ts":1367582179000,"body":"Ahh. Yes."},{"ts":1367582399000,"body":"@carlosantoniodasilva I already backported my commit. Hadn't seen yours, but just cherry picked it into 4-0-stable now."},{"ts":1367582539000,"body":"@jonleighton Ah great, thanks! I was waiting to figure out all failures to\r\nbackport :)\r\n\r\n\r\nOn Fri, May 3, 2013 at 9:00 AM, Jon Leighton <notifications@github.com>wrote:\r\n\r\n> @carlosantoniodasilva <https://github.com/carlosantoniodasilva> I already\r\n> backported my commit. Hadn't seen yours, but just cherry picked it into\r\n> 4-0-stable now.\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/10442#issuecomment-17390744>\r\n> .\r\n>\r\n\r\n\r\n\r\n-- \r\nAt.\r\nCarlos Antonio"}]},{"timestamps":[]},{"timestamps":[{"ts":1375066686000,"body":":+1: tests still pass"},{"ts":1375085962000,"body":"@neerajdotname awesome, great catch! :yellow_heart: "},{"ts":1375086110000,"body":"@senny thanks :green_heart: "}]},{"timestamps":[{"ts":1372276563000,"body":"@edg3r can you please squash the two commits into a single one and update this PR?"},{"ts":1372276609000,"body":"please also make sure to put `[ci skip]` into the new commit message."},{"ts":1372278094000,"body":"sure, sorry"},{"ts":1372278335000,"body":"no worries, thanks for your contribution :yellow_heart: "},{"ts":1372278511000,"body":"Thanks!"}]},{"timestamps":[{"ts":1374241926000,"body":"What use-case do you have in mind? I'm skeptical about this change because it only catches scopes defined with `scope` and not simple class methods:\r\n\r\n```ruby\r\ndef self.active\r\n  where(archived: false)\r\nend\r\n```\r\n\r\nAs one can arbitrarily mix scopes and class methods I don't think there is much value in retrieving all methods defined with `scope`."},{"ts":1374242598000,"body":"Here is a sample use-case :\r\n\r\nI want to build a simple search action, but I would like to be able to call scopes on my model based on what's in the query string.\r\n\r\nFor example : /messages?scopes=archived,moderated\r\n\r\nI need to be sure the values in ``params[:messages]`` are scopes before calling them.\r\n\r\n"},{"ts":1374405633000,"body":"I'm :-1: on this one. As described above it will only track methods defined with `scope` but class methods\r\nare an equal way to achieve the same behavior.\r\n\r\nI don't think your use-case is a good example either. Relying on the defined scopes to restrict the callable methods\r\nseems bad. I'd go with an explicit whitelist:\r\n\r\n```ruby\r\ndef allowed_scopes\r\n  [:latest, :archived]\r\nend\r\n```"},{"ts":1374407515000,"body":"Ok, thanks for your time! "},{"ts":1374414745000,"body":"@Intrepidd thanks for your effort to help make Rails better! :yellow_heart: "}]},{"timestamps":[{"ts":1375032776000,"body":"I'm not sure that encouraging matching on the message is a good idea; exceptions are implementation dependent, and not part of RubySpec. So this ties us even further to MRI (and specific versions of MRI)..."},{"ts":1375100317000,"body":"As documented in thread you linked:\r\n\r\n```ruby\r\ne = assert_raises ArgumentError do\r\n  dc = Dalli::Client.new('localhost', :badopt => true)\r\nend\r\n\r\nassert_match(/Unsupported option/, e.message) # or assert_equal etc... also allows testing attribs\r\n```\r\n\r\nI agree with @steveklabnik that it's better not to assert on the message if possible. If you have to, use the exception returned by `assert_raises`."},{"ts":1375102269000,"body":"Agree with both.\r\n\r\nThank you for the pull request."}]},{"timestamps":[]},{"timestamps":[{"ts":1374171228000,"body":"@razielgn thanks for working on this.\r\n\r\nDepending on exact text for exception messages is unfortunate. MRI exception messages are often cryptic or could be improved. Other Ruby implementations should be free to improve the messages. The actual exception message should be for human consumption and should not alter the result of computation. The exception class or kind is the thing that has semantic meaning for code.\r\n\r\nFWIW, RubySpec does not specify the exception message (with rare, and probably vanishing, exception)."},{"ts":1374246095000,"body":"Yes, I opened a bug about this on the Rubinius tracker, actually."},{"ts":1374246273000,"body":"@steveklabnik a bug about what? Do you have a reference?"},{"ts":1374246865000,"body":"https://github.com/rubinius/rubinius/issues/2404"},{"ts":1374246973000,"body":"Also, please open all pull requests against master unless they affect only an older branch; things will get backported as necessary. Also, I want to fix this, for sure, but I don't think this solution is the best one.\r\n\r\nLet's make a post on the rails-core mailing list to talk about what we should do in situations like this to support rbx and jruby. Since I'm not happy with this change and it's against the wrong branch, I'm giving this PR a close."},{"ts":1374247499000,"body":"I agree, it was just to start a discussion. :smiley:\r\n@steveklabnik will you start the conversation on rails-core or should I?"},{"ts":1374273331000,"body":"Go ahead!"}]},{"timestamps":[{"ts":1372182142000,"body":"Thanks @rafaelfranca sorry about that."},{"ts":1372275520000,"body":":heart: "}]},{"timestamps":[{"ts":1365692910000,"body":"updated"},{"ts":1365696216000,"body":"@rafaelfranca  I updated the commit"}]},{"timestamps":[]},{"timestamps":[{"ts":1374325792000,"body":":+1: "},{"ts":1374329821000,"body":"@pftg hey, thanks for the comments! I didn't update tests since it already has a lot of long strings and actually I'm not sure what's the best way of splitting it :)"}]},{"timestamps":[]},{"timestamps":[{"ts":1357009414000,"body":"Looks useful. +1"},{"ts":1357028828000,"body":"Agreed that the functionality is useful but I'm not sure that we should be building a slow, poorly specified web server as part of Rails - I think `Rack::Static` should be patched to handle this kind of thing and `ActionDispatch::Static` be a shim to that to provide backwards compatibility.\r\n\r\n@josevalim @jeremy @tenderlove wdyt?"},{"ts":1357033999000,"body":"Thanks for your feedback @pixeltrix. Your suggestion sounds reasonable, and I'd be happy to resubmit this as a patch to Rack::Static. \r\n\r\nBut if the Rack guys don't want this, I do think this should be handled by Rails somewhere. Given that we've already gone down the path of generating these gzipped assets via the asset compiler, it seems reasonable that rails should be capable of serving these files up to the client somehow.\r\n"},{"ts":1357061535000,"body":"+1"},{"ts":1361474113000,"body":"Yes +1"},{"ts":1361475866000,"body":"@maletor there's an open PR (rack/rack#479) that implements this functionality which seems like it will be eventually accepted once the details are ironed out - probably better to post there if you're interested in it."},{"ts":1366479062000,"body":"I don't think this is going to make it into Rack. Might we reconsider adding this to Rails?"},{"ts":1374433747000,"body":"Another option for serving gzipped assets until its available in Rails core: https://gist.github.com/eliotsykes/6049536 "},{"ts":1374442919000,"body":"@pixeltrix Could we reconsider adding this to Rails? There seems to be a demand for it, and there doesn't seem to be any traction getting this into Rack."}]},{"timestamps":[{"ts":1358376304000,"body":"Can you explain your use case a little bit more please? I wasn't even aware that we had a task for clearing the logs, since a simple `rm logs/*` would do most of the time I think (I know this doesn't `rm`, but there's no much difference on the result)."},{"ts":1358376859000,"body":"Use case:\r\n\r\nI want to preserve the contents `development.log` and clear the `test.log` and `stage.log`. Right now, the `rake log:clear` task will completely empty all of the log files. I wanted a way to limit which logs were cleared when running this task.\r\n\r\nYes, there isn't much difference in the result, I just like using `rake` when I can."},{"ts":1358377836000,"body":"Would you like me to update the `CHANGELOG` as well?"},{"ts":1358377867000,"body":"Yes, a changelog entry would be good."},{"ts":1358380017000,"body":"`CHANGELOG` update added"},{"ts":1358380379000,"body":"Thanks."}]},{"timestamps":[{"ts":1367822043000,"body":"This has been moved to a separate pull request\r\nhttps://github.com/rails/rails/pull/10484\r\n\r\nSorry for the inconvenience...\r\n\r\nThanks\r\nAditya"},{"ts":1367822203000,"body":"@aditya-kapoor Could you close this?"},{"ts":1367822324000,"body":"Okk...sorry for inconvenience...:("}]},{"timestamps":[{"ts":1368772008000,"body":"Sorry, but this is a bug in Mongoid, not in Rails. We shouldn't have to make a cosmetic change because of someone else's code.\r\n\r\nFurthermore, we won't accept patches into the 3-2-13 branch, they should be sent against master and will be backported where appropriate."}]},{"timestamps":[{"ts":1356995979000,"body":"Nice update!"}]},{"timestamps":[{"ts":1361967773000,"body":"Please review, there are some inconsistencies. Have you run the tests for pg, all green?"},{"ts":1371292719000,"body":"Is this still required? "},{"ts":1371990421000,"body":"@Jiebour closing this PR. \r\n\r\nPlease open again if you thing that this is important fix to go. I cannot see a use case for this PR.\r\n\r\nthanks."}]},{"timestamps":[{"ts":1358300264000,"body":"Thank you"}]},{"timestamps":[{"ts":1369578796000,"body":"Any hints on how to patch the Rake task in a rails4.0.0rc1 app?"}]},{"timestamps":[{"ts":1366292135000,"body":"You can push documentation/guides changes without opening a pull request, in [docrails](https://github.com/lifo/docrails)."},{"ts":1366292558000,"body":"Also, could you [squash your commits](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#get-some-feedback) please"},{"ts":1366293110000,"body":"@dmathieu  I will do that. Maybe will be better if I close the pull request here and send a pull request to docrails?"},{"ts":1366293250000,"body":"Docrails doesn't accept pull requests\r\nOn Apr 18, 2013 10:51 AM, \"Sadjow Medeiros Leão\" <notifications@github.com>\r\nwrote:\r\n\r\n> @dmathieu <https://github.com/dmathieu> I will do that. Maybe will be\r\n> better if I close the pull request here and send a pull request to docrails?\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/10261#issuecomment-16577449>\r\n> .\r\n>"},{"ts":1366293414000,"body":"/cc @steveklabnik"},{"ts":1366293558000,"body":"@sadjow this is the right place for a pull request.\r\n\r\ndocrails is only for quick doc fixes you are sure about. Edits that want feedback have the same process than regular tickets, they are Rails issues. (Summary: docrails is not a documentation project.)"},{"ts":1366294424000,"body":"Thanks @fxn ! "},{"ts":1366385854000,"body":"@steveklabnik  everything ok?"},{"ts":1366666279000,"body":"@rafaelfranca @steveklabnik I'm closing this issue. This isn't much important. But, I will try do something better later."},{"ts":1366702775000,"body":"Okay! I've been traveling so I didn't see you updated things...."}]},{"timestamps":[{"ts":1370349356000,"body":":+1:"},{"ts":1370371270000,"body":"@carlosantoniodasilva should I remove that test?"},{"ts":1371214127000,"body":"Thanks @hone, and sorry I missed your message. Thanks @guilleiguaran!"}]},{"timestamps":[{"ts":1372083437000,"body":"Please squash commits into one commit."},{"ts":1372083610000,"body":"@arunagw I squashed my commits."},{"ts":1372086634000,"body":"If you want to improve this guide maybe is better to remove the inline javascript and do it in a unobtrusive way"},{"ts":1372092489000,"body":"@rafaelfranca Thanks for your review.\r\nI reflected your point and force pushed."},{"ts":1372817834000,"body":"I think your last bullet in the commit message is not handled, or am I missing something? Also please add `[ci skip]` to the commit message so we can avoid a travis run :). Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1360463608000,"body":"Thanks @wangjohn!\r\n\r\nI have many questions about this feature. The first is why do we need it in the first place? Besides, Rails already ships with a AS::FileUpdateChecker that notifies when change happens, why not extend it instead? Finally, I don't see a need to add a new type of queue, adding complexity to the notifications system.\r\n\r\nThat said, we need to understand what is the use case for this, the reason behind your design decisions and Rails it will make building Rails applications easier/faster, otherwise this may be better off as a Rails plugin."},{"ts":1360505798000,"body":"@wangjohn your current implementation is probably not thread safe (`Notifications.notifiers` needs to be a `ThreadSafe::Cache` instead of a plain `Hash`).\r\n\r\nI'm also not sure why this shouldn't be kept as a Rails a plugin."},{"ts":1360509511000,"body":"@josevalim thanks for pointing out AS::FileUpdateChecker. I didn't realize that this was available, but I'll go ahead and extend that. The reason why I'm creating this is because I'm working on a message bus system: https://gist.github.com/tenderlove/ee2ceedeaac138d1d9ca.\r\n\r\nThe idea is that in development mode, a server could push filesystem changes to the browser using SSE's without the developer having to push refresh on the browser. The plan was to extend Notifications so that there would be a way to send notifications about the file system. \r\n\r\nSince it seems there's already an infrastructure in place for checking for file updates, I'm going to close this PR and work on extending FileUpdateChecker. "}]},{"timestamps":[]},{"timestamps":[{"ts":1365163545000,"body":"@fxn @steveklabnik thoughts?"},{"ts":1365164029000,"body":"> As it is hidden in the navigation it is very easily overlooked.\r\n\r\nYeah, that's the WIP tag. :)"},{"ts":1365164475000,"body":"@steveklabnik hehe :trollface: \r\n\r\nDo you remember a reason to keep the WIP tag on the AM guide? It feels quite complete to me."},{"ts":1365165041000,"body":"A few more thoughts:\r\n\r\nSince this is the debut of this file, it'd be nice to wrap it all to 80 chars. Since it's not public yet, the history isn't as important.\r\n\r\nA blank line here would be awesome:\r\n\r\n```\r\n* How to test your Action Mailer classes.\r\n\r\n--------------------------------------------------------------------------------\r\n```\r\n\r\nRight now, markdown is interpreting the last one as a section heading because of this. I can't comment on your diff since this line isn't part of it. ;)\r\n\r\n> So we got the mailer, the views, and the tests.\r\n\r\nThis is... sorta tiny. I'm not sure how to expand it, but to start the guide off with what's basically \"Here's some terminal output. Yep.\" isn't super great.\r\n\r\n> #### Edit the Mailer\r\n\r\nThis section doesn't explain _why_ methods in mailers are important. It basically just describes the process of making one, without any of the background info on why you're doing any of this.\r\n\r\n> It is also a good idea to make a text part for this email.\r\n\r\nI'd prefer to make this statement stronger, as some people only accept `text/plain` emails. Also, it'd be nice to explain how this process works, ie, multipart.\r\n\r\n> #### Wire It Up So That the System Sends the Email When a User Signs Up\r\n\r\nThis heading is terrible.\r\n\r\n> some people create Rails Observers to fire off emails,\r\n\r\nObservers were removed.\r\n\r\n> Due to this, it makes sense to just have your controller tell the mailer to send an email when a user is successfully created.\r\n\r\nI'd really like to see this whole part get a bit more... forceful. Rather than saying \"well, some people do this, others do this....\" let's cut the hippie bullshit and say \"Send emails in the controller, but you should really be using Resque.\" ;)\r\n\r\n> This provides a much simpler implementation that does not require the registering of observers and the like.\r\n\r\nSame here, observers suck, and if they suck, why do we mention them?\r\n\r\n> Action Mailer now handles \r\n\r\nGuides should always be written as though they're in the present tense. Throw the past down the memory-hole.\r\n\r\n> If you are using UTF-8 as your character set,\r\n\r\nRuby 2 does this by default, I'd like to add a caveat for 1.9 rather than present 'if' as the norm. \"Strongly recommend 2.0\" and all that.\r\n\r\n> * Defining a header field as a parameter to the `mail` method:\r\n\r\nIf we're going to suggest custom headers, [X-* has been deprecated](http://tools.ietf.org/html/rfc6648), so we shouldn't encourage that pattern.\r\n\r\n> Adding attachments has been simplified in Action Mailer 3.0.\r\n\r\nSame deal. 3.0? Who cares?\r\n\r\n> pre-encode\r\n\r\nhttp://www.youtube.com/watch?v=wBo3-XnhXNM\r\n\r\n> Action Mailer 3.0 \r\n\r\nSame deal here.\r\n\r\n> Firstly, to tell Mail\r\n\r\nWait, what's Mail?\r\n\r\n> `attachments[]` as a hash\r\n\r\nshould drop the []s.\r\n\r\n> Thus, when using named routes only the \"_url\" variant makes sense.\r\n\r\n\r\nThis sentence is really awkward.\r\n\r\n> It is also possible to set a default host that will be used in all mailers by setting the `:host` option as a configuration option in `config/application.rb`:\r\n\r\nThis shouldn't be at the end, it should be at the beginning. Why tell people to add `:host` to every `_url` call when they should set it globally?\r\n\r\n>  prepopulate\r\n\r\nSee George Carlin above\r\n\r\n> Abstract Controller\r\n\r\nShould be `AbstractController`.\r\n\r\n> GMail\r\n\r\nGmail.\r\n\r\n>   domain:               'baci.lindsaar.net',\r\n\r\nBest to use `example.com` for all sample domains.\r\n\r\n---------------------------------------------------------------------------------------\r\n\r\nThat's all I got for now. Let's whip this guide into shape. :)"},{"ts":1365167904000,"body":"@steveklabnik thanks for all that good stuff! I'll update the PR later today."},{"ts":1365423165000,"body":"@steveklabnik @fxn can you take another look?\r\n\r\nI adjusted most things pointed out by @steveklabnik, there were a few I left out because I didn't have a good Idea how to fix them:\r\n\r\n> So we got the mailer, the views, and the tests.\r\nThis is... sorta tiny. I'm not sure how to expand it, but to start the guide off with what's basically \"Here's some terminal output. Yep.\" isn't super great.\r\n\r\n>Edit the Mailer\r\nIt is also a good idea to make a text part for this email.\r\nI'd prefer to make this statement stronger, as some people only accept text/plain emails. Also, it'd be nice to explain how this process works, ie, multipart."},{"ts":1365442725000,"body":"For the second, basically just \"Let's also make a text part for this email. Not all clients prefer HTML emails, and so sending both is best practice.\" rather than \"maaaaaybe you should do that too\""},{"ts":1365442990000,"body":"How about this for the first one:\r\n\r\n> As you can see, you can generate mailers just like you use other generators with Rails. Mailers are conceptually similar to controllers, and so we get a mailer, a directory for views, and a test.\r\n> \r\n> If you didn't want to use a generator, you could create your own file inside of `app/mailers`, just make sure that it\r\n> inherits from `ActionMailer::Base`: \r\n\r\n```\r\nclass MyMailer < ActionMailer::Base\r\nend\r\n```"},{"ts":1365494013000,"body":"@steveklabnik thanks for your inputs, it's much appreciated :heart: ! I pushed an updated version."},{"ts":1365529901000,"body":"Looks great. Just squash it up and I'm good to merge. @fxn any objections?"},{"ts":1365530857000,"body":"@steveklabnik squashed up."},{"ts":1365530894000,"body":"Hey guys! I'll have a look at it after dinner."},{"ts":1365541953000,"body":"Good job! It needs some copy-editing here and there, \"Mailer\" goes in lowercase like \"controller\", \"HTTP\" and \"Email protocol\" do not match, and a bunch of other similar details. I'll make a pass but let's merge!"},{"ts":1365547304000,"body":">  let's merge!\r\n\r\n:shipit:"}]},{"timestamps":[{"ts":1357520123000,"body":"Can't be merged."},{"ts":1357520383000,"body":"Rebased against master, should be clean now."}]},{"timestamps":[]},{"timestamps":[{"ts":1362502178000,"body":"Seems good.\r\n\r\ncc @fxn "},{"ts":1362512314000,"body":":+1:"}]},{"timestamps":[{"ts":1356738957000,"body":"@rafaelfranca this should be a quick one :cake: "},{"ts":1356740061000,"body":"We have #8546 trying to do the same thing. @carlosantoniodasilva thinks is better to remove the warning that are causing this failure, not change the tests."},{"ts":1356740329000,"body":"I think you should merge one of these PRs. I don't think an unrelated warning should cause a test failure. Of course we should get rid of the warnings but they are flashy enough to be noticed. AS I see it tests should fail when code does not work and in this case it does but the test fails accidentally.\r\n\r\nFeel free to merge or close this PR :wink: "},{"ts":1356740426000,"body":"Yes. I think the same. I'll leave the decision with @carlosantoniodasilva "},{"ts":1356912458000,"body":"Fixed in https://github.com/rails/rails/pull/8546"},{"ts":1357166627000,"body":":heart: thanks guys."}]},{"timestamps":[{"ts":1374476484000,"body":"The build failed. :)"},{"ts":1374476849000,"body":"Sorry about that, I changed a method right before I pushed and forgot to check the tests again. They should be fixed now."},{"ts":1374484235000,"body":"I'm maybe wrong but it would be nice if we could check *via* a benchmark if this refactoring doesn't produce any performance issue. What do you think?"},{"ts":1374511844000,"body":"I've added a benchmark whose results can be seen in the commit message and I think the changes have a small or negligible effect on performance. The benchmark can be found here: https://gist.github.com/wangjohn/6055413"},{"ts":1374511940000,"body":"@wangjohn : Awesome, thanks a lot! :heart: "},{"ts":1374559091000,"body":"Sorry, I forgot to \\cc @spastorino"},{"ts":1374714695000,"body":"@wangjohn benchmark it please :)"},{"ts":1374744552000,"body":"@spastorino : It's still done (see @wangjohn's commit message and [gist](https://gist.github.com/wangjohn/6055413))"},{"ts":1374831167000,"body":"After further testing, I'm going to close this PR. I forgot to turn off garbage collection on my runs and that significantly affected my results. With garbage collection off, the refactored code is 20-30% slower which is unacceptably slow."}]},{"timestamps":[{"ts":1363786524000,"body":"@anupamc Can you add a test ? "}]},{"timestamps":[{"ts":1363793947000,"body":"Please squash your commits. Also, there are a couple of stray blank lines that should probably be removed."},{"ts":1363939929000,"body":"I added a few comments. Please make sure to also squash all the commits into a single one and use a descriptive commit message."},{"ts":1372010621000,"body":"Hey @vicli will you able to make changes in PR suggested? Also please squash commits into one. "},{"ts":1373278415000,"body":"@arunagw how I can share my changes with @vicli, that he can complete his mission.\r\n\r\nBy the way, this tests are fallen at least for sqlite3. Is there any open issues connected with this bug, have not found myself yet."},{"ts":1373733049000,"body":"@pftg I think this is original issue https://github.com/rails/rails/issues/4566\r\n\r\n\r\n"},{"ts":1373743229000,"body":"Indeed! Sorry, missed, that issues #4566 still open."},{"ts":1373885066000,"body":"Closing this as #11434 merged.\r\n\r\nthanks.\r\n\r\n@pftg do we need these tests?"},{"ts":1373885279000,"body":"@arunagw, nope."}]},{"timestamps":[{"ts":1359216478000,"body":"@carlosantoniodasilva @rafaelfranca what do you think?"},{"ts":1359217565000,"body":"@senny I think that @josevalim was :runner: :D."}]},{"timestamps":[{"ts":1369504278000,"body":"I'm not sure if someone will read this notice."},{"ts":1369508810000,"body":"I would prefer to actually change it to 127.0.0.1 over printing this kind of warning."},{"ts":1369509322000,"body":":+1:\r\n\r\nBut since this change the development workflow to something more difficult I like to hear @dhh and @jeremy before making any decision."},{"ts":1369510045000,"body":"Absolutely, and @NZKoz would be good as well."},{"ts":1369513072000,"body":":+1: to changing the default to 127.0.0.1"},{"ts":1369514696000,"body":":+1: as well."},{"ts":1369604926000,"body":"In terms of a message, I agree with @rafaelfranca, no one will see that. \r\n\r\nSecurity wise I can understand the desire for the defaults, but if you're spending time in coffee shops and don't have your firewall enabled you have *much* bigger problems.\r\n\r\nbinding to 127.0.0.1 would make some workflows more annoying, though on the whole it would be easy enough to work around. You'd probably want to bind to ::1 for ipv6 nerds too, not sure if that will cause errors."},{"ts":1369624043000,"body":"Most people who start a basic single instance mongrel, especially for the first time, *will* see the message, in my opinion. More advanced configurations such as running in the background may hide the message, but it's the basic users who would benefit most from the warning. \r\n\r\nIf you do switch to binding by default, there has to be a switch like `--no-binding` (or should it be `--global-binding` or `--bind-all`?) to turn if off for those who for whatever reason need the current behaviour. And a startup message should then explain it, probably."},{"ts":1369643678000,"body":"I remember we tried this once many years ago and it was annoying for some reason. I don't remember what the problem was though.\r\n\r\nI think a notice is a good place to start. It's highly visible when you start the webrick server as you will see the output straight in that terminal."},{"ts":1369751986000,"body":"Fine. Lets start with the notice."}]},{"timestamps":[{"ts":1377192693000,"body":"Any change to mime negotiation should be tested in all major browsers,\r\nsince browsers themselves are not very keen on following the RFCs.\r\n\r\n\r\n-- \r\n\r\n\r\n*José Valim*\r\nwww.plataformatec.com.br\r\nSkype: jv.ptec\r\nFounder and Lead Developer"},{"ts":1377195021000,"body":"@dplummer I've replied to your question on #8987 - as @josevalim said this would break some browsers so we can't change this."}]},{"timestamps":[{"ts":1356734439000,"body":"@rafaelfranca could you review this? :smile: "},{"ts":1357176914000,"body":"Just FYI, Tested this pull request with Oracle enhanced adapter, as you might expect there are 3 failures https://gist.github.com/4440063"}]},{"timestamps":[]},{"timestamps":[{"ts":1378188554000,"body":"@spastorino Not sure this fixes #11834.\r\nSandbox is still prematurely rolled back at #clear_reloadable_connections, so this fix actually makes it harder to debug now:\r\n\r\n```ruby\r\nrails c -s\r\nLoading development environment in sandbox (Rails 4.1.0.beta)\r\nAny modifications you make will be rolled back on exit\r\n2.0.0-p247 :001 > Bar.count\r\n   (0.1ms)  SELECT COUNT(*) FROM \"bars\"\r\n => 1 \r\n2.0.0-p247 :002 > reload!\r\nReloading... ## ==> sandbox clears here\r\n => true \r\n2.0.0-p247 :003 > Bar.delete_all\r\n  SQL (132.9ms)  DELETE FROM \"bars\"\r\n => 1 \r\n2.0.0-p247 :004 > exit  ## => no sandbox rollback now\r\n➜  rails c\r\n2.0.0-p247 :001 > Bar.count\r\n   (0.1ms)  SELECT COUNT(*) FROM \"bars\"\r\n => 0 \r\n```"},{"ts":1378221474000,"body":"@gzohari I will revert then, can you provide a fix for this?"}]},{"timestamps":[{"ts":1367769444000,"body":"@rafaelfranca I've updated description"},{"ts":1367769490000,"body":"Thank you"}]},{"timestamps":[{"ts":1372726401000,"body":"@carlosantoniodasilva updated. "},{"ts":1372726655000,"body":":+1:"}]},{"timestamps":[{"ts":1372975395000,"body":":heart:"}]},{"timestamps":[{"ts":1364818487000,"body":"Seems like asserts are missing more than being unused"},{"ts":1364821103000,"body":"Adding assert to the test cases right away. Thanks for pointing out !!!  "}]},{"timestamps":[{"ts":1368454423000,"body":"I pretty sure we already fixed this. Can you try 3-2-stable?"},{"ts":1368454558000,"body":"See https://github.com/rails/rails/issues/10427#issuecomment-17439704"},{"ts":1368454624000,"body":"This was based off 3-2 stable. And I found this is master as well. That blanketed exception ALWAYS tries to transform the exception to something else, so we lose the nice syntax for `resque Resque::TermException` because even if the \"no method defined\" exception is not thrown, we don't want to transform the non-sql exception with something."},{"ts":1368454742000,"body":"Note: what happens:\r\n\r\n- Rails sql executes.\r\n- Resque::TermException.\r\n- Exception clause is hit. Exception.result is used by postgres_adapter.\r\n- No method exception is thrown.\r\n\r\nOriginal exception is long lost. And even if postgres_adapter was smarter and didn't trigger a no method error, it would be converted into some sort of SQL exception-like error and not re-thrown."},{"ts":1368454954000,"body":"@dlikhten This is not what I'm seeing.\r\n\r\n```\r\nexception = translate_exception(e, message)\r\nexception.set_backtrace e.backtrace\r\nraise exception\r\n```\r\n\r\n`translate_exception` will return the original exception if it doesn't respond to `result` and so the original exception will be raised."},{"ts":1368455505000,"body":"Well. might as well close this one. Looking at the 9-day old patch it will probably be resolved in the next rails release. Thanks for pointing this out.\r\n\r\nI wonder if similar issues exist in mysql or other databases..."},{"ts":1368455522000,"body":"One small note: generally speaking, patches are sent against master and then backported."},{"ts":1368455554000,"body":"@steveklabnik Ah. I'll have to do that in the future. Thanks :)"},{"ts":1368455720000,"body":"No worries. Other than that, a fine submission: it's good to open a pull request when you're unsure of the best way to fix something, because then we have something concrete to discuss. Often pull requests go through several iterations before they get applied. :)"},{"ts":1368455912000,"body":"@steveklabnik a fine mechanism. \r\n\r\nThanks guys."},{"ts":1368456071000,"body":"> I wonder if similar issues exist in mysql or other databases...\r\n\r\nGood question. This might be the case since [`translate_exception` in the mysql adapters](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb#L659) call `super` and the `super` implementation is [to raise a `StatementInvalid`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L436) exception.\r\n\r\nSeems worth to investigate. To do this I recommend create a test to the MySQL adapters and see if the original exception is raised. WDYT? Want to investigate?\r\n\r\nBTW, thank you so much for your pull request."},{"ts":1368457057000,"body":"@rafaelfranca I am truly sorry. I don't have any spare time. I came across this patch as part of my work, and don't have a single mysql (or oracle or whatever) instance. So the setup time alone is something I already don't have :( Investigation is worthwhile, but there is at least a workaround for now...\r\n\r\n    e.message =~ /#{Regexp.escape(\"Resque::TermException\")}/\r\n\r\n\r\nHowever some helpful advice:\r\n\r\nI recommend removing our dependency on the whim of `translate_exception`. Instead every adapter needs to implement `can_handle_exception?` which would allow the adapter to claim or not that exception. This code can then known to re-raise the exception or proceed with translate.\r\n\r\nIt's a tad bit of complexity but ensures every adapter now or in the future will not have such an issue.\r\n\r\n\r\nIdeally, however, the exception thrown should be a SqlException type, and only catch that, everything else should be ignored in this catch block. I don't know if this is currently feasible."},{"ts":1368457340000,"body":"@dlikhten thank you. I'll work on it"}]},{"timestamps":[]},{"timestamps":[{"ts":1368539790000,"body":"Seems good. Thank you so much.\r\n\r\nCould you add a CHANGELOG entry?"}]},{"timestamps":[{"ts":1373881598000,"body":"Rebased with master."},{"ts":1373908757000,"body":"@senny updated. thanks"},{"ts":1373908887000,"body":"@arunagw thanks :yellow_heart: "}]},{"timestamps":[{"ts":1372482755000,"body":"@carlosantoniodasilva I removed the change log entry and found a suitable place to add tests (I couldn't find a relevant place before)"},{"ts":1372503695000,"body":"Do you want to send a patch to 4-0-stable too?"},{"ts":1372503814000,"body":"Thanks, will do."}]},{"timestamps":[{"ts":1371240868000,"body":"Looks fine with me."},{"ts":1371240885000,"body":"@tenderlove assigned for you to merge this."}]},{"timestamps":[{"ts":1366164467000,"body":":+1: on having something that make more sense, but `rails engine <engine-name>` feels weird though.\r\n\r\nMaybe `rails engine new` ?"},{"ts":1366164646000,"body":"@sikachu assuming that #10233 gets merged, this will be in line with `rails plugin` acting like `rails plugin new`, but I imagine that I can make both `rails engine` and `rails engine new` work."},{"ts":1366165945000,"body":"@sikachu I changed it to just swap `plugin` for `engine` and append `--mountable`. That means that for now the syntax will still be `rails engine new <name>`, but that the change will automatically benefit from the alias in #10233 if it happens."},{"ts":1366166512000,"body":"Rails engine new +1"},{"ts":1366166649000,"body":"I can go ahead and squash the two commits if/when this is merged, but I'll leave them for clarity until then."},{"ts":1366167174000,"body":"Thanks for the pull request but I don't agree with proposal. A railtie is not an engine but it is still generated by rails plugin.\r\n\r\nIn other words, an engine is one specific kind of a rails plugin and the rails plugin command can generate both engines and railties. The old rails plugin *implementation* (the ones inside vendor/plugins) is dead, we still have other kinds of plugins though, it just happens they are packaged differently (through gems, git repos, etc). This naming is by design, after all `rails plugin` was introduced by the time vendor/plugins were becoming irrelevant, soon to be deprecated."},{"ts":1366167953000,"body":"I think it's really confusing that we killed plugins, but engines are the only kind left, but it's still called `plugin`. That said, I haven't read the campfire logs from this morning yet."},{"ts":1366168899000,"body":"@steveklabnik I just mentioned that engines are not the only kind of plugins :P we have railties too. what was killed was a particular implementation of plugins (the ones living at vendor/plugins that had an implicit engine declared for them)."},{"ts":1366170738000,"body":"But railties are called 'railties,' not plugins... I didn't even know you could generate railties. o_O\r\n\r\n\r\nI guess what I'm saying is that I need to write some docs."},{"ts":1366171159000,"body":"`rails/railties/bin/rails plugin --help | grep railtie` doesn't match anything, so I assume that there isn't a generator for railties, or that for some reason it isn't mentioned in the help for `rails plugin`"},{"ts":1366172818000,"body":"> But railties are called 'railties,' not plugins... I didn't even know you could generate railties. o_O\r\n\r\nI don't follow the argument here. Railties and engines are both kinds of plugins.\r\nAn apple is still called apple, it doesn't stop it from being a fruit. :P\r\n\r\n> `rails/railties/bin/rails plugin --help | grep railtie` doesn't match anything, so I assume that there isn't a generator for railties\r\n\r\nYes, you are right. In fact, the generated plugin by default is neither an engine nor a railtie. This is because to extend Rails, you don't need any of them upfront. They are both an implementation detail. When you need some particular features in your plugin, you upgrade it to Railtie or, depending on the features, you upgrade it to an engine. Railtie and Engine are implementation details. When you generate a model, do you invoke `rails g activerecord` (the implementation) or `rails g model` (what you want to achieve)?\r\n\r\nIn any case, it is good you mentioned the help, because the `rails engine --help` in this proposal would point directly to the `rails plugin new --help`, which could cause a lot of confusion."},{"ts":1366218146000,"body":">  Railties and engines are both kinds of plugins.\r\n\r\nThis is the core piece that I did not understand. I thought plugins were _only_, as  you say, 'the particular implementation of plugins.'\r\n\r\nI get it now. :)"}]},{"timestamps":[{"ts":1357282562000,"body":":+1:"}]},{"timestamps":[{"ts":1356629465000,"body":"@rafaelfranca could you review this?"}]},{"timestamps":[{"ts":1374741453000,"body":"Oops missed [skip ci] :cry: !"},{"ts":1374749373000,"body":"Made a small comment, you can amend your commit and add `[ci skip]` to the commit message, then push force to your branch and github will update the pull request properly."},{"ts":1374749965000,"body":"@carlosantoniodasilva  done :+1: "},{"ts":1374752788000,"body":"Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1373543406000,"body":"thanks :yellow_heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1375209273000,"body":":+1:"}]},{"timestamps":[{"ts":1371579437000,"body":"I like this change, as it is a new feature we also need an entry in the CHANGELOG."},{"ts":1371582916000,"body":"Changelog added. By the way I noticed #10998 while I was in there."},{"ts":1371638078000,"body":"this looks like a duplicate of #10920"},{"ts":1371639976000,"body":"Ha quite a coincidence. I'm happy to merge them or whatever, so long as we use the more succinct #enum_for / #to_enum facility in the end result. Also, the other PR prompted me to add some docs for the method.\r\n\r\nHere's another earlier example, for reference: #4096"},{"ts":1372202442000,"body":"Thanks."}]},{"timestamps":[{"ts":1362858970000,"body":"Can you change the commit message to something like:\r\n\r\n    Use \"Fixes\" in place of \"Fix\" in changelogs for consistency [ci skip].\r\n\r\n"}]},{"timestamps":[{"ts":1376304752000,"body":"Thanks. The current solution seems to be prone for false positives though. Maybe we could rescue and use respond_to? to check if it is avaialble or not, instead of relying on stacktraces?\r\n"},{"ts":1376312360000,"body":">Thanks. The current solution seems to be prone for false positives though. Maybe we could rescue and use respond_to? to check if it is avaialble or not, instead of relying on stacktraces?\r\n\r\nSpent some more time on it and managed to remove backtraces completely by using `NoMethodError#name`\u001c, which carries the not found method. :smile: "},{"ts":1376315141000,"body":"Neat! :+1: "},{"ts":1377101905000,"body":"Awesome, thanks!"}]},{"timestamps":[{"ts":1370125055000,"body":"This sounds interesting. Could you show some examples of creating custom cache helpers after this change?"},{"ts":1370131331000,"body":"@ptn \r\n\r\nMonitoring the number of times a fragment was stale or fresh.\r\n```ruby\r\ndef monitored_cache(name = {}, options = nil, &block)\r\n  if controller.perform_caching\r\n    safe_concat(monitored_fragment_for(cache_fragment_name(name, options), options, &block))\r\n  else\r\n    yield\r\n  end\r\n\r\n  nil\r\nend\r\n\r\ndef monitored_fragment_for(name = {}, options = nil, &block)\r\n  if fragment = controller.read_fragment(name, options)\r\n    #Do something to incr a count in redis/memecache/etc that shows cache was fresh\r\n    fragment\r\n  else\r\n    #Do something to incr a count in redis/memecache/etc that shows cache was stale\r\n    write_fragment_for(name, options, &block)\r\n  end\r\nend\r\n```\r\n\r\nCalling procs if cache is stale.\r\n```ruby\r\ndef cache_and_call(name = {}, options = nil, &block)\r\n  if controller.perform_caching\r\n    safe_concat(fragment_for_and_call(cache_fragment_name(name, options), options, &block))\r\n  else\r\n    yield\r\n  end\r\n\r\n  nil\r\nend\r\n\r\ndef fragment_for_and_call(name = {}, options = nil, &block)\r\n   if fragment = controller.read_fragment(name, options)\r\n      fragment\r\n   else\r\n     if options[:proc]\r\n       @proc_results = options[:proc].call\r\n     end\r\n     write_fragment_for(name, options, &block)\r\n   end\r\nend\r\n```"}]},{"timestamps":[{"ts":1371292503000,"body":"Closing this. please open again if this required."}]},{"timestamps":[{"ts":1356628151000,"body":"/cc @josevalim @wycats @hone"}]},{"timestamps":[{"ts":1367806459000,"body":"Fix for #10432 "},{"ts":1367806599000,"body":"This probably isn't quite where the fix belongs, but I thought I'd contribute a test to show how it's breaking."},{"ts":1367874085000,"body":"Looks good. Can you rebase ?"},{"ts":1367874696000,"body":"rebased :)"},{"ts":1367882699000,"body":"Looks good.\r\n\r\n:+1: "},{"ts":1367990854000,"body":"Any thoughts on how to add this into a project until this fix is pulled into Master?"},{"ts":1368015187000,"body":"@lmcardle : Same here. I tried adding `array: true` to the schema but it didn't work. :)"},{"ts":1368023465000,"body":"I know it's a pain, but you can downgrade to 4.0.0-beta1 and run your migrations every time you need to add an array column. Or you can put <code>gem 'rails', github: 'scudco/rails', branch: '10432-fix-add-column-with-array'</code> in your Gemfile for now, though it is rebased on top of some other changes you may or may not want.\r\n\r\nYou can also just write the SQL yourself and have custom <code>up</code> and <code>down</code> methods in your migrations.\r\n\r\n@muichkine changing your schema won't have any effect unless you are doing a <code>rake db:schema:load</code>."},{"ts":1368473914000,"body":":+1: "},{"ts":1368491354000,"body":":+1: for pulling this into master"},{"ts":1369264553000,"body":"What's the status on this? Quite a pain"},{"ts":1369266180000,"body":"Before I ask the author to rebase again let me see if I can get buy in from someone from rails core.\r\n\r\n/cc @rafaelfranca @carlosantoniodasilva @tenderlove "},{"ts":1369375302000,"body":"@rafaelfranca @carlosantoniodasilva @tenderlove guys this bug is quite a nuisance, could someone check this PR out?"},{"ts":1369582268000,"body":"@rafaelfranca @carlosantoniodasilva @tenderlove guys we got this problem aswell, a fix in master would be awesome"},{"ts":1369596272000,"body":":+1: "},{"ts":1369656557000,"body":":+1: "},{"ts":1369682610000,"body":":+1: Very annoying issue."},{"ts":1369690266000,"body":":thumbsup:"},{"ts":1369690642000,"body":"I think people are starting to use the RC to play with all the fun Postgres features :)"},{"ts":1369836179000,"body":":+1:\r\n"},{"ts":1369873995000,"body":":+1:"},{"ts":1370353437000,"body":"Noticed https://twitter.com/rails/status/341618573518704640 and decided to rebase."},{"ts":1370353957000,"body":"Shouldn't there be an linked issue for this pull request?"},{"ts":1370355297000,"body":"@n-studio It's mentioned in the commit message and in other comments as #10432 \r\n\r\nIs there a better way to link it?"},{"ts":1370378335000,"body":"Oh, I didn't notice it, sorry!"}]},{"timestamps":[{"ts":1367925796000,"body":"@arunagw is this expected behavior form 3.2? I thought `no-assets` and `assets-false` are same"},{"ts":1367925924000,"body":"Looks like this is expected. Already have this kind of test \r\n\r\nhttps://github.com/rails/rails/blob/3-2-stable/railties/test/generators/scaffold_generator_test.rb#L274"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1366240120000,"body":"Thanks!"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1374775287000,"body":"This will need a changelog entry."},{"ts":1374775828000,"body":"I don't see much advantage on using a block with update:\r\n\r\n```ruby\r\nuser.update_attributes(:first_name => 'Jamie') do |u|\r\n  u.is_admin = false\r\nend\r\n\r\n# vs\r\n\r\nuser.is_admin = false\r\nuser.update_attributes(:first_name => 'Jamie')\r\n```\r\n\r\nThe point of doing that with new/create is that you call a method in the class and it yields the instance before doing some action (mainly create). But with update you already have the instance, just yielding it back doesn't bring any goodness I think, since you can just handle whatever is necessary before calling update."},{"ts":1374776133000,"body":"Agree with @carlosantoniodasilva "},{"ts":1374777728000,"body":"Thanks for the comments and remarks.\r\nI agree with @carlosantoniodasilva, that just yielding it back and setting attributes, is not an enough to validate this change.\r\n\r\nThe biggest advantage, in my opinion, comes from encapsulation and setting defaults:\r\n\r\n``` ruby\r\n  user.update_attributes(user_params) do |u|\r\n    u.username ||= 'temp_username'\r\n  end\r\n\r\n  def user_params\r\n   params.require(:user).permit(:username)\r\n  end\r\n```"},{"ts":1374785119000,"body":"I think I'm :-1: on this as well."},{"ts":1374786270000,"body":"@versioncontrol for this case I think the code become more confusing.\r\n\r\nI'm going to close this one, but thank you so much for the pull request.\r\n\r\n:heart:"}]},{"timestamps":[]},{"timestamps":[{"ts":1359806354000,"body":"Thank you"}]},{"timestamps":[{"ts":1361268806000,"body":"@rafaelfranca could you review this?"},{"ts":1361273640000,"body":"I thought it was [merged](https://github.com/rails/rails/commit/c5451777b038c5e48567f69256986ae42a2cde48) and [reverted](https://github.com/rails/rails/commit/7f4975ffc618bc3125039c565507a385c1187183)?"},{"ts":1361275189000,"body":"@carlosantoniodasilva this was the backport that @rafaelfranca made. Because the code is different on `3-2-stable` the patch broke and was reverted. This is a PR with a specific port for `3-2-stable`."},{"ts":1361277319000,"body":":+1: I guess I didn't notice the build, thanks!"},{"ts":1361278612000,"body":"Build is still broken :cry:"},{"ts":1361278643000,"body":"https://travis-ci.org/rails/rails/jobs/4901491"}]},{"timestamps":[{"ts":1371103827000,"body":"You could consider implementing a Registry based on https://github.com/rails/rails/blob/master/activesupport/lib/active_support/per_thread_registry.rb for this, so API would be like `ActionDispatch::RequestRegistry.request_id` or whatever makes sense.\r\n\r\nBut it would be nice seeing what are some of the use cases you are thinking of. One could argue that encapsulating request info in the controller to the exclusion of other parts of the code is by MVC design."},{"ts":1371124382000,"body":"This has been rejected before, sorry - see #5176 for the discussion."}]},{"timestamps":[{"ts":1366728302000,"body":"Thank you"}]},{"timestamps":[{"ts":1371752432000,"body":"Oops, I forgot `[ci skip]` ; I will put it in the other commits. Sorry! "},{"ts":1371753145000,"body":"You can amend commit and force push :-) "},{"ts":1371757023000,"body":"Updated, thank you @arunagw!"},{"ts":1371764918000,"body":"Good!\r\n\r\nYes please do submit those ones for the other branches."}]},{"timestamps":[{"ts":1372686282000,"body":"Could you add a CHANGELOG entry?"},{"ts":1372702473000,"body":"@rafaelfranca done."}]},{"timestamps":[{"ts":1377089222000,"body":"I need this fix too. All frontend will be happy with text errors, when they debug AJAXs."},{"ts":1377089527000,"body":":heart: "},{"ts":1377100211000,"body":":+1:"},{"ts":1377164126000,"body":"/cc @indirect"},{"ts":1377165928000,"body":"no idea how I'm related to this at all, but I'd like it. :)"},{"ts":1377170168000,"body":"@indirect thanks, I thought you can review the code and maybe merge it."},{"ts":1377178590000,"body":"Needs a rebase and a CHANGELOG entry"},{"ts":1377188838000,"body":"@kirs sorry, I'm not a rails contrib :)"},{"ts":1377192411000,"body":"@rafaelfranca done!"},{"ts":1377292479000,"body":":tada: :confetti_ball: so happy about this"},{"ts":1377293661000,"body":"@rafaelfranca @indirect thanks!"},{"ts":1377293802000,"body":":green_heart::yellow_heart::heart::purple_heart::blue_heart: I liked the feature too."},{"ts":1377334878000,"body":"What a nice feature! :heart: "}]},{"timestamps":[{"ts":1360068518000,"body":"Thanks, but we cannot rely on the vowels `%w(a i u e o)` to handle the article generation, since this is more about sound than it is about the starting char. I'd rather change it to something like \"some application\" or \"some plugin\". I'm going to close this one, but If you want to give it a try and change it, just push force to your branch and ping here that we can reopen. Thanks!"},{"ts":1360168646000,"body":"Thank you for your review @carlosantoniodasilva.\r\nCertainly, I thought that \"some\" is more pertinent than \"a/an\" too.\r\n\r\nI rebased my patch with using \"some\" instead of checking \"a/an\" in tricknotes/rails@c7981721b31f39b181d4e7315af9ceac53fd2cb6.\r\n\r\nCould you reopen this PR?"},{"ts":1360168771000,"body":"Sure, reopened. There seems to be other unrelated commits in your branch, can you please check / rebase again if necessary? Thanks."},{"ts":1360168996000,"body":"Whoops! My bad.\r\nI rebased my branch in correctly."}]},{"timestamps":[{"ts":1365771132000,"body":"Thanks @derek-watson!\r\n\r\n/cc @pixeltrix "},{"ts":1366301661000,"body":"Merged in 6183e1a460ccab6df1d07c3e99e98b61b2cc450b - thanks @derek-watson"}]},{"timestamps":[{"ts":1357284400000,"body":":+1: "}]},{"timestamps":[]},{"timestamps":[{"ts":1366133200000,"body":"cc @jeremy "},{"ts":1366150621000,"body":"I appreciate the desire here, but we shouldn't munge log messages. If you're using syslog, for example, the newline is relevant.\r\n\r\nBest to call `logger.info` twice instead—two *separate* messages."}]},{"timestamps":[]},{"timestamps":[{"ts":1363123040000,"body":"/cc @fxn"},{"ts":1363126060000,"body":":+1:"},{"ts":1363186752000,"body":"I'd like to log a warning when a route is skipped here:\r\n\r\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/journey/routes.rb#L61\r\n\r\nI'm not sure how best to do that, though -- @steveklabnik or @carlosantoniodasilva have any ideas?"},{"ts":1363190402000,"body":"@trevorturk this is what comes up to my mind right now:\r\n\r\n```ruby\r\nif name\r\n  if named_routes[name]\r\n    ActiveSupport::Deprecation.warn(\"BOOM\")\r\n  else\r\n    named_routes[name] = route\r\n  end\r\nend\r\n```\r\n\r\nIt could be moved to a private method like `add_named_route` or something like that if necessary, to be called in that place, wdyt?"},{"ts":1363190562000,"body":"Yeah, I was thinking using `ActiveSupport::Deprecation` would be frowned upon, but it'd work!\r\n\r\nWant to work something up, or shall I?"},{"ts":1363192586000,"body":"Hm right, I guess we should not use AS::Deprecation, it's probably better to use `ActionController::Base.logger.warn` right?"},{"ts":1363196201000,"body":"@carlosantoniodasilva took a stab at it in #9704 -- worked nicely in my local testing. If we go ahead with that, I'd like to update this PR to mention the logging -- much easier than trying to read through the `rake routes` output. "},{"ts":1363207222000,"body":":+1: on this, any other concerns we need to address before merging in this doc addition?"},{"ts":1363207387000,"body":"IMO it's good to go -- I made a separate PR #9704 where we can discuss logging or any other helpful stuff we might consider doing. If we go ahead with that, I'll update this section as well. "},{"ts":1363207478000,"body":"Thank you"},{"ts":1364664468000,"body":":heart:"}]},{"timestamps":[{"ts":1358635203000,"body":"Wow. Just Wow. :+1:"},{"ts":1358635466000,"body":"yea just wow, amazing :+1: "},{"ts":1358635628000,"body":"Like! :+1:"},{"ts":1358635769000,"body":"Awesome :+1: "},{"ts":1358635863000,"body":"`$ rails routes | grep foo`\r\n\r\nbut generally looks like fun :)"},{"ts":1358635916000,"body":":+1:"},{"ts":1358636201000,"body":":+1: "},{"ts":1358636339000,"body":":+1: Awesome!!"},{"ts":1358636542000,"body":"A very appropriate PR for #9001!"},{"ts":1358636633000,"body":"dude, killer. :+1: its like better_errors for routes :-)"},{"ts":1358636884000,"body":"does this work in production? That's the only question I have. (i will admit i haven't looked at the code for this.)"},{"ts":1358637030000,"body":"@jrgifford you cannot access this url in production, it is in an internal controller only added in development, and there is a before filter that will prevent anyone from accessing this page unless it is a local request."},{"ts":1358637175000,"body":"Fantastic idea!"},{"ts":1358638342000,"body":"Clap Clap Clap!"},{"ts":1358639485000,"body":"@schneems ah, ok. excellent!"},{"ts":1358641214000,"body":":+1:"},{"ts":1358642254000,"body":"Here's to hoping we use the ability to use animated GIFs in pull requests for good, not for annoying."},{"ts":1358645990000,"body":":+1: Yeah!!!"},{"ts":1358647713000,"body":":heart:"},{"ts":1358656736000,"body":":+1: "},{"ts":1358664848000,"body":"@drnic This PR is, indeed, over 9000."},{"ts":1358676773000,"body":":metal:"},{"ts":1358711678000,"body":"Updated, please review latest code."},{"ts":1358713177000,"body":"Can't be auto-merged"},{"ts":1358713508000,"body":"CHANGELOG!!!!!!!!!!!!!! (said Star Trek II style). I pushed an update. I wish GH would make the merge-ability of a PR public info. "},{"ts":1358713747000,"body":"Oh my this is awesome!"},{"ts":1358715368000,"body":"This is over nine thousands."},{"ts":1358729578000,"body":":+1:"},{"ts":1358732700000,"body":"You are awesome! "},{"ts":1358769997000,"body":":heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[{"ts":1357515403000,"body":"We avoid to use of `try`, `presence` or any active support extension where is possible. This fall in cosmetic changes and we don't accept cosmetics changes.\r\n\r\nThe last change is valid."},{"ts":1357516115000,"body":"I thought it is encouraged to use as much of ActiveSupport extensions as possible. Thanks for pointing out it is not.\r\n\r\nReverted the first two changes."}]},{"timestamps":[]},{"timestamps":[{"ts":1368760788000,"body":":heart_eyes_cat: "}]},{"timestamps":[{"ts":1377608580000,"body":"Thanks @senny. New changes look ok?"},{"ts":1377608908000,"body":"@garysweaver thank you for your contribution :yellow_heart: "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1372943386000,"body":"Sorry for spamming, @senny has been faster ^^ (see 8b5439c)."}]},{"timestamps":[{"ts":1357486343000,"body":"Thanks!"}]},{"timestamps":[{"ts":1360724375000,"body":"Nice fix. Reaching into connection internals feels a little janky. Does this apply to 3-2-stable only, or should it go to master and backport? cc @tenderlove "},{"ts":1360734628000,"body":"@jeremy Thanks for checking this out.\r\n\r\nMy commit isn't needed for master as `TableAlias` has an `engine` method in arel master. In fact I've just altered my commit to leave @dylanahsmith's test alone so you can simply apply [his branch][dylans-branch] to master and [our branch][our-branch] to 3-2.\r\n\r\n[dylans-branch]: https://github.com/dylanahsmith/rails/tree/fix-join-alias-integer-comparison\r\n[our-branch]: https://github.com/howaboutwe/rails/tree/3.2.12-join-regression\r\n\r\nI won't dispute the jankiness. I don't have very intimate knowledge of arel, but it kinda begs for an attribute node that knows the name and type of the attribute. Seems like a lot of work, though, and likely a performance hit."},{"ts":1361825867000,"body":":+1:"},{"ts":1361827099000,"body":"Any word from Rails core with regard to this getting merged into 3-2-stable? I'm happy to help if any additional changes need to be made."},{"ts":1361984067000,"body":"This change will be reverted so we don't need this anymore"},{"ts":1361984183000,"body":"@rafaelfranca Beautiful. Thanks!"}]},{"timestamps":[]},{"timestamps":[{"ts":1371986683000,"body":"Sorry, this would fall under a 'cosmetic' change, and we don't accept those into Rails. It obscures the git history, and we can bikeshed which of the two is better forever. ;)\r\n\r\nThank you though! "}]},{"timestamps":[]},{"timestamps":[{"ts":1364941622000,"body":"/cc @jeremy @pixeltrix "},{"ts":1364942363000,"body":"@jonleighton you added this in 5da90b3 - any reason why it was done with `define_method`?\r\n\r\n@jamesgolick does it bust the cache twice? Once for `define_method` and once for the `extend` inside the `extending!` method."},{"ts":1364943402000,"body":"@pixeltrix yes."},{"ts":1364947266000,"body":":+1: to merge this, let's wait for @jonleighton's comment"},{"ts":1365165430000,"body":"I used `define_method` because I didn't want to muddy `Relation` with concerns about associations. However I think the performance impact of this justifies the muddying for now. (And potential refactoring in the future - we have talked about making an `AssociationRelation` subclass for these things.)"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1373281338000,"body":"Could you please add `[ci skip]` to your commit message (with `git commit --amend`) and force push?"},{"ts":1373283971000,"body":"OK, done."},{"ts":1373284396000,"body":"Neat, thanks! /cc @fxn @senny "},{"ts":1373289620000,"body":"Thanks."}]},{"timestamps":[{"ts":1359631692000,"body":"I'm not sure we're moving to relative links inside the changelogs, but @fxn can check it :). Thanks @parndt."},{"ts":1359632244000,"body":"I think it is better to leave them as they are. If you read the CHANGELOGs in a console with less(1) you should still be able to follow the links."}]},{"timestamps":[{"ts":1361217932000,"body":"I think that it unnecessary info. If you type `rake routes` – you must know what command do"},{"ts":1361218162000,"body":"Generally I know exactly what my URL will be, so I'd love if you could sort the URI Pattern alphabetically. Especially in the HTML view. "},{"ts":1361227882000,"body":"@achempion as I am often teaching people rails for the first time individuals learning the command are only helped by the presence of the column headers."},{"ts":1361232793000,"body":":confetti_ball: "}]},{"timestamps":[{"ts":1363868862000,"body":"I think is not worth to backport this to the stable branch.\r\n\r\nThank you for the contribution. We really appreciate it. :heart:"}]},{"timestamps":[{"ts":1362024351000,"body":"@senny you've been looking at these classes recently, can you give me a critique. Am I working in the right direction?"},{"ts":1362037184000,"body":"can you also squash the commits together and write a CHANGELOG entry."},{"ts":1362072475000,"body":"@senny I've made the changes you requested and squashed it all to a single commit."},{"ts":1362122621000,"body":"the PR does not apply, can you push a rebased version?\r\n\r\n/cc @carlosantoniodasilva "},{"ts":1362144241000,"body":"I've pushed the rebased version."},{"ts":1362416305000,"body":":+1: "},{"ts":1362416994000,"body":"+1, this is important for my work, too."},{"ts":1362418477000,"body":"+1"},{"ts":1362676671000,"body":"Any updates on the status of this?  Are any core members looking at it?"},{"ts":1362676820000,"body":"/cc @rafaelfranca "},{"ts":1362693674000,"body":"Thank you guys and sorry for the delay. :heart: :yellow_heart: :green_heart:"}]},{"timestamps":[{"ts":1372078158000,"body":":shipit:"},{"ts":1372167321000,"body":"Closing as commits has been removed. And don't need this PR."}]},{"timestamps":[{"ts":1361459717000,"body":"The method does more things, would you like to write a more complete RDoc?"},{"ts":1361461377000,"body":"Is that ok?"},{"ts":1361462242000,"body":"Needs some copy-editing but don't worry, I'll take care of it. Thank you!"}]},{"timestamps":[{"ts":1369764145000,"body":"I found they are not running right now here.\r\n\r\n\r\n```ruby\r\n\r\nRunning command: bundle exec rake test:isolated\r\nRun options: --seed 19424\r\n# Running:\r\nFinished in 0.003981s, 0.0000 runs/s, 0.0000 assertions/s.\r\n0 runs, 0 assertions, 0 failures, 0 errors, 0 skips\r\n\r\n```"},{"ts":1369765180000,"body":"@arunagw thank you. Can you confirm if 4-0-stable has the same problem?"},{"ts":1369765827000,"body":"Nope. But I couldn't figure out why 4-0-stable is fine."},{"ts":1369766138000,"body":"Seems Minitest version. master is using 5.0"},{"ts":1369766960000,"body":"I think we need to backport this into 4-0-stable. It's not going to effect because it's just running rails tests."},{"ts":1369766977000,"body":"Yeah I feel the same. Minitest is doing something here."},{"ts":1369767383000,"body":"Just to understand, if we don't have this problem on 4-0-stable why we need to backport?"},{"ts":1369775215000,"body":"Ahh yes, But it might fail in future if we upgraded minitest some day for some reason."},{"ts":1369778350000,"body":"I think we will not"}]},{"timestamps":[{"ts":1357509004000,"body":"Could you squash your commits?"},{"ts":1357509174000,"body":"yep. one minute"},{"ts":1357510194000,"body":"oops. issue has closed\r\nbut i've squashed commits :)"},{"ts":1357510290000,"body":"Thank you"},{"ts":1357515519000,"body":"Brian Ford has noticed interesting thing\r\n\r\nhttps://github.com/rubinius/rubinius/issues/2117#issuecomment-11936116"}]},{"timestamps":[]},{"timestamps":[{"ts":1371299358000,"body":"I'm not sure about this one. If you know in advance that the delegation target might be `nil` and you rescue that exception, then this is not really an exceptional case and you are writing control flow with exceptions. Why not simply define the delegation method yourself and handle the case explicitly?\r\n\r\n```ruby\r\ndef name\r\n  if @target\r\n    @target.name\r\n  else\r\n    # .. code that would otherwise reside in the `rescue` part\r\n  end\r\nend\r\n```"},{"ts":1371304746000,"body":"I agree with @senny. If you are rescuing this exception you can easily check if the target exists. I'll ask for more feedback.\r\n\r\ncc @carlosantoniodasilva @jeremy @fxn "},{"ts":1371317210000,"body":"@robin850 fixed and rebased\r\n\r\n@senny @rafaelfranca thanks for the feedback! My original thought was that being more explicit about the type of exception can only improve the error. Simply, it's just better information for the developer. But it definitely helps my complex and arguably very crufty case. Warning... cringe worthy coding to follow:\r\n\r\nOur app relies on a lot of messy and complex third party data. We delegate a lot, and missing data inevitably results in delegation targets that are nil. For critical user facing elements, we sometimes rescue in the controller or the view. I know this might get a :scream: reaction from a lot of people, but it does allow us to quickly sift out critical pages attempting to display bad data and email those issues directly to our data team. By doing this in the view/controller we can still render some information to the user. It also prevents non-critical background jobs or rake tasks from firing off notifications to our data team.\r\n\r\nI'll be interested to hear what @carlosantoniodasilva @jeremy @fxn think. Happy to answer any more questions from them. If the team doesn't agree with me, I completely understand. I won't let it crush my dreams of one day contributing something back to rails :smiley: I'm sure there will be other opportunities.\r\n\r\n\r\n\r\n"},{"ts":1371333044000,"body":"Do you know the `allow_nil` option?"},{"ts":1371350440000,"body":"@fxn yep. same problem @senny 's solution of writing the method ourselves. It doesn't give us the control at the view/controller level."},{"ts":1372205531000,"body":"I agree with the overall idea of not using exceptions for control flow. In your situation, you could even achieve the same by rescuing for `RuntimeError` and checking the error message for `delegated to` or something like that, although I'd not recommend.\r\n\r\nWhat I'd recommend, though, would be to write some internal module which handles integrating with the third party apis and defining/delegating attributes for you, which would raise a very specific and well named error message for such scenarios, such as `ThirdPartyMissingAttribute` or something like that. This way it'd be very clear for anyone looking at that code *why* you're rescuing that.\r\n\r\nAnyway, I guess I'd not mind having a specific `DelegationError` class since it'd also help others identify possible errors with delegation, so I don't have a strong opinion on whether this should be merged or not.\r\n\r\n"},{"ts":1372275491000,"body":"@carlosantoniodasilva thank you for the feedback and code review! I made the change you suggested. I also think you hit the nail on the head:\r\n\r\n>Anyway, I guess I'd not mind having a specific DelegationError class since it'd also help others identify possible errors with delegation, so I don't have a strong opinion on whether this should be merged or not.\r\n\r\nThis was my same thought too. My personal situation and control flow issues aside, IMO this PR simply makes the error a bit clearer to the developer."},{"ts":1372278006000,"body":"Adding the specific error class is ok. It's important to understand the intention behind these changes because we can learn a lot from the use-cases. Thanks for your contribution :yellow_heart: "},{"ts":1372282006000,"body":"I think it would make sense to raise `NoMethodError` (or `DelegationError` which subclasses `NoMethodError`), rather than subclass `StandardError` directly. "}]},{"timestamps":[]},{"timestamps":[{"ts":1368282055000,"body":"This is a fixed version of #10555. Sorry for the trouble."},{"ts":1368282746000,"body":"@dasch thanks. Travis is not running tests on rails pull requests, it's disabled for now. But if you want we can push to a branch and see what happens."},{"ts":1368283529000,"body":"@carlosantoniodasilva I ran the test on my own machine and it passed, so I guess it should be good to go."},{"ts":1368308930000,"body":"Could you add a CHANGELOG entry?"},{"ts":1368311643000,"body":"@rafaelfranca done."}]},{"timestamps":[{"ts":1375566549000,"body":"I think this will conflit with the changes made on #11218 so I'll not merge it.\r\n\r\nThank you"},{"ts":1375591361000,"body":"Aah, forgot!\r\nThanks."}]},{"timestamps":[{"ts":1358299110000,"body":"@balexand seems good. Could you post the an image with error page in development before and after this change?\r\n\r\nAlso what is the exception message ofter the change?"},{"ts":1358299379000,"body":"## Before\r\n\r\n![Screen Shot 2013-01-15 at 6 20 01 PM](https://f.cloud.github.com/assets/181187/70035/e82e28ee-5f7a-11e2-8665-589e6974f4b0.png)\r\n\r\n## After\r\n\r\n![Screen Shot 2013-01-15 at 6 22 12 PM](https://f.cloud.github.com/assets/181187/70039/3591f822-5f7b-11e2-89a1-773eb20ed43b.png)\r\n"},{"ts":1358299483000,"body":"maybe we should add ``400.html``?"},{"ts":1358299516000,"body":"btw, the After looks pretty great :smile: :+1:"},{"ts":1358299523000,"body":"I didn't change the exception message, it's still `\"param not found: #{param}\"`. It's generated [here](https://github.com/rails/rails/blob/8492396e9c1fe21036783d9785ed42c27dee9201/actionpack/lib/action_controller/metal/strong_parameters.rb#L18)."},{"ts":1358299578000,"body":"I agree, it looks great. Whoever designed that screen did a great job."},{"ts":1358299672000,"body":"@guilleiguaran I don't have a strong preference about the error code. Let me know if you want me to generate a `400.html`."},{"ts":1358299706000,"body":"I don't think we need the `400.html` file since I don't think is a good idea to give information to the offender about what kind of protection you have."},{"ts":1358299730000,"body":"Thank you"},{"ts":1358299806000,"body":"No problem. Thanks!"}]},{"timestamps":[{"ts":1377095459000,"body":"Thanks for your contribution. Actually, it would be nice if you could define a method like `skip_rubinius` just like @gaurish done with JRuby in #11932. What do you think?"},{"ts":1377096100000,"body":"Didn't see that one, thanks. Will fix it soon."},{"ts":1377096578000,"body":"Actually the PR has been updated so it's ok, not your bad! It was just a proposal. :wink: "},{"ts":1377096623000,"body":"Anyway, please see [this comment](https://github.com/rails/rails/pull/11932/files#r5897063). ^^ Sorry, just noticed that."},{"ts":1377097751000,"body":">Anyway, please see this comment. ^^ Sorry, just noticed that.\r\n\r\nAdded the skip method to the abstract_unit as @rafaelfranca said. :)"},{"ts":1377100985000,"body":"Thanks! Could you have a look at #11850 and #11848 too? They're very important for Rubinius and other implementations compatibility. Thanks again."}]},{"timestamps":[{"ts":1371291884000,"body":"thanks :yellow_heart: "}]},{"timestamps":[{"ts":1372767594000,"body":"Build seems to be failing :)"},{"ts":1372767624000,"body":"Ah damn, sorry, it's related to that other change :smile:"},{"ts":1372767652000,"body":"@carlosantoniodasilva let me rebase it. "},{"ts":1372770006000,"body":"@carlosantoniodasilva rebased "}]},{"timestamps":[{"ts":1363206963000,"body":":+1: needs a test and a changelog entry. I do worry about not adding the route at all, if I add a route, and then run `rake routes` or visit `rails/info/routes` and I don't see the route at all, then I would potentially be a bit confused. \r\n\r\nThis might be more obvious for the case where we're explicitly making named routes\r\n\r\n```\r\nget 'one' => 'test#example', as: :example\r\n```\r\n\r\nBut not as many people will realize this makes a named route as well\r\n\r\n```\r\nresources :example\r\n```\r\n\r\nWe should talk a little about adding the route with warning versus just warning."},{"ts":1363207162000,"body":"Never mind, just saw rails/journey@98a9802 it wouldn't be added anyway (if I'm reading that correctly)."},{"ts":1363207278000,"body":"This isn't changing behavior -- just logging to help people that would be confused like I was! \r\n\r\nI believe this year-old commit actually made the change: https://github.com/rails/journey/commit/98a9802a5c1f2d3a900461d10f5665a0d887dee7\r\n\r\nI added a note to the upgrade guide about the change in behavior in #9690 -- not sure if a CHANGELOG entry is warranted. \r\n\r\nI'm not sure how to test this, or I would have. The logger is nil when running the Rails tests (thus the `try`) -- any ideas definitely welcome!"},{"ts":1363212718000,"body":":+1:. but yeah, a test would be nice. Hm."},{"ts":1363217770000,"body":"Thanks for the feedback! I pushed an update -- plz do lemme know what you think. \r\n\r\nI'm not sure how to test this... ideas definitely welcome. I'm also not super happy about using `ActionController::Base.logger` here -- especially with `try` -- but I couldn't find any examples of how this kind of thing should be done elsewhere..."},{"ts":1363323901000,"body":"I reverted to go back to the conditional expression as @jeremy suggested. I also took a stab at giving Journey a logger and using that instead of `ActionController::Base.logger`. Any other feedback welcome. Thanks for everything so far!"},{"ts":1363754003000,"body":"I gave this some more thought and decided it may be best to fail fast with an exception here. I can't think of a good reason for allowing clashing named routes, and raising an exception might save people from subtle issues in their apps. I chatted with @jeremy about this and I think he agrees. \r\n\r\nThat leaves the problem of explaining how a clashing named route may be defined using the `resources` method. This is a bit tricky to explain succinctly, but I've done my best to provide a helpful message while raising the exception. I also updated the CHANGELOG and the Upgrading Guide in an effort to cover all the bases.\r\n\r\nFeedback is more than welcome, of course, but if we agree this all makes sense I think this is ready to merge!"},{"ts":1363801094000,"body":"Consider defining an `edit_collision` route after a `resources :collisions`. Then the error message will suggest that you check whether you have a `resources :edit_collisions`. Probably simplest to suggest that you may be overriding a route already defined by a resource with the same naming rather than suggesting the specific name."},{"ts":1363801872000,"body":"Great point, @jeremy -- I didn't think of that case.\r\n\r\nI tweaked the language. Let me know what you think. Perhaps this is just too much detail? I can try making it more succinct if you think that'd be smart. "},{"ts":1364154884000,"body":"Perfect :ok_hand:"},{"ts":1364664460000,"body":"Great, thanks @trevorturk :+1:"},{"ts":1367414794000,"body":"Apparently this brought up an issue in Devise tracker (linked above), related to defining the root path based on different constraints. It'll raise this error because the root path will be already defined in the second time, without taking into account the constraints.\r\n\r\nNot sure how to approach/fix that yet, though. /cc @pixeltrix"},{"ts":1367415518000,"body":"@carlosantoniodasilva I'd just use a custom name for the authenticated route, e.g.\r\n\r\n``` ruby\r\nauthenticated :user do\r\n  root to: \"users#index\", as: :authenticated_root\r\nend\r\n\r\nunauthenticated do\r\n  root to: \"main#index\"\r\nend\r\n```"},{"ts":1367433696000,"body":"@pixeltrix Couldn't we check if the route is the same and if so, don't complain when we have similar named routes pointing to the same endpoint?"},{"ts":1367434177000,"body":"A little more background on why I suggested this change -- I ran into a subtle issue when upgrading Basecamp to Rails 4. It took a while to track down and I eventually found it was because the order of named route lookups had been reversed between Rails 3 and 4. I couldn't think of a good reason to have two routes with the same name and suggested we fail loudly and quickly to help people avoid subtle issues like the one I ran into.\r\n\r\nThat being said, I didn't think of this particular issue, and I'm sure there are more I haven't thought of as well. \r\n\r\nI'm a bit out of touch with Devise right now, but I wonder if it really makes sense to have two `root` routes? Can you elaborate on the reasoning behind that? Perhaps it'll inform our decision here -- we may want change this behavior to log instead of raising an error. We may also consider just leaving a note in the upgrade guide. That's what I did initially in d717882eb501510b8367382ea7d6c0097aac38cf but later decided that raising an exception might be a smarter thing to do. \r\n\r\nThis is definitely worth more discussion -- sorry for the long winded comment, in any case, though :wink: "},{"ts":1367434351000,"body":"I don't think that raising an Argument Error is a good idea in this case. I think having just a warning would be helpful enough."},{"ts":1367434456000,"body":"@sikachu can you help me understand why someone might want to have two named routes with the same name? (I don't really understand what Devise is doing here...)"},{"ts":1367434716000,"body":"@trevorturk in case of Devise, `authenticated` generates a route constraint checking whether or not there's a user signed in. If there's a user, the constraint will match and then the routes inside the `authenticated` block will become available and recognizable, meaning that the `root` route will match for the authenticated user. When there's no user, anything inside the block is considered, and the `root` route would match the other definition. But both point to `root` and use `root_path`."},{"ts":1367434815000,"body":"@trevorturk there are two use cases so far.\r\n\r\n1. When you have constraints, you have exactly the same route but have different endpoints based on constraints. The route name and route url are exactly the same though.\r\n\r\n    ```elixir\r\n    authenticate(:user) do\r\n      root to: \"private_home#index\"\r\n    end\r\n\r\n    root to: \"public_home#index\"\r\n    ```\r\n\r\n2. Engines use the `routes.append` mechanism to add routes at the end. This is convenient because you can override any engine endpoint by simply declaring your route first. This makes it a bit harder.\r\n\r\nDefining a route first is a way to give some route higher priority. Raising on such route conflicts is similar to raising when a method is redefined in a class. It may be an accident but they are also legit cases where you would want to do it.\r\n"},{"ts":1367435260000,"body":"You call `root_path` and routes check constraints to see *which* `root` route to call to generate a URL? I don't see how that works."},{"ts":1367435758000,"body":"@jeremy the generated route is the same, there is no nesting. The constraints are used only on matching."},{"ts":1367441434000,"body":"@josevalim @jeremy actually there are situations where the generated url would be different, e.g.\r\n\r\n``` ruby\r\nconstraints subdomain: 'admin' do\r\n  root to: 'admin/dashboard#index'\r\nend\r\n\r\nconstraints subdomain: 'www' do\r\n  root to: 'pages#index'\r\nend\r\n```\r\n\r\nBy having the same name and not raising the latter would always be the winner, so calling `redirect_to root_url` would always go to 'www.example.com' even when you're on a 'admin.example.com' page. That's why I'd recommend naming them different:\r\n\r\n``` ruby\r\nconstraints subdomain: 'admin' do\r\n  root to: 'admin/dashboard#index', as: 'admin_root'\r\nend\r\n\r\nconstraints subdomain: 'www' do\r\n  root to: 'pages#index', as: 'public_root'\r\nend\r\n```\r\n\r\nWhether we raise or log a warning on a duplicate name is a matter of preference - I've no strong feelings either way.\r\n"},{"ts":1367442887000,"body":"```\r\nBy having the same name and not raising the latter would always be the winner,\r\nso calling redirect_to root_url would always go to 'www.example.com' even when\r\nyou're on a 'admin.example.com' page. \r\n```\r\n\r\nPrecisely."},{"ts":1367462715000,"body":"> Whether we raise or log a warning on a duplicate name is a matter of preference - I've no strong feelings either way. \r\n\r\nRaising an error is a backwards incompatible change for anyone who has the same URL routing to different controllers/actions based on constraints. The issue, to me, is that this change causes an error about duplicate route definition based only on URL. When a request passes through the router, the URL is not the only part that determines where a request ultimately ends up.\r\n\r\nI agree that helping developers discover that they've duplicated a route is a useful feature. I vote for logging it instead of raising."},{"ts":1367463944000,"body":"@latortuga I think it's perfectly fine to introduce a backwards incompatible change when upgrading to a new major version.\r\n\r\nWith this change, developers are still free to create duplicate routes that use the same url -- just not the same name.    \r\n\r\nThe idea is to help people avoid subtle and confusing bugs caused when clashing names are used in URL helpers as I described in d717882eb501510b8367382ea7d6c0097aac38cf. \r\n\r\nIn my opinion, this is an easy change to deal with and raising an exception seems the best way to enforce a very reasonable best practice."},{"ts":1367464965000,"body":"```\r\nRaising an error is a backwards incompatible change for anyone who has the same\r\nURL routing to different controllers/actions based on constraints.\r\n```\r\n\r\nIt's a backward-incompatible change for anyone who *named* these routes the same, unwittingly introducing a bug in their app.\r\n\r\n@trevorturk :+1:"},{"ts":1368808348000,"body":"Ok, I have more news about this. Devise allows you default routes with default names and since we naturally rely on url helpers, we asked users to redefine a route with the same name in case they wanted to redirect elsewhere. But not anymore with Rails 4.rc. I feel like this pull request is hindering legitimate use cases in favor of some limited sense of security.\r\n\r\nIt also feels inconsistent with many other APIs in Ruby (and Rails), where redeclaring something extends or overrides the previous behaviour, but never raises.\r\n\r\nIf we are decided to go along this way, I would at least like to support a `scope` option that allows engines and other plugins to say: \"the routes defined here may collide with something defined previously but that is fine, just give preference to the main one\"."},{"ts":1368809893000,"body":"This isn't about security -- it's an effort to help people avoid obscure bugs on their apps as I described.\r\n\r\nHave you considered adding a configuration option in Devise so the urls could be configured from the start instead of overwritten?\r\n\r\nI don't think the scope option you propose would work. I would say that changing from raising to logging makes sense, but it doesn't add up if we decide that overriding routes defined in engines is a legitimate use case.\r\n\r\nIf we decide to revert this change, please make sure that things work as you expect transitioning from Rails 3 to 4, and to make sure the upgrade guide explains the change. My testing showed the orders were reversed from Rails 3 when routes were defined in routes.rb, but I didn't test with engines like Devise."},{"ts":1368811607000,"body":"I prefer the warning method over the error method. Exceptions should be\r\nsaved for exceptional situations where the program cannot or should\r\nnot continue.\r\nThis situation is relatively common, and while it may represent an accident\r\nby the user it may also represent an intentional use case of a Rails Engine\r\ndeveloper.\r\n\r\nOn Friday, May 17, 2013, Trevor Turk wrote:\r\n\r\n> This isn't about security -- it's an effort to help people avoid obscure\r\n> bugs on their apps as I described.\r\n>\r\n> Have you considered adding a configuration option in Devise so the urls\r\n> could be configured from the start instead of overwritten?\r\n>\r\n> I don't think the scope option you propose would work. I would say that\r\n> changing from raising to logging makes sense, but it doesn't add up if we\r\n> decide that overriding routes defined in engines is a legitimate use case.\r\n>\r\n> If we decide to revert this change, please make sure that things work as\r\n> you expect transitioning from Rails 3 to 4, and to make sure the upgrade\r\n> guide explains the change. My testing showed the orders were reversed from\r\n> Rails 3 when routes were defined in routes.rb, but I didn't test with\r\n> engines like Devise.\r\n>\r\n> On May 17, 2013, at 11:33 AM, \"José Valim\" <notifications@github.com<javascript:_e({}, 'cvml', 'notifications@github.com');>>\r\n> wrote:\r\n>\r\n> Ok, I have more news about this. Devise allows you default routes with\r\n> default names and since we naturally rely on url helpers, we asked users\r\n> to\r\n> redefine a route with the same name in case they wanted to redirect\r\n> elsewhere. But not anymore with Rails 4.rc. I feel like this pull request\r\n> is hindering legitimate use cases in favor of some limited sense of\r\n> security.\r\n>\r\n> It also feels inconsistent with many other APIs in Ruby (and Rails), where\r\n> redeclaring something extends or overrides the previous behaviour, but\r\n> never raises.\r\n>\r\n> If we are decided to go along this way, I would at least like to support a\r\n> scope option that allows engines and other plugins to say: \"the routes\r\n> defined here may collide with something defined previously but that is\r\n> fine, just give preference to the main one\".\r\n>\r\n> —\r\n> Reply to this email directly or view it on\r\n> GitHub<https://github.com/rails/rails/pull/9704#issuecomment-18072026>\r\n> .\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/9704#issuecomment-18073331>\r\n> .\r\n>"},{"ts":1368811997000,"body":"If this is a legitimate use case, why should we have a warning? \r\n\r\n\"Warning: you are doing something perfectly reasonable.\" \r\n\r\nEither this is a legitimate use case or it isn't."}]},{"timestamps":[]},{"timestamps":[{"ts":1368014710000,"body":"Is it only for syntactic sugar?"},{"ts":1368015243000,"body":"Yup..."},{"ts":1368026043000,"body":"Thanks but I don't think it is worthy adding an alias in this case. It is just increasing the surface API with no actual benefit. :)"}]},{"timestamps":[{"ts":1363753301000,"body":"Working hard!"},{"ts":1363753385000,"body":"It Is The Lord's Work"}]},{"timestamps":[]},{"timestamps":[{"ts":1367515161000,"body":"Mind posting screenshots of how it looks with single and multi line headers now? :smiley: "},{"ts":1367515853000,"body":"You bet. Here's what it looks like without the h1 styling (ie, prior to this PR) for a multi-line message:\r\n![rails_rescue_h1_old](https://f.cloud.github.com/assets/621861/455286/dd39767e-b34d-11e2-8979-6f2c85a6827d.png)\r\n\r\nAnd with my styling added:\r\n![rails_rescue_h1_single](https://f.cloud.github.com/assets/621861/455290/f0a1c84c-b34d-11e2-8556-f75194016b75.png)\r\n![rails_rescue_h1_multi](https://f.cloud.github.com/assets/621861/455291/f35f460e-b34d-11e2-98a9-77596f90d0ce.png)\r\n\r\n"},{"ts":1367521760000,"body":"Thanks!"},{"ts":1367521873000,"body":"Sweet, thanks! :beers: "}]},{"timestamps":[{"ts":1357817764000,"body":"Can you provide a test case please? Thanks."},{"ts":1357839652000,"body":"On it."},{"ts":1357841904000,"body":"Testing has found an edge case, so I'm working on that too."},{"ts":1357844302000,"body":"Added a test case, rebased, squashed."},{"ts":1357865964000,"body":"BTW.\r\n\r\nThe original bug report (bug #8858) reported by me needed to manually include the name of the index because the auto-generated name was to large (> 64 characters).\r\n\r\nI suspect this limitation is imposed by sqlite3 and other databases will have larger limits (correct me if I am wrong).\r\nSince I am writing an engine, and the engine tests (and migrations) are ran on sqlite3, but should work on mysql, postgresql & sqlite3, I need to create a name that is acceptable for every database, which is the lowest common denominator.\r\n\r\nWould it be possible to adapt the auto-name-generator of the index name to include the limitations (length, included characters..) of the current database before creating the scheme.rb\r\nThis would mean that if the engine is used on another database platform (in another application) it would generate the \"best\" possible name for that platform.\r\n\r\nOne disadvantage I see is that the autogenerated name should be added explicitly to scheme.rb because the naming rules can change over time and need to be able to rollback an old migration.\r\n\r\nJust my 2 cents."},{"ts":1357940397000,"body":"Seems interesting and sensible to me, but I've seen a trend that the more experienced contributors/rails core people ask that feature requests go onto a certain mailing list, rather than here.  Unfortunately, I can't remember which one they mention.\r\n\r\nI bet @steveklabnik knows what you should do with such an idea, though!  Also, I might be willing and able to help out with implementing such a thing, but not for a little while now."},{"ts":1358092137000,"body":"Yep! ask on rails-core: https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-core"},{"ts":1358114546000,"body":"Hey @carlosantoniodasilva, it's been a few days since I've heard from you.  Is the test case I've added sufficient?  It fails without the changes, and passes with them.  I've rebased this onto master again to make it easy to merge, once it's accepted, but I'm also happy to rework any bits of it if need be. "},{"ts":1362689037000,"body":"Damn! This is EXTREMELY annoying. Every time I have to roll back migrations, things bork and I have to do the ```rake db::drop && rake db:create``` dance. Why is this not in the core yet? The assumptions and code seem pretty safe to me..."},{"ts":1362689176000,"body":"This is run by volunteers.  I can't merge it, and the people who can and\r\nknow more about it have been, quite understandably, busy with security and\r\nrelease stuff.  I'm hoping it gets in soon, too!  It's my first significant\r\npatch, so I'd be pretty stoked for it to make it's way in.\r\n\r\nOn Thursday, March 7, 2013, Amol Hatwar wrote:\r\n\r\n> Damn! This is EXTREMELY annoying. Every time I have to roll migrations,\r\n> things bork and I have to do the rake db::drop && rake db:create dance.\r\n> Why is this not in the core yet? The assumptions and code seem pretty safe\r\n> to me...\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8868#issuecomment-14584926>\r\n> .\r\n>"},{"ts":1362689703000,"body":"Alternately, though, you should be able to merge it into your local install\r\nrelatively smoothly, I'd guess.  Or you could pay someone to do it for you,\r\nif you don't want to do it yourself and can't wait.\r\n\r\nOn Thursday, March 7, 2013, Ezekiel Smithburg wrote:\r\n\r\n> This is run by volunteers.  I can't merge it, and the people who can and\r\n> know more about it have been, quite understandably, busy with security and\r\n> release stuff.  I'm hoping it gets in soon, too!  It's my first significant\r\n> patch, so I'd be pretty stoked for it to make it's way in.\r\n>\r\n> On Thursday, March 7, 2013, Amol Hatwar wrote:\r\n>\r\n>> Damn! This is EXTREMELY annoying. Every time I have to roll migrations,\r\n>> things bork and I have to do the rake db::drop && rake db:create dance.\r\n>> Why is this not in the core yet? The assumptions and code seem pretty safe\r\n>> to me...\r\n>>\r\n>> —\r\n>> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8868#issuecomment-14584926>\r\n>> .\r\n>>\r\n>"},{"ts":1362693429000,"body":"We need a CHANGELOG entry"},{"ts":1362693477000,"body":"Will add one once I'm at a computer!\r\n\r\nOn Thursday, March 7, 2013, Rafael Mendonça França wrote:\r\n\r\n> We need a CHANGELOG entry\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8868#issuecomment-14588888>\r\n> .\r\n>"},{"ts":1362693531000,"body":"Great! Ping me when done"},{"ts":1362715575000,"body":"@rafaelfranca I think it's ready."}]},{"timestamps":[]},{"timestamps":[{"ts":1359031880000,"body":":+1:\r\n\r\n@carlosantoniodasilva thought?"},{"ts":1359032563000,"body":"The implementation and tests seem fine, although it needs a changelog entry and probably some guide updates. \r\n\r\nI thought we were not going to add this option to update, until we come up with a different/better api for validations/contexts/skipping, not? In any case I think such changes would not be available any time soon, so I'd be fine adding it as well - keeping in mind that it'd have to be deprecated together later if we move to another solution anyway."},{"ts":1359032895000,"body":"Yes. I thought the same, but we don't know when and if we will change this API."},{"ts":1359039634000,"body":"@jeremy we were discussing about this some time ago.\r\n\r\nDo you think we could accept this pull request for 4.0 release and after think about a better API for skip validations/validations context?"},{"ts":1359046246000,"body":"I merely pushed this to get some feedback on what people think about this problem. If this is okay with the core team, I'll add changelog entries, documentation and guides. "},{"ts":1359070203000,"body":"Is better to wait the 4.0 release and start to work in the new API for this kind of feature.\r\n\r\nI'll close this pull request now. Thank you much for your contribution."}]},{"timestamps":[{"ts":1367673201000,"body":"Seems good. Could you add a CHANGELOG entry?"},{"ts":1367867882000,"body":"@rafaelfranca changelog added. "}]},{"timestamps":[{"ts":1374180581000,"body":"cc/ @fxn "},{"ts":1374593562000,"body":"@fxn do you think that I should push this into @rails/docrails ?"},{"ts":1374593631000,"body":"@raysrashmi: the guides are considered as doc. So yes, you can push this to docrails."},{"ts":1374594016000,"body":"Exactly."},{"ts":1374600469000,"body":"thanks. done here 2cd63ed3af22680ba942085513c6ee5585283326"}]},{"timestamps":[{"ts":1364223614000,"body":"@neerajdotname could you improve your commit message? I think it is missing something"},{"ts":1364224124000,"body":"@rafaelfranca How does this look ? \r\n\r\nhttps://github.com/neerajdotname/rails/commit/d36cfa2231dba9ebf3bc6900b136b205c4b51af1"}]},{"timestamps":[]},{"timestamps":[{"ts":1372632866000,"body":"Seems great :+1:, thanks mate."},{"ts":1372692970000,"body":"updated to remove extra whitespace, should be good to go."}]},{"timestamps":[{"ts":1363671145000,"body":"Done/Squashed"},{"ts":1363671246000,"body":"Thanks."}]},{"timestamps":[{"ts":1358950950000,"body":"thanks @kschiess.\r\n\r\n@rafaelfranca could you take a look?"},{"ts":1359486649000,"body":"Any chance we can get this merged in? This is an awesome fix!"},{"ts":1359502814000,"body":"Thanks @carlosantoniodasilva !"},{"ts":1359503042000,"body":"No problem, thanks guys."}]},{"timestamps":[{"ts":1364313236000,"body":"AR is lazy you cannot just eager load the models.\r\n\r\nOne of the possible ways to solve this is by calling `require_dependency` in selected files of the STI hierarchy."}]},{"timestamps":[{"ts":1364836610000,"body":"I'm going to make a judgement call here: we don't normally accept 'cosmetic' changes, and these 'refactorings' are so small that I don't think it's worth changing the history for. If they were part of larger changes, they'd be fine, but by themselves, it's not enough.\r\n\r\nThank you for your contribution, though! I'm sorry I can't accept it. :heart:."},{"ts":1364836666000,"body":"@orend trouble is, `response_body` is only guaranteed to respond to `#each`, not all of `Enumerable` :grin:"},{"ts":1364837187000,"body":"@jeremy :-o \r\n@steveklabnik no worries. Thanks for taking the time to explain the policy. I'll know for next (correct!) PR"}]},{"timestamps":[{"ts":1357539284000,"body":"I just pushed up a new version of ruby-prof that works with ruby 2.0.0 so I think this issue can be closed.\r\n"},{"ts":1357539905000,"body":"@cfis :sushi: :sushi: :sushi: "},{"ts":1357543125000,"body":"Using new version of ruby-prof I'm getting this in 1.9.3:\r\n\r\n```\r\n/Users/guille/code/rails/activesupport/lib/active_support/testing/performance/ruby.rb:38:in `run': undefined method `pause' for RubyProf:Module (NoMethodError)\r\n\tfrom /Users/guille/code/rails/activesupport/lib/active_support/testing/performance.rb:90:in `run_profile'\r\n\tfrom /Users/guille/code/rails/activesupport/lib/active_support/testing/performance.rb:45:in `block in run'\r\n\tfrom /Users/guille/code/rails/activesupport/lib/active_support/testing/performance.rb:43:in `each'\r\n\tfrom /Users/guille/code/rails/activesupport/lib/active_support/testing/performance.rb:43:in `run'\r\n```\r\n\r\nEdit: found why: https://github.com/rdp/ruby-prof/commit/69e3fe0c86e66c2c5fcc6086eb8aac7d4827ebd5"},{"ts":1357546288000,"body":"Pause was removed because it didn't work very well. I didn't realize Rails was actually using it, which is unfortunate.\r\n\r\nI'll cut a new release with it back in.\r\n\r\nCharlie"}]},{"timestamps":[{"ts":1377804504000,"body":"We will be tackling this issue on Rails 4.1 and I have the initial work in a branch. :)\r\nThe idea is not to put that in the environment but have a YML file with the tokens."},{"ts":1377804997000,"body":"@josevalim I thought the [thought](http://12factor.net/config) these days was to do as env variable, esp. something like the secret.\r\n\r\nAlso part of this PR was that the guide's cookie shouldn't be exposed, even if it doesn't matter in practice in this case because of what it is doing. It just looks bad, and is a bad example of what to do.\r\n\r\nThanks for considering it and for your work on cleaning it up. I know it will be a cool solution! :)\r\n\r\nLet me know if I should PR the guide cookie change separately or if that will be handled in your branch. Thx"},{"ts":1377809142000,"body":"I am not really involved in the guides work, but sending a pull request for\r\nthe guides changes is likely a good idea. :)\r\n\r\n-- \r\n\r\n\r\n*\r\nJosé Valim\r\nwww.plataformatec.com.br\r\nFounder and Lead Developer\r\n*"},{"ts":1377809402000,"body":"Thanks!"},{"ts":1377809616000,"body":"@josevalim it'd be cool to hear your opinion on why yml config is better considering what is written in the page of 12factor app I mentioned. Do you think the core list would be a good place to discuss that, or has it already been discussed somewhere you could link to and I could take a look?"},{"ts":1377809732000,"body":"Specifically, I'm talking about what @adamwiggins wrote here:\r\n\r\n> Another approach to config is the use of config files which are not checked into revision control, such as config/database.yml in Rails. This is a huge improvement over using constants which are checked into the code repo, but still has weaknesses: it’s easy to mistakenly check in a config file to the repo; there is a tendency for config files to be scattered about in different places and different formats, making it hard to see and manage all the config in one place. Further, these formats tend to be language- or framework-specific."},{"ts":1377822780000,"body":"Yes, this is slated to change in 4.1, and so I'd rather just leave it be for now until we have the plan together.\r\n\r\nThank you though!"}]},{"timestamps":[{"ts":1366821533000,"body":"Thank you but this will not work if we received `nil` as argument."},{"ts":1366823105000,"body":"Ok, @rafaelfranca , what about that code:\r\n\r\n    root = options && options[:root] || include_root_in_json\r\n\r\ninsted this, in serializers/json.rb\r\n\r\n    root = if options && options.key?(:root)\r\n       options[:root]\r\n    else\r\n       include_root_in_json\r\n    end\r\n\r\nTests for Active Model passses."},{"ts":1366823267000,"body":"Well, this fall in the cosmetic change category.\r\n\r\nAlso I prefer the former."}]},{"timestamps":[]},{"timestamps":[{"ts":1364992140000,"body":"Hm I'm not sure what's the correct behavior, but probably `to_formatted_s` should just delegate to `to_s` as the doc says."}]},{"timestamps":[{"ts":1377046026000,"body":":+1: I always wondered why they were different."},{"ts":1377047186000,"body":":thumbsup: "},{"ts":1377048303000,"body":"/cc @fxn"},{"ts":1377080578000,"body":"@schneems : I'm not sure whether Markdown will be correctly parsed with RDoc prior to 4.0. Moreover, since [sdoc is still depending on 3.x](https://github.com/voloko/sdoc/blob/4ac12045d25adcef14d905849bbc39df769756ad/sdoc.gemspec#L19), I think that it's not possible. However I love the idea and it would be great if I was wrong. Can someone confirm this please? "},{"ts":1377121164000,"body":"RDoc added support for Markdown in version 4. New Rails projects, however, have sdoc as a documentation dependency in the default _Gemfile_, and that needs RDoc 3 by now (there is work in progress towards RDoc 4). If you check a default _Gemfile.lock_ you'll see RDoc 3 there.\r\n\r\nSo, in order to be able to generate the application API with RDoc 4 you need to remove sdoc from the _Gemfile_, add rdoc, run `bundle update rdoc`, and accept you won't be able to run `doc:api`.\r\n\r\nI believe that the .rdoc extension is the natural default given that context today. You cannot generate stuff that breaks your own features.\r\n\r\nSomeone that does not care about generating local documentation can easily rename the file, the default content is trivial nowadays.\r\n\r\nIn the future I think we are going to migrate to Markdown, but the time has yet to come I believe."},{"ts":1377126033000,"body":"@fxn thank you for the background and the information it is good to know. I agree that it is not appropriate to migrate the format of the generated files at this time. Do we have any target or forecasting for when sdoc can use RDoc 4? Maybe this is a potential feature for 4.1 release?"},{"ts":1377191557000,"body":"@schneems it could be provided we depend on RDoc 4 by then, but that is not a goal of Rails per se. If SDoc upgrades fine. (Indeed, I don't know right now what are we going to use in 4.1.)"},{"ts":1377194852000,"body":"I am working on the sdoc upgrade! :heart:"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1361560488000,"body":"Какой профит от извлечения генерации токена в отдельный метод?\r\nЧто бы его можно было вызывать перед \"критическим\" действием?\r\nСчитаю что этим мало кто будет пользоваться. \r\nЕсли attr_accessible забывают прописать, как на гитхабе например =)"},{"ts":1361564487000,"body":"O_o"},{"ts":1361764637000,"body":"/cc @NZKoz "},{"ts":1361775827000,"body":"/cc @wycats (we discussed it a bit)"},{"ts":1361922650000,"body":"I replied to this but it appears nothing arrived ?\r\n\r\nI don't see why you'd call this, and not just reset_session which does effectively the same thing?"},{"ts":1361924969000,"body":"```\r\n    def reset_session\r\n      if session && session.respond_to?(:destroy)\r\n        session.destroy\r\n      else\r\n        self.session = {}\r\n      end\r\n      @env['action_dispatch.request.flash_hash'] = nil\r\n    end\r\n```\r\nexactly same thing? It destorys the session, refresh token just updates current token. This can be useful to avoid double submit and replay attack with same token. But destroying user session logs him out, do you think payment gateway should logout user after each payment? :)"},{"ts":1361925189000,"body":"csrf tokens aren't designed to prevent double submission or replay tokens, it's a blunt method that frankly won't work.\r\n\r\nDepending on your session store there's a HUGE race condition where the session has to be serialized and stored before the second request starts being processed. A user can double click a button a lot faster than your payment gateway can write the new Set-Cookie header to you and have your browser update its cookie jar.\r\n\r\nIf you're using the cookie store it doesn't achieve anything *anyway* as the old request will come through with the old cookie value and be happily accepted."},{"ts":1361937751000,"body":"aha, missed latency.\r\nsounds right, thank you :)"},{"ts":1375100125000,"body":"http://homakov.blogspot.com.es/2013/06/cookie-forcing-protection-made-easy.html\r\nafter every login app must refresh csrf token to avoid MITM cookie fixation. (makes sense for HTTPS connections). I will check out devise.."}]},{"timestamps":[]},{"timestamps":[{"ts":1362864272000,"body":"I think it may bring some sort of confusion with `User.find_each`, which loads records in batches. `User.all.each` is very clear on that it loads everything. Just my 2 cents, lets gather some more feedback here."},{"ts":1362866834000,"body":"@carlosantoniodasilva `find_each` and `find_in_batches` both are separate family of scopes, this `each` has nothing relative with them. \r\n\r\nI tried to make something like `where` or `limit`: we don't actually need to use it like `Model.all.where().each`, we just use `Model.where().each`, `Model.limit().each`, and `Model.any_scope.each`. But when we remove those `.where()`, `.limit()` or `any_scope` invocations, we do need add `all` scope. I think it's weird a bit.\r\n\r\nSo, like this:\r\n\r\n    Model.published.limit(5).each {}\r\n    Model.each {}\r\n\r\nAnd surely I'd like to hear more feedback, maybe this change is useful only for me. This reminds me this commit by @dhh https://github.com/rails/rails/commit/e50530ca3ab5db53ebc74314c54b62b91b932389"},{"ts":1362867240000,"body":"> this each has nothing relative with them.\r\n\r\nI get that ;), I'm just saying it *may* bring some confusion, and that's a point we need to consider. But I'm not completely against adding it."},{"ts":1362941840000,"body":"Just to weight in my 2cent, I think this is a good idea."},{"ts":1362950344000,"body":"In case it goes in, it'll need a changelog entry and tests :)."},{"ts":1362954353000,"body":"@carlosantoniodasilva sure, it was just like a demo, if people like it. If so, I'll add both tests and changelog."},{"ts":1363050607000,"body":"@carlosantoniodasilva added the changelog entry and tests. "},{"ts":1363058935000,"body":"I think `User.all.each` is better than `User.each`\r\n\r\n`User` is not an enumerable object"},{"ts":1367570694000,"body":"Ping. Rebase required. "},{"ts":1367581477000,"body":"I'm :-1: on this one. As @zires said `User` is not enumerable and this PR adds confusion at the cost of what I see very minimal benefit ."},{"ts":1367582064000,"body":":-1: as well. We have find_each for such loops.\r\n\r\nOn May 3, 2013, at 13:45, Neeraj Singh <notifications@github.com> wrote:\r\n\r\n> I'm  on this one. As @zires said User is not enumerable and this PR adds confusion at the cost of what I see very minimal benefit .\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub."},{"ts":1367599342000,"body":"Yup."},{"ts":1367623785000,"body":"Totally agree with you, I've revised my views on it.\r\n\r\n@steveklabnik @dhh what do you think about https://github.com/rails/rails/pull/9599, it's more useful feature I think"}]},{"timestamps":[]},{"timestamps":[{"ts":1364099086000,"body":"Thanks for the patch 1.01 million"},{"ts":1364114129000,"body":"This has already been suggested and rejected multiple times by the core team #1440 #1694 #6684 \r\nBasically, the response is that if you want something more custom than has_secure_password, there are lots of other auth options out there."},{"ts":1364136665000,"body":"Yes, thanks for digging those up, @bradleypriest "}]},{"timestamps":[]},{"timestamps":[{"ts":1358092120000,"body":"Isn't this the same as `slice`?"},{"ts":1358095788000,"body":"Yes, it is."},{"ts":1358096459000,"body":"In this case I dont understand the naming convention. Shouldn't it be at oeast an alias to maintain consistent API?  \r\n\r\n--  \r\nJakub Arnold\r\n\r\n\r\nOn Sunday 13 January 2013 at 17:50, Steve Klabnik wrote:\r\n\r\n> Yes, it is.\r\n>  \r\n> —\r\n> Reply to this email directly or view it on GitHub (https://github.com/rails/rails/pull/8918#issuecomment-12196158).  \r\n>  \r\n>  \r\n>  "},{"ts":1358097956000,"body":"Adding extra methods to core classes is no trivial matter. Adding an alias doesn't give us much gain, but _does_ add even more methods to every `Hash`."}]},{"timestamps":[]},{"timestamps":[{"ts":1372507397000,"body":"Do you have any references to support the format of `Set-Cookie` with regard to the separator?"},{"ts":1372613571000,"body":"> The user agent MUST use an algorithm equivalent to the following algorithm to parse the unparsed-attributes:\r\n>\r\n> 1. If the unparsed-attributes string is empty, skip the rest of these steps.\r\n> 2. Discard the first character of the unparsed-attributes (which will be a %x3B (\";\") character).\r\n> 3. If the remaining unparsed-attributes contains a %x3B (\";\") character: Consume the characters of the unparsed-attributes up to, but not including, the first %x3B (\";\") character. Otherwise: Consume the remainder of the unparsed-attributes. Let the cookie-av string be the characters consumed in this step.\r\n> 4. If the cookie-av string contains a %x3D (\"=\") character: The (possibly empty) attribute-name string consists of the characters up to, but not including, the first %x3D (\"=\") character, and the (possibly empty) attribute-value string consists of the characters after the first %x3D (\"=\") character. Otherwise: The attribute-name string consists of the entire cookie-av string, and the attribute-value string is empty.\r\n> 5. **Remove any leading or trailing WSP characters from the attribute-name string and the attribute-value string.**\r\n> 6. Process the attribute-name and attribute-value according to the requirements in the following subsections.  (Notice that attributes with unrecognized attribute-names are ignored.)\r\n> 7. Return to Step 1 of this algorithm.\r\n\r\ncite: [RFC 6265 section 5.2 (The Set-Cookie Header)](http://tools.ietf.org/html/rfc6265#section-5.2)"},{"ts":1372624769000,"body":":+1: Looks good to me. Thanks for the docs.  \r\n\r\n--  \r\nRichard Schneeman\r\nhttp://heroku.com\r\n@schneems\r\n\r\nSent from the road\r\n\r\n\r\nOn Sunday, June 30, 2013 at 1:33 PM, Yamagishi Kazutoshi wrote:\r\n\r\n> > If the unparsed-attributes string is empty, skip the rest of these steps.\r\n> > Discard the first character of the unparsed-attributes (which will be a %x3B (\";\") character).\r\n> > If the remaining unparsed-attributes contains a %x3B (\";\") character: Consume the characters of the unparsed-attributes up to, but not including, the first %x3B (\";\") character. Otherwise: Consume the remainder of the unparsed-attributes. Let the cookie-av string be the characters consumed in this step.\r\n> > If the cookie-av string contains a %x3D (\"=\") character: The (possibly empty) attribute-name string consists of the characters up to, but not including, the first %x3D (\"=\") character, and the (possibly empty) attribute-value string consists of the characters after the first %x3D (\"=\") character. Otherwise: The attribute-name string consists of the entire cookie-av string, and the attribute-value string is empty.\r\n> > Remove any leading or trailing WSP characters from the attribute-name string and the attribute-value string.\r\n> > Process the attribute-name and attribute-value according to the requirements in the following subsections. (Notice that attributes with unrecognized attribute-names are ignored.)\r\n> > Return to Step 1 of this algorithm.\r\n> >  \r\n>  \r\n> cite: RFC 6265 section 5.2 (The Set-Cookie Header) (http://tools.ietf.org/html/rfc6265#section-5.2)\r\n>  \r\n> —\r\n> Reply to this email directly or view it on GitHub (https://github.com/rails/rails/pull/11131#issuecomment-20251000).\r\n>  \r\n>  \r\n>  "},{"ts":1372672499000,"body":"Seems good to me too. @NZKoz ?"},{"ts":1372712669000,"body":"yeah :+1: from me too, "},{"ts":1372969765000,"body":"Okay! Let's get a CHANGELOG entry and then I'll merge."},{"ts":1373007099000,"body":"@steveklabnik I added changelog entry!"},{"ts":1373033137000,"body":"Great, thank you!"}]},{"timestamps":[]},{"timestamps":[{"ts":1374463520000,"body":"@drogus New pull request with a single, clean commit."},{"ts":1374473499000,"body":"GitHub allows you to force push onto a branch to automatically update the associated pull request. This way you don't need to open new PR's.—\r\nSent from Mailbox for iPhone\r\n\r\nOn Mon, Jul 22, 2013 at 6:25 AM, Simeon Simeonov <notifications@github.com>\r\nwrote:\r\n\r\n> @drogus New pull request with a single, clean commit.\r\n> ---\r\n> Reply to this email directly or view it on GitHub:\r\n> https://github.com/rails/rails/pull/11546#issuecomment-21323154"},{"ts":1374477189000,"body":"@senny I did force push and have a single commit (with a different SHA1 digest than the original one) in the [forked repo](https://github.com/swoop-inc/rails/commits/ss_memory_store_cache_size). After that, when I looked at the pull request I had opened, GitHub showed two commits as opposed to the single one. That was the reason I created a new PR. However, now, GH shows a single commit on the [original PR](https://github.com/rails/rails/pull/11527). This makes the two PRs identical. Since one is closed, I don't see a problem."},{"ts":1374477825000,"body":"@ssimeonov We sometimes have people who open new PR's after every review so I try to explain that it's not necessary. Everything is alright though."},{"ts":1374489270000,"body":"@ssimeonov sorry for nitpicking, but in the commit message you explained *what* you did, which can be seen in the code, what would be ideal is explanation on *why* you did it. Could you add a few sentences about the problem which the old way causes? Ie. when size is based only on `entry.size` we miss the size of the key and the size of ruby structures, which hold the entry."},{"ts":1374501579000,"body":"@drogus my bias is towards not duplicating existing information, hence the links to the empirical test and the original issue, which contains the detailed discussion, etc. However, I understand where you are coming from and have updated the commit message. "},{"ts":1374505441000,"body":"@ssimeonov it's duplication indeed, but if we start leaving the info as links to issues on each commit, you may end up opening a lot of pages to see what's going on in history. rails git history is not great, but every good commit message moves us closer to fixing this. Thanks a bunch for updating a commit message!\r\n\r\nAs a side note, it would be nice to rewrite the rake to rbx/jruby, but even using MRI based size is better than current situation so I'm going to merge it right away."},{"ts":1374505710000,"body":"This need to be backported to 4-0-stable"},{"ts":1374506051000,"body":"@rafaelfranca yup, :+1:"}]},{"timestamps":[{"ts":1364396220000,"body":"Right. I think we can drop this one too https://github.com/rails/rails/commit/5f690b97ba0dc411efc59789ad777c61cad198ae#L1R27"},{"ts":1364396463000,"body":"@rafaelfranca  will update and check again"},{"ts":1364397132000,"body":"@rafaelfranca  done."}]},{"timestamps":[{"ts":1365189488000,"body":"Seems good. Could you add a CHANGELOG entry?"},{"ts":1365190436000,"body":"@rafaelfranca Sure thing. Changelog entry added and squashed."},{"ts":1365191170000,"body":"Nice, thanks @rmm5t :+1:"}]},{"timestamps":[{"ts":1373909996000,"body":"Thanks @senny. Updated PR."},{"ts":1373912252000,"body":"@pftg thanks :yellow_heart: "},{"ts":1373912615000,"body":"Thank you very much! :green_heart: "}]},{"timestamps":[{"ts":1369989863000,"body":"Thanks @dasch!\r\n\r\nIt happens though that this pull requests completely busts out method caching. In your code, every time we render a template, we create a new class, compile the template, instantiate this new class and dispatch to it.\r\n\r\nThe current approach is to compile templates just once in the view. After the template is compiled into a method, we never generate the method again, we simply dispatch to it."},{"ts":1370003493000,"body":"@josevalim I haven't gotten to the caching part yet – the idea is to store the classes in a cache, e.g.\r\n\r\n```ruby\r\ndef compile!\r\n  key = get_some_cache_key_for(self)\r\n  @compiled_templates[key] ||= Compiler.compile_template(self)\r\nend\r\n```\r\n\r\nThen the only thing that will happen per-request is the instantiation of a compiled template class and the render call."},{"ts":1370006503000,"body":"@josevalim setting ivars in a template and using it in a layout is kind of tricky. I've hacked it on, but I'm not completely happy with it..."},{"ts":1370006857000,"body":"```\r\n4235 runs, 17641 assertions, 38 failures, 19 errors, 0 skips\r\n```"},{"ts":1373976426000,"body":"@josevalim I've given up this approach – I don't think it'll be possible to continue down this road unless we make a major change to the template API. Specifically, it would be very difficult to keep supporting to ability to communicate between templates using instance variables. I find this to be a bad practice, but I bet people use it.\r\n\r\nIf this design is something that the core wants to move towards, we should consider how to rearchitect ActionView."}]},{"timestamps":[]},{"timestamps":[{"ts":1357830160000,"body":"This is a \"beta\" PR. Let me know if this PR could be accepted, and then I could continue to work on. \r\nthanks in advance\r\ncc / @rafaelfranca @carlosantoniodasilva \r\nP.S\r\n\r\nadd:\r\n``` <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"> ```\r\nfor mobile device "},{"ts":1357831531000,"body":"I don't this has a real interest of being inside rails.\r\nYou an add it as a gem, or just add the stylesheet globally for all the scaffolds in your application.\r\n\r\n:-1:"},{"ts":1357832130000,"body":"While it sounds like a nice idea, I do not think this should be in Rails. I doubt if anyone actually uses Rails' scaffold styles in their apps ever. Even for prototypes, many beg to use Bootstrap.\r\n\r\n:-1: as well."},{"ts":1357835865000,"body":"@dmathieu It' a few line of pure css, Many Times I show a Protototype to customers , they told me  \"can  I try it by my iPad/iPhone? \"\r\n@goshakkk the Use of ```bootstrap``` it's not immediate, you have to made a new layout of your app  also it is written in ``` less ``` "},{"ts":1357837452000,"body":"\"A few line of pure CSS\" doesn't mean it always needs to be included into rails.\r\nMoreover, scaffolding is meant more for discovery than for prototyping (otherwise, it's use respond_with instead of respond_to).\r\n\r\nYou can always create a simple rails engine which will add the appropriate CSS into your scaffolds when generated."},{"ts":1357838410000,"body":"I'm actually vaguely :+1: on this, it's very little code, and like @acapilleri mentions, often I'll whip up a prototype with scaffolds to show something."},{"ts":1357843711000,"body":"@dmathieu  \" \"A few line of pure CSS\" doesn't mean it always needs to be included into rails\" Sure.\r\nBut we are talking about  ```html5```and ```css3```and ``` mobile ```not about ```internet explorer 6 ``` compatibility.\r\nAlso [edgeguides] (http://edgeguides.rubyonrails.org) has a good look on mobile device"},{"ts":1357981143000,"body":"I'm :+1: with this. I think it's very fex line of code. Since the stylesheet is here as a kind of bootstrap, why not make it accessible for mobile."},{"ts":1358130791000,"body":"I don't have strong opinion about this one but I think that data-attribute will confuse people."},{"ts":1358183422000,"body":"When I used rails the first time, I was impressed by the Scaffold, because with one shell command I could get prototype of my application . Today the mobile web traffic is growing so my expectation is that my prototype works fine also on mobile devices. I think that is a natural choice.\r\nAnyway ```data-attribute ``` could be changed. any suggestions?"},{"ts":1358184408000,"body":"Just make it a class?"},{"ts":1358185226000,"body":"@steveklabnik good point,  I think that using a ```class``` could be a solution, also because reading [here](http://www.w3schools.com/tags/att_global_class.asp) and [here] (http://www.w3schools.com/css/css_id_class.asp) we do not violate the use of the ```class``` in html"},{"ts":1358185457000,"body":"Another my doubt is the use of ```<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">``` it's need an helper method? it could be added to the application layout?"},{"ts":1358185840000,"body":"@acapilleri I do not think we should be using `maximum-scale=1.0`, at least by default, because it's bad for accessibility.\r\n\r\n> This is a problem from the accessibility point of view. Zooming in is a very valid use case for users with bad eyesight, and in some cases, even users with good eyesight who just want a closer look at some part of your page. Do this only if you hate your users. \r\n[source](http://tech.bluesmoon.info/2011/01/device-width-and-how-not-to-hate-your.html)"},{"ts":1358241154000,"body":"updated ```data-attributes``` to ```class```"},{"ts":1358249100000,"body":"I *think* it might be better to not have this by default, but I don't have a strong opinion either."},{"ts":1358257444000,"body":"fixed extra spaces."},{"ts":1358263909000,"body":"I have to say if we don't have strong opinions about this is because we don't feel confident to put it into the framework.\r\n\r\nSo I'm closing this pull request.\r\n\r\n@acapilleri thank you so much."}]},{"timestamps":[{"ts":1359545238000,"body":"Thanks. What do you think about just [raising if the task cannot be found in `class_for_adapter`](https://github.com/dazuma/rails/blob/7f64b5aec219204ddb1b5e747ba732c65fa4db81/activerecord/lib/active_record/tasks/database_tasks.rb#L132)? Then we would not need the default class, only the exception, and the adapter option is already available there. Other than that, I think it's :+1:"},{"ts":1359569027000,"body":"That might be simpler. My thinking was to avoid changing the semantics of DatabaseTasks#class_for_adapter, in case we might want to use it to determine whether an adapter is currently supported (i.e. explicitly detect nil as a return value). But since it's private, maybe that's not a big deal. If we all think it's better to raise directly out of class_for_adapter, I'll submit a changed request."},{"ts":1359570198000,"body":"> in case we might want to use it to determine whether an adapter is currently supported (i.e. explicitly detect nil as a return value)\r\n\r\nI think we can refactor later if we find this to be necessary, since it'd probably be another public method."},{"ts":1359573291000,"body":"Change made to raise the exception directly out of class_for_adapter, and rebased."},{"ts":1359631355000,"body":"Thanks!"},{"ts":1359675791000,"body":"Thanks much for your help, Carlos!"},{"ts":1359682321000,"body":"You're welcome, and thanks for contributing :)."}]},{"timestamps":[{"ts":1368729652000,"body":"I'm fine with this, but @fxn is our expert so I think he should take a look! :-)"},{"ts":1372207906000,"body":"Hey @fxn, mind taking a look? :heart:"},{"ts":1375367330000,"body":"1 month ping @fxn this PR seems good, can you please comment or merge?"},{"ts":1375373702000,"body":"I don't really see this change.\r\n\r\nThe READMEs are included in the API, they are introductions to the Rails *components*. A page like [the one generated by lib/active_support.rb](http://api.rubyonrails.org/classes/ActiveSupport.html) is the page of a Ruby *module*. Look at the page, it has a large number of files, a large number of classes and modules, and a bunch of methods. I don't visualize the README inserted in that page.\r\n\r\nIf we did not have the READMEs, that page could be the least worse solution, but having the READMEs I believe they are more appropriate and enough."},{"ts":1375374671000,"body":"@fxn Consider, that this change also allows for users without access to the READMEs to do something like `ri ActiveSupport`"},{"ts":1375386409000,"body":"`ri ActiveSupport` should give you information about the `ActiveSupport` Ruby module. To read an offline introduction to the `activesupport` gem you would consult its README as with any other gem. For example using `gem server`.\r\n\r\nActive Support != `ActiveSupport`.\r\n"},{"ts":1375388663000,"body":"Ah, there is also `ri activerecord:README`... yeah, definitely don't see them in module files. Thanks anyway for the proposal."},{"ts":1375916085000,"body":"@fxn Understood, thank you for the explanation!"}]},{"timestamps":[{"ts":1363081886000,"body":"looks good to me. /cc @carlosantoniodasilva "},{"ts":1363085739000,"body":"Thank you."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1377116094000,"body":"A big :+1:, maybe we could also update the contribution guideline? Awesome!"},{"ts":1377116895000,"body":"Thanks @robin850 for feedback, I added some guideline. Will be great to hear your opinion about it."},{"ts":1377248109000,"body":"Awesome! :heart: "}]},{"timestamps":[{"ts":1359184862000,"body":"Ok, I'm now using grep and have fixed the indent."},{"ts":1359407605000,"body":"You could clean up the protected method `unique_for_nested_attributes?` by pulling out some of the logic into other methods something like this:\r\n\r\n```ruby\r\ndef unique_for_nested_attributes?(collection)\r\n  return true if collection.empty?\r\n  uniq_validators = uniq_validators_for(collection)\r\n  return true if uniq_validators.empty?\r\n\r\n  validations = nested_validations(collection, uniq_validators)\r\n\r\n  collection.length == validations.length\r\nend\r\n\r\ndef uniq_validators_for(collection)\r\n  validator = ActiveRecord::Validations::UniquenessValidator\r\n  collection.first.class.validators.grep(validator)\r\nend\r\n\r\ndef uniq_attributes_for(validators)\r\n  validators.flat_map do |validator|\r\n    [validator.attributes, validator.options[:scope]]\r\n  end.compact.to_set\r\nend\r\n\r\ndef distinct_validations_on_attributes(collection, attributes)\r\n  collection.map do |record|\r\n    record.attributes.select { |k,v| attributes.include?(k.to_sym) }.values.join(\"\")\r\n  end.uniq\r\nend\r\n\r\ndef nested_validations(collection, validations)\r\n  attributes = uniq_attributes_for(validators)\r\n  distinct_validations_on_attributes(collection, attributes)\r\nend\r\n```\r\n\r\nThough this is just an off-the cuff refactoring, you'll want to pick some better names for methods, and make sure none of the logic was lost in the translations (just run the tests). I also changed `Set.new` to call `.to_set` on the array, and changed the multi line block syntax from `{` to `do/end` and moved from `map.flatten` to a `flat_map`. Even after refactoring this, i'm not 100% sure how this logic works, commenting on individual methods could help.\r\n\r\nThanks a ton for submitting this, the more people with more knowledge of Active Record code, the better :heart:"},{"ts":1361460700000,"body":"Actually, I realized the code I wrote will have a bug. Consider the following test case:\r\n\r\n```ruby\r\n  def test_validates_associated_nested_attributes_uniequeness_with_scoping\r\n    Topic.validates_associated(:replies)\r\n    Topic.accepts_nested_attributes_for(:replies)\r\n    Reply.validates_uniqueness_of(:title, :scope => :content)\r\n\r\n    t = Topic.create(\"title\" => \"Programming\", \"content\" => \"For the masses\")\r\n    t.replies_attributes = [{\"title\" => \"aa\", \"content\" => \"aa\"}, {\"title\" => \"a\", :content => \"aaa\"}]\r\n\r\n    assert t.valid?\r\n    t.save!\r\n    assert_equal 2, t.replies.size\r\n  end\r\n```\r\n\r\nBecause of the way I'm joining the values together, this test will fail. I'm going to close this PR and make a new one when I've got time to work on this more."}]},{"timestamps":[{"ts":1357198108000,"body":"@goshakkk the problem with delegation is that these methods won't be visible in rdoc documentation I guess."},{"ts":1357242443000,"body":"Good point.\r\n\r\nThank you for the pull request"}]},{"timestamps":[{"ts":1367096945000,"body":"Since you added code in both `create` and `create!` methods, you should write tests for each of those cases."},{"ts":1367158801000,"body":"@egilburg thanks for the feedback. I have fixed the code as per your suggestion. "},{"ts":1367244158000,"body":"@neerajdotname should not `first_or_initialize` work too?"},{"ts":1367246558000,"body":"@rafaelfranca looking into `first_or_initialize` ."},{"ts":1367333707000,"body":"@rafaelfranca \r\n\r\n`first_or_create`, `first_or_create!` and `first_or_initialize` all have the same problem. They do not create association record for hm:t .\r\n\r\nThis PR fixes the issue for the first two.\r\n\r\nIn order to fix `first_or_initialize` I invoked `build` on proxy instead of base object but found that\r\n\r\n```\r\nphysician.patients.build(name: 'neeraj').save!\r\n````\r\n\r\ndoes not create the association record.\r\n\r\nI could not find any documentation stating that `build` does not support hm:t .\r\n\r\nIn short this PR does not fix `first_or_initialize` . For that I am going to open another issue and will look into that. If that issue is fixed then it should be easy to fix  `first_or_initialize` ."},{"ts":1367570453000,"body":"I don't consider this to be a bug.\r\n\r\n`physician.patients` is an association proxy. `physician.patients.where(name: 'neeraj')` is a relation. I don't think we can reliably support association mutation in the case of relations built off association proxies. Consider that you could change the association in any way, including e.g. `physician.patients.joins(\"...\")` or even `physician.patients.only(...)`, etc.\r\n\r\nSo even though this makes sense in this specific case, I think it's a dangerous road to go down to try to support this.\r\n\r\nIn this case it would be better to use:\r\n\r\n```\r\nphysician.patients.find_or_create_by(name: 'neeraj')\r\n```"},{"ts":1367580836000,"body":"Closing it as per feedback from @jonleighton ."}]},{"timestamps":[{"ts":1358012971000,"body":"This fixes issue #8897.\r\n\r\n/cc @rafaelfranca"},{"ts":1358130544000,"body":"Thank you so much, and welcome to [Rails Contributors](http://contributors.rubyonrails.org/contributors/jose-mota/commits)"}]},{"timestamps":[{"ts":1360280524000,"body":"I don't think this is incorrect behavior - the sql generated is literally what the where statement says. If I ask for a query that returns the empty set, I don't expect an ActiveRecord::StatementInvalid to be raised.\r\n\r\nThere are many situations where this might occur. Consider:\r\n\r\nPosts.where(author: Author.new_since(1.day.ago))\r\n\r\nIf no new authors have signed up since a day ago, this should not return an error - there's simply no posts to be displayed."},{"ts":1360280842000,"body":":+1: this is common cause of security bugs in people's applications and the benefits of closing that loophole are worth the improvements.  I'd raise an ArgumentError subclass not a statement invalid one"},{"ts":1360289828000,"body":"-1 on the exception - the statement is valid, it just happens to not match any records. Raising in that situation means everywhere else has to check the array they're using (as in `has_many_through_association.rb` in this diff).\r\n\r\nI believe #9179 is close to a solution on this one."},{"ts":1360290110000,"body":"@NZKoz - not sure how this issue could produce a security hole; `some_column IN (NULL)` won't match anything. I believe the dangerous one was `{}`, which was fixed in #6960."},{"ts":1360290454000,"body":"@al2o3cr the issue is:\r\n\r\n```ruby\r\nif !params[:login_token].nil?\r\n  User.where(:login_token=>params[:login_token])\r\nend\r\n```\r\n\r\nPutting aside arguments about whether an empty array and the null set are the same thing, and whether our mapping between them makes sense, what's the practical case where you're passing an empty array, and wanting values where the field is NULL.\r\n\r\nIf you'd prefer, I could see us making it generate\r\n\r\n```sql\r\n  SELECT * FROM `users` WHERE `login_token` IN ()\r\n```\r\n\r\nWhich would still raise an exception:\r\n\r\n```text\r\nmysql>   SELECT * FROM `users` WHERE `login_key` IN ();\r\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ')' at line 1\r\n```\r\n\r\n"},{"ts":1360297674000,"body":"@guilleiguaran @NZKoz done!\r\nJust one question, should I send similars path for 3.x stable branches?"},{"ts":1360303689000,"body":"@robertomiranda while you're at it, change ``User.where(token: {})`` to raise an argument error too instead of ``1=2``"},{"ts":1360303843000,"body":"@guilleiguaran take a look #9220 resolve the empty hash issue in the where clause "},{"ts":1360310742000,"body":"GH reports: \"This pull request cannot be automatically merged.\" "},{"ts":1360311148000,"body":"Presumably because I merged #9220 ?"},{"ts":1360323548000,"body":"@guilleiguaran conflicts fixed"},{"ts":1360336942000,"body":"I'm still seriously confused about how allowing `[]` is a security hole - in the example from @NZKoz, the behavior is identical to what happens if the login token is not present in the database. One presumes that that case is handled in any reasonable program...\r\n\r\nThis also creates an annoying incompatibility with raw ARel - an example:\r\n```ruby\r\n# raises\r\nPost.where(:id => []).count\r\n# works fine, returns 0\r\nPost.where(Post.arel_table[:id].in([])).count\r\n```\r\n\r\nIn addition, this imposes a check on every user of `where` - one that's needed *only* because of the explicit raise. An example:\r\n```ruby\r\n# Group has_many Users\r\n# Post has_many Comments\r\n# Comment belongs_to User\r\nnumber_of_comments_by_group = @post.comments.where(:comments => { :user_id => @group.user_ids }).count\r\n```\r\nWith the old code, this works fine when `@group` has no users - the condition matches no rows, and thus the count is 0 as expected. With this patch, `@group.user_ids` will need to be checked to avoid an `ArgumentError`.\r\n\r\nFWIW, ARel actually explicitly added code to stop generating the `IN (NULL)` clause in this commit:\r\n\r\nhttps://github.com/rails/arel/commit/62207fa\r\n\r\n/cc @spastorino @ernie"},{"ts":1360337364000,"body":"-1 This change.\r\nCurrently I can write\r\n```ruby\r\nfailed_invoices = ...\r\nunpaid_users = User.where(last_invoice_id: failed_invoices)\r\nunpaid_users.each{...}\r\n```\r\nwith this change I get error\r\nso, I should write?\r\n\r\n```ruby\r\nunpaid_users = failed_invoices.present? ? User.where(last_invoice_id: failed_invoices) : []\r\n```\r\nthat's ugly"},{"ts":1360337501000,"body":":-1:"},{"ts":1360337718000,"body":":-1:\r\n\r\n`IN (NULL)` will match nothing. While I prefer the \"1=0\" solution to make that more obvious, this isn't going to cause issues."},{"ts":1360340088000,"body":":-1: "},{"ts":1360340133000,"body":":-1: "},{"ts":1360340171000,"body":":-1: "},{"ts":1360340936000,"body":"-1"},{"ts":1360340947000,"body":":-1:"},{"ts":1360340968000,"body":":-1: I do not like this change. Lots of code that I've written depends on the query returning no results, not throwing an error."},{"ts":1360343158000,"body":":-1: "},{"ts":1360349031000,"body":"@NZKoz @guilleiguaran I think we should revert this.  @skojin has a point, now we have to force everyone to check that the array contains something.\r\n\r\nAs @al2o3cr says, the empty array should match nothing, though I agree with @ernie that `1 = 0` would make this more explicit.  Nobody wonders whether the `1 = 0` test will fail."},{"ts":1360350992000,"body":"@tenderlove ok!! I'm reverting this, @robertomiranda will send another PR using `1 = 0`"},{"ts":1360351387000,"body":"Reverted in fa987cb8ec4cc48018"},{"ts":1360351727000,"body":"I'm probably way off base here, because I have been engrossed in some other stuff lately, but shouldn't this already be eventually resulting in `1 = 0` based on:\r\n\r\n```ruby\r\n         values_predicate = if values.include?(nil)\r\n            values = values.compact\r\n\r\n            case values.length\r\n            when 0\r\n              attribute.eq(nil)\r\n            when 1\r\n              attribute.eq(values.first).or(attribute.eq(nil))\r\n            else\r\n              attribute.in(values).or(attribute.eq(nil))\r\n            end\r\n          else\r\n            attribute.in(values) # <== This is where an empty array should end up\r\n          end\r\n```\r\n\r\nand this, from ARel:\r\n\r\n```ruby\r\n      def visit_Arel_Nodes_In o\r\n        if Array === o.right && o.right.empty?\r\n          '1=0'\r\n        else\r\n          \"#{visit o.left} IN (#{visit o.right})\"\r\n        end\r\n      end\r\n\r\n      def visit_Arel_Nodes_NotIn o\r\n        if Array === o.right && o.right.empty?\r\n          '1=1'\r\n        else\r\n          \"#{visit o.left} NOT IN (#{visit o.right})\"\r\n        end\r\n      end\r\n```\r\n\r\nAt least, I think that's why I wrote that code. :confused: "},{"ts":1360352181000,"body":"@ernie - this was raising the exception in `build_from_hash`, before the code you cited got a chance to run."},{"ts":1360352286000,"body":"@al2o3cr Right, but I thought people were writing this code because AR was giving them `NOT IN (NULL)` for an empty array, instead of `1 = 0`."},{"ts":1360353190000,"body":"@ernie - I've only observed that behavior on 3.2.x, whose Arel (3.0.2) predates your patch."},{"ts":1360353506000,"body":"Well then. At least I'm not entirely crazy."}]},{"timestamps":[{"ts":1373735946000,"body":"I like this overall, but have the same basic questions you do. I'd love some feedback from others."},{"ts":1373751115000,"body":"@steveklabnik rails [generator test helper](https://github.com/rails/rails/blob/d9204c13918bcbfe3df2e418c510f3fb6505bcb2/railties/test/generators/generators_test_helper.rb#L23) is using ```Rails.root.join('tmp')``` for destination. That's maybe first answer."},{"ts":1373838838000,"body":"@steveklabnik I updated pull request with my solution of previous problems. First post is also updated to reflect latest changes."},{"ts":1373922475000,"body":"@steveklabnik is code style OK now?"},{"ts":1373923001000,"body":"Yup, looks good.\r\n\r\nEventually the commits will need to be squashed into one. And I still want someone else's :+1: before I merge."},{"ts":1373923192000,"body":"@steveklabnik I know. I'll just keep it in multiple commits to easy reverting some of them and rework it. In final I'm able to rebase it and I'm rebasing it often against master to easy merge."},{"ts":1373923874000,"body":":+1: "},{"ts":1373924010000,"body":"@steveklabnik @guilleiguaran should I squash now?"},{"ts":1373925959000,"body":"Yes, since Guille is good I'm good.\r\n\r\nPlease squash and add a CHANGELOG entry, thanks!"},{"ts":1373926482000,"body":"@steveklabnik OK now?"},{"ts":1373926787000,"body":"Looks great. As soon as Travis builds I'll merge."},{"ts":1373932233000,"body":"@steveklabnik mysql tests errored. Can you restart those two jobs?"},{"ts":1373955665000,"body":"@simi I restarted the failing jobs."},{"ts":1373955760000,"body":"@senny @simi I restarted the failing jobs some hours ago, maybe a Travis issue?"},{"ts":1373955884000,"body":"@guilleiguaran mmm, they are running now. Let's see if they fail again."},{"ts":1373955933000,"body":"Yeah. It looks like @guilleiguaran. Still same. Other builds without this patch are erroring with same behaviour."},{"ts":1373956065000,"body":"the log stopped at 10'000 lines. This line appears on most of them:\r\n\r\n```\r\n/home/travis/build/rails/rails/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb:295: warning: instance variable @read_timeout not initialized\r\n```"},{"ts":1373956158000,"body":"Yup. Same here for example https://travis-ci.org/rails/rails/jobs/9118156."},{"ts":1373956287000,"body":"Same is happening on master. First failing build is for: https://github.com/rails/rails/commit/d345ed40b5783ec2cb43f4434872ea5b2d57d203 \r\n\r\nBut doesn't really look related."},{"ts":1373958597000,"body":"It is mysql2 3.12 related issue. With 3.11 tests are fine. With 3.12 I see exactly this error. Mysql 3.12 was released yesterday."},{"ts":1373959217000,"body":"@senny @guilleiguaran I opened issue https://github.com/rails/rails/issues/11457 for this."},{"ts":1373961452000,"body":":heart: "},{"ts":1373961650000,"body":"thanks for your contribution :heart:"},{"ts":1373978715000,"body":":confetti_ball: :heart:\r\n"}]},{"timestamps":[{"ts":1375802460000,"body":"@thedarkone You were correct originally, I misread the `#digest`'s `rescue` block as an `ensure`. We are now checking if the return from `#digest` is `present?`, and only caching the digest if it is.\r\n\r\nThat will make it so `@@cache[cache_key]` will still be false if `pre_stored` and there was any error generating the digest."},{"ts":1375804674000,"body":"@jridgewell you did not misread it. It is an `ensure` block not a `rescue` block, that's why I think my original version with the `&& !digest` was a bit too clever for its own good. Please change it like this:\r\n\r\n```ruby\r\nrescue Exception\r\n  @@cache.delete_pair(cache_key, false) if pre_stored # make sure not to corrupt the @@cache\r\n  raise\r\n```\r\n\r\nAfter that, there is no point in checking `digest` for \"presence\" (the original code was doing it as a clever trick to detect an exception throw in an `ensure` block). You can go back to the plain:\r\n\r\n```ruby\r\n@@cache[cache_key] = digest if ActionView::Resolver.caching?\r\n```"},{"ts":1375805714000,"body":"@thedarkone I think we're talking about two different methods. The `ensure` block is in `compute_and_store_digest`, the `rescue` block (which I thought was also an `ensure`) is on `#digest` (not `.digest`).\r\n\r\nThe `rescue` on `#digest` already captures `ActionView::MissingTemplate`, which I believe is the only error that could be raised by `Digestor`. We could change it to also send that error up the stack to be caught by `compute_and_store_digest`?"},{"ts":1375808158000,"body":"No, don't change the `Digestor#digest` API, if it returns an empty string (upon catching and swallowing `ActionView::MissingTemplate`) then we should cache it.\r\n\r\nThe code in `Digestor.compute_and_store_digest` shouldn't care about what kind of errors `Digestor#digest` might raise, it just needs to make sure that if it \"pre stores\" a dummy value in the `@@cache` it gets removed if something goes wrong.\r\n\r\nWhat I want is to replace the clever `ensure` block in `Digestor.compute_and_store_digest` with a simpler `rescue` block in my comment above. Also don't check the returned `digest` for presence and cache it anyway.\r\n\r\n"},{"ts":1375811572000,"body":"@thedarkone We changed `Digestor.compute_and_store_digest` to incorporate your suggestions."},{"ts":1376589970000,"body":"bump"},{"ts":1377205543000,"body":"@thedarkone @rafaelfranca, are there any other suggestions for getting this merged in?"},{"ts":1377623491000,"body":"Thank you. Sorry for the delay."}]},{"timestamps":[{"ts":1369479154000,"body":"This patch actually provides a very subtle change in behavior. Before this patch, Active Record guaranteed that the nested hash would be assigned after regular parameters and this patch removes this guarantee. Now if the previous behavior was intentional or not is a question that should be asked."},{"ts":1369479340000,"body":"Hm, that's interesting. If it is intentional there should be a test for it.\r\n\r\nBut first of all can you explain how this behavior appeared?"},{"ts":1369479474000,"body":"I don't know how this behaviour appeared as it is impossible to know everything that happens to Rails. :)\r\n\r\nI blamed the source code and went through history, this commit seems to have done it: https://github.com/rails/rails/commit/774ff18c095145f544e845dbb940378546748969 "},{"ts":1369509166000,"body":"@bogdan Our pull requests are just same."},{"ts":1369515784000,"body":"@homakov hehe. Closing this one than."}]},{"timestamps":[{"ts":1371637165000,"body":"Could you also add a test-case that uses the `ids_writer` on a new record and then verifies that `ids_reader` returns the set array? I dug through `has_many_associations_test.rb` but couldn't find a test-case using the `ids_writer` on a new record so we should probably make sure it works after a `save`."},{"ts":1371776855000,"body":"@senny thanks - have pushed up changes as suggested :) Let me know if there is anything else"},{"ts":1371895877000,"body":"looks good, thanks for your contribution :yellow_heart: "},{"ts":1371896076000,"body":"I missed that this branch points to `3-2-stable`. Please always open PR's to `master`. We will backport it if possible. I have to check with @rafaelfranca if this patch is actually going to make it into `3-2-stable`. I'm reverting for now.\r\n\r\nCan you open a new PR to `master`?"},{"ts":1372052996000,"body":"@senny actually - and really sorry this wasn't clear in the PR description - this is only an issue on rails-3-2 and earlier (which is why I sent it to 3-2-stable branch). Other changes to the associations code seem to have already fixed this particular issue on master as a side-effect (using null relation for query). Will put that at the top of the PR descriptions in future where applicable.\r\n\r\nLet me know if you still want me to submit a PR for 3-2-stable"},{"ts":1372055860000,"body":"I'll take a look. I think we need to keep at least the test-case to prevent regressions."},{"ts":1372056386000,"body":"Sure - happy to add that, etc. Let me know what you want me to do :)\r\n\r\n\r\nOn Mon, Jun 24, 2013 at 6:38 PM, Yves Senn <notifications@github.com> wrote:\r\n\r\n> I'll take a look. I think we need to keep at least the test-case to\r\n> prevent regressions.\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/10901#issuecomment-19891198>\r\n> .\r\n>"},{"ts":1372174149000,"body":"@senny seems good"},{"ts":1372174175000,"body":"But the CHANGELOG message needs to be improved, it is too confusing. Maybe some code example would fix it"},{"ts":1372177315000,"body":"good, I reverted the my rever-commit and modified the CHANGELOG entry. Everything should be good to go now."},{"ts":1372200325000,"body":"Thanks guys!"}]},{"timestamps":[{"ts":1363105999000,"body":"Hooray!"}]},{"timestamps":[{"ts":1369877931000,"body":"Do we have any test case related to this? If not, I'd recommend adding one. Thanks."},{"ts":1372167585000,"body":"@kuboon ping, did you have time to add the test-case?"},{"ts":1376549008000,"body":"It's been three months since we last heard from you. I'm closing this but please report back if you are still interested in this change."},{"ts":1376553598000,"body":"I'll retry with proper test cases soon."}]},{"timestamps":[{"ts":1371326463000,"body":"Thank you for you contribution. I don't think this should be inside Rails by default. It is not something that is required to the framework neither I see a lot of people using this feature.\r\n\r\nIt can live as a gem."}]},{"timestamps":[]},{"timestamps":[{"ts":1372628973000,"body":":+1: I didn't know that `send`-ing a symbol was faster than a string, though makes sense: https://gist.github.com/schneems/5897076\r\n\r\nchange seems good"}]},{"timestamps":[{"ts":1356379415000,"body":"I don't think this belongs to Rails. There are gems that do this. And you can do the same using the reflection API"},{"ts":1356379849000,"body":"BTW, thank you for the pull request."},{"ts":1356381113000,"body":"Well, no thanks. This is like a day work and then snipped out by 1 person 20 minutes later. There's really no fun in that at all. Well, it won't happen again, you can be sure of that.\r\n"},{"ts":1356381203000,"body":"@acesuares if you like more feedback I can reopen, we are not finish yet :wink: "},{"ts":1356383525000,"body":"Lets to my points about this patch:\r\n\r\n1. Not every applications would be beneficed by this feature.\r\n1. Reading the code it is clearly a copy of the errors feature (what could mean you can use it instead of adding a new structure to Rails)\r\n1. You can archive the same thing using the reflection API to get what validations the field has and building the hints without need to create a new structure to it on the framework\r\n1. There are gems doing this without use the validations API that, IMO, is not the right way to do it https://github.com/plataformatec/simple_form/blob/master/lib/simple_form/components/hints.rb https://github.com/justinfrench/formtastic"},{"ts":1356383632000,"body":"And sorry about the premature closing."},{"ts":1356384713000,"body":"I just saw you already made a gem for this feature.\r\n\r\nhttps://github.com/acesuares/validation_hints\r\n\r\nI still think it a good feature for a gem, but not for the framework.\r\n\r\ncc @jeremy @carlosantoniodasilva @spastorino "},{"ts":1356384839000,"body":"@rafaelfranca just curious, can you provide an small example of how to achieve this using  reflection API instead of copying Errors module?"},{"ts":1356385221000,"body":"Sure.\r\n\r\nSomething like this:\r\n\r\n```ruby\r\ndef hints_for(object, attribute)\r\n  object.class.validators_on(attribute).map do |validator|\r\n    generate_message_for(validator)\r\n  end\r\nend\r\n\r\nuser = User.new\r\nhints_for(user, :name)\r\n```"},{"ts":1356385319000,"body":"btw, I agree with @rafaelfranca I don't think this belongs to core for same reasons"},{"ts":1356397876000,"body":"as for reflection: it's really not the same.\r\n\r\nthe patch is using that technique, for simple cases.\r\n\r\nbut with hints, you can add messages that are hints and not errors.\r\n\r\nI hope I can explain this.\r\n\r\nAdding to hints, would give you a big area to talk to users, and those would be different things then reporting the error.\r\n\r\nalso, there is things like (in en.yml)\r\n    inclusion:\r\n        in: \"must be one of %{count}\"\r\n     associated: \"is invalid\"\r\n      uniqueness: \"must be unique\"\r\n      confirmation: \"doesn't match confirmation\"\r\n      acceptance: \"must be accepted\"\r\n\r\ncompared with\r\n\r\n      inclusion: \"is not included in the list\"\r\n      exclusion: \"is reserved\"\r\n      invalid: \"is invalid\"\r\n      confirmation: \"doesn't match %{attribute}\"\r\n      accepted: \"must be accepted\"\r\n\r\n\r\nFor example 'inclusion'.\r\nFor an error, you want 'Name is not included in the list'\r\nbut for a hint you want ' Select a Name from the list'\r\n\r\nI hope that is clear enough, it is the same for many other Validators.\r\n\r\nYou would need separate messages for hints and errors in many occasions.\r\n\r\n\r\nI agree, by far not all apps would benefit. But it wouldn't hurt either.\r\n\r\nI really don't care if you dont' want this in rails. I can live without it, and use the gem validation_hints. (but the other named gems could benefit from that directly!)\r\n\r\nI understand that there are much more pressing issues.\r\n\r\nBut I want to contribute to rails. Please do give me the benefit of the doubt, and needless to say I am very happy with Rafael's reactions after the close.\r\n\r\nI just want to be part of this. It took me 5 years to learn RoR and maybe I can do only one pull request per year. Dont dismiss it so easily ( but dismiss it by all means if it is not suitable).\r\n\r\nThx guys (and girls).\r\n\r\nOh and the not so DRY repeating of errors.rb. If I knew how to do that better, I'd do it; I think 80% of that file (errors.rb) could be factored out and just include it in errors.rb and hints.rb (add, delete, all that stuff).\r\n\r\n'night.\r\n\r\nAce\r\n\r\n"},{"ts":1356465162000,"body":"@acesuares thanks for your work! I can see applications making use of this feature but like @rafaelfranca and @guilleiguaran I don't think it should be a part of rails. This is something that can be easily added with a gem and should be available on demand and not by default.\r\n\r\nWe appreciate the time and work you put into making rails better. You can always use the [Rails Core Google Group](https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-core) to get feedback from the core team before implementing a PR. This can help you to get a feel if a particular feature should be in rails core or provided as a gem.\r\n\r\n"},{"ts":1357144809000,"body":"Thanks for all the feedback. I think someone can close the pull request now. \r\n"},{"ts":1357173037000,"body":"Agreed on not adding it to Rails itself. \r\n\r\nAs a side note, one could easily get a `Hints` class based off `Errors` if we extracted out a `i18n_scope` or similar method in `Errors`, that'd default to `:errors`, and used that in `generate_message`. With this one could do:\r\n\r\n```ruby\r\nmodule ActiveModel\r\n  class Hints < Errors\r\n    def i18n_scope\r\n      :hints\r\n    end\r\n  end\r\nend\r\n\r\nclass Person\r\n  def hints\r\n    @hints ||= ActiveModel::Hints.new(self)\r\n  end\r\nend\r\n\r\n# locale example:\r\n    # * <tt>activemodel.hints.models.admin.attributes.title.blank</tt>\r\n    # * <tt>activemodel.hints.models.admin.blank</tt>\r\n    # * <tt>activemodel.hints.models.user.attributes.title.blank</tt>\r\n    # * <tt>activemodel.hints.models.user.blank</tt>\r\n    # * <tt>activemodel.hints.messages.blank</tt>\r\n    # * <tt>hints.attributes.title.blank</tt>\r\n    # * <tt>hints.messages.blank</tt>\r\n```\r\n\r\nAnd that's it. Unfortunately `Errors` has a bit more functionality than it should, so `Hints` would get that. Anyway, thanks @acesuares "},{"ts":1357174224000,"body":"That seems a good way to do that, really. It would enable communicating with the user in a very simple way, and not add too much 'structures' to rails itself.\r\n"}]},{"timestamps":[{"ts":1365549139000,"body":"Thanks."}]},{"timestamps":[{"ts":1359065131000,"body":"Can we get some sort of test to help make sure we don't regress in the future?"},{"ts":1359067404000,"body":"The name **cannot** be supplied through the block when using `link_to_if`/`link_to_unless`. From the docs:\r\n\r\n    To specialize the default behavior (i.e., show a login link rather\r\n    than just the plaintext link text), you can pass a block that\r\n    accepts the name or the full argument list for +link_to_unless+.\r\n\r\nWhich means the block has a very special behavior for these two helpers, that differ from the `link_to` usage. I believe the examples there can clarify this a bit more if necessary.\r\n\r\nThanks for your contribution!"},{"ts":1359067458000,"body":"I was about to write the test, but it \"looks\" like this might be by design. Seems like it doesn't work like the link_to method at all, since you can't hand it a multi-line block to use as the name. The conditional is to either use the name/options arguments or the block as a complete replacement. Although this is unclear and seems a bit odd, it might not actually be a bug. Sorry for the red herring."},{"ts":1359068522000,"body":"No problem at all :). Yeah it's apparently by design, it's a different feature of these if/unless helpers, and it's like that since ever as far as I can check fd9967bca2aa32dd4173881c4d8c55f5ebabe97e. I got so surprised as you the first time I found it, but it ended up being very useful to have this feature in other cases. Thanks."}]},{"timestamps":[{"ts":1359995168000,"body":"@carlosantoniodasilva could you take a look? Also if you happen to have a rails 3-2 app, could you make a quick try if `rails benchmarker` or `rails profiler` works for you?"},{"ts":1360177576000,"body":"I'll try running them in an app here and report back. Assigned the issue to me. Thanks."},{"ts":1372359874000,"body":":heart:"}]},{"timestamps":[{"ts":1375169748000,"body":"Hrm, I am not sure this is a good idea because developers may be using it to store anything and we could potentially compile a huge list of methods that are rarely used or called dynamically.\r\n\r\nI would rather do this \"opt-in\". For example, for Active Record and friends, [we use `Configurable`](https://github.com/wangjohn/rails/blob/358bae8232073ada76e538d3f75e5739a080146e/activesupport/lib/active_support/configurable.rb#L11) that requires an call to compile the methods defined in the configuration."},{"ts":1375204690000,"body":"@josevalim Ah, cool I didn't know about the compile method for configurations. I'll close this PR."}]},{"timestamps":[{"ts":1374518459000,"body":"One thing I'd like to know is why they were being converted in the first place. Do any tests fail? I guess we'll see."},{"ts":1374519076000,"body":"https://github.com/rails/rails/commit/3fbc042b580f518d060671d0dd86ec2a4d14a42b\r\n\r\nI suspect this was inadvertent, \"to_proc\" was used as a test because that's what instance_eval(&v) does"}]},{"timestamps":[{"ts":1375271239000,"body":"Closing this PR since a test is failing. Will send another PR."}]},{"timestamps":[{"ts":1360552935000,"body":"Thank you! "}]},{"timestamps":[{"ts":1371227770000,"body":"If the `raise` call was meant to reraise... could it be the case that the regexp is not catching the new error messages? Should we rather review the regexp? (Just asking, didn't run the suite.)"},{"ts":1371229783000,"body":"But as we are based on@exception.name which is coming nil in ruby 2.0.0\r\n\r\nOr we can do something like  basically checks specially for \"::\" \r\n\r\nSo if split is become blank then return the word itself and that will be matched in first expression.\r\n\r\n```ruby\r\n    def const_regexp(camel_cased_word) #:nodoc:\r\n      parts = camel_cased_word.split(\"::\")\r\n      if parts.blank?\r\n        return camel_cased_word\r\n      end\r\n      last  = parts.pop\r\n\r\n      parts.reverse.inject(last) do |acc, part|\r\n        part.empty? ? acc : \"#{part}(::#{acc})?\"\r\n      end\r\n    end\r\n```"},{"ts":1371237921000,"body":"@arunagw I had the same idea, when you pointed me to the failing test. I think this way is better, but I don't understand what will happen if one pass an empty string as camel_cased_word"},{"ts":1371239959000,"body":"I think it's not a problem. \r\n```    \r\nassert_nil yield(\"\")\r\n```\r\n\r\nThis test works fine in both cases. I mean in both implementation. Basically all green\r\n"},{"ts":1371245271000,"body":"Yeah, would try returning `Regexp.escape(camel_cased_word)` if the split is empty. That would match what we do in the patch I believe."},{"ts":1371248224000,"body":"Updated the PR. Tests looks fine.\r\n\r\nthanks guys. Let me know if anything need to change here."},{"ts":1371248637000,"body":"Awesome, thanks for catching this Arun :heart:."},{"ts":1371280312000,"body":"@fxn :heart: \r\n\r\nI think travis is not accepting new builds right now for some reason. "}]},{"timestamps":[{"ts":1364388992000,"body":"Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1372421825000,"body":"Please add a changelog entry as well. Thanks."},{"ts":1372424239000,"body":"@carlosantoniodasilva \r\nready!"},{"ts":1372424517000,"body":"Great, thanks!"},{"ts":1372428413000,"body":":+1:"}]},{"timestamps":[]},{"timestamps":[{"ts":1376315685000,"body":"@steveklabnik Thank you for comments. Sent fixed version"},{"ts":1376315860000,"body":"Thank you!"}]},{"timestamps":[{"ts":1369673908000,"body":"@carlosantoniodasilva great catch thanks :)"},{"ts":1369771642000,"body":"Nice, can you squash into one single commit please? Thanks."},{"ts":1369804697000,"body":"Boom. Squashed. Thanks! @carlosantoniodasilva "},{"ts":1369829157000,"body":"Thanks!"}]},{"timestamps":[{"ts":1363672087000,"body":"@carlosantoniodasilva I agree that it makes more sense to use ``public_send``. However, one of the tests uses a protected method on a Rails::Engine subclass: https://github.com/rails/rails/blob/master/railties/test/engine_test.rb#L12. \r\n\r\nDo you think I should move ``routes?`` to be a public method and also change to using a ``public_send``, or leave as is? (I moved it to a public method for now)"},{"ts":1363808323000,"body":"I've added a little documentation on the new methods that have been moved to ``Railties`` from the Configurable module. Hopefully this will make it more clear what these methods do.\r\n\r\n@carlosantoniodasilva and @josevalim I've changed my PR to reflect your suggestions. I've also removed a test that asserts that only abstract railties can inherit from Railtie. As noted by @josevalim, this requirement doesn't seem necessary."},{"ts":1367254082000,"body":"Remember to rebase agains master"},{"ts":1367259350000,"body":"Thanks @rafaelfranca ! I've rebased and pushed changes based on your suggestions."}]},{"timestamps":[{"ts":1360613338000,"body":"would be good to get a 3.0.21 release out, since this fix is for a .20 introduced degradation + include the latest sec fixes"},{"ts":1360613954000,"body":"@justinsoong There will be no more releases of 3.0.x. https://groups.google.com/forum/?fromgroups=#!topic/rubyonrails-security/G4TTUDDYbNA"},{"ts":1360618022000,"body":"@steveklabnik - weren't you just pointing out how people shouldn't be calling `JSON.load`? This patch explicitly swaps out `parse` for `load`..."},{"ts":1360621105000,"body":"Yes, confirm.  I should not have merged this (though it hasn't been released)"},{"ts":1360621128000,"body":"I guess it never will be released, so I'll go ahead and revert this for now. Sorry. :'("},{"ts":1360697462000,"body":"I fully acknowledge and understand the \"no more 3.0.x\" releases policy, but would it not be reasonable to predominantly get the word out that 3.0.20 is known to be broken in fairly critical ways, that developers responsible for applications running on 3.0.20 should look to switch from okjson to JSONGem to avoid this breakage, and that they should then strongly consider upgrading to a supported version of Rails?\r\n\r\nFrom my perspective, maintaining a production app currently running 3.0.20 (and looking to upgrade asap!) and discovering breakage around accented characters and other oddities several days after the fact, it would have been very useful to have some kind of authoritative easy-to-find statement of the situation instead of trawling through pull requests."},{"ts":1360774937000,"body":"or since it was reverted\r\n\r\n    gem 'rails', :git => 'git://github.com/rails/rails.git', :ref => '182d4e3719' # 3.0.21, see https://github.com/rails/rails/pull/9126\r\n\r\ncould there be a community-maintained branch / fork? (would also likely be useful for the 2.x folks)"}]},{"timestamps":[{"ts":1375792449000,"body":"Could you check 4-0-stable? This code was changed right now"},{"ts":1375795820000,"body":"Thanks @rafaelfranca! Will check it out."},{"ts":1375799080000,"body":"Yep, 4-0-stable is not generating the warnings. Sorry about that. Thanks!"}]},{"timestamps":[{"ts":1365964295000,"body":"A test case added to rails' tests would be nice. Creating thousands of records sucks though. Do you think you can write a test to check that the column isn't wrapped twice when retrieving two records?"},{"ts":1366823462000,"body":"Hi guys ! I've sent a PR #10330 related to this issue (maybe same problem).\r\nPlease see #10330 ."}]},{"timestamps":[]},{"timestamps":[{"ts":1366235473000,"body":"Looks good to me.\r\n\r\n/cc @jonleighton @tenderlove "},{"ts":1366293684000,"body":"Could you add a CHANGELOG entry?"},{"ts":1366294877000,"body":"@rafaelfranca Done"}]},{"timestamps":[{"ts":1370757233000,"body":"This isn't a typo."},{"ts":1370757280000,"body":"I guess I should elaborate. Both are technically correct English, but it's more common to refer to them as a group rather than refer to the class."}]},{"timestamps":[]},{"timestamps":[{"ts":1367415442000,"body":"Looks ok to me, lets see what @dhh has to say about that since he was in the first discussions. Thanks!"},{"ts":1367418464000,"body":":+1: -- this should not have slipped in."},{"ts":1367424706000,"body":":+1: \r\n\r\nI remembered that me and @dhh went back and forth about *args before we merge this feature in. Not sure who made it back to *args :(\r\n\r\n@dhh, I think we want to revert this on `4-0-stable` as well?"},{"ts":1367424831000,"body":"Yes, revert on stable as well.\r\n\r\nOn May 1, 2013, at 6:12 PM, Prem Sichanugrist <notifications@github.com> wrote:\r\n\r\n> \r\n> \r\n> I remembered that me and @dhh went back and forth about *args before we merge this feature in. Not sure who made it back to *args :(\r\n> \r\n> @dhh, I think we want to revert this on 4-0-stable as well?\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub.\r\n> "},{"ts":1367424962000,"body":"@BMorearty do you want to send a PR for 4-0-stable branch?"},{"ts":1367425642000,"body":"It's worth noticing that this is also in [3-2-stable for some time already](https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/core_ext/object/inclusion.rb), according to ebf69ab1636df74c76332c53bcd3d8494fb91b45 in all versions of 3.2 series. Perhaps we should just add a deprecation warning in 4-0-stable and leave it out in master."},{"ts":1367427545000,"body":"Thanks, @guilleiguaran. PR sent on 4-0-stable."},{"ts":1367446814000,"body":"@carlosantoniodasilva this seems a better plan to me. We should not change the behavior after a rc. Mind to do this change?"},{"ts":1367447652000,"body":"@rafaelfranca Ok I can take a look at it.\r\n\r\n\r\nOn Wed, May 1, 2013 at 7:20 PM, Rafael Mendonça França <\r\nnotifications@github.com> wrote:\r\n\r\n> @carlosantoniodasilva <https://github.com/carlosantoniodasilva> this\r\n> seems a better plan to me. We should not change the behavior after a rc.\r\n> Mind to do this change?\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/10394#issuecomment-17310204>\r\n> .\r\n>\r\n\r\n\r\n\r\n-- \r\nAt.\r\nCarlos Antonio"},{"ts":1367447886000,"body":"Isn't that what an rc is for? (I'm not being sarcastic.) To see if there are late-breaking changes that must be made?"},{"ts":1367448044000,"body":"Once an RC is cut, _regressions_ would cause another RC to get released. This behavior is a gray area, and since it's been in multiple 3.2.x releases, it's pretty easy to lean 'not really a regression.'"}]},{"timestamps":[{"ts":1364857048000,"body":"You are a saint. This code is mega-terrible."},{"ts":1364857411000,"body":"And can't be changed. This vendored gem is frozen because changes on it can introduce security issues.\r\n\r\nThank you"},{"ts":1364857621000,"body":"Yup. Seems good."},{"ts":1364857941000,"body":"Ahh, thanks for the clarification. This makes sense though."}]},{"timestamps":[{"ts":1372428218000,"body":"I'm not sure how common this is, and I'm not sure that a recursive implementation is the best idea.\r\n\r\nI feel like we have rejected this feature before."},{"ts":1372433132000,"body":"I run into this whenever I work with json data - there's always some degree of null-checking involved.\r\n\r\nI'm fine not doing a recursive implementation for this, but I'd be curious as to why you'd feel like it's better to handle it iteratively."},{"ts":1372588273000,"body":"I definitely ran into this situation and built small helper function to accomplish it.\r\n\r\nI would be interested in the thoughts of @fxn @rafaelfranca and @carlosantoniodasilva "},{"ts":1372629417000,"body":"I've needed this before but it didn't bother me that much to the point of adding it to core, so I'm not sure it should be there. No strong opinion. Thanks."},{"ts":1372629513000,"body":"I made some comments anyway, it'd also need a changelog entry in case it goes in (but you can do that later if it's a yes). Thanks."},{"ts":1373046982000,"body":"I'd imagine many, if not most, Rails developers would sooner or later run into the need to extract a nested hash item. It's quite annoying to have to check for nil at each step of the way. I think it's reasonable to support this - either on the hash level, or as a special case on the singleton class of the `params` controller object.\r\n\r\nI'm not sure `seek` is the best method name - I wouldn't have guessed it if I was facing the problem. I'd go with either `deep_fetch` or `deep_extract` (perhaps with a mutative `deep_extract!` to match the existing non-recursive mutative `extract!`)\r\n\r\nIterative vs recursive - iterative is usually a little bit faster and less memory intensive, so for a low-level helper function that may be run in an inner loop-scenario, it's probably better. Iterative tends to be a little bit less intuitive to read and maintain, but again, a very simple low-level helper function wouldn't be changed that often and wouldn't have many gotchas requiring understanding of its innerworkings, so most users wouldn't care about implementation any more than they care about implementation of the C-based MRI standard library."},{"ts":1373048098000,"body":"I changed this to an iterative implementation, added a changelog entry, and cleaned up the tests according to @carlosantoniodasilva 's comments. Thanks for the feedback Carlos.\r\n\r\nAnyone feel like merging this?"},{"ts":1373048204000,"body":"Oh, and @egilburg , I don't like naming it deep_fetch, since fetch allows the optional block to provide a default value. I can add another method to the pull request implementing deep_fetch with those semantics though."},{"ts":1373048389000,"body":"Why not improve existing implementation to allow for default block similar to how fetch does it? You can combine varargs with block, `def deep_fetch(*args, &block)`. You'd be adding the flexibility that `fetch` has without losing anything, and also making your new method for recognizable for existing users by naming it similar to an existing method except for the `deep` prefix, which would in fact describe the only difference between the two.\r\n\r\nThe only reason I see NOT to do this is due to different variation - `fetch` raises if given a missing key, and I'm not sure you want this in your method.\r\n\r\nUpdate - nevermind, I realized that `fetch` allows not only a default block but a default as 2nd argument. This will indeed cause conflicts with varargs."},{"ts":1373048868000,"body":"@egilburg I think it is a good idea to add an optional block to define the default value though, I've added that functionality."},{"ts":1373049268000,"body":"I'm :-1: for this one. I don't see this as a common pattern, and you can already do with `.try`.\r\n\r\n```ruby\r\nparams.try(:[], :user).try(:[], :groups).try(:[], :groups_id)\r\n```\r\n\r\nAlso, in my opinion, this is a smell."},{"ts":1373050276000,"body":"Agree with @rafaelfranca.  You can also do this with `inject` (if you don't want to use AS):\r\n\r\n```ruby\r\n>> params = { :user => { :groups => { :group_id => 10 } } }\r\n=> {:user=>{:groups=>{:group_id=>10}}}\r\n>> [:user, :groups, :group_id].inject(params) { |hash, val| hash[val] ? hash[val] : break }\r\n=> 10\r\n>>\r\n```\r\n\r\nYou can even do it without writing any conditionals:\r\n\r\n```ruby\r\n>> params = { }\r\n=> {}\r\n>> [:user, :groups].inject(params) { |hash, val| hash.fetch(val, {}) }[:group_id]\r\n=> nil\r\n>> params = { :user => { :groups => { :group_id => 10 } } }\r\n=> {:user=>{:groups=>{:group_id=>10}}}\r\n>> [:user, :groups].inject(params) { |hash, val| hash.fetch(val, {}) }[:group_id]\r\n=> 10\r\n>>\r\n```"},{"ts":1373050498000,"body":"Thank you for the contribution. :heart:\r\n\r\nWe try to not add new things to Active Support core extensions if they are not really needed."}]},{"timestamps":[{"ts":1369725798000,"body":"@carlosantoniodasilva @rafaelfranca can you take a look? This should be a quick one :smile: "},{"ts":1369744795000,"body":"Thank you"}]},{"timestamps":[{"ts":1365618129000,"body":"Some thoughts on this:\r\n\r\n* indenting code 72 columns doesn't, IMO, \"enhance readability\" (line 941 in query_methods.rb)\r\n\r\n* b443280's commit message doesn't match the result: the change actually makes all the methods in the class public (?!)"},{"ts":1365619079000,"body":"@al2o3cr thanks for the feedback. Not sure what happened there. It has been fixed. Please take a look.\r\n\r\n@rafaelfranca I have reverted the change as per your feedback."}]},{"timestamps":[]},{"timestamps":[{"ts":1362862336000,"body":"@carlosantoniodasilva as discussed."},{"ts":1362862842000,"body":":+1:\r\n\r\nA deprecation would be nice, since it seems easy to support both formats."},{"ts":1362862937000,"body":"thanks @josevalim, I'll update to support both formats and issue a deprecation on the old style."},{"ts":1362864249000,"body":"I added a deprecation warning for the old syntax but it is still supported.\r\n\r\n/cc @josevalim @carlosantoniodasilva "},{"ts":1362864535000,"body":"@josevalim This feature was added to rails master only, so I think there's no need to deprecate. Sorry to make you undo the work @senny :)"}]},{"timestamps":[{"ts":1369130462000,"body":"Done."}]},{"timestamps":[{"ts":1377158944000,"body":"yea it is pretty micro but I like the fact that `Float::Infinity` is actually more expressive than the division. Let's wait for the travis build but it looks good to me."},{"ts":1377173195000,"body":":+1:"},{"ts":1377179117000,"body":"Thank you for your contribution :yellow_heart: "}]},{"timestamps":[{"ts":1367934223000,"body":"Closed."}]},{"timestamps":[]},{"timestamps":[{"ts":1365102393000,"body":"Looks good, just minor comments. Thanks."},{"ts":1365103064000,"body":"Yeah, sorry, I read that as \"Then you can\" 10 times.  I have those fixes ready, should I just push a second commit?  Or you guys want them squashed into a single commit?  I don't remember the preference."},{"ts":1365103213000,"body":"I went ahead and pushed a new commit, let me know if you want it squashed instead."},{"ts":1365103221000,"body":"Usually they should be squashed because they related to the same change. If\r\nthey were two different changes then having different commits would be ok.\r\nThanks.\r\n\r\n\r\nOn Thu, Apr 4, 2013 at 4:17 PM, Jason King <notifications@github.com> wrote:\r\n\r\n> Yeah, sorry, I read that as \"Then you can\" 10 times. I have those fixes\r\n> ready, should I just push a second commit? Or you guys want them squashed\r\n> into a single commit? I don't remember the preference.\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/10092#issuecomment-15917769>\r\n> .\r\n>\r\n\r\n\r\n\r\n-- \r\nAt.\r\nCarlos Antonio"},{"ts":1365103454000,"body":"I do the same thing all the time: I recently submitted some docs to Rust that had THREE ROUNDS of typos."},{"ts":1365103585000,"body":"Done, thanks."}]},{"timestamps":[{"ts":1372158867000,"body":"Mind squashing? Thanks."},{"ts":1372159210000,"body":"@carlosantoniodasilva done. "},{"ts":1372159250000,"body":"@arkiver thanks for your contribution :yellow_heart: "},{"ts":1372159407000,"body":"@senny :smile_cat: :"}]},{"timestamps":[{"ts":1375271328000,"body":"The current is the appropriate format though.\r\nIs your post object properly persisted in the database?"},{"ts":1375272267000,"body":"I think so - I can see all of the saved data if I use the new version, or if I remove that line altogether.\r\n\r\nThe same line actually appears later in the guide as well, in the \"Deleting Posts\" section. Someone else has made the same change to that occurrence: https://github.com/rails/rails/commit/757e985c6f488707264aa37fe0bcfdaa7a8a06ca"},{"ts":1375272345000,"body":"This is actually not the same change. You're using `post(post)`, while this other example is using `post_path(post)`.\r\nCould you setup a basic app reproducing this issue?"},{"ts":1375273378000,"body":"Sorry, you're quite right. The currently published version of the guide uses `post_path` with no arguments, and I didn't notice the difference in the committed version.\r\n\r\nI'll go back to the tutorial!"},{"ts":1375273751000,"body":":sun_with_face: \r\n\r\n`post_path` is more explicit to beginners. Though, `<%= link_to 'Show', post %>` should work too."}]},{"timestamps":[]},{"timestamps":[{"ts":1368456380000,"body":"Sounds very balanced to me. Need to edit the blog to rewrite the sentence about how to interpret the requests."},{"ts":1368458227000,"body":"I also started https://github.com/steveklabnik/json-merge_patch in case someone wants to use merge-patch, but I don't want to link it until I actually implement more than a README. ;) Might be later today."},{"ts":1368913224000,"body":"Merging since there's no objections."}]},{"timestamps":[{"ts":1362307910000,"body":"Needs tests and a rebase."},{"ts":1362332885000,"body":"Rebased and test added. About `return`.. it's ok for me, but if you insist I'll remove, no problem :)"},{"ts":1362556025000,"body":"Rebased again, could anyone review this?"}]},{"timestamps":[{"ts":1374693521000,"body":" :shipit:"},{"ts":1374766465000,"body":"Backported to 4-0-stable in 7c9d2c5."}]},{"timestamps":[{"ts":1357518683000,"body":"I don't care that this got merged, but wouldn't this fall under 'cosmetic' normally?"},{"ts":1357519336000,"body":"@steveklabnik definitely, I just merged because 2 of the 3 changes were in guides, and I prefer `do..end` for multiline blocks, so I thought it'd be better to have the examples like that. If all changes were in code, I'd go for cosmetic."},{"ts":1357520703000,"body":"Roger! Just putting that away in the brain for future PRs. :+1: "}]},{"timestamps":[]},{"timestamps":[{"ts":1368500968000,"body":"I agree with this change (was surprised by it too), although this will probably break a lot of setup scripts."},{"ts":1368501614000,"body":"Your test database is ephemeral. It's part of your development stack. That's why the standard crop of development rake tasks handle it.\r\n\r\nThe scenario here (sqlite dev, postgresql test) is uncommon and optimizing for its standard of least-surprise comes at the expense of the common case: test database mirroring the dev database."},{"ts":1368542249000,"body":"Ok. Guess I'll just keep this as an in-house patch. *sigh*"}]},{"timestamps":[{"ts":1371041651000,"body":"That was quick. Thanks!\r\n\r\nDoes it make sense to backport it to 3-2-stable and 4-0-stable, ... ?"},{"ts":1371042290000,"body":"Thank you. I think it's ok to backport, at least to 4-0*, I will do that later."}]},{"timestamps":[{"ts":1372622322000,"body":"/cc @senny, @CKHere"},{"ts":1372969577000,"body":"@senny, @rafaelfranca please help me with reviewing this PR."},{"ts":1373018442000,"body":"@pftg looks good to me. Thanks :yellow_heart: "},{"ts":1373018831000,"body":"Thanks!"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1366283160000,"body":"This is a cosmetic change. Those aren't accepted as they make it harder to track history.\r\nIf you're fixing a bug, please feel free to change the related return value."},{"ts":1366284323000,"body":"I see. Thank you for your comment."}]},{"timestamps":[{"ts":1371201562000,"body":"Awesome, thanks for working on this."},{"ts":1371201631000,"body":"For the archives, see #10932 for the rationale."},{"ts":1371202345000,"body":"It blows up on ruby2.0.0"},{"ts":1371203210000,"body":"Fun, that I switched to 1.9.3 from 2.0.0 to test it. I'll try to fix it\r\nASAP"},{"ts":1371207855000,"body":"Currently I'm experiencing troubles with 'debugger' gem under ruby 2.0.0 https://github.com/cldwalker/debugger/issues/47\r\n\r\n@arunagw did you complete your bundle install without issues?"},{"ts":1371208016000,"body":"Yes, It's a clean install for me. Try bundle update or removing Gemfile.lock"},{"ts":1371208601000,"body":"Thanks, removing Gemfile.lock helped me.\r\n\r\nBut tests are OK on ruby-2.0.0-p195. Can you show us an example of failure?\r\n```\r\nFinished in 45.127928s, 93.4011 runs/s, 390.5564 assertions/s.\r\n\r\n4215 runs, 17625 assertions, 0 failures, 0 errors, 0 skips\r\nRun options: --seed 59230\r\n\r\n# Running:\r\n\r\n............................................................................\r\n\r\nFinished in 3.161238s, 24.0412 runs/s, 31.9495 assertions/s.\r\n\r\n76 runs, 101 assertions, 0 failures, 0 errors, 0 skips\r\n```"},{"ts":1371208698000,"body":"```ruby\r\n\r\n  1) Error:\r\nInflectorTest#test_safe_constantize:\r\nNameError: wrong constant name ::\r\n    /Users/arunagw/checkouts/rails/activesupport/lib/active_support/inflector/methods.rb:224:in `const_get'\r\n    /Users/arunagw/checkouts/rails/activesupport/lib/active_support/inflector/methods.rb:224:in `constantize'\r\n    /Users/arunagw/checkouts/rails/activesupport/lib/active_support/inflector/methods.rb:274:in `safe_constantize'\r\n    /Users/arunagw/checkouts/rails/activesupport/test/inflector_test.rb:304:in `block in test_safe_constantize'\r\n    /Users/arunagw/checkouts/rails/activesupport/test/constantize_test_cases.rb:62:in `run_safe_constantize_tests_on'\r\n    /Users/arunagw/checkouts/rails/activesupport/test/inflector_test.rb:303:in `test_safe_constantize'\r\n\r\n\r\n  2) Error:\r\nStringInflectionsTest#test_safe_constantize:\r\nNameError: wrong constant name ::\r\n    /Users/arunagw/checkouts/rails/activesupport/lib/active_support/inflector/methods.rb:224:in `const_get'\r\n    /Users/arunagw/checkouts/rails/activesupport/lib/active_support/inflector/methods.rb:224:in `constantize'\r\n    /Users/arunagw/checkouts/rails/activesupport/lib/active_support/inflector/methods.rb:274:in `safe_constantize'\r\n    /Users/arunagw/checkouts/rails/activesupport/lib/active_support/core_ext/string/inflections.rb:77:in `safe_constantize'\r\n    /Users/arunagw/checkouts/rails/activesupport/test/core_ext/string_ext_test.rb:289:in `block in test_safe_constantize'\r\n    /Users/arunagw/checkouts/rails/activesupport/test/constantize_test_cases.rb:62:in `run_safe_constantize_tests_on'\r\n    /Users/arunagw/checkouts/rails/activesupport/test/core_ext/string_ext_test.rb:288:in `test_safe_constantize'\r\n\r\n2932 runs, 9793 assertions, 0 failures, 2 errors, 0 skips\r\n```\r\n\r\nDid you run the complete rails/activesupport tests?"},{"ts":1371209482000,"body":"Wow, seems that I ran `actionpack` test suite instead of `activesupport`. Sorry for that. Now I see these errors."},{"ts":1371222875000,"body":"I think i got the problem. Trying to get this fixed."},{"ts":1371225210000,"body":"See #10946 "}]},{"timestamps":[{"ts":1359906270000,"body":"Thank you, unfortunately we usually don't accept similar changes because they're considered \"cosmetic\", and they make the git history harder to follow. Thanks for your contribution."}]},{"timestamps":[{"ts":1357816714000,"body":"cc @fxn "},{"ts":1357846605000,"body":"Looks good to me. :+1:"}]},{"timestamps":[{"ts":1357762743000,"body":"It should get a changelog entry, can you please add one? Thanks."},{"ts":1357762939000,"body":"@carlosantoniodasilva would you want it as a note in a v3.0.20 release in the CHANGELOGs?"},{"ts":1357768747000,"body":"@zmoazeni yes, you can follow PR #8846 that was merged to 3-1, but add `(unreleased)` after the version. I'll change there as well. Thanks."},{"ts":1357769723000,"body":"@carlosantoniodasilva Just updated the commit. I only updated the CHANGELOG of activemodel. Let me know if you need anything else!"},{"ts":1357770569000,"body":"Seems fine, I'll just ask you to elaborate the changelog a little bit more with what's actually being fixed (ie the pull request title with minor tweaks seems to describe it better I think). Wdyt?"},{"ts":1357770765000,"body":"Actually I changed the wrong CHANGELOG. Fixing."},{"ts":1357770981000,"body":"@carlosantoniodasilva Alrighty. Updated again."},{"ts":1357773822000,"body":"Great, thank you."},{"ts":1358038114000,"body":"What if I am consuming an active resource api exposed by a rails 2.3.15 application, let's say reading a model which has a serialized attribute? \r\n\r\nThis commit can be ported in lib/active_record/serializers/xml_serializer.rb to fix the problem with nil values, but I've no idea how to work around the serialized field issue.\r\n\r\nAny ideas?"},{"ts":1358808143000,"body":"FYI monkey-patch:\r\n```Ruby\r\nif Rails.version == \"3.0.19\"\r\n  ActiveModel::Serializers::Xml::Serializer::Attribute.class_eval do\r\n    def compute_type_with_nil\r\n      return if value.nil?\r\n      compute_type_without_nil\r\n    end\r\n    alias_method_chain :compute_type, :nil\r\n  end\r\nelse\r\n  raise \"remove this #{__FILE__}\"\r\nend\r\n```"}]},{"timestamps":[{"ts":1363376667000,"body":"I was pretty confused why you would be changing the *primary key* of a record, then I read the code and saw you are actually talking about updating a counter cache when a *foreign key* changes, which makes a lot more sense."},{"ts":1363378059000,"body":"@coreyward Yes, sorry that was a typo. I've updated the PR comments to reflect that."},{"ts":1363378356000,"body":"I think the case where the foreign key changed from an id to another is missing"},{"ts":1363378513000,"body":"@rafaelfranca Ah, quite true. I assumed that the count should stay the same but forgot that the count is kept by incrementing/decrementing foreign_key id. \r\n\r\nI'll change it now."},{"ts":1363397579000,"body":"I've changed my PR so that it now handles changing the foreign key to another valid foreign key. I've also added a test for this case."},{"ts":1363400863000,"body":":heart:"},{"ts":1363501199000,"body":":heart: "},{"ts":1377162088000,"body":":heart:"}]},{"timestamps":[{"ts":1367453703000,"body":"I'm sorry @patricksrobertson, but we're not accepting cosmetic changes to the codebase. Hash syntax is consider a cosmetic change.\r\n\r\nSee also https://github.com/rails/rails/issues/search?q=hash+syntax"},{"ts":1367453798000,"body":"Whoops, wrong old issue .. but see that search result; we rejected a lot of patches that just change the hash syntax alone."},{"ts":1367455086000,"body":"@sikachu I think the number of open PR's on ActiveModel might be low enough to consider this one. It seems like the prevailing wisdom is 'avoid 1.9 conversions when there are a large number of issues / PR's.' I don't see too many tagged ActiveModel.\r\n\r\nTotally cool that it's closed though."},{"ts":1367455272000,"body":"Yeah. It is the time. This pull request has some changes that should not be there (related with Rails version and Active Record UUID change). Could you rebase it?"},{"ts":1367456388000,"body":"@rafaelfranca The branch should be clean now."},{"ts":1367459578000,"body":"Oh, no problem with that. My concern was that when people run `git blame` they would hit this commit instead of the actual one. But that's cool if the core team can live with that, thought. "},{"ts":1369073985000,"body":"Yup, this just caused a bunch of history to get obscured for me :/"},{"ts":1369074404000,"body":"git blame --after=3.weeks should help bring most of the history back in your case @steveklabnik."}]},{"timestamps":[{"ts":1375987410000,"body":"@pftg can we keep the paragraph as is but add the notice about public / private into a `NOTE:` right afterwards?"},{"ts":1375989028000,"body":"@senny yes, note gives more attention. I'm going to update PR."},{"ts":1376093567000,"body":"Methods can be public or private, but I think all *actions* are public by definition of being the accessible controller methods mapped to routing verbs."},{"ts":1376411996000,"body":"Sorry for delay @senny. Just have updated PR with notice."},{"ts":1376412016000,"body":"May someone check this PR?"},{"ts":1376416160000,"body":"Looks good, thank you!"},{"ts":1376465538000,"body":"Thanks!"}]},{"timestamps":[{"ts":1362334826000,"body":"wrong target branch :("}]},{"timestamps":[{"ts":1368474087000,"body":"@rafaelfranca It is done and it is not breaking anything...:-)"},{"ts":1368474265000,"body":"@aditya-kapoor thank you. But does it fix the issue at #10598? I not seeing the tests"},{"ts":1368474397000,"body":"Ok..working on it.."},{"ts":1368476327000,"body":"@rafaelfranca Do we need to write tests for the Code Refactoring also???"},{"ts":1368476589000,"body":"No. I really don't care about this refactoring. I want to fix #10598, so in order to fix #10598 we should have tests to ensure it was fixed."},{"ts":1368478148000,"body":"I'm unsure if we should accept this pull request since it seems only cosmetic."},{"ts":1368478216000,"body":"I think there are speed benefits, no? Maybe we should benchmark."},{"ts":1368478239000,"body":"But it do makes the code clean and easy to read..."},{"ts":1368478435000,"body":"Both are fine to me. If we are going to merge this for speed benefits so we have to benchmark"},{"ts":1368499676000,"body":"Tenderlove wrote (http://tenderlovemaking.com/2013/03/03/dynamic_method_definitions.html) a good post on the advantages of `define_method` over `eval` with regard to performance. But even other than performance, `define_method` usually (this case included) involves cleaner and more readable code (e.g. less need for the now-removed comments(*) which were needed previously to easily understand what the method is doing), plus easier to maintain (editors have better time with indenting, syntax highlighting, etc). Plus things like JRuby sometimes are more stable on well-defined dynamic constructs such as `define_method`, as opposed to carte blanche `eval`s.\r\n\r\nIMHO, that the cumulative benefits expands beyond a \"cosmetic\" change into a bona fide Refactor, and should be welcome in the absense of reasons to *not* accept it (e.g. evidence of a noticeable performance *loss*)\r\n\r\n(*) I'd still keep the comments though, but this is beside the point."},{"ts":1368512273000,"body":"@rafaelfranca @steveklabnik @egilburg  I have done the benchmarking thing and here is the gist for it...\r\nhttps://gist.github.com/aditya-kapoor/5574044\r\n\r\nWhen I ran it on my system, the following where the results for it....\r\n\r\n                          user     system      total        real\r\nDefine Method   0.610000   0.060000   0.670000 (  0.677310)\r\nClass Eval         4.950000   0.350000   5.300000 (  5.315905)\r\n"},{"ts":1368539644000,"body":"OMG!!!!!!!!!!!!!!! Thank you"},{"ts":1368540492000,"body":"@rafaelfranca The changes have suggested by you have been added...when would you merge it???"},{"ts":1368541609000,"body":"@aditya-kapoor you are benchmarking definition time but not runtime. It is different and we should be more focused on runtime. It will be much slower for `define_method`.\r\n@tenderlove 's article seems fit heavy methods: the case when method calculations is much slower than `.` or `send` operation.\r\n\r\nExample from ActiveRecord:\r\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_methods/read.rb#L53 \r\nStill using `eval` because the performance win for trivial methods is significant because `User#name` can be called kazillion times during single request.\r\n\r\nI am not sure for this particular case e.g. how slow a method defined with `define_method` will be comparing to `downcase` operation?\r\n\r\n We definitely need to benchmark runtime before we merge it.\r\n\r\n"},{"ts":1368544574000,"body":"@bogdan I have done the benchmarking for the runtime as well as the define time. You can refer to the gist https://gist.github.com/aditya-kapoor/5574044 and here are the results which were run on my system\r\n\r\n                             user     system      total        real\r\nDefine Method   0.640000   0.040000   0.680000 (  0.680650)\r\nCalculating -------------------------------------\r\nCall using define Method\r\n                         68814 i/100ms\r\n-------------------------------------------------\r\nCall using define Method\r\n                      2324646.0 (±0.7%) i/s -   11629566 in   5.002975s\r\n                    user     system      total        real\r\nClass Eval      4.970000   0.330000   5.300000 (  5.309989)\r\nCalculating -------------------------------------\r\nCall using class eval\r\n                         68715 i/100ms\r\n-------------------------------------------------\r\nCall using class eval\r\n                      2308585.6 (±0.6%) i/s -   11544120 in   5.000716s\r\n\r\nAs you can see from the results above, there is hardly any difference in the runtime. If you have refered to the article written by @tenderlove this is the one area where the define_method is slightly slower than the class_eval...\r\n\r\nThe overall time ( defination time + calling time) for define_method is much more than the overall time for class_eval...correct me if I am wrong...\r\n\r\nThanks\r\n\r\n"},{"ts":1368545793000,"body":"@rafaelfranca @steveklabnik @bogdan @egilburg any words on the benchmarking data???"},{"ts":1368556777000,"body":"Thank you"},{"ts":1368600890000,"body":"@aditya-kapoor your last benchmark just benchmarking a `String` instead of benchmarking two versions of `SafeBuffer`.\r\n\r\n``` ruby\r\nBenchmark.ips do |x|\r\n  x.report(\"Call using define Method\") { \"String\".capitalize }\r\nend\r\n\r\nBenchmark.ips do |x|\r\n  x.report(\"Call using class eval\") { \"String\".capitalize }\r\nend\r\n```\r\n\r\n\r\nThe true benchmark:\r\nhttps://gist.github.com/5582062\r\n\r\nShows arround 26% performance lose.\r\nIf this is reasonable cost for code beauty than go for it.\r\nBut I doubt this a lot.\r\n\r\n```\r\n#    > git checkout  069ea45; diffbench bench.rb\r\n#\r\n#    Running benchmark with current working tree\r\n#    Checkout HEAD^\r\n#    Running benchmark with HEAD^\r\n#    Checkout to previous HEAD again\r\n#    \r\n#                        user     system      total        real\r\n#    ----------------------------------capitalize in safe buffer\r\n#    After patch:    0.010000   0.000000   0.010000 (  0.009733)\r\n#    Before patch:   0.010000   0.000000   0.010000 (  0.007702)\r\n#    Improvement: -26%\r\n"},{"ts":1368601768000,"body":"@bogdan Have you benchmarked for the definition time and memory count....define_method is 793% faster than the class_eval...what difference it would make it one thing is defined about 8 times faster is only 20 % slower than another thing which is 8 times slower and only 20% faster than the first...\r\n\r\nAll I am saying that the cumulative effect of both definition time + running time for the define_method is better than that for the class_eval....This thing is also stated in the @tenderlove 's article if you have closely examined his results...The define_method is also much better than class_eval in terms of memory consumption and instruction count...\r\n"},{"ts":1368602254000,"body":"If I would have to run: `load 'output_safety.rb'` 1000 times in my app I would agree with you.\r\nBut more likely I will run: `ActiveSupport::SafeBuffer#capitalize` more often. \r\nSo definition time makes zero sense to me. Even if you win that much it will be lost during 10 minutes a running app.\r\n\r\nBut I agree with memory usage concerns of `class_eval`, but I still prefer performance over memory consumption.\r\nAs I said before: Only for tiny methods like this `class_eval` is better."},{"ts":1368603491000,"body":"@bogdan So again, it all depends on the usage and memory consumption but many modern Rubyists are preferring the define_method over the class_eval due to these factors only...If I go by your results, the difference is not so much mind boggling and I guess it is reasonable with respect to Rails..."},{"ts":1368617604000,"body":"@aditya-kapoor how are using Rails if speeding up `require \"activesupport/lib/active_support/core_ext/string/output_safety.rb\"` is more important to you than the speed of your template rendering?"},{"ts":1368618945000,"body":"@thedarkone It is about the overall performance that matters to me and I guess this is the way it should be...."},{"ts":1368637444000,"body":"Run time rendering is more important on this case. Reverting."}]},{"timestamps":[{"ts":1362761344000,"body":"@rafaelfranca Thanks for the comments! I've updated the commit so that the helper method is below the main method. Just out of curiosity, is this the Rails convention? "},{"ts":1362761713000,"body":"Actually this a software engineering good practice. You define the methods in an order that the reader can read the file from top to botton."},{"ts":1362761724000,"body":"Thank you for the pull request"}]},{"timestamps":[{"ts":1363940781000,"body":"Why is the new test relevant? Was there a change in behavior regarding attributes with underscores? Is it to prevent regressions?\r\n\r\nAlso it would be great if you could shorten your commit message. Github does not like long commit messages. You can always do a short description on the first line, then a blank line and then add a detailed description."},{"ts":1363941928000,"body":"About the comments: Will keep in mind the next time\r\n\r\nWhile scanning through Error model, I found the tr(\".\",\"_\") and humanize on the result in `full_messages`.\r\n\r\nThe behaviour for having `_` in the name is different than having a `.`\r\n\r\nEx: \r\n`Model.nestedattr => Model nestedattr`\r\nbut `model_test` maps to `model_test` itself\r\n\r\nTest for previous behaviour is present the latter isn't, so added the test.\r\n\r\n\r\n\r\n"},{"ts":1363942237000,"body":"I see.\r\n\r\nRegarding the commit message, you can easily update it by using `git commit --amend` or `git rebase -i` and then issue a force push on your branch fix_test_AR_v2. The PR on Github will reflect the changes automatically."},{"ts":1363943790000,"body":"@senny  updating in some time"},{"ts":1363944377000,"body":"Fixed message"},{"ts":1364206325000,"body":"//cc  @carlosantoniodasilva  @rafaelfranca"}]},{"timestamps":[{"ts":1366200012000,"body":"Can you please change the commit message to something like:\r\n\r\n    Use secure source in generated plugin Gemfile. Closes #10245\r\n\r\nSo that it's kinda more explanatory and automatically closes the other issue? Thanks."},{"ts":1366201125000,"body":"@carlosantoniodasilva Ok. Changed it."}]},{"timestamps":[{"ts":1357283820000,"body":":+1: "},{"ts":1357451508000,"body":"Can you add an CHANGELOG entry, please? :smile:"},{"ts":1357601241000,"body":"added CHANGELOG entry."},{"ts":1357846626000,"body":"@jejacks0n can you rebase this, GH reports \"This pull request cannot be automatically merged.\""},{"ts":1357850533000,"body":"Should be good to go!  Thanks. =)"},{"ts":1357850617000,"body":"Thanks!!!"}]},{"timestamps":[{"ts":1362881646000,"body":"http://en.wikipedia.org/wiki/Chatham_Islands#Chathams_Time"},{"ts":1362882368000,"body":"Chatham Islands should be behind Samoa, but on my local machine it's not showing that correctly.\r\n```\r\n$ TZ=Pacific/Apia date   \r\nSun Mar 10 15:25:32 WST 2013\r\n$ TZ=Pacific/Chatham date\r\nSun Mar 10 16:10:35 CHADT 2013\r\n```\r\nInvestigating (so that the list order can be maintained)."},{"ts":1362882814000,"body":"Looks like the tzinfo gem has it right:\r\n\r\n``` irb\r\n>> Time.zone = 'Pacific/Apia'\r\n>> Time.current\r\n=> Sun, 10 Mar 2013 16:30:55 WSDT +14:00\r\n>> Time.zone = 'Pacific/Chatham'\r\n>> Time.current\r\n=> Sun, 10 Mar 2013 16:16:48 CHADT +13:45\r\n```"},{"ts":1362883160000,"body":"@pixeltrix I think OS X has outdated tzinfo.\r\n\r\neggert/tz@22406c0da51fe64e84575047facddb0b833e390d"},{"ts":1362883379000,"body":"@BanzaiMan yes - using `zdump` gives you:\r\n\r\n```\r\n$ zdump -v Pacific/Apia\r\nPacific/Apia  Fri Dec 13 20:45:52 1901 UTC = Fri Dec 13 09:18:56 1901 LMT isdst=0\r\nPacific/Apia  Sat Dec 14 20:45:52 1901 UTC = Sat Dec 14 09:18:56 1901 LMT isdst=0\r\nPacific/Apia  Sun Jan  1 11:26:55 1911 UTC = Sat Dec 31 23:59:59 1910 LMT isdst=0\r\nPacific/Apia  Sun Jan  1 11:26:56 1911 UTC = Sat Dec 31 23:56:56 1910 SAMT isdst=0\r\nPacific/Apia  Sun Jan  1 11:29:59 1950 UTC = Sat Dec 31 23:59:59 1949 SAMT isdst=0\r\nPacific/Apia  Sun Jan  1 11:30:00 1950 UTC = Sun Jan  1 00:30:00 1950 WST isdst=0\r\nPacific/Apia  Sun Sep 26 10:59:59 2010 UTC = Sat Sep 25 23:59:59 2010 WST isdst=0\r\nPacific/Apia  Sun Sep 26 11:00:00 2010 UTC = Sun Sep 26 01:00:00 2010 WSDT isdst=1\r\nPacific/Apia  Sat Apr  2 13:59:59 2011 UTC = Sat Apr  2 03:59:59 2011 WSDT isdst=1\r\nPacific/Apia  Sat Apr  2 14:00:00 2011 UTC = Sat Apr  2 03:00:00 2011 WST isdst=0\r\nPacific/Apia  Sat Sep 24 13:59:59 2011 UTC = Sat Sep 24 02:59:59 2011 WST isdst=0\r\nPacific/Apia  Sat Sep 24 14:00:00 2011 UTC = Sat Sep 24 04:00:00 2011 WSDT isdst=1\r\nPacific/Apia  Fri Dec 30 09:59:59 2011 UTC = Thu Dec 29 23:59:59 2011 WSDT isdst=1\r\nPacific/Apia  Fri Dec 30 10:00:00 2011 UTC = Sat Dec 31 00:00:00 2011 WSDT isdst=1\r\nPacific/Apia  Sat Mar 31 13:59:59 2012 UTC = Sun Apr  1 03:59:59 2012 WSDT isdst=1\r\nPacific/Apia  Sat Mar 31 14:00:00 2012 UTC = Sun Apr  1 03:00:00 2012 WST isdst=0\r\nPacific/Apia  Mon Jan 18 03:14:07 2038 UTC = Mon Jan 18 16:14:07 2038 WST isdst=0\r\nPacific/Apia  Tue Jan 19 03:14:07 2038 UTC = Tue Jan 19 16:14:07 2038 WST isdst=0\r\n```\r\n\r\nDoesn't have the September 2012 transition to WSDT :cry:"},{"ts":1362935043000,"body":"If desired, you can update tz database with `zic`: https://gist.github.com/BanzaiMan/5129358"},{"ts":1363312886000,"body":"@pixeltrix @BanzaiMan is this ready to merge?"},{"ts":1365733731000,"body":"@pixeltrix Is there anything else I can do?"},{"ts":1365735354000,"body":"@BanzaiMan can you squash the commits into one and I'll merge it - thanks!"},{"ts":1365780589000,"body":"@pixeltrix Squashed. Thanks!"}]},{"timestamps":[{"ts":1376119388000,"body":"cc @rafaelfranca @tenderlove "},{"ts":1376120133000,"body":"For SQLite it depends on how the user inserted data. The data isn't guaranteed to be tagged with ASCII 8bit"},{"ts":1376120573000,"body":"@tenderlove I referred to https://github.com/luislavena/sqlite3-ruby/blob/master/ext/sqlite3/database.c#L284-L292 , so thought the encoding always ends up to be `ASCII-8BIT`"},{"ts":1376126583000,"body":"No, the adapter will return Unicode or ASCII 8bit, depending on how the data was inserted.  Check statement.c and the encoding tests in the SQLite repo.\r\n\r\nI'd be more detailed, but I'm on my phone right now. :-)\r\n\r\n--\r\nAaron Patterson\r\nhttp://tenderlovemaking.com/\r\nI'm on an iPhone so I apologize for top posting.\r\n\r\nOn Aug 10, 2013, at 4:42 PM, Vipul A M <notifications@github.com> wrote:\r\n\r\n> @tenderlove I referred to https://github.com/luislavena/sqlite3-ruby/blob/master/ext/sqlite3/database.c#L284-L292 , so thought the encoding always ends up to be ASCII-8BIT\r\n> \r\n> \\\r\n> Reply to this email directly or view it on GitHub."},{"ts":1376130007000,"body":"Thanks @tenderlove !\r\nI l try understanding better from the adapter."}]},{"timestamps":[{"ts":1371744597000,"body":"Sounds good to me."},{"ts":1371744968000,"body":" :shipit:"},{"ts":1371745063000,"body":"Cool. Let me fix few small issues from travis."},{"ts":1371746472000,"body":"An entry on ActionPack CHANGELOG is good too. Maybe we have to review some documentation."},{"ts":1371747590000,"body":"Hi,\r\n\r\nVery nice pull request! :heart: Is it intended not to put a new line at the end of some files? If it's not the case, here are the concerned files:\r\n\r\n* actionview/test/fixtures/digestor/messages/show.html.erb\r\n* actionview/test/fixtures/fun/games/hello_world.erb\r\n* actionview/test/fixtures/good_customers/_good_customer.html.erb\r\n* actionview/test/fixtures/shared.html.erb\r\n* actionview/test/fixtures/test/_changing_priority.html.erb\r\n* actionview/test/fixtures/test/_changing_priority.json.erb\r\n* actionview/test/fixtures/test/_counter.html.erb\r\n* actionview/test/fixtures/test/_customer.erb\r\n* actionview/test/fixtures/test/_customer_greeting.erb\r\n* actionview/test/fixtures/test/_customer_with_var.erb\r\n* actionview/test/fixtures/test/_first_json_partial.json.erb\r\n* actionview/test/fixtures/test/_partial_only.erb\r\n* actionview/test/fixtures/test/_raise_indentation.html.erb\r\n* actionview/test/fixtures/test/_second_json_partial.json.erb\r\n* actionview/test/fixtures/test/hello.builder\r\n* actionview/test/fixtures/test/hello/hello.erb\r\n* actionview/test/fixtures/test/hello_world.erb\r\n\r\nIf it's intented, sorry for the spam!\r\n\r\nHave a nice day.\r\n"},{"ts":1371748643000,"body":"Thanks @robin850 and @rafaelfranca for review. I've added few commits above addressing your comments and small things that I've found myself.\r\n\r\nRegarding the new line at the end of the file - those files are copied as they were before, in actionpack, nothing's been changed there. I guess that adding new line at the end may break some tests? I don't know. Anyway - it's a matter of style and I don't have opinion on that. It's up to core team."},{"ts":1371756274000,"body":"Looks great for me :+1: \r\n\r\n@spastorino can be interested in review this also"},{"ts":1371756407000,"body":"@rafaelfranca any comments on new lines? I don't care to be honest, so if this is not a concern I will merge. I'm pretty sure that there can be things that need improvement here (like: tests are a bit bloated, AV tests using controllers etc), but I would like to merge it soon to not create extra work for @strzalek, like rebasing this branch every few days. We can iterate later."},{"ts":1371757181000,"body":"Changing new lines in those files will likely break tests that check against their output, not expecting the new line at the end. As long as the files were untouched now, I think those changes can be done separately if necessary.\r\n\r\nI'm :+1: on moving, this will avoid a lot of possible headache in future work as you guys have described."},{"ts":1371757265000,"body":"No problems with new lines :shipit: "},{"ts":1371757268000,"body":":+1: please don't care about new lines"},{"ts":1371757316000,"body":"Well, I think these files should not be removed `actionpack/test/fixtures/test/malformed/malformed.html.erb~` and all the `~` files"},{"ts":1371757381000,"body":"Ok, tests are green, so I'm merging :D"},{"ts":1371757429000,"body":"@rafaelfranca ah, good catch!"},{"ts":1371757589000,"body":"good catch @rafaelfranca, files with ``~`` are kept intentionally"},{"ts":1371759188000,"body":"Sorry for the spam with new lines. ^^\r\n\r\n\r\n2013/6/20 Guillermo Iguaran <notifications@github.com>\r\n\r\n> good catch @rafaelfranca <https://github.com/rafaelfranca>, files with ~are kept intentionally\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/11032#issuecomment-19778448>\r\n> .\r\n>"},{"ts":1371764473000,"body":"I've restored files and added `assert` to check if they exist. Next time if @drogus will remove them, he'll be punished by travis ;)\r\n\r\n:ship:"},{"ts":1371765717000,"body":"> Next time if @drogus will remove them, he'll be punished by travis ;)\r\n\r\n![](http://forgifs.com/gallery/d/210072-1/Lazy-employee-throws-packages.gif)"},{"ts":1371768152000,"body":"TravisCI approves :sunglasses: "},{"ts":1371768358000,"body":"![star-trek---183260](https://f.cloud.github.com/assets/11562/684471/3aeb43e6-d9fb-11e2-9340-e7f913f4d133.gif)\r\n"},{"ts":1372057860000,"body":":+1:"}]},{"timestamps":[{"ts":1372710558000,"body":"I think you need to add CHANGELOG enrty as well :-) "},{"ts":1372711084000,"body":"added changelog and updated"},{"ts":1372711139000,"body":"looks good. thanks :yellow_heart: "},{"ts":1372711221000,"body":":+1: "}]},{"timestamps":[{"ts":1357773815000,"body":":+1: thanks!"}]},{"timestamps":[{"ts":1377067535000,"body":"Thanks but we can't simply replace `collect` by `collect!` in all cases blindly. We need to check if we can actually mutate the enumerable or not."},{"ts":1377067707000,"body":"Hi @josevalim,\r\nYes Yes I was overlooked it...I will modify it and re push it.\r\n\r\nThanks"},{"ts":1377068075000,"body":"Done \r\n\r\nThank you @josevalim "},{"ts":1377146909000,"body":"cc @josevalim @rafaelfranca @guilleiguaran @senny @carlosantoniodasilva "},{"ts":1377168735000,"body":"build failed on a different issue \r\n\r\nrake aborted!\r\n\r\nCommand failed with status (): [/home/travis/.rvm/rubies/ruby-1.9.3-p448/b...]\r\n\r\n/home/travis/build/rails/rails/activesupport/Rakefile:16:in `block (3 levels) in <top (required)>'\r\n\r\n/home/travis/build/rails/rails/activesupport/Rakefile:15:in `each'\r\n\r\n/home/travis/build/rails/rails/activesupport/Rakefile:15:in `all?'\r\n\r\n/home/travis/build/rails/rails/activesupport/Rakefile:15:in `block (2 levels) in <top (required)>'\r\n\r\nTasks: TOP => test:isolated\r\n\r\n(See full trace by running task with --trace)"},{"ts":1377177795000,"body":"Thank you but I think this is really hard to review this PR since if can mutate the objects that it should not.\r\n\r\nI prefer to be safer and don't merge it."},{"ts":1377177946000,"body":"Ok...thanks for your suggestion @rafaelfranca "}]},{"timestamps":[{"ts":1372200795000,"body":"Thanks."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1364665089000,"body":"The 2-3-stable branch doesn't accept bug fixes.\r\n\r\nThank you"}]},{"timestamps":[{"ts":1358942193000,"body":"Any possibility of adding a test for it?"},{"ts":1358961622000,"body":"Been thinking about it all morning! Actually I might suggest moving the fix to the DATABASE_URL parsing function, and having it behave a little more like YAML: if one of the \"query arguments\" is all numeric, then cast it to a numeric type. That'd be more consistent through the system. Given these inputs, we get different outputs right now:\r\n\r\n```yaml\r\ntest:\r\n  adapter: sqlite3\r\n  database: test_db.sqlite3\r\n  timeout: 500\r\n  pool: 5\r\n```\r\nbecomes\r\n```ruby\r\n{\"adapter\"=>\"sqlite3\",\r\n \"timeout\"=>500,\r\n \"database\"=>\"db/test.sqlite3\",\r\n \"host\"=>\"localhost\",\r\n \"pool\"=>5}\r\n```\r\nbut with a DATABASE_URL, all of the arguments become strings:\r\n```ruby\r\nDATABASE_URL=\"sqlite3://localhost/db/test.sqlite3?timeout=500&pool=5\"\r\n{\"adapter\"=>\"sqlite3\",\r\n \"timeout\"=>\"500\",\r\n \"database\"=>\"db/test.sqlite3\",\r\n \"host\"=>\"localhost\",\r\n \"pool\"=>\"5\"}\r\n```"},{"ts":1359076445000,"body":"Ok! Ready for review again. I changed my approach to convert numeric types in the query string of the DATABASE_URL, and added and updated the connection spec tests to verify this."},{"ts":1359152219000,"body":"Branch updated! I didn't realize that rescue as control flow was against rails code style, thanks for pinpointing the issue for me."},{"ts":1359489653000,"body":"Second commit handles true / false as well. I can squash, drop, or change these as needed :octocat:  "},{"ts":1359649915000,"body":"Great! Could you add a CHANGELOG entry?"},{"ts":1359650618000,"body":"Done! Squash all three together?"},{"ts":1359651077000,"body":"Yes please. It needs a rebase too"},{"ts":1359651776000,"body":"Rebased and squashed!"},{"ts":1359660021000,"body":"Thank you"}]},{"timestamps":[{"ts":1368204719000,"body":"Very good. Thank you so much"}]},{"timestamps":[{"ts":1377484556000,"body":"Thank you for the pull request.\r\n\r\nI don't think `+=` is a supported API for two reasons:\r\n\r\n1. You don't expect that `+=` mutates the receiver object and the current implementation does that.\r\n1. This will allow `comments = post.comments + comment` and I think we don't want this.\r\n\r\nThe right thing to do is to use one of the documented method: `<<`, `push` or `append`."}]},{"timestamps":[{"ts":1366320953000,"body":"@carlosantoniodasilva Thanks for the careful readover. I've fixed the mistakes."}]},{"timestamps":[{"ts":1358601168000,"body":"@josevalim @wycats could you review this please?"},{"ts":1358619071000,"body":"Given that `session[:session_id]` is specific to cookie_store,\r\nI'd planned on updating/replacing this pull request with one that replaces the `session.id` from Rack:\r\n\r\n```ruby\r\ndef id\r\n  options[:id] || (load_for_write! && options[:id])\r\nend\r\n```\r\n\r\nWhile working on an updated patch, I realized the cookie_store test for `setting_session_id_to_nil_is_respected` is incorrect, as it never makes an additional request. When done, it shows the cookie is written using the same SID.\r\nI'm assuming the desired behavior would be to reset the SID while keeping the data?\r\nOtherwise, setting this to nil should be the same as `session.destroy`.\r\nTrying to _actually_ respect setting `session.options[:id]` to nil is challenging.\r\n\r\nAlso, I'm thinking it may be a good idea to change the key for storing the SID\r\n from `:session_id` to `:_session_id` to make it clear that it shouldn't be accessed directly.\r\n\r\nI'm still working on this... and should be able to submit separate issues for these other items.\r\nJust wanted to get my current thoughts out here for anyone reviewing this.\r\n"},{"ts":1358622682000,"body":"Just an observation,\r\n\r\nIf the browser does not accept cookies, as it's common in facebook canvas apps using IE6 and 7,\r\nyou may fall in a very simple problem, which is a session is assigned but the browser refuses it.\r\n\r\nUnless you actually meet the criteria or just refuse the user,\r\nat the moment of the first request, there's no way to be sure (might be) if the browser will ultimately accept the cookie or not.\r\n\r\nSo this might be an implication why not to solve this problem."},{"ts":1358641606000,"body":"@yakko The idea is to be able to access the SID for the current session,\r\nand instead of receiving `nil` if one wasn't persisted or hasn't been\r\ncreated yet, then one should be created so it's SID can be returned.\r\nThis same auto-creation happens when you attempt to write to the session.\r\nIn other words, a work-around for this would be something like:\r\n\r\n```ruby\r\nsession.delete(:foo) unless session.exists?\r\nsid = session.options[:id]\r\n```\r\n\r\nSo, the problem you're describing would be an issue regardless.\r\nIf you have the `csrf_meta_tags` in your layout, you're going to get\r\na cookie, even if you skip the filter.\r\n\r\n@rafaelfranca I've updated the commits to reflect my latest understanding\r\nof this problem (which could certainly be improved). More could certainly\r\nbe done, especially in the tests, but I'll wait to see what others think\r\nabout this before I do any more with this.\r\n\r\nAs for removing `test_setting_session_id_to_nil_is_respected`,\r\nthis test simply sets session.options[:id] to nil, then reads it back\r\nwithout making a another request. The session[:session_id] key will\r\nstill be written in the cookie using the prior SID. There is nothing taking\r\nplace when setting `session.options[:id] = nil` that would change this\r\nvalue in the CookieStore's unpacked_cookie_data (like destroy_session does).\r\nThis would occur before or after the other commits here are applied.\r\n\r\nIf setting the SID to nil should destroy the session, but not create a\r\nnew SID, perhaps Options[]= could call @by.send(:destroy_session) with\r\nthe :drop option - but the other stores wouldn't support this.\r\nI'm not understanding _why_ you would want to do this, rather than calling\r\nreset_session or session.destroy. So I'm a bit confused as to how this\r\nshould be handled.\r\n"},{"ts":1360692989000,"body":":-1: for pushing this to Rails and causing Rails to depart from Rack.\r\nWe should discuss with Rack developers and get this feature back in Rack."},{"ts":1360693355000,"body":"> A google search will show there are many who wish to access this - perhaps\r\nfor logging, or associating other records (although, I agree it's better to\r\nsimply store an associated record id in the session).\r\n\r\nAlso this. It seems a bad idea in the first place, why are we making it easier?\r\n\r\nAuthentication mechanisms (like Devise) will set a new session id once you change your password, sign in and other actions to avoid session fixation attacks, why are you sticking with something that will change?\r\n\r\nI would like to hear some good example where this is needed and manually managing a record id wouldn't suffice."}]},{"timestamps":[{"ts":1363425437000,"body":"//cc @pixeltrix Thoughts?"},{"ts":1363430877000,"body":"@vipulnsward Journey's responsibility is purely about recognising what's in PATH_INFO so this is really the wrong fix for the problem I outlined in the ticket. If you need to test a request properly then you should be using an integration test and ideally we'd make them quick enough so that functional tests can be deprecated."},{"ts":1363431623000,"body":"Cool. Thanks!\r\n@pixeltrix I would really love to make  some very minor changes at some places, just to make the code readable a bit more, hope thats acceptable."},{"ts":1363432204000,"body":"@vipulnsward we generally only merge stuff that's either a bug fix, new feature, or a significant code refactoring (which can be performance, memory or number of lines reduced). If it's just a couple lines that you've reformatted, then even if it's more readable, the general policy is to not merge so that the git history isn't polluted. However documentation improvements are always gratefully accepted. :smile:"}]},{"timestamps":[{"ts":1358930239000,"body":"@jeremy this is the PR we already discussed. Could you review it?"},{"ts":1359015700000,"body":"Thanks for the review, I updated the PR.\r\n\r\n@carlosantoniodasilva could you take another look?"},{"ts":1360171108000,"body":"as @jeremy suggested we now raise an `ArgumentError` instead of outputting a warning."},{"ts":1360180615000,"body":"@rafaelfranca the CHANGELOG is updated."}]},{"timestamps":[{"ts":1371647675000,"body":"Sorry for bad English. This commit will raise error if there no ancestors. \r\n\r\nhttps://github.com/rails/rails/commit/e3dc10f13393c0b1329f31062a50b5c050159151#commitcomment-3457605\r\nIn test case there is DefaultValue module included before ActiveModel::Model"},{"ts":1371648106000,"body":"Yes, @fredwu could you check this"},{"ts":1371648244000,"body":"I'm already on it. :)"},{"ts":1371649043000,"body":"Fixed in #11010 and #11011. cc @rafaelfranca @woto"},{"ts":1371669658000,"body":"New problem with last commit on ActiveModel.\r\n@fredwu Please look at this https://github.com/woto/rails/commit/9fc20cfc0089823d0fe9c7066f536647ee5f8f23\r\nMay be i am doing something wrong?"}]},{"timestamps":[{"ts":1357249992000,"body":":+1:"}]},{"timestamps":[{"ts":1368544539000,"body":"A `chain` local occurs in 2 other methods in that block, but it's not clear if any of them are guilty of shadowing. What was the original warning you saw?"},{"ts":1368545463000,"body":"You can check the warning at https://travis-ci.org/rails/rails/jobs/7139804, newer builds are failing on travis so can't spot them"},{"ts":1368558836000,"body":"Closing as @tenderlove  fixed it by https://github.com/rails/rails/commit/78202055c971659689f6a96a5b4aa2c138cb44d2"}]},{"timestamps":[{"ts":1361669321000,"body":"@carlosantoniodasilva this should be a quick one. Sorry for the roundtrip."}]},{"timestamps":[{"ts":1358007385000,"body":"@carlosantoniodasilva, could you look at this since you originally pulled in the affected code? Thanks!"},{"ts":1358007606000,"body":"@nilbus thanks, I'll take a look and reply soon."},{"ts":1358092714000,"body":"This obviously needs fixed, yeah."},{"ts":1358092987000,"body":"I was wondering about that too. I'll benchmark and see if I can get the time down if it's significant."},{"ts":1358097518000,"body":"We decided to remove BestStandardsSupport middleware in favor of ``config.action_dispatch.default_headers``"},{"ts":1358118575000,"body":"@guilleiguaran, when will that happen? Depending on how soon, maybe this should be applied anyway for the mean time.\r\n\r\n@steveklabnik, I did some [benchmarks using some variants](https://gist.github.com/4526647). If I cut out the split/each and just search the original header to see if it contains `@header`, then it only increases the time 15% instead of 60%.\r\n\r\n    500,000 repetitions\r\n    -------------------\r\n    original               0.65483  secs    Fastest\r\n    fixed_without_loop     0.773287 secs    15% Slower\r\n    fixed_using_index      0.819192 secs    20% Slower\r\n    fixed_without_split    1.323478 secs    50% Slower\r\n    fixed                  1.640181 secs    60% Slower"},{"ts":1358294853000,"body":"Can you please rebase from current master and squash your commits? I'll merge after that, thanks."},{"ts":1358295424000,"body":"Squashed and rebased."},{"ts":1358299812000,"body":"Thank you"},{"ts":1358299903000,"body":"And thanks for the quick response! I'm glad it's fixed."},{"ts":1358335284000,"body":":heart:"}]},{"timestamps":[{"ts":1365780384000,"body":"@carlosantoniodasilva let me know if this is right according to [the examples](http://guides.rubyonrails.org/api_documentation_guidelines.html#example-code)"},{"ts":1365783153000,"body":"Looks good I think :+1:"}]},{"timestamps":[{"ts":1373976943000,"body":"I'm :-1: on this. During test execution the message will be visible. Maybe we could use `warn` in place of `logger.warn` to print it to `$stderr` but I don't think we should change the API.\r\n\r\n/cc @carlosantoniodasilva @rafaelfranca "},{"ts":1375810689000,"body":"I appreciate your view on this, closing it."}]},{"timestamps":[{"ts":1357540078000,"body":"Oh, should this have a changelog entry?  It doesn't seem like it should, because it's pretty minor, but I suppose there also might be big implications for some users.  Happy to go either way on that."},{"ts":1357543565000,"body":"See #7372 for discussion about this"},{"ts":1357544229000,"body":"Thanks for filling me in.  Seems like this isn't the desirable fix, then.  Closing this, but there might be a new one in it's place soon enough."},{"ts":1360665431000,"body":"rails 3.2.9 - ruby 1.9.3p125 (2012-02-16 revision 34643) [i686-linux] - actionpack 3.2.9\r\noptions[:secret] ||= Rails.application.config.secret_key_base\r\nthe following didn't work for me, it says there's no secret_key_base, so I found out that rather than using secret_key_base I should've use secret_token that is defined in config/initializers/secret_token.rb.\r\nSo far so good, I do not get the Warning again. :)\r\nmany thanks :)"}]},{"timestamps":[{"ts":1376618374000,"body":"@mikeadmire Can you add CHANGLOG at the top?\r\n\r\n/cc @arunagw @atambo"},{"ts":1376633421000,"body":"@mikeadmire You can force push to same branch and Github will take care of updating it again. No need to open separate PR :)"},{"ts":1376655291000,"body":"@prathamesh-sonpatki Thanks! I screwed up when trying to squash my commits and couldn't figure out how to recover. I appreciate the feedback. I will try to do it better next time."}]},{"timestamps":[{"ts":1372086092000,"body":"cc @senny "},{"ts":1372086841000,"body":"I think the intention was to make sure that not all `Contract` objects are returned."},{"ts":1372087417000,"body":"Its throwing a warning. Please confirm so I could change to just suppress it. \r\n//cc @armstrjare"},{"ts":1372087693000,"body":"@vipulnsward we don't need to assign it:\r\n\r\n```ruby\r\nContract.create! # another contract\r\n```"},{"ts":1372088164000,"body":"@senny  updated."},{"ts":1372088297000,"body":"@vipulnsward thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1363705082000,"body":"It would raise an exception, see https://github.com/rails/rails/issues/9269"}]},{"timestamps":[{"ts":1365821394000,"body":"@jeremy Thanks for the comments. I've added a bunch of functionality to the ``RuntimeRegistry``, though it might be overkill for the save and restore thing that was going on with ``available_queries_for_explain``. I've also added a tests for the registry."},{"ts":1365865290000,"body":"@fxn If we change the explain_subscriber.rb file (https://github.com/rails/rails/blob/master/activerecord/lib/active_record/explain_subscriber.rb#L9-L13) to check for whether ``queries.empty?``, then we will break the following test: https://github.com/rails/rails/blob/master/activerecord/test/cases/explain_subscriber_test.rb#L7-L12. You wrote this, so you probably have better insight as to whether this is desired functionality or not.\r\n\r\nHowever, if we had ``available_queries_for_explain = []``, then whenever you called the ``finish`` function, you would never add anything to the list of ``available_queries_for_explain``. I don't think that is desired behavior, and I believe that checking for nil in that file was just trying to assure that ``queries`` was an array, though I'm not sure."},{"ts":1365867276000,"body":"You are right.\r\n\r\nIn the current implementation, the thread local is only checked on demand, and if a explain is going on this code sets the collection to fill:\r\n\r\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/explain.rb#L8\r\n\r\nThe `finish` method of the subscriber uses the thread local also as a flag that indicates whether a EXPLAIN is going on. If we are collecting queries the collection should be filled, otherwise there are no queries to collect, do nothing.\r\n\r\nBut with your refactor we have a canonical place to initialize this with a default, and I prefer anything that is plural to return a collection, an empty array is a better default in my view.\r\n\r\nThen, the initializer could set an actual flag, and the subscriber could fill the collection if the flag is active.\r\n\r\nGranted, the default empty array is never used, but I find that setup to be more intuitive. I believe @jeremy sees it the same way.\r\n"},{"ts":1365898498000,"body":"@fxn Ok, thanks for the clarification. I've added a flag to detect whether an EXPLAIN is happening or not, which is now included in the runtime registry. Now the ``finish`` method checks to see if ``collecting_queries_flag`` is true or not, before it appends the parse payload.\r\n\r\nNow, calling ``save_available_queries`` will set the ``collecting_queries_flag`` to true, and the ``restore_available_queries`` method will set the flag to false."},{"ts":1366058644000,"body":"I feel the patch is too complicated. You could just assign the empty array to `ActiveRecord::RuntimeRegistry.available_queries_for_explain` as the previous code did couldn't you?\r\n\r\nAlso \"_flag\" is not a good name, `ActiveRecord::RuntimeRegistry.collect_queries?` would maybe be better."}]},{"timestamps":[{"ts":1362044625000,"body":"can you write two test cases to verify that AR::Base cant be instantiated and that an abstract class can't be instantiated?\r\n\r\nAlso we would need a CHANGELOG entry explaining the change."},{"ts":1362308719000,"body":"@HonoreDB comment-ors don't get notified when you push, you have to reply to the thread for them to know. @senny care to take a second look?"},{"ts":1362320374000,"body":"added a few minor comments."},{"ts":1362330387000,"body":"Thanks, comments addressed in https://github.com/HonoreDB/rails/commit/f128e79de8c871ab7f31c6a627a250034ec56633."},{"ts":1362331256000,"body":"the PR does no longer cleanly apply to master. Can you push a rebased version?"},{"ts":1362332318000,"body":"Rebased, tests now check the error message in addition to the type."},{"ts":1362333090000,"body":"@HonoreDB amazing! thanks for the fast update. :yellow_heart: \r\n\r\n@carlosantoniodasilva @rafaelfranca can you take a final look?"}]},{"timestamps":[{"ts":1373273280000,"body":"@steveklabnik @guilleiguaran can you guys take a look?"},{"ts":1373275073000,"body":"Hey @senny I had some problems working with Git earlier, hopefully those guys will still want to look at it. I think it is done now and looking pretty good. Thanks.\r\n"},{"ts":1373275238000,"body":"@Alamoz if you have another PR please link id using `#XXXX`"},{"ts":1373275668000,"body":"Cool, thanks @senny "},{"ts":1374850330000,"body":"Very nice pull request @Alamoz. I've added some comments with @guilleiguaran and @lucasmazza. Thanks a lot! Maybe some of mine need an approval."},{"ts":1374875451000,"body":"Hey @robin850, I'll make those changes by tomorrow morning. I'm getting ready for a Rails installfest and don't have much time until late tonight.\r\n"},{"ts":1374907247000,"body":"Thanks @guilleiguaran and @robin850 for the help. I've made all the suggested changes. Let me know if there is anything else. I'm not sure how close you are to the next release, but this should help people upgrading to Rails 4 so we can always add more later if you want to elaborate in more detail.\r\n"},{"ts":1374912978000,"body":"@Alamoz : Awesome! Thanks! :heart: \r\n\r\n@guilleiguaran : LGTM"},{"ts":1375113415000,"body":"@fxn : Sorry to ping your one more time but could you have a look please? :smiley: "},{"ts":1375113605000,"body":"No worries, thanks for reminding me, I'll try to have a look today."},{"ts":1375132609000,"body":"@Alamoz awesome patch, thanks very much."},{"ts":1375134525000,"body":"@robin850 @fxn You're very welcome. I'm just trying to improve my own dog food - was confused about the asset pipeline after upgrading an app to Rails 4. I've never had the time to dig deeply into rails and wish I could have contributed in a major way, but figure any little bit helps.\r\n"}]},{"timestamps":[{"ts":1365817182000,"body":"Thanks, but it mostly adds indirection for a small method only used for tests, and I can't see any gain on that. Thanks for your contribution."}]},{"timestamps":[{"ts":1358522334000,"body":"Sorry but we don't merge bug fixes on 3-0-stable branch"}]},{"timestamps":[{"ts":1373290483000,"body":":+1: Awesome!"},{"ts":1373299743000,"body":"great!!!! :heart:"}]},{"timestamps":[{"ts":1368206681000,"body":"Hey guys, apparently `finish` is not available in 3-2, [we have some failures on travis](https://travis-ci.org/rails/rails/builds/7055286). @dasch mind taking a look pls? Thanks!"},{"ts":1368228293000,"body":"Shit, can you revert the commit until I have time to fix it? I'll try to look at it tomorrow. "},{"ts":1368228542000,"body":"@dasch done, thanks!"}]},{"timestamps":[{"ts":1357072042000,"body":"Changelog?"},{"ts":1357075521000,"body":"Sorry, I thought there's no need for it since it's such a small change. I will create a PR tomorrow. "},{"ts":1357076282000,"body":"Cool no prob. Changelog is needed because that's the way the project tells users what is new, regardless of whether the change is small or big. Users are not expected to read git log.\r\n"}]},{"timestamps":[{"ts":1361956884000,"body":"@carlosantoniodasilva @rafaelfranca could you take a look?"},{"ts":1361967232000,"body":"I agree there's some sort of duplication between both, they were left in AP as a safety check I guess since the originals wehere there (and is where most people will use them from). Anyway, we can kill some no problem, just make sure to leave a handful for each helper :)"}]},{"timestamps":[{"ts":1369144407000,"body":"@rafaelfranca @tenderlove can you take a look?"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1373361098000,"body":"Is 3, as you can see here http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#follow-the-coding-conventions\r\n\r\nBut you can find in the same guide that we don't accept cosmetic changes through the codebase.\r\n\r\nhttp://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#write-your-code\r\n> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted.\r\n\r\nSorry, and thank you for the contribution."}]},{"timestamps":[{"ts":1366061556000,"body":"Hmm, I need to think about this. What if somebody does:\r\n\r\n```\r\nclass Post\r\n  connection.create_table :posts do |t|\r\n    t.string :title\r\n  end\r\n\r\n  def title\r\n    \"foo\"\r\n  end\r\nend\r\n```\r\n\r\nWill `Post.select(:id).first.respond_to?(:title)` return true or false? It should be true in this case, but I'm not sure it will be, looking at your code. And it might not be possible to get this correct without resorting to crazy hacks, I'm not sure."},{"ts":1366063608000,"body":"@jonleighton Yes you are right. In this case my fix will fail. \r\n\r\nThe only reason why I fixed it was because without the fix `respond_to?` is broken for all select cases. With the fix `respond_to?` will be broken only for rare cases ( like the one you cited ). "},{"ts":1366067360000,"body":"I don't think this is a rare case. Every project that I work override the\r\naccessor.\r\nOn Apr 15, 2013 7:06 PM, \"Neeraj Singh\" <notifications@github.com> wrote:\r\n\r\n> @jonleighton <https://github.com/jonleighton> Yes you are right. In this\r\n> case my fix will fail.\r\n>\r\n> The only reason why I fixed it was because without the fix respond_to? is\r\n> broken for all select cases. With the fix respond_to? will be broken only\r\n> for rare cases ( like the one you cited ).\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/10211#issuecomment-16414539>\r\n> .\r\n>"},{"ts":1366377466000,"body":"@rafaelfranca \r\n\r\n> I don't think this is a rare case. Every project that I work override the accessor.\r\n\r\nI agree that overriding the accessor is not rare, but it is probably significantly more rare to override the accessor *and* use `select` to restrict the columns *and* use `respond_to?`. So I think we should probably merge this, as I think it's a net positive despite not being perfect.\r\n\r\nWDYT?"},{"ts":1366377874000,"body":"Make sense. :+1:\r\nOn Apr 19, 2013 10:17 AM, \"Jon Leighton\" <notifications@github.com> wrote:\r\n\r\n> @rafaelfranca <https://github.com/rafaelfranca>\r\n>\r\n> I don't think this is a rare case. Every project that I work override the\r\n> accessor.\r\n>\r\n> I agree that overriding the accessor is not rare, but it is probably\r\n> significantly more rare to override the accessor *and* use select to\r\n> restrict the columns *and* use respond_to?. So I think we should probably\r\n> merge this, as I think it's a net positive despite not being perfect.\r\n>\r\n> WDYT?\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/10211#issuecomment-16652364>\r\n> .\r\n>"},{"ts":1366377963000,"body":"Ok, rebase please @neerajdotname "},{"ts":1366396472000,"body":"@jonleighton rebased ."}]},{"timestamps":[{"ts":1373117346000,"body":"All you need to do is force push to the existing branch, please don't open up a zillion pull requests, it's confusing :("},{"ts":1373126644000,"body":"Should I not use my own fork as an intermediate repo? Would it be better to just clone directly from rails/rails?\n\n\n\n\n________________________________\n From: Steve Klabnik <notifications@github.com>\nTo: rails/rails <rails@noreply.github.com> \nCc: Adrien Lamothe <alamoz@yahoo.com> \nSent: Saturday, July 6, 2013 6:29 AM\nSubject: Re: [rails] Rails 4 update of 'The Asset Pipeline' guide. (#11326)\n \n\n\nAll you need to do is force push to the existing branch, please don't open up a zillion pull requests, it's confusing :(\n—\nReply to this email directly or view it on GitHub."},{"ts":1373128731000,"body":"So, the problem is Github just doesn't have a mechanism for people working with a repo from a forked version. I've tried cloning directly from rails/rails to my machine, and then cannot open a pull request. Your tutorial shows how to squash, but the steps on how to update an existing pull request are unclear and didn't work for me. So I've just created yet another pull request, for what should be a good 'final' version of that file. You may want to add something to it later, but for now it is much better than what is currently live. Thanks."},{"ts":1373129464000,"body":"The only way to interact with and make pull requests from another repo you do not have commit access to is using a forked version.\r\n\r\nSay, you have already pushed to `master` with your changes and opened a pull request with **one single commit**. You get feedback and make some changes *without* committing them locally. At this point. You can do this:\r\n\r\n```\r\n$ git commit --amend\r\n$ git push --force\r\n```\r\n\r\nThis will update your own fork's `master` branch and the PR will be updated in the `rails/rails` repo.\r\n\r\nAnother scenario, you have more than one commit in a PR and you are asked to squash them into a single commit. This is where you follow @steveklabnik's post: http://blog.steveklabnik.com/posts/2012-11-08-how-to-squash-commits-in-a-github-pull-request.\r\n\r\nYou should never have to create a separate PR request unless you *really* messed up your rebase.\r\n\r\nHope this helps."},{"ts":1373129922000,"body":"Thanks a lot for explaining that. I do mostly solo projects and unfortunately the team jobs I've worked on have used other source code control systems, so my Git usage has been rudimentary.\n\n\n\n\n________________________________\n From: Matt Bridges <notifications@github.com>\nTo: rails/rails <rails@noreply.github.com> \nCc: Adrien Lamothe <alamoz@yahoo.com> \nSent: Saturday, July 6, 2013 9:51 AM\nSubject: Re: [rails] Rails 4 update of 'The Asset Pipeline' guide. (#11326)\n \n\n\nThe only way to interact with and make pull requests from another repo you do not have commit access to is using a forked version.\nSay, you have already pushed to master with your changes and opened a pull request with one single commit. You get feedback and make some changes without committing them locally. At this point. You can do this:\n$ git commit --amend\n$ git push --force \nThis will update your own fork's master branch and the PR will be updated in the rails/rails repo.\nAnother scenario, you have more than one commit in a PR and you are asked to squash them into a single commit. This is where you follow @steveklabnik's post: http://blog.steveklabnik.com/posts/2012-11-08-how-to-squash-commits-in-a-github-pull-request.\nYou should never have to create a separate PR request unless you really messed up your rebase.\nHope this helps.\n—\nReply to this email directly or view it on GitHub."},{"ts":1373140037000,"body":"Just tried that twice and it doesn't work. Thanks anyway. My forked repo shows a timestamp and new commit number, but when browsing the code no changes have been incorporated, and my pull request was also not updated.\r\n\r\nDoh! Helps if I do 'git add' first. OK, finally got the process figured out and working after blundering along. Cool.\r\n\r\n\r\n\r\n________________________________\r\n From: Matt Bridges <notifications@github.com>\r\nTo: rails/rails <rails@noreply.github.com> \r\nCc: Adrien Lamothe <alamoz@yahoo.com> \r\nSent: Saturday, July 6, 2013 9:51 AM\r\nSubject: Re: [rails] Rails 4 update of 'The Asset Pipeline' guide. (#11326)\r\n \r\n\r\n\r\nThe only way to interact with and make pull requests from another repo you do not have commit access to is using a forked version.\r\nSay, you have already pushed to master with your changes and opened a pull request with one single commit. You get feedback and make some changes without committing them locally. At this point. You can do this:\r\n$ git commit --amend\r\n$ git push --force \r\nThis will update your own fork's master branch and the PR will be updated in the rails/rails repo.\r\nAnother scenario, you have more than one commit in a PR and you are asked to squash them into a single commit. This is where you follow @steveklabnik's post: http://blog.steveklabnik.com/posts/2012-11-08-how-to-squash-commits-in-a-github-pull-request.\r\nYou should never have to create a separate PR request unless you really messed up your rebase.\r\nHope this helps.\r\n—\r\nReply to this email directly or view it on GitHub."},{"ts":1373141136000,"body":"OK, @mattbridges explained the process. Sorry about the multiple pull requests, won't happen again now that I know what to do. I think the current proposed version of guides/source/asset_pipeline.md in the pull request looks pretty good. Formatted the json manifest file within 80 columns.\n\n\n\n\n________________________________\n From: Steve Klabnik <notifications@github.com>\nTo: rails/rails <rails@noreply.github.com> \nCc: Adrien Lamothe <alamoz@yahoo.com> \nSent: Saturday, July 6, 2013 6:29 AM\nSubject: Re: [rails] Rails 4 update of 'The Asset Pipeline' guide. (#11326)\n \n\n\nAll you need to do is force push to the existing branch, please don't open up a zillion pull requests, it's confusing :(\n—\nReply to this email directly or view it on GitHub."}]},{"timestamps":[{"ts":1367447754000,"body":"/cc @asanghi @jtrupiano"},{"ts":1367447850000,"body":"If we're fixing it in 3-2-stable we should follow #8222 which fixed the problem in master"},{"ts":1367448339000,"body":"@pixeltrix thanks!  I didn't find that.  It would be really helpful to get this fixed in 3-2-stable.  I think the approach here of ensuring the result is a Fixnum is more explicite than the approach taking in #8222 of avoiding calling Fixnum#/."},{"ts":1367448458000,"body":"My feelings on the issue mirror @headius - it's a [std-lib bug][1] that should've been fixed already. Having to call `to_i` on every division is ridiculous.\r\n\r\n[1]: http://bugs.ruby-lang.org/issues/2121#note-15"},{"ts":1367449726000,"body":"Completely agree! However, this seems like a pretty simple workaround & as far as the test suite seems to indicate, the only thing in the rails codebase impacted by this."},{"ts":1367674179000,"body":"I prefer to call `.div` that make clear we want a integer division"},{"ts":1367799785000,"body":"I just updated this PR to simply be the the fix from #8222, but it applies cleanly to 3-2-stable."},{"ts":1367801688000,"body":"Please make sure to squash your commits as well. Thanks."},{"ts":1367847656000,"body":"@carlosantoniodasilva  Sorry about that, squashed."},{"ts":1367850516000,"body":"@btucker no problem, thanks!"},{"ts":1367924304000,"body":"Error in 1.8.7 ? \r\n\r\nprivate method `/' called for Fixnum"},{"ts":1367924986000,"body":"@arunagw looks like `Date.civil_to_jd` calls `/` [internally][1] - a lot of this code moved to C in 1.9.3 so isn't a problem on master. Looks like we need use a different testing method for 3-2-stable.\r\n\r\n[1]: https://github.com/ruby/ruby/blob/ruby_1_8_7/lib/date.rb#L401"},{"ts":1367934209000,"body":"What about going with my original testing approach?\r\n```diff\r\ndiff --git a/actionpack/test/template/date_helper_test.rb b/actionpack/test/template/date_helper_test.rb\r\nindex 50c7892..7d9fd11 100644\r\n--- a/actionpack/test/template/date_helper_test.rb\r\n+++ b/actionpack/test/template/date_helper_test.rb\r\n@@ -19,8 +19,6 @@ class DateHelperTest < ActionView::TestCase\r\n   end\r\n\r\n   def assert_distance_of_time_in_words(from, to=nil)\r\n-    Fixnum.send :private, :/  # test we avoid Integer#/ (redefined by mathn)\r\n-\r\n     to ||= from\r\n\r\n     # 0..1 with include_seconds\r\n@@ -73,6 +71,10 @@ class DateHelperTest < ActionView::TestCase\r\n     assert_equal \"12 months\", distance_of_time_in_words(from, to + 1.years - 31.seconds)\r\n\r\n     # > 525599\r\n+    Fixnum.module_eval do\r\n+      alias :old_slash :/\r\n+      remove_method :/\r\n+      alias :/ :quo\r\n+    end\r\n     assert_equal \"about 1 year\",    distance_of_time_in_words(from, to + 1.years - 30.seconds)\r\n     assert_equal \"about 1 year\",    distance_of_time_in_words(from, to + 1.years + 3.months - 1.day)\r\n     assert_equal \"over 1 year\",     distance_of_time_in_words(from, to + 1.years + 6.months)\r\n@@ -100,7 +102,10 @@ class DateHelperTest < ActionView::TestCase\r\n     assert_equal \"less than 20 seconds\", distance_of_time_in_words(from + 19.seconds, to, true)\r\n\r\n    ensure\r\n-     Fixnum.send :public, :/\r\n+     Fixnum.module_eval do\r\n+       remove_method :/\r\n+       alias :/ :old_slash\r\n+     end\r\n   end\r\n\r\n   def test_distance_in_words\r\n```"}]},{"timestamps":[{"ts":1377006622000,"body":":+1: "},{"ts":1377009907000,"body":"Before we where checking if the class is a direct child of `Base`. Now we are not ensuring this anymore. I can't have sure this will not break anything. Tests cases can be missing, and new one should be added"},{"ts":1377042147000,"body":"Yeah, this is subtly different. Is `<` overrideable?"},{"ts":1377071908000,"body":">Is < overrideable?\r\n\r\nYes, although since there is reference to regular `.class` (neither instance nor singleton class), overriding would only work for the entire class, which is far less flexible and more prone to side effects than the ability to override a method on an instance or singleton class."},{"ts":1377091843000,"body":"The only difference I see between `is_a?` and `class.<` is related to comparable class itself (i.e `A.new.is_a?(A) == true`, but `A < A == false`). But as I have mentioned above, ActiveRecord::Base can not be instantiated, so its direct instance can't be passed in this method.\r\n\r\nThe duck-typing is common in ruby, and if developer can implement some class, whose instances behave like  ActiveRecord::Base instances, why not?\r\n\r\nI can write some tests, if you point me on untested behavior."},{"ts":1377092170000,"body":"@Mik-die tests only to the feature you added should be fine."},{"ts":1377462124000,"body":"@rafaelfranca  I add test that describes desired behavior"},{"ts":1377569170000,"body":"A CHANGELOG entry and we can :shipit: "},{"ts":1377605469000,"body":"@rafaelfranca, done!"},{"ts":1377605562000,"body":"@Mik-die please squash your commits."},{"ts":1377618888000,"body":"@rafaelfranca how do you think, can I open new PR to backport this patch into 4-0-stable? I consider this patch more as bugfix."},{"ts":1377620192000,"body":"I see this more as a new feature, so I prefer to not backport to a stable branch. I'd consider this a bug fix if it worked in the past and now it is not working, but it never worked."},{"ts":1377620550000,"body":"Ok, thank you!"}]},{"timestamps":[{"ts":1357845839000,"body":"Can you actually describe the issue in the commit message, please? It's very non-descriptive right now.\r\n\r\nAlso, a test would be nice. Thanks :)"},{"ts":1358187598000,"body":"Let me know if I am on the right track."},{"ts":1358793045000,"body":"Please squash your commits"},{"ts":1372513765000,"body":"Could you add a changelog entry?"},{"ts":1372687969000,"body":"I made a mess, but here you go."}]},{"timestamps":[{"ts":1374055667000,"body":"#11469 to master is enough. It will be backported once it's merged to the relevant branches.\r\n\r\nThanks for your work :yellow_heart: "}]},{"timestamps":[{"ts":1363082324000,"body":"@jonleighton @carlosantoniodasilva what do you think?"},{"ts":1363091719000,"body":"Overall it looks good, just afraid that people could be using `uniq_value` directly, and that could break?"},{"ts":1363091820000,"body":"@carlosantoniodasilva we could alias it too..."},{"ts":1363351106000,"body":"Seems good to me. I agree about aliasing `uniq_values`. We should probably explicitly mention that `uniq` is \"soft deprecated\" and may be switched back to doing `to_a.uniq` in the future, so new code should definitely be written using `distinct`."},{"ts":1363352664000,"body":"@jonleighton I alias `#uniq_value` and described the silent deprecation."},{"ts":1363353930000,"body":":+1: :heart:"},{"ts":1376818558000,"body":"this seems wrong, distinct is a parameter specifically to the count expression `COUNT(DISTINCT date(attr))`,  so it's completely logical for it to be a parameter to the AR analogue of COUNT, the count method.  Separating distinct from count does not make sense.  \r\n\r\n```\r\n.count('date(attr)', distinct: true)\r\n```\r\nis this supposed to be a replacement for the above?\r\n```\r\n.distinct. ...possible intervening chain... .count('date(attr)')\r\n```\r\nthis both reads wrong, and produces unintended (albeit innocuous in this case) sql:\r\n\r\n```\r\nSELECT DISTINCT COUNT(DISTINCT date(created_at))\r\n```"},{"ts":1376923035000,"body":"`.count('DISTINCT date(attr)')` should work fine."},{"ts":1376928924000,"body":"so would `.count_by_sql`, but why is it deemed necessary to break `count('expression', distinct: true)`"},{"ts":1376932448000,"body":"The reason is to make the API consistent with our view of not passing options to finders/calculations methods. It is a matter of reducing the API possibilities to focus on what is important.\r\n\r\nThis feature in my opinion doesn't add anything over `.count('DISTINCT date(attr)')`, so we don't need to keep it."},{"ts":1376935958000,"body":"> This feature in my opinion doesn't add anything ...\r\n\r\nThat may be an argument for rejecting a feature request, but not for introducing a breaking change.\r\nWe are talking about one line of code: `distinct = options[:distinct] `\r\nIt and the code that relies on it `.count('expression', distinct: true)` are not so offensive that a breaking change is needed."},{"ts":1376937076000,"body":"In my opinion keeping the API consistent is worth a breaking change. There were also special cases where `distinct: true` did not work. For example PostgreSQL allows you to do a distinct on multiple columns:\r\n\r\n```sql\r\nSELECT COUNT(DISTINCT(name, email)) FROM members;\r\n```\r\n\r\nIt's better to let the user know that he can specify the exact count clause than abstracting that away with the `distunct: true` option.\r\n\r\n```ruby\r\nMember.count(\"DISTINCT(name, email)\")\r\n```\r\n\r\nAlso the `Relation#distinct` method is there to be combined with `select´:\r\n\r\n```\r\nPerson.select(\"name\").distinct.count\r\n```\r\n\r\nThose two avenues provide a more complete API and there is no more need to keep the third option (passing `distinct: true`) around."},{"ts":1376938296000,"body":"> That may be an argument for rejecting a feature request, but not for introducing a breaking change.\r\n\r\nYes, it is an argument to introducing a breaking change too for two reasons:\r\n\r\n1. Rails Core don't want to maintain this feature in the future. The behavior introduced by this feature is not worth the maintenance cost or the doubts that it can introduce for the users like the examples @senny added in the last comment. \r\n2. Rails 4 was a major release so breaking changes are expected and it was the best moment to remove code that doesn't fit the direction the framework is taking or doesn't seems a good API."}]},{"timestamps":[{"ts":1361824542000,"body":"All tests are green?"}]},{"timestamps":[{"ts":1367929791000,"body":"@tenderlove this might be ready for your review now."},{"ts":1367948373000,"body":"Sorry, I should have reviewed more closely, but this PR seems wrong.  I'm reverting the merge commit.  Can you check the pg tests and resubmit?  Specifically we're getting a failure on: `PostgresqlUUIDTestNilDefault#test_id_allows_default_override_via_nil`"}]},{"timestamps":[{"ts":1374525962000,"body":"Thank you"},{"ts":1374526196000,"body":"@rafaelfranca Welcome! :heart:\r\n\r\nApparently I forgot how to github, can you close #11540 too"},{"ts":1374527857000,"body":"Done. Github only closes issues automatically if the code reach the master branch now."},{"ts":1374528182000,"body":"@rafaelfranca Thank you for clarifying, TIL! :sparkling_heart: "}]},{"timestamps":[{"ts":1363137324000,"body":"Thanks, but 2-3 does not receive any more updates. Check the [maintenance policy](http://weblog.rubyonrails.org/2013/2/24/maintenance-policy-for-ruby-on-rails/) for more info."},{"ts":1363137560000,"body":"Boo ok I guess I'll have to maintain this branch for a while :P "}]},{"timestamps":[{"ts":1362836710000,"body":"Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1372866898000,"body":"Generally, semantic changes are not accepted unless there are other changes around it (i.e. fixing a bug, adding a feature, refactoring, etc).\r\n\r\n\\cc @rafaelfranca"},{"ts":1372867166000,"body":"Yes, @mattdbridges is right, changes considered as cosmetic are usually not applied because they make the history harder to follow, but they are ok when coming with changes in related code. Thanks!"}]},{"timestamps":[{"ts":1360430980000,"body":"I usually add notice messages for my destroy messages, so I agree with this change, but we'll need to see what others think.\r\n\r\nIn any case, it probably needs some test like the others, and a changelog entry. Plus I'm unsure `deleted` is the best word to be in there by default. Thanks!"},{"ts":1360432586000,"body":"@carlosantoniodasilva I was looking for where to write a test case for this. I haven't found test cases where we are checking messages.\r\nCan you help me? "},{"ts":1360437787000,"body":"I would say 'destroyed' instead of deleted, too."},{"ts":1360439068000,"body":"Yes I think soo...\r\n"},{"ts":1360439247000,"body":"Updated code"},{"ts":1360445002000,"body":"@rahul100885 seems like you found it, but yeah, apparently other messages are not checked. Anyway, seems good to me, thanks!"}]},{"timestamps":[{"ts":1359546115000,"body":"@hone is this present on 3-2-stable as well?"},{"ts":1359566353000,"body":"Funny thing, I found that if I touched the database.yml, it would continue past this point and pick up DATABASE_URL along the way... but only sort of. Just want to make sure that the solution is comprehensive to rake db:*"},{"ts":1359618914000,"body":"@rafaelfranca it looks like it's broken in [3-2-stable](https://github.com/rails/rails/blob/master/railties/lib/rails/application/configuration.rb#L103) as well. Should I be sending a PR to that too?"},{"ts":1359649989000,"body":"@hone yes please"},{"ts":1359650002000,"body":"Also, could you add a CHANGELOG entry?"},{"ts":1359650022000,"body":"And tests would be great too"},{"ts":1359866538000,"body":"@rafaelfranca sure thing, I'll get those things in when I get chance. Thanks for considering. I'll ping you when I've updated this pull request."},{"ts":1362251401000,"body":"How is this any standardization if we just hardcoded Active Record inside the railtie gem?!"}]},{"timestamps":[{"ts":1373961504000,"body":":+1: \r\n\r\n/cc @josevalim @tenderlove "},{"ts":1373987381000,"body":"Just a couple of things.\r\n\r\n1) Should we use directly json lib or use it through AS. Not sure about the latest changes in AS related to this\r\n2) Merge the tests with the commit so it's easier to track using blame"},{"ts":1374115103000,"body":"@spastorino Thanks for the comments. I've squashed the commits and am now using the `ActiveSupport::JSON` library."},{"ts":1374119438000,"body":":+1: from me, I'd leave this for Aaron \"@tenderlove\" Patterson to merge :)"},{"ts":1374515979000,"body":"Can we remove the setters?  I'd rather that this object cannot be mutated (as it introduces threading issues).  I think having a default event name and retry is fine, but it should be set on the constructor.  e.g.:\r\n\r\n```ruby\r\nsse = SSE.new(response.stream, event: 'event-name', retry: 300)\r\nsse.write \"blah\"\r\nsse.write \"blah\", id: 10\r\nsse.write \"blah\", id: 10, event: 'other-event'\r\nsse.write \"blah\", id: 10, event: 'other-event', retry: 500\r\n```\r\n\r\nI think this is a good place to use keyword args."},{"ts":1374523094000,"body":"What a very clean and nice pull request! :+1: \r\n\r\n> I think this is a good place to use keyword args.\r\n\r\nIsn't master targeting 4.1.0 ? (or maybe 4.1.0 will requires Ruby 2.0 as the minimum version)."},{"ts":1374524383000,"body":"Master is targeting 4.1, yes, but I don't believe that we will be requiring Ruby 2.0 until Rails 5. Don't quote me on that, though. ;)"},{"ts":1374524796000,"body":"Probably shouldn't use keyword arguments here until a little later then?"},{"ts":1374562418000,"body":"@tenderlove I've made your suggested changes and I've also added a list of whitelisted options. (I'm not sure whether its better practice to whitelist the possible SSE options, or to just let the user choose whatever options he likes) "},{"ts":1375169032000,"body":"@lucasmazza Thanks for the comment, I've updated the PR to include the the setting of the response headers."}]},{"timestamps":[{"ts":1371633632000,"body":"thanks :yellow_heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1369556531000,"body":"Thanks @mokevnin. Is there any particular reason for this change? If it is cosmetic reasons (for example, you find it more readable), this should not be accepted. Also, keep in mind that `.empty? != .any?`."}]},{"timestamps":[]},{"timestamps":[{"ts":1361735137000,"body":"/cc @sikachu \r\n\r\n@rafaelfranca could you check this one?"}]},{"timestamps":[{"ts":1356717479000,"body":"Seems good, thank you for the comment especially! :heart:"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1364495172000,"body":"Ack.  Sorry about that.  Meant to PR on our fork."},{"ts":1364498941000,"body":":+1:"}]},{"timestamps":[{"ts":1374119071000,"body":"Could you put the changelog entry on the top?"}]},{"timestamps":[{"ts":1362668814000,"body":"/cc @carlosantoniodasilva @rafaelfranca "}]},{"timestamps":[]},{"timestamps":[{"ts":1368452823000,"body":"We call these `before_action`s now, so the test should probably use that."},{"ts":1368454772000,"body":"@steveklabnik you're right I updated this. I was working on [this](https://github.com/rails/rails/issues/9703?source=cc) issue, and while I was changing some code I noticed that this test do not exists and I think that is needed and is independent from the issue"}]},{"timestamps":[{"ts":1368545987000,"body":"I think it was fixed by #10616. Could you check?"},{"ts":1368546232000,"body":"@rafaelfranca Oops, looks like I am about 3 hours late :crying_cat_face: "},{"ts":1368547541000,"body":"Yeah @rafaelfranca, this is fixed by #10616.\r\n\r\nBTW @zzak, this backport doesn't include the core fix, which was the change in finder_methods. If you were to port the tests in finder_tests, they would fail."},{"ts":1368547607000,"body":"Thank you form confirming"},{"ts":1368547617000,"body":"@zzak thank you for your pull request"},{"ts":1368547815000,"body":"@Empact I saw that, so I wasn't sure and skipped it, hoping someone could point me in the right direction there. But you already fixed it, haha maybe next time!\r\n\r\n@rafaelfranca np! thanks for pointing out my mistake."}]},{"timestamps":[{"ts":1374964002000,"body":"@carlosantoniodasilva done! thanks.\r\n\r\nOops... \r\n\r\nhttp://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#updating-the-changelog\r\n\r\n> Refactorings and documentation changes generally should not go to the CHANGELOG."}]},{"timestamps":[{"ts":1360147574000,"body":"Please use the github issue notation \"#NUMBER\" when referring to other issues. This will create link between the issues (I edited your message)."},{"ts":1363547143000,"body":"Single-quoted strings are NOT VALID JSON. See section 2.5 here: http://www.ietf.org/rfc/rfc4627.txt\r\n\r\nFor that matter, single-quoted values as keys (ie, `'foo'` in `{'foo': 'bar'}`) aren't even valid *Javascript*.\r\n\r\nShort story shorter: if you're producing \"JSON\" with single quotes, you are wrong. If somebody is sending you \"JSON\" with single quotes, THEY are wrong. Error out and tell them to fix their broken code."},{"ts":1363547768000,"body":"I'm closing this one. As @al2o3cr mentioned single quoted keys aren't valid and we don't support them."}]},{"timestamps":[{"ts":1371804254000,"body":"Thanks @fxn! :heart: "},{"ts":1371804559000,"body":"Likewise, thanks for the backports :heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1356547388000,"body":"According to [wikipedia](http://en.wikipedia.org/wiki/Plural):\r\n\r\n> Treatments differ in expressions of zero quantity: English often uses the plural in such expressions as no injuries and zero points, although no (and zero in some contexts) may also take a singular.\r\n\r\nBut ultimately it boils down to I18n since other languages like french use the singular form. For such, one can use the pluralize feature available in I18n."},{"ts":1356547637000,"body":"Thanks for the answer. Have a nice day."}]},{"timestamps":[{"ts":1357672304000,"body":"@jamis maybe it is good to add a test case to avoid regression. If it is not easy or possible to do a comment would instruct others contributors about the issue to extract that code to class level."},{"ts":1357832576000,"body":"Thank you sir :tophat: "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1366040959000,"body":"Seems good to me. Could you add a CHANGELOG entry?"},{"ts":1366041030000,"body":"Also the `Subscriber` class will need documentation, its public methods too since it will be part of the public API"},{"ts":1366114564000,"body":"@rafaelfranca I've implemented the changes you suggested – care to take another look?"},{"ts":1366114776000,"body":"Seems good. Could you squash your commits?"},{"ts":1366116169000,"body":"@rafaelfranca done."}]},{"timestamps":[{"ts":1365607537000,"body":"@neerajdotname please use \\`\\`\\` to format the code (I edited your message)."},{"ts":1365607565000,"body":"thanks for the patch :heart: "},{"ts":1365610984000,"body":"@senny sorry about that. And thanks for fixing. "},{"ts":1365644241000,"body":"This commit does not work with Oracle enhanced adapter.\r\n\r\n```ruby\r\n$ ARCONN=oracle ruby -Itest test/cases/relation_test.rb -n test_relation_merging_with_merged_joins\r\nUsing oracle\r\nRun options: -n test_relation_merging_with_merged_joins --seed 47159\r\n\r\n# Running tests:\r\n\r\nE\r\n\r\nFinished tests in 0.232510s, 4.3009 tests/s, 0.0000 assertions/s.\r\n\r\n  1) Error:\r\nActiveRecord::RelationTest#test_relation_merging_with_merged_joins:\r\nActiveRecord::StatementInvalid: OCIError: ORA-00979: not a GROUP BY expression: SELECT \"POSTS\".* FROM \"POSTS\" INNER JOIN \"COMMENTS\" ON \"COMMENTS\".\"POST_ID\" = \"POSTS\".\"ID\" AND \"COMMENTS\".\"TYPE\" IN ('SpecialComment', 'SubSpecialComment') LEFT OUTER JOIN \"RATINGS\" ON \"RATINGS\".\"COMMENT_ID\" = \"COMMENTS\".\"ID\" WHERE \"POSTS\".\"AUTHOR_ID\" = :a1 AND \"COMMENTS\".\"TYPE\" IN ('SpecialComment', 'SubSpecialComment') GROUP BY posts.id\r\n    stmt.c:230:in oci8lib_200.so\r\n    /home/yahonda/.rvm/gems/ruby-2.0.0-p0@railsmaster/gems/ruby-oci8-2.1.5/lib/oci8/cursor.rb:126:in `exec'\r\n    /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_oci_connection.rb:143:in `exec'\r\n    /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:759:in `block in exec_query'\r\n    /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:425:in `block in log'\r\n    /home/yahonda/git/rails/activesupport/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\r\n    /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:420:in `log'\r\n    /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:1501:in `log'\r\n    /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:739:in `exec_query'\r\n    /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:1455:in `select'\r\n    /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:24:in `select_all'\r\n    /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:63:in `select_all'\r\n    /home/yahonda/git/rails/activerecord/lib/active_record/querying.rb:36:in `find_by_sql'\r\n    /home/yahonda/git/rails/activerecord/lib/active_record/relation.rb:561:in `exec_queries'\r\n    /home/yahonda/git/rails/activerecord/lib/active_record/relation.rb:447:in `load'\r\n    /home/yahonda/git/rails/activerecord/lib/active_record/relation.rb:196:in `to_a'\r\n    test/cases/relation_test.rb:185:in `test_relation_merging_with_merged_joins'\r\n\r\n1 tests, 0 assertions, 0 failures, 1 errors, 0 skips\r\n$\r\n```\r\n\r\nEvery column selected also needs to be written in `group by` clause. I do not have fix yet, just posted errors."}]},{"timestamps":[{"ts":1368504234000,"body":"cc @tenderlove "},{"ts":1368729770000,"body":"Can you rebase this please?"},{"ts":1368761821000,"body":"Messed up the rebase, Closing in favour of https://github.com/rails/rails/pull/10659"}]},{"timestamps":[{"ts":1363492167000,"body":"Relates to #8546\r\n\r\n/cc @carlosantoniodasilva @spastorino"},{"ts":1363533350000,"body":"@rafaelfranca wdyt about that test?"},{"ts":1363537038000,"body":"Removed and squashed."},{"ts":1363537168000,"body":"Thanks"}]},{"timestamps":[{"ts":1360259580000,"body":"This change has the downside of creating a block scope in that method that would not otherwise exist - e.g.:\r\n\r\n    some_variable = \"defined\"\r\n    define_method :my_method do\r\n      puts some_variable # prints \"defined\" when called\r\n    end\r\n\r\n    class_eval <<-EOV, __FILE__, __LINE__ + 1\r\n      def my_method\r\n        puts some_variable # no method error when called\r\n      end\r\n    end\r\n\r\nThis may or may not have performance implications depending on where and how often these methods are called. I think the define_method way is cleaner, but scope switching has bitten me before."},{"ts":1360259696000,"body":"Also, there's another instance of class_eval in this file, you may want to either do both or neither."},{"ts":1360530990000,"body":"I believe I have squashed the commits and changed everything else. Is there anything else left before accepting this pull request?"},{"ts":1360535317000,"body":"Hmm, github diff shows changes related to `valid_type?` as well, I believe those aren't supposed to be here?"},{"ts":1360649250000,"body":"I believe I have squashed the commits and gotten rid of any of the valid type issues I had. Can anyone confirm this?"},{"ts":1360654314000,"body":"It seems fine for me :)"},{"ts":1360678019000,"body":"Thanks!"}]},{"timestamps":[{"ts":1377944242000,"body":"Hrm, this is not a good idea. Why do you want to change cookies and sessions when something goes wrong? What if manipulating the cookies and sessions is exactly what made your application break? The exception handling should have as little logic as possible and manipulating session and cookies should not be one of them."}]},{"timestamps":[{"ts":1372200326000,"body":":cool: "},{"ts":1372201228000,"body":"Also please add `[ci skip]` to your commit message, and squash everything. Thanks."},{"ts":1372390682000,"body":"@carlosantoniodasilva, I probably could have done that more gracefully. In any case, how is this pull request now?"},{"ts":1372421990000,"body":"@drewda Looking great, thanks."}]},{"timestamps":[{"ts":1370308576000,"body":"Wrong number of commits."}]},{"timestamps":[{"ts":1373719241000,"body":"this looks good. Please include a CHANGELOG entry."},{"ts":1373719512000,"body":"@senny done."},{"ts":1373720021000,"body":"Thanks for your contribution :yellow_heart: "}]},{"timestamps":[]},{"timestamps":[{"ts":1367945937000,"body":"Hi, can you send this PR against master rather than 4-0-stable?"},{"ts":1367949485000,"body":"All set. Sent as a new pull request: https://github.com/rails/rails/pull/10503"},{"ts":1368310798000,"body":"Since a new PR has been sent, I'm closing this PR. "}]},{"timestamps":[{"ts":1373237985000,"body":"Please review https://github.com/rails/rails/pull/5329#issuecomment-4667856 about similar problem."},{"ts":1373238840000,"body":"This particular predicate documents the singleton `true`, and albeit the alternative is not documented it would be expected to be the singleton `false`.\r\n\r\nThis is not the way we write predicates generally, but in a large code base is difficult to be 100% consistent in a detail like this. I believe this patch has to be applied.\r\n\r\nAdditionally, the test suite has assertions for a generic predicate, it is based on the bare `assert`. The test suite should also be revised to test the actual contract, which is stronger.\r\n"},{"ts":1373239311000,"body":"@fxn I agree, this is the behavior I expected from the documentation.  Either the method or the documentation needs to be fixed."},{"ts":1373240600000,"body":":cool:"},{"ts":1373360746000,"body":":+1: "}]},{"timestamps":[{"ts":1364909754000,"body":"This is resolvable with the `uniq` option of has_many.\r\n\r\n    class Classroom\r\n      has_many :blackboards, uniq: true\r\n    end\r\n\r\nhttp://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many"},{"ts":1364913845000,"body":"Ha!  I just posted about a very similar issue in the google group with has_many :through — namely, the << operator adds records to via the join table without any checks for existence also.\r\n\r\n*and the uniq option only applies to how associated objects are retrieved, not stored*\r\n\r\nSo if, in my use case, I have options set on the join table, I'm forced to do an extra exists? check to make sure I don't get duplicate join records.\r\n\r\nI would it would make more sense to either:\r\n\r\n1) Have uniq check on create as well\r\n2) Have a different option (like uniq_on_create) that checks for an existing join record.  I'm of two minds as to whether an exception should be raised if a record already exists or not.. my gut says it would succeed without actually creating a record, but I'd imagine there's precedent in other ActiveRecord calls."},{"ts":1364916717000,"body":"@dmathieu I was thinking more along the lines of what @mbhnyc was thinking, where I don't persist any records which are duplicates. But it is a good point that maybe this functionality should be put into an association option.\r\n\r\nI'd say that this functionality should be added to the ``uniq`` option, since making a completely new option like ``uniq_on_create`` seems like overkill. Also, I think removing duplicates when the association is persisted is better than the current functionality of ``uniq``, since the current ``uniq`` will load everything from the join table and remove the records that were already seen.\r\n\r\nI'll go ahead and change the PR to do this. "},{"ts":1364916792000,"body":"I believe the fact that `uniq` only applies when retrieving objects is a bug. And this should be treated as such."},{"ts":1364916936000,"body":"@dmathieu Cool, I'm going to close this PR until I have a solution to the ``uniq`` problem and reopen then. Thanks for comments!"},{"ts":1364919318000,"body":"+1 really excited to see movement on this, thanks @dmathieu @wangjohn — let me know if I can help in any way"},{"ts":1364921658000,"body":"I've talked with @jeremy about this issue and it seems like it doesn't really make sense to add a ``uniq`` check on insertion of records because of the possibility of race conditions. For example, the ``validates_uniqueness_of`` method http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html falls prey to race conditions, and adding a uniqueness check on insertion doesn't necessarily provide guarantees. \r\n\r\nThe best way to get around this is to just use a uniqueness index in the join table itself. For example, something like:\r\n```ruby\r\nadd_index :table_name, :column_name, :unique => true\r\n```"},{"ts":1364926754000,"body":"Interesting — well we should improve the API documentation at the very least to make this clear, i'll take a crack at it unless someone's already in the middle"},{"ts":1364928261000,"body":"@mbhnyc Yep, I'm taking care of the docs in this PR: https://github.com/rails/rails/pull/10053."},{"ts":1367537186000,"body":"Hi, I came from the issue #8573.\r\nI understand about the race conditions.\r\nIMO, raising the DB constraints error / unique validation error (as mentioned by @wangjohn) is the same thing. Adding an unique validation still does not improve usefulness; it just provides you a chance to catch the exception. You must catch it every time you deal with the association.\r\n\r\nSo,\r\n\r\n```ruby\r\nperson.tags << tag unless person.tags.exists?(id: tag.id)\r\n```\r\ncan't this be a simple workaround for those requiring an easy de-duplications?\r\nYou will just get the validation error as usual, if forgot to check existence."}]},{"timestamps":[{"ts":1372504781000,"body":"Changelog entry please"},{"ts":1372505077000,"body":"Sure, there wasn't a changelog file so I just restored it with just my entry, is that correct?"},{"ts":1372505254000,"body":"On 4-0-stable it should be in the actionpack CHANGELOG"},{"ts":1372505532000,"body":"Corrected :)"},{"ts":1372505658000,"body":" :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"},{"ts":1372506033000,"body":"Thanks for the help :)"}]},{"timestamps":[{"ts":1366724451000,"body":"This is only a cosmetic change. Those aren't usually merged, sorry."},{"ts":1366724927000,"body":"How is this cosmetic? Its a bit faster, losing 2 operations."},{"ts":1366725391000,"body":"@dmathieu just for ref: https://gist.github.com/vipulnsward/768bcf54ed67dbac4b06\r\nIt would be fine if this gets rejected to maintain code-style maybe."},{"ts":1366725717000,"body":"I don't think this kind of micro optimization is worth the change. It really has a very small impact."},{"ts":1366726113000,"body":"```ruby\r\nrequire \"benchmark\"\r\n \r\nBenchmark.bm(7) do |x|\r\n  x.report(\"before:\")   do\r\n    (1..100000).each do\r\n      method = []\r\n      method << \"value = nil\"\r\n      method << \"halted = false\"\r\n    end\r\n  end\r\n  x.report(\"after:\") do\r\n    (1..100000).each do\r\n      method =  [\"value = nil\", \"halted = false\"]\r\n    end\r\n  end\r\nend\r\n\r\n              user     system      total        real\r\nbefore:   0.090000   0.000000   0.090000 (  0.092787)\r\nafter:    0.080000   0.000000   0.080000 (  0.078116)\r\n```\r\n\r\nYou are right.  But, it seems like it also makes the code cleaner.  Not worth a huge debate over it tho."}]},{"timestamps":[{"ts":1372960264000,"body":"No matter where the code is inserted (as part of a URL is suspicious, but anyway), it is the responsibility of the emitter and the receiver to encode and decode appropriately. I wonder if this means there is a bug somewhere else."},{"ts":1372960327000,"body":"@fxn I agree with you but I think merging this pull request would be a good idea regardless. :)"},{"ts":1372960661000,"body":"The patch is strange, a maintainer would read and wonder why on earth does the code need to be URL safe? Who is interpolating the code verbatim? And in a URL?\r\n\r\nThat line deserves a comment to explain why it is done that way I believe, and I find it hard to justify. \"Just in case\" is not a good rationale, there are many things that are not URL safe and go in forms.\r\n\r\nWe should really understand what use case is that line fixing I believe.\r\n"},{"ts":1372964139000,"body":"I agree we should fix the bug **if** there is a bug in Rails.\r\n\r\nI know it doesn't apply here but in Devise we had similar issues in tokens sent in e-mail, because when autolinking, some e-mail clients would escape the + and others would not. Once we realized we should escape it and then fixed it, we noticed some clients were escaping it again...\r\n\r\nThe theory is great, but in practice, some software somewhere is going to make sure it doesn't work as expected. Regardless, @xuanxu could you please tell us more on how to reproduce the failure you are seeing?"},{"ts":1372965513000,"body":"@josevalim exactly, if we have some concrete examples where practice differs from theory like those then I believe it is justified to be robust. In such case, a code comment would document one of these concrete use cases so that the next guy understands what justifies the line.\r\n\r\nBut we are talking about CSRF token, do we have such example?\r\n"},{"ts":1372971759000,"body":"OK, I'll try to make a simple app reproducing the failure."},{"ts":1373365135000,"body":"I've found the bug and it is not in Rails, it was an external library doing the encoding wrong (escape_utils) due to a bug. So if you don't have in mind a use case where the base64 can be problematic I'm ok with closing the issue."},{"ts":1373365249000,"body":"For this feature I don't think there is a placa where base64 is problematic. Thank you for reporting back"},{"ts":1373366184000,"body":"For the archives, [this bug in houdini](https://github.com/vmg/houdini/issues/10) is the culprit, if you patch Rack's unescape with the one provided by [escape_utils](https://github.com/brianmario/escape_utils). Due to that, **all** fields in forms get a space where there was a \"+\" originally, affects the token only as a particular case.\r\n"},{"ts":1377968794000,"body":"@fxn thanks for the pointer, this was driving me crazy, while also being a real pain to debug/google.\r\n\r\n * Authenticity token plus character escape whitespace,\r\n * authenticity_token plus character escape whitespace,\r\n * Can't verify CSRF token authenticity.\r\n\r\nbrianmario/escape_utils#31, brianmario/escape_utils#46."}]},{"timestamps":[{"ts":1376095721000,"body":"@rafaelfranca You were working on action callbacks in #11583, I wonder if I could get your eyes on this one-word patch. It looks like the issue was introduced 2 years ago in this commit 1c61f7e6cb2882907fa85fabbf147937f5cc07bf. \r\n"},{"ts":1376123020000,"body":"Awesome, seems good! :-) Anyway, I think it will need a changelog entry. "},{"ts":1376151445000,"body":"I've added a changelog entry. What's the process for getting this into the next 4.0 release? I'd hate to have to keep using my fork of Rails until 4.1 gets released."},{"ts":1376151778000,"body":"Since this is a bug, I think that the \"merger\" will backport it to the `4-0-stable` branch so it will certainly be fixed in 4.0.1."},{"ts":1376152067000,"body":"Yes. I'll merge as soon I'm get my computer. I had this regression too and\r\nwas in my todo list. Thank you for fixing.\r\nOn Aug 10, 2013 1:23 PM, \"Robin Dupret\" <notifications@github.com> wrote:\r\n\r\n> Since this is a bug, I think that the \"merger\" will backport it to the\r\n> 4-0-stable branch so it will certainly be fixed in 4.0.1.\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/11799#issuecomment-22442610>\r\n> .\r\n>"},{"ts":1376152095000,"body":"Awesome! Thanks for looking at it. While I'm monopolizing your attention, if you're looking for more regressions, here's another #11824."}]},{"timestamps":[{"ts":1364990863000,"body":"/cc @steveklabnik"},{"ts":1364990897000,"body":"This is awesome!"},{"ts":1364992565000,"body":"Awesome @rubys, thank you :heart:"},{"ts":1364994483000,"body":"great! :yellow_heart:\r\n\r\nmaybe we can squash the commits together."},{"ts":1364995866000,"body":":+1: "},{"ts":1365008576000,"body":"Thank you very much sir!!! :heart: :heart: :heart:"},{"ts":1365008730000,"body":"Soooooo good."}]},{"timestamps":[{"ts":1372362631000,"body":"@rafaelfranca @jonleighton can you take a look?"},{"ts":1372364936000,"body":"Happy to remove this code :+1:"},{"ts":1372495882000,"body":"thanks for the feedback. I updated the PR."},{"ts":1372497309000,"body":"Wait for travis and :shipit: "},{"ts":1372499529000,"body":"Travis passed! So I will :shipit: \r\n\r\n:+1:  :confetti_ball: "}]},{"timestamps":[]},{"timestamps":[{"ts":1376398790000,"body":"this is dup of #11496"},{"ts":1376399088000,"body":"@pftg my bad, thanks!"},{"ts":1376399189000,"body":"Thanks to you, I'd like to use your tests, is it ok?"},{"ts":1376399248000,"body":"@pftg Definitely, I'd recommend a changelog entry too."},{"ts":1376399317000,"body":"thanks"}]},{"timestamps":[{"ts":1367091715000,"body":"Please comment on #7764 if you'd like to discuss #7764, opening a pull request with a dummy patch doesn't help anything."},{"ts":1367148581000,"body":"Sorry, @steveklabnik, wasn't thinking, just trying to encourage a patch :/"},{"ts":1367157626000,"body":"It's all good. <3"}]},{"timestamps":[{"ts":1361905780000,"body":"Now this one doesn't merge cleanly. ;) I cherry-picked and fixed it for you, since you had to do that three times with the last one.\r\n\r\nThank you! :heart:"},{"ts":1361905794000,"body":"https://github.com/rails/rails/commit/55a1765942bc3d78ba5d449b5daf17a3c902e57c"},{"ts":1361927381000,"body":"Thank you for cherry-pick! :octocat: "}]},{"timestamps":[]},{"timestamps":[{"ts":1372735983000,"body":"@rafaelfranca updated. I was wondering if we need a changelog entry for this."},{"ts":1372776453000,"body":"Yes. Since it is a bug fix"}]},{"timestamps":[{"ts":1364564470000,"body":"Looks good. Please go ahead and add a change log.\r\n\r\nVery small nitpick. `ii` does not feel right when looking at code. I would change `ii` to `i` and `i` to `interest`.\r\n\r\nOtherwise patch is good. /cc @jonleighton \r\n\r\n\r\n"},{"ts":1364574257000,"body":"I don't like it much either. I was just following style in the rest of the file.\r\nWill do it tomorrow with the changelog.\r\n\r\n29. 3. 2013 v 14:41, Neeraj Singh <notifications@github.com>:\r\n\r\n> Looks good. Please go ahead and add a change log.\r\n> \r\n> Very small nitpick. ii does not feel right when looking at code. I would change ii to i and i to interest.\r\n> \r\n> Otherwise patch is good. /cc @jonleighton\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub."},{"ts":1364821912000,"body":"@neerajdotname done"}]},{"timestamps":[{"ts":1359387014000,"body":"@michiels thanks for the PR. Same happens here https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/caching.rb#L86 and here https://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/url_helper.rb#L517\r\n\r\nCan you fix those cases too?.\r\nThanks a lot for helping :)"},{"ts":1359387208000,"body":"Sure thing! Will put them up as new pull requests. I am thinking about abstracting the GET/HEAD check into a request.like_get? or something. However, doing something like `request.get? || request.head?` is more explicit in most cases, and I don't see HTTP spec change that soon ;)"}]},{"timestamps":[{"ts":1373191559000,"body":"PR updated. \r\n\r\nthanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1374449310000,"body":"@Empact I hope that this will not change into next several months back and forth, but could you fix your commit messages to be more in line with guidelines: http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#commit-your-changes ?"},{"ts":1374449487000,"body":"@Empact also, the last commit changes behaviour of a method, we would need a deprecation to change that"},{"ts":1374449634000,"body":"I'm also not really sure if I'm +1 with efc585a, while it's best to use it with column in rails when we have a column information, it's valid to use it without a column in your app (unless it's a private API, but I don't think it is)."},{"ts":1374450877000,"body":"Thanks for the feedback, I'll revise the commit messages later tonight.\r\n\r\nAFAIK changing the quote_value signature without deprecation is alright because it is an undocumented method, as signified by the nodoc."},{"ts":1374451101000,"body":"@Empact you're right, I totally missed the :nodoc: part, it's fine to do it in such situation"},{"ts":1374497075000,"body":"How's that?"},{"ts":1374507702000,"body":"@Empact looks great! thanks for taking care of old PRs"},{"ts":1374510630000,"body":"Thanks! I'm going to try to make it a regular thing. :-)"}]},{"timestamps":[{"ts":1362443455000,"body":"It seems reasonable to me as well since we only have `where.not` now, but we need to hear more thoughts here. Also, I think a changelog entry would have to be added talking about the modification from beta1? Thanks @ernie."},{"ts":1362443747000,"body":"@carlosantoniodasilva One of these days I will remember we're maintaining the CHANGELOG more religiously now. That day was not today. Fixed.\r\n\r\nYeah, I hate the idea of modifying something like this late in the game, but it is a pretty simple change from a user standpoint, and cleans up the implementation quite a bit. Wish I'd had time to write this up earlier, before the beta went out."},{"ts":1362446069000,"body":"@jeremy since you proposed the API I think you should give your thoughts here.\r\n\r\ncc @dhh "},{"ts":1362452494000,"body":"Good instinct, @ernie. Only `not` made the initial cut, but the essential pattern for building up a where clause is good. We'll leave that ground for third-party libs to cover with `like`, `or`, `regexp`, etc, and see what crops up. Other operations may make the cut for core in future releases."},{"ts":1362492334000,"body":"@jeremy thanks for taking a look. Are you sure there isn't room for a bit more discussion on this one before closing it?\r\n\r\nLeaving aside the discussion of whether `where.<predicate>` is a good idea for the API for a moment, I'm concerned that we're locking ourselves in to a specific implementation before it's needed. It would be easy to at some point alter a `where_not` implementation to use a WhereChain and transition people to `where.not` should that API design prove useful for other predicates in the long run. As it sits, we're adding complexity to the `where` method, adding another class, and sending to private methods on the parent in order to make it all work, for something that people might extend in the future.\r\n\r\nBack in the AR 3.x days, we supported only equality (and, for certain value types, IN/BETWEEN). There was a good deal of discussion around what a more full-featured API for creating other ARel predicates might look like, among them @lifo's SuperCondition implementation, which formed the basis for MetaWhere at the time. The suggestion at the time was that we would take a look at what plugins were developed and seemed to be most useful and at some point in the future consider selecting one for integration into core.\r\n\r\nHere we are, 3 years later, and as best I can tell that isn't what is happening here. I haven't seen the implementation we've gone ahead with extensively tested in plugin form, but we're integrating it all the same. As such, I'm disappointed to see additional complexity in an implementation with the promise of some potential future ecosystem developing around it driving additions to core, when that has historically not been the case for the AR query API.\r\n\r\nGiven that I have skin in the game, here, I should clarify that I'm not necessarily saying that we *need* to implement Squeel's version of predicate building. I know it may not be for everyone. But I am saying that I built both MetaWhere and Squeel as proofs-of-concept based on the expectation that they would be included in the running for an eventual enhanced query builder API, and they have received far more real-world usage than the API we've landed on.\r\n\r\nMy last attempt at driving some discussion around this was at https://groups.google.com/d/msg/rubyonrails-core/evUmld2Mal4/PGFLjX9ZeNkJ and met with a lackluster response.\r\n\r\nTo summarize, these are the drawbacks I see with this approach at first glance:\r\n\r\n* Alteration of types (both duck- and actual) throughout a method chain, making order of messages being sent important where it previously was not\r\n* Existing methods for relation composition map closely to the query domain, mapping to specific clauses of the query for this most part. `where.not` (or, for that matter, `where_not`) breaks this trend\r\n* Should the pattern be extended to other predicates, we find ourselves chunking our where clauses by type of predicate instead of by related concept or attribute, or reverting back to string queries. The likelihood that scopes will hide this fact from typical application use cases does not prevent it from having a certain smell.\r\n* The implementation as it sits today is awkward (injecting the previous scope, sending to its private `build_where` method, and branching based on a number of possible return types then mutating and returning the injected scope), and we should stop to consider whether the feature envy is telling us something."},{"ts":1362612966000,"body":"No? Anyone?"},{"ts":1372347170000,"body":"bump"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1377095797000,"body":"Thank you for the pull request. We should be very cautious when adding something to the core extensions and we prefer to not add if it will not give a really good improvement in the way you write your code.\r\n\r\n`true`/`false` is a common idiom in the Ruby community and I don't think we need to change it.\r\n\r\nI'd recommend to you suggest this change to Ruby core instead. I don't think it belongs to Rails."}]},{"timestamps":[{"ts":1366594588000,"body":"@carlosantoniodasilva removed the extra whitespace. Mind having a look now."},{"ts":1366615214000,"body":"looks good :+1: "},{"ts":1366633273000,"body":"Thank you."}]},{"timestamps":[{"ts":1363132509000,"body":"Apparently @josevalim has something to say about this."},{"ts":1363136497000,"body":"This behavior is intentional. The goal of validations is too confirm user\r\ninput. A form will always send a blank value if the field is there, so the\r\nvalidation is triggered.\r\n\r\nNow, on console and apis, you don't need to set the field, exactly because\r\nit accepts nil.\r\n\r\nTherefore this is a feature, there is a post on plataformatec blog, but I'm\r\non my phone, so you will have to google it. :)\r\n\r\nThis topic comes once in a while, it would be worthy to add it to the\r\ndocumentation. If you want to really not accept nil, add a presence check.\r\n\r\n>\r\n>    -\r\n>\r\n>\r\n\r\n-- \r\n\r\n\r\n*José Valim*\r\nwww.plataformatec.com.br\r\nSkype: jv.ptec\r\nFounder and Lead Developer"},{"ts":1363146916000,"body":"I will add some documentation, I think this behavior is pretty terrible, but if that's the way it is, that's the way it is."},{"ts":1363152364000,"body":"Agreed. This is a botched way to handle nils from a form submission. Maybe there's a better solution to pop those nils out of the form's resource params instead?"}]},{"timestamps":[{"ts":1361308696000,"body":"Sorry, we don't accept cosmetic changes like this in Rails. If you were making some other change around here, this would be fine, but we try not to obscure the git history."}]},{"timestamps":[]},{"timestamps":[{"ts":1364228205000,"body":"@steveklabnik can you take a look?"},{"ts":1364236591000,"body":"Also, an 80 char wrap would be nice. :)"},{"ts":1364237448000,"body":":ok_hand: :heart: Thanks!"}]},{"timestamps":[{"ts":1368473388000,"body":"@jonleighton Here's the refactoring I mentioned at the La Conf after-party."}]},{"timestamps":[]},{"timestamps":[{"ts":1360257558000,"body":"(Closing. This is the wrong branch to merge this into)\r\n\r\nSorry for the spam folks."}]},{"timestamps":[{"ts":1358182951000,"body":"@rafaelfranca can you help me with this?"},{"ts":1358183408000,"body":"This fix seems correct."},{"ts":1358183943000,"body":"@josevalim Indeed, but it breaks half a dozen tests and I'm not sure how to fix them."},{"ts":1358184187000,"body":"Seems like `<%= b.label { b.radio_button + b.text } %>` is cause of a problem. I think that there problem inside example.  If you use builder, you shouldn't use <%=%>, as builder method will not return markup, usually it expected to return self.\r\n\r\nCorrect usage is \r\n```erb\r\n  <%= f.collection_radio_buttons :category, Category.all, :id, :name do |b|%>\r\n    <% b.label { b.radio_button + b.text } %>\r\n  <%- end%>\r\n```"},{"ts":1358184403000,"body":"That's the short term correct answer, I thought of that too :) Thanks @vimutter \r\n\r\nHowever, `form_for` captures the passed block and it should be the same in here, imo. Developers shouldn't be confused about whether to use one or another."},{"ts":1358198619000,"body":"@josemota yes, agree. Could you add some tests cases (for the raw template method and for the form helper)?"},{"ts":1358208681000,"body":"@rafaelfranca OK. I'll give it a stab and see if I can pull it off."},{"ts":1358550199000,"body":"So I'm picking on the topic and, as I said, I'm getting 6 failing tests that look exactly the same:\r\n\r\n    NoMethodError: undefined method `output_buffer=' for #<ActionView::Helpers::Tags::CollectionRadioButtons:0x000000057b5b60>\r\n\r\nI'm not understanding the meaning of this, should the helper contain that writer method and it does not? :anguished:\r\n\r\nI feel obligated to make these tests green again before moving on, can anyone point me somewhere so I can take a better look? Thank you."},{"ts":1358813042000,"body":"@josemota I updated your commit with tests and the proper fix. Thank you so much"},{"ts":1358816235000,"body":"Thanks @rafaelfranca!\r\n\r\nI apologize for not being able to solve the problem that was at hand, I really wanted to grasp the whole situation. Thanks for giving me a hint, I look forward to contributing more."},{"ts":1358816443000,"body":"No problem. Thank you for the bug report and the fixes. I applied because I want this fixes ASAP since I'll need to release simple_form :smile: "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1372500002000,"body":"Hey @schneems , wouldn't it be better to simply drop the `&&` in here:\r\n\r\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/commands.rb#L41"},{"ts":1372505986000,"body":"@josevalim good idea, I updated the PR  to put `plugin` in its own case, which makes sense since the entire contents was wrapped in an `if`. Is there a historical reason why the file is `plugin_new` instead of `plugin`?"},{"ts":1372512646000,"body":"Maybe because something related with the old plugins code. cc/ @drogus "},{"ts":1372513755000,"body":"> Is there a historical reason why the file is plugin_new instead of plugin\r\n\r\nWhat @rafaelfranca said: previously we had `rails plugin` for installing plugins to `vendor/plugins` directory."},{"ts":1372513980000,"body":"So now we can rename it :smile:.\r\n\r\n@schneems could you do it?"},{"ts":1372515653000,"body":"Maybe we could add the fix and backport, then rename it afterwards in master? (or just backport this and go ahead with the renaming?)"},{"ts":1372516655000,"body":"Backport now and rename in a separate commit seems good.  \r\n\r\n--  \r\nRichard Schneeman\r\nhttp://heroku.com\r\n@schneems\r\n\r\nSent from the road\r\n\r\n\r\nOn Saturday, June 29, 2013 at 5:21 PM, Carlos Antonio da Silva wrote:\r\n\r\n> Maybe we could add the fix and backport, then rename it afterwards in master? (or just backport this and go ahead with the renaming?)\r\n>  \r\n> —\r\n> Reply to this email directly or view it on GitHub (https://github.com/rails/rails/pull/11176#issuecomment-20230586).\r\n>  \r\n>  \r\n>  "},{"ts":1372517803000,"body":"Done"}]},{"timestamps":[{"ts":1363054581000,"body":"Please use `[ci skip]` in the commit message, so we don't run tests on travis. Thanks."},{"ts":1363054706000,"body":"@carlosantoniodasilva will try to remember. Thanks ."}]},{"timestamps":[{"ts":1359131766000,"body":"@rafaelfranca @jonleighton could you take a look? Also what do you think about a backport? Too risky?"},{"ts":1359136555000,"body":"Seems good."},{"ts":1359153741000,"body":"Ran into this issue just the other day. Thanks!"},{"ts":1359199063000,"body":"@rafaelfranca @carlosantoniodasilva changes are made. Could you check again?"},{"ts":1359199105000,"body":":heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[{"ts":1356557701000,"body":"@ColinDKelley thank you so much. As you can see above I applied your commit in my branch and changed the implementation to something I think is better.\r\n\r\nI'm waiting feedback from @josevalim and @carlosantoniodasilva to see if I'm not missing something."},{"ts":1356561632000,"body":"Thanks Rafael!  I didn't realize :allow_nil was handled at the lower level; I agree that your version is cleaner.\r\n\r\nI noticed you changed the tests to require 1.9 for its new hash syntax.  Is there a reason to not leave them runnable in 1.8?  This changes is going to Rails 3 which I am pretty sure still supports 1.8.  I would certainly appreciate if it does--my company hasn't finished the changeover to 1.9 yet! :)\r\n\r\nAlso a co-worker pointed out that the Rails Guides currently document this inconsistency as a TIP: http://guides.rubyonrails.org/active_record_validations_callbacks.html (search for \"ignore\").\r\n\r\nI've made a corresponding fix to remove that TIP as it is no longer applicable:  https://github.com/lifo/docrails/pull/122 ."},{"ts":1356562386000,"body":"@ColinDKelley the commit with ruby 1.9 hash syntax is only for master. I applied another commit on 3-2-stable using ruby 1.8 syntax.\r\n\r\nAbout the TIP, well, this means it is the desirable behavior although I think it is wrong. This also means I can't apply this change in 3-2-stable branch since it will change behavior in a stable release."},{"ts":1356563606000,"body":"Ok, thanks for the clarification.  I think there's a good case to make that it wasn't ever desirable since a) there was no other way to allow_nil on that validator and b) it was not documented in the rdocs.  It seems unlikely to destabilize an app since these options were simply ignored before, hence very unlikely to be used.\r\n\r\nIn any case, the fact that this change restores orthogonal behavior by *removing* a special case that no longer needs to be documented in the Rails Guide is proof that it's valuable! :)"},{"ts":1356563820000,"body":"Some core team members raised a question why an user would need to allow nil values in a presence validation. What is your use case?"},{"ts":1356569063000,"body":"We use this pattern a handful of times in our application for unique, optional names.  In SQL NULL values are exempt from unique index enforcement, but empty strings are not.  So NULL/nil is the appropriate \"unset\" value.  We use validates_presence_of ... :allow_nil => true so that Rails catches anyone trying to set the name to an empty or blank string.\r\n\r\nBut even without that example, I think the change makes sense because it achieves an orthogonal interface that follows the Principle of Least Surprise.  Simply the benefit of removing an unnecessary special case from the Guide would convince me!  (I argue that it was unnecessary because ignoring these options in the case of this one validator did not benefit anyone.)"},{"ts":1356576694000,"body":"ok. @ColinDKelley thank you so much for the pull request."}]},{"timestamps":[]},{"timestamps":[{"ts":1375538764000,"body":"The build failed.\r\n\r\nI'm not sure if this is a feature or a bugfix, 3-2-stable is bugfixes only."},{"ts":1375545893000,"body":"I'm closing this issue since this is a feature request, not a bugfix."}]},{"timestamps":[]},{"timestamps":[{"ts":1372316083000,"body":"IMHO better to use smallest supported version in the example. Also please add `[ci skip]` in the commit message."},{"ts":1372321537000,"body":"I agree, new bugs should be reported against 4.0.0."}]},{"timestamps":[{"ts":1358067626000,"body":"/cc @carlosantoniodasilva @rafaelfranca "},{"ts":1358334573000,"body":"I will remove ce6395560c5434f1ab989c42acab1338fb8173f3 from this pull request. Do you also want me to squash the commits into a single commit as per @parndt's request over in the equivalent pull request (#8871) for `3-1-stable`? Personally I'd prefer to keep them separate, but if it increases the chance of the changes getting merged, I will do it."},{"ts":1358338224000,"body":"Since it is a stable branch that we don't maintain anymore I prefer to merge they squashed."},{"ts":1358343416000,"body":"As planned, I've removed the commit mentioned above and squashed the remaining 3 commits into 1. I've also rebased against `3-0-stable`."}]},{"timestamps":[]},{"timestamps":[{"ts":1364400564000,"body":"This fall in the cosmetic changes and we prefer to not accept they.\r\n\r\n> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted.\r\n\r\nhttp://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#write-your-code\r\n\r\nThank you for the pull request."},{"ts":1364402014000,"body":"@rafaelfranca Ah. I missed [this](https://github.com/rails/rails/pull/9950) before this PR.\r\ncool :smile: "}]},{"timestamps":[{"ts":1370476640000,"body":"Is there a specific reason this is against 4-0-stable and not master?"},{"ts":1370476751000,"body":"Master seems fine. This code is not in master"}]},{"timestamps":[{"ts":1376122716000,"body":":+1: Nice improvement!"},{"ts":1376165521000,"body":"Thanks!"},{"ts":1376165669000,"body":" :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[{"ts":1358196496000,"body":"Thank you"},{"ts":1358199639000,"body":"That was supposed to be fixed with 6581d798e830a7820dd54fe95d40014c0e2057fe, so skipping them *shouldn't* be necessary, since it *should* uses the configuration hash only.\r\n\r\n@yahonda which sha were you using when running these tests? I got the same errors before applying that fix."},{"ts":1358200400000,"body":"@carlosantoniodasilva I do not remember well which sha I've seen this error first. I've rebased my commit on top of the fb9ac47c286fbdfe05263d4d0346e50892090603. \r\n\r\nNow I've revert my commit from the master https://github.com/yahonda/rails/tree/revert8942. I can reproduce these failures even if 6581d79 has been merged...\r\n"},{"ts":1358200626000,"body":"One more comment, I can reproduce these failures only when tested with `ruby 2.0.0-rc1` and current `ruby-head`.\r\n\r\n```ruby\r\nruby 2.0.0dev (2013-01-07 trunk 38733) [x86_64-linux]\r\n```\r\nIt does not reproduce with `ruby-1.9.3-p362`."},{"ts":1358248356000,"body":"Thanks, got the same with 2.0, and I think I found the culprit, it's a change in `rescue`, related to `nil` error class:\r\n\r\n```ruby\r\n# 1.9.3-p327\r\n>> begin\r\n?>   raise 'fuuu'\r\n>> rescue nil => e\r\n>>   puts e.inspect\r\n>> end\r\nRuntimeError: fuuu\r\n```\r\n\r\n```ruby\r\n# 2.0.0.rc1\r\n>> begin\r\n?>   raise 'fuu'\r\n>> rescue nil => e\r\n>>   puts e.inspect\r\n>> end\r\nTypeError: class or module required for rescue clause\r\n```"},{"ts":1358250218000,"body":"It should be *hopefully* fixed in e709134, please let me know if you still find any issue with that, thanks a lot @yahonda!"},{"ts":1358252472000,"body":"Verified this issue has been fixed with e709134. Thanks!"},{"ts":1358253428000,"body":"Awesome, thanks :heart:\r\n\r\n\r\nOn Tue, Jan 15, 2013 at 10:24 AM, Yasuo Honda <notifications@github.com>wrote:\r\n\r\n> Verified this issue has been fixed with e709134<https://github.com/rails/rails/commit/e709134>.\r\n> Thanks!\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8942#issuecomment-12264293>.\r\n>\r\n>\r\n\r\n\r\n\r\n-- \r\nAt.\r\nCarlos Antonio"}]},{"timestamps":[{"ts":1366042541000,"body":"Thank you @mattetti "},{"ts":1366043702000,"body":":green_heart::yellow_heart::heart::blue_heart::purple_heart:"},{"ts":1366047341000,"body":"Thanks guys!"}]},{"timestamps":[{"ts":1364237843000,"body":"Hey @jacobo - there are going to be deeper, more fundamental changes to queueing. I'm thrilled that you're pitching in, but this line of development is a dead end, I'm afraid!"},{"ts":1364239543000,"body":"@jeremy - Are there any other \"lines\" or approaches you might be able to suggest?\r\n\r\nWould you be open to seeing a from-scratch rails 4 Q implementation based on existing resQ or sidekiq conventions?"},{"ts":1364240359000,"body":"We're going back to the drawing board for the API, and it's (tentatively) slated for 4.1.\r\n\r\nIf you'd like to work on this kind of stuff, we (the Resque team) would love to have you."}]},{"timestamps":[{"ts":1374166561000,"body":"Thank you but we don't accept cosmetic changes."},{"ts":1374207093000,"body":"@rafaelfranca Any Specified Reason Or Is there any list of rule-sets of acceptance ?"},{"ts":1374213031000,"body":"@rajeevkannav our [contribution guide](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html) is a good writeup if you want to contribute.\r\n\r\nSnippet related to this issue:\r\n\r\n> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted.\r\n"}]},{"timestamps":[{"ts":1364235389000,"body":"This is not the current rails master. See https://github.com/rails/rails/blob/master/activerecord/activerecord.gemspec#L27"}]},{"timestamps":[{"ts":1361899126000,"body":"Could you add a CHANGELOG entry?"},{"ts":1361899783000,"body":"Before:\r\n\r\n```\r\n$ rails c\r\nLoading development environment (Rails 4.0.0.beta1)\r\n>> Pet.new(owner: Owner.new).save\r\nActiveRecord::ActiveRecordError: can not touch on a new record object\r\n```\r\n\r\nAfter:\r\n\r\n```\r\n$ rails c\r\nLoading development environment (Rails 4.0.0.beta1)\r\n>> Pet.new(owner: Owner.new).save\r\n# => true\r\n```\r\n\r\n:+1:"},{"ts":1361900507000,"body":"@rafaelfranca done"},{"ts":1361900568000,"body":"needs a rebase"},{"ts":1361900817000,"body":"ugh...done @rafaelfranca :)"},{"ts":1361900858000,"body":"Thank you"}]},{"timestamps":[{"ts":1377678275000,"body":"May you squash commits and add changelog.\r\n\r\n/cc @pixeltrix "},{"ts":1377712135000,"body":"@pftg @pixeltrix added the changelog entry and squashed the commits. Thanks for for the speedy response!"},{"ts":1377720636000,"body":"I wonder whether it'd make more sense to add `usec` and `nsec` methods to `DateTime` in Active Support. That way we eliminate the `respond_to?(:usec)` and don't add the `to_time` conversion."},{"ts":1377723169000,"body":"I did some grepping and discovered maybe https://github.com/rails/rails/issues/10855 has added `usec` and `nsec`, but it's not in a release yet. Is that right?"},{"ts":1377724216000,"body":"Yes - sorry I forgot I'd already added it :smile:"},{"ts":1377724270000,"body":"Does the test you added fail without your change?"},{"ts":1377731338000,"body":"Nope, it passes :)  Nice to see that this is already fixed.  We can discard this change completely, or I can remove the actual code but leave the test to protect regression."},{"ts":1377734808000,"body":"Can you update it to just the test, thanks!"},{"ts":1377739531000,"body":"Done. Thanks!"}]},{"timestamps":[{"ts":1366132912000,"body":"cc/ @jeremy "},{"ts":1366150441000,"body":"Awesome—thanks @rubys!"}]},{"timestamps":[{"ts":1364997632000,"body":"Agree. Thank you @trevorturk "}]},{"timestamps":[{"ts":1366479901000,"body":"Hm at this point they're slightly different in meaning, `present?` would allow `assert_template \"    \"`, and I don't think we'd want that to happen. This `!options.empty?` check has been added specifically to avoid `assert_template \"\"` to pass mistakenly, giving false positives, in #8302. Thanks!"}]},{"timestamps":[{"ts":1365859823000,"body":"cc @pixeltrix "},{"ts":1365895302000,"body":"I'm :-1: on this since `DateTime` doesn't really have a concept of local time. Is there an actual use case for this? `DateTime` was useful when `Time` values were limited in range but since 1.9.3 improved `Time` it's use is much more limited."},{"ts":1366103325000,"body":"@pixeltrix I think if you do not want to support `DateTime`, then this PR should be closed. My main goal was to add more consistency. Also what do you think about adding warning message of using `DateTime` in favor `Time`?"},{"ts":1366104663000,"body":"@ptfg I was giving you a chance to respond before closing - I didn't want to seem rude :smile:\r\n\r\nI don't think we should be adding warnings to `DateTime` - AFAIK, it hasn't been deprecated. Maybe a update to the method documentation would be enough."}]},{"timestamps":[{"ts":1369575504000,"body":"@rafaelfranca @carlosantoniodasilva can you take a look?"},{"ts":1369576277000,"body":"Please see #10759"},{"ts":1369576342000,"body":":-1: please see discussion in #10759\r\n\r\n>\r\n>    -\r\n>\r\n>\r\n\r\n-- \r\n\r\n\r\n*José Valim*\r\nwww.plataformatec.com.br\r\nSkype: jv.ptec\r\nFounder and Lead Developer"},{"ts":1369576916000,"body":"I think we have an agreement that this is a user responsibility, so we should not change the method to do it automatically."},{"ts":1369578967000,"body":"I will modify the PR then to not patch method but still have the example there for documentation purposes. ok?"},{"ts":1369586973000,"body":"I updated the PR to only include the test-case for documentation purposes. Can you take a look?"},{"ts":1369588010000,"body":"again, sorry for the double submission. The closed PR was not linked to the issue so I had no clue :sweat: "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1361895137000,"body":"@guilleiguaran Are you sure this doesn't need tests?"},{"ts":1361895215000,"body":"@frodsan yes, missed it :grin:,  do you want to go ahead and add test for this? :grin:"},{"ts":1361895589000,"body":"@guilleiguaran Sure!"},{"ts":1361899408000,"body":"For completeness, should this have a CHANGELOG entry? :-)"},{"ts":1361899449000,"body":"Confirm!"}]},{"timestamps":[{"ts":1365898899000,"body":"Thank you so much for the pull request, but we don't accept cosmetcis changes as you can see here http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#write-your-code\r\n\r\nAlso we avoid to do changes in all the codebase because it will invalidate a lot of open pull requests."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1376760372000,"body":"Are you sure? because I found it in the code. 26 times it appears in the code."},{"ts":1376760613000,"body":"True, This variable is used. More details here in test fails. https://travis-ci.org/rails/rails/jobs/10313479#L179"}]},{"timestamps":[]},{"timestamps":[{"ts":1377484640000,"body":"Thank you for the pull request.\r\n\r\nI don't think `+=` is a supported API for two reasons:\r\n\r\n1. You don't expect that `+=` mutates the receiver object and the current implementation does that.\r\n1. This will allow `comments = post.comments + comment` and I think we don't want this.\r\n\r\nThe right thing to do is to use one of the documented method: `<<`, `push` or `append`."}]},{"timestamps":[{"ts":1360846875000,"body":":+1: :+1: :+1: "},{"ts":1360847263000,"body":"absolutely :+1: "},{"ts":1360848447000,"body":"I will give the same answer that I gave in the `pry` case.\r\n\r\nI don't like the idea to put every useful gem in the world in the generated Gemfile. It is very easy to users add your gems in their Gemfiles.\r\n\r\nAlso Rails already has error pages, don't make sense to me ship with a default error page and a gem as alternative for it.\r\n\r\n@charliesome maybe we can work together and add some features in the Rails itself."},{"ts":1360849453000,"body":":+1: "},{"ts":1360854949000,"body":"Would love to see this in rails by default! :thumbsup:"},{"ts":1360855400000,"body":"This is what rails application templates was invented for. "},{"ts":1360856045000,"body":"I'm closing this pull request since we don't want to add the gem in gemfile."},{"ts":1361135794000,"body":"I would love it if better_errors were the default error page. Make it happen!"},{"ts":1361174323000,"body":":thumbsdown:\r\nI second @rafaelfranca — quite against this change."},{"ts":1361195957000,"body":"Wish I could :+1:, but I have to :-1: too.\r\n`binding_of_caller` does not work in Jruby unless you give it some specific and archane flags."}]},{"timestamps":[{"ts":1357239918000,"body":":+1: "},{"ts":1357282203000,"body":"Let's do this!"},{"ts":1357282383000,"body":"Thanks for merging :)"}]},{"timestamps":[{"ts":1375344897000,"body":"May you add `[ci skip]` to commit message, please."},{"ts":1375345147000,"body":"Added!"},{"ts":1375345484000,"body":":+1: "},{"ts":1375357128000,"body":"Thanks."}]},{"timestamps":[{"ts":1360664671000,"body":"I think this should be reverted?  The JSON fix in #9126 was reverted, due to \"no more 3.0 releases\".\r\n\r\n(Or, does this mean 3.0 will see a security release after all?)"},{"ts":1360677694000,"body":"It won't have a release, but the security fix is provided in the 3-0-stable branch."}]},{"timestamps":[]},{"timestamps":[{"ts":1357310390000,"body":":+1:"},{"ts":1357310543000,"body":"```shell\r\nrails(master)$ ack \\\\.lines\r\nactionpack/lib/action_dispatch/middleware/exception_wrapper.rb\r\n99:          lines = file.lines.drop(start).take(6)\r\n\r\nactionpack/test/dispatch/debug_exceptions_test.rb\r\n172:    assert_operator((output.rewind && output.read).lines.count, :>, 10)\r\n\r\nguides/source/active_support_core_extensions.md\r\n2239:invoice.lines.to_formatted_s(:db) # => \"23,567,556,12\"\r\n```\r\n\r\nCan you please change the rest two occurrences of `lines` as well?"},{"ts":1357311472000,"body":"Thank you for your review @goshakkk \r\n\r\nBut I cannot because of the following reasons:\r\n\r\n> actionpack/test/dispatch/debug_exceptions_test.rb\r\n> 172:    assert_operator((output.rewind && output.read).lines.count, :>, 10)\r\n\r\nThis method is `String#lines`. It is not deprecated.\r\n\r\n> guides/source/active_support_core_extensions.md\r\n> 2239:invoice.lines.to_formatted_s(:db) # => \"23,567,556,12\"\r\n\r\nThis method is probably `Array#lines`. It is not deprecated too."},{"ts":1357312491000,"body":"Sorry, my bad."}]},{"timestamps":[{"ts":1365083547000,"body":"Sorry we don't accept new feature for the 3-2-stable branch. If you want this feature please send against the master branch."}]},{"timestamps":[{"ts":1363787103000,"body":"Sorry but we don't accept this kind of cosmetic change.\r\n\r\nThank you for the contribution."}]},{"timestamps":[{"ts":1371142348000,"body":"thanks :heart: "}]},{"timestamps":[{"ts":1357947447000,"body":"Thanks"},{"ts":1357952152000,"body":"@rafaelfranca can you also merge this fix into 3-2stable: https://github.com/rails/rails/blob/3-2-stable/actionpack/lib/action_dispatch/middleware/static.rb#L8 ?"},{"ts":1357956873000,"body":"Done"},{"ts":1357989427000,"body":":heart:"}]},{"timestamps":[{"ts":1377918494000,"body":"This seems like a use for ```Enumerable#zip``` to me:\r\n\r\n```values.zip(columns).map { |value, column| column.type_cast value }```"},{"ts":1377918604000,"body":"Zip was actually used before the `.next`, and removed to avoid creating an extra array.\r\n\r\nhttps://github.com/rails/rails/commit/1f75319a9af595d5de3dca55e26547c7f1b166fa"},{"ts":1377920293000,"body":"You're right @danfinnie, zip is nicer and seems to be as performant as my initial approach. Any other thoughts? Can you replicate my performance gains? I'm not crazy right? :)"},{"ts":1377929952000,"body":"I think it probably comes down to style at this point, not sure how much faster it is to call ```each_with_index``` vs. ```zip```, both of which have the benefit of not needing fibers."}]},{"timestamps":[]},{"timestamps":[{"ts":1360020960000,"body":"That seems nice, but I think it deserves a changelog entry, @zenspider mind adding one and sending a new PR? Thanks!"},{"ts":1360021136000,"body":"Also, a little love to Rails guide would be nice as well! :D"},{"ts":1360589921000,"body":"Nevermind, just added a changelog entry."},{"ts":1362678282000,"body":"I noticed that `rake test` does *not* pick up custom test subdirectories while `rake test:all` does. Is this asymmetry intentional? See also: http://stackoverflow.com/questions/15256938/raketest-not-running-custom-tests-in-subdirectory"},{"ts":1362688739000,"body":"Yes, the asymmetry is intentional. `rake test` only runs what it knows about. `rake test:all` is meant to pick everything up in one go. If you want to add a new test dir that gets picked up by `rake test` then you should tell the `test:run` task about it. Personally I think the way that `test:run` is implemented is inflexible and a bit inane, but there ya go. The easiest way to go about that is to simply add a dependency:\r\n\r\n```ruby\r\ntask \"test:all\" => \"test:mynewthing\"\r\n```\r\n\r\nIt would be better if `test:all` were refactored so you can modify that array easily. Or better if they'd just, you know, use dependencies properly. I'll look into the refactoring after lunch."},{"ts":1362689036000,"body":"I agree that `test:run` is hard to modify; it would be nice if `errors = %w(test:units test:functionals test:integration)` was not hard-coded. I'd be interested to see what you come up with."},{"ts":1362691530000,"body":"I wasn't thinking of anything more advanced than https://gist.github.com/5111934 at this time."},{"ts":1362968035000,"body":"Let me suggest an alternative that doesn't require a global -- using an instance variable inside the rake namespace. (I just saw [Stack Overflow: rake task variable](http://stackoverflow.com/questions/8342963/rake-task-variable) and it gave me an idea!)\r\n\r\n    namespace :test do\r\n      @tasks = %w(test:units test:functionals test:integration)\r\n      # ...   \r\n    end\r\n\r\nNow, user code can easily modify `@tasks`; see https://gist.github.com/bluemont/5131477 for a simple example."},{"ts":1363367901000,"body":"@zenspider do you like the instance variable way better than using a global? I can do a pull request if people are receptive to that."},{"ts":1363825129000,"body":"I don't really see the benefit of using an instance variable. It's a short lived and narrowly scoped rake task. I just got my patch reviewed and ok'd so I'll file a pull request."},{"ts":1363881874000,"body":"It depends on what scope makes the most sense.\r\n\r\n1. An instance variable is scoped to the test namespace.\r\n2. RAILS_TEST is a global constant (don't we have enough of those already?)\r\n\r\nMy opinion is that (1) is better because it involves less shared state.\r\n\r\nNote: I would guess that many people don't know about using instance variables with rake -- so there has not been a healthy discussion of these pros/cons so far.\r\n"}]},{"timestamps":[{"ts":1357918022000,"body":"I agree. Since it was already release the correct thing to do is to add a CHANGELOG entry for the revert instead of remove the entry for the previous change."},{"ts":1357918041000,"body":"And thank you so much to work on this."},{"ts":1357918083000,"body":"OK, will update."},{"ts":1357918412000,"body":"@rafaelfranca done!"},{"ts":1357918541000,"body":":heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"},{"ts":1357927425000,"body":"@ernie Maybe I haven't seen the full background to this issue but I am concerned about your proposal for 4.0 with regards to this. As an example, let's assume we have `User`, `Team` and `TeamUser` models. The `TeamUser` has belongs_to relationship both a user and a team and both the user & team models are linked to each other through the team user model. When we create a new `User` we want to assign it to a number of teams so we do this:\r\n\r\n```ruby\r\nuser = User.new\r\nuser.teams << Team.find_by_name(\"Admin\")\r\nuser.save\r\n```\r\n\r\nYour proposal means that the `TeamUser` object would be created at line two before the user exists which means the `user_id` column of the `TeamUser` object would be nil which is not valid in this scenario. \r\n\r\nWhen assigning objects in this manner before the object is actually created, I believe the current behaviour of creating these \"join\" objects after the original object has been saved is correct. \r\n\r\nIn my specific use case, I often add a validation on the join model to ensure that both parts of the association belong to the same account (in a multi-tenanted system). For example:\r\n\r\n```ruby\r\nclass TeamUser < ActiveRecord::Base\r\n  belongs_to :team\r\n  belongs_to :user\r\n  validate do\r\n    if team.account_id != user.account_id\r\n      errors.add :base, \"The team & user must belong to the same account\"\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nDo you have any thoughts on this and how this would be achieved if the model initialised, validated & saved without one of the foreign keys?"},{"ts":1357927580000,"body":"Also, when is 3.2.12 due out?\r\n\r\nWould it, perhaps, be worth releasing this sooner rather than later to avoid confusion by people upgrading to 3.2.11 because of the recently security announcements? I reckon there will be quite a few people upgrading right now (and in the coming weeks) and wondering about these changes and becoming confused due to the lack of documentation."},{"ts":1358155353000,"body":"+1 for 3.2.12 release with this change.  Based on the quantity of reported issues and the sudden need to update presented by the security patch I suspect this affects many users.\r\n\r\nI held off on updates from 3.2.8 after this change but the security patch has forced the issue.  I'm moving to this commit and hoping for 3.2.12 soon."},{"ts":1359738360000,"body":"+1 for 3.2.12 release sooner rather than latter. We've been bitten by this same issue when forced to update for security reasons."},{"ts":1359738417000,"body":"+1 this caused some issues on our end after the 3.2.11 upgrade also."},{"ts":1359738951000,"body":"You always can use the git version. http://gembundler.com/git.html"},{"ts":1361030537000,"body":"+1 for official release.  This regression caused a number of forms to fail when we were forced to install security upgrade releases.  \r\n\r\n```\r\nclass PhoneNumber < ActiveRecord::Base\r\n  has_many :personal_phone_numbers, :dependent => :destroy\r\n  has_many :people, :through => :personal_phone_numbers\r\nend\r\n\r\nclass Person < ActiveRecord::Base\r\n  has_many :personal_phone_numbers, :dependent => :destroy\r\n  has_many :phone_numbers, :through => :personal_phone_numbers\r\nend\r\n\r\nclass PersonalPhoneNumber < ActiveRecord::Base\r\n  belongs_to :person\r\n  belongs_to :phone_number\r\n\r\n  validates :person_id, :existence => true, :presence => true\r\n  validates :phone_number_id, :existence => true, :presence => true\r\nend\r\n\r\n> p = Person.new \r\n> pn = PhoneNumber.new(:phone_number => '555-5555', :phone_type => 'Home')\r\n> p.phone_numbers << pn\r\n> p.valid?\r\n=> false\r\n\r\n```\r\nI had several models set up like this that fail to save properly now.  Current 3-2-stable branch works fine."}]},{"timestamps":[]},{"timestamps":[{"ts":1362307787000,"body":"Is there anywhere else in the code base we do this type of traversal and in memory loading? Seems like lot of moving parts that could break, also adds overhead to find calls of objects that aren't already in memory.\r\n\r\nIs it possible to update the database and not the in-memory object, leaving the userspace with an invalid cache? "},{"ts":1362328000000,"body":"@schneems You raise some valid points. The scan over the in memory objects is pretty expensive. Also, I believe it is indeed possible to update the database and not the in-memory object which would lead to some invalid caches.\r\n\r\nTo address the first point, maybe we could implement that target instance variable as a hash instead of an array. The hash would be keyed on the object id, and hold the object. This would make finding an id a lot faster without significantly changing the time to iterate over it or add to the target. \r\n\r\nThe second point of invalid caches seems a lot harder (maybe this is why it wasn't implemented before?). The one solution I can think of (though it probably will take a lot of work), is to enforce a policy of having only one ActiveRecord object per id. If this were implemented correctly, then the only way of changing the database and not the in-memory object would be to use pure SQL for updating, but this case is already unsupported. "},{"ts":1362328109000,"body":"> is to enforce a policy of having only one ActiveRecord object per id. \r\n\r\nThe identity map was in and out and in and now out, basically for good."},{"ts":1362328858000,"body":"@steveklabnik Then it seems like this PR doesn't really hold a lot of ground. The other possibility is to hold an in-memory table of the last time the database was updated for a particular AR object. Each AR object would hold a reference to it (so they could still be garbage collected).\r\n\r\nWhenever a user calls a method on an AR object, it first checks the table to see if the database has been updated without it knowing. If so, it will make a DB call, otherwise, it will go along normally.\r\n\r\nThis will probably take a lot of implementation though."},{"ts":1362329011000,"body":":-1: on this. The problem described in #9470 is all about setting `inverse_of` when using `find` in an association, to work the same way as `first` / `last`.\r\n\r\nThat seems fair, I don't see any problem in doing that. But I don't think Rails should try to find any record in the collection just by doing a `find` on it, moreover the user may want a fresh record and would now need to `reload` it. If you want to find a record in the association collection, you can use `find/detect/select/find_all` with a block. Also, at a glance it seems the code is calling `load_target` every time, which might load the full association for a simple `find` call, when no associated records are necessary.\r\n\r\nSo I think we'd be good if only setting the inverse association on `find` was improved, but I would rather not change `find` in Rails with this logic.\r\n\r\nThanks for your contribution :)"},{"ts":1362333122000,"body":"@carlosantoniodasilva Ok, ya that makes sense. I'm going to close this PR and send another one that only changes ``find`` for ``inverse_of`` and not in general."}]},{"timestamps":[{"ts":1367318046000,"body":"@carlosantoniodasilva updated. thanks!"}]},{"timestamps":[{"ts":1361456776000,"body":"That was fast :)."}]},{"timestamps":[{"ts":1370378459000,"body":"How about removing `LoggerSilence` from codebase?"},{"ts":1370428539000,"body":"This merged at https://github.com/rails/rails/commit/8ae73f11469e12d5f3f119189a4733a3a25ca785 and\r\nhttps://github.com/rails/rails/commit/32998083c96fd481eb6913260c029bd2ec08d1af by @tenderlove.\r\n\r\nAnyway, I'm closing this.\r\nIf you have some opnions, please comment to this PR :)"},{"ts":1370448398000,"body":"That seems to be fixed in 3970432fcb6a04e6f003e8295e9b2ee8e5b22390 by @tenderlove but I dont'l like the solution personally. It will not work as expected in some tricky situations such as #10856.\r\n\r\n`LoggerSilence` still has race conditions. But `ActiveRecord::Migration::CheckPending` is used only in development, so its better to make `LoggerSilence` threadsafe (and include it in ::Logger) instead of trying to avoid it (and bring more complexity)."}]},{"timestamps":[{"ts":1357282669000,"body":":+1: I think you need to squash commits."},{"ts":1357282961000,"body":"Thanks @goshakkk .\r\nI squashed my commits.\r\n\r\n"},{"ts":1357304426000,"body":"@guilleiguaran can you have a look?"},{"ts":1357356321000,"body":"I rebased this commit to make it automatically mergeable."},{"ts":1357387633000,"body":"Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1368025876000,"body":"Thanks @lchanmann! I don't think we should be adding new timezones to Rails itself but I do believe we should make it possible for people do add new timezones to their own apps."},{"ts":1368026396000,"body":"@josevalim anyway someone could check https://github.com/rails/rails/pull/10281 that handles this."},{"ts":1368034068000,"body":"Thanks @josevalim! So I close this pull request."}]},{"timestamps":[{"ts":1363033259000,"body":"/cc @tenderlove @jeremy @rafaelfranca @josevalim "},{"ts":1363033408000,"body":"[Per this](https://github.com/rails/rails/pull/9655#issuecomment-14698894) we should probably instantiate the app in config.ru, rather than reference `Rails.application`."},{"ts":1363096179000,"body":"@tenderlove I think we can make this change before moving away from the singleton. Instantiating in `config.ru` will have further consequences. I'd like to get this applied first. It behaves exactly the same as it did but does not take different paths wether you wrap it with `map` or not."},{"ts":1363363287000,"body":":+1: as a stopgap. Worried that removing `#app` will break existing apps that don't have the updated config.ru."}]},{"timestamps":[{"ts":1359405127000,"body":"@spastorino Here's the second part of https://github.com/rails/rails/pull/9032.\r\n\r\nNote. I removed the `caching_allowed?` on https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/caching.rb#L86 since it doesn't seem to do anything. There are no references in the rest of the Rails codebase and no tests fail when removing this method."},{"ts":1359408826000,"body":"The method `caching_allowed?` is used by both [action](https://github.com/rails/actionpack-action_caching/blob/master/lib/action_controller/caching/actions.rb#L111) and [page caching](https://github.com/rails/actionpack-page_caching/blob/master/lib/action_controller/caching/pages.rb#L171). I think it either has to come back, or to be moved to both."},{"ts":1359408997000,"body":"@carlosantoniodasilva Hmm. Ok I am sorry for that. Can you link to where they are used? I can't seem to find it in my Rails checkout or tests."},{"ts":1359409037000,"body":"Scratch that. Didn't notice the links in your comment.\r\n\r\nI'm going to PR those two gems."},{"ts":1359409056000,"body":":+1: for move to both. @michiels could you do it? The usage is on the links @carlosantoniodasilva added."},{"ts":1359409099000,"body":"@rafaelfranca Jawohl! Missed them, wasn't looking carefully enough. Found them."},{"ts":1359409401000,"body":"@michiels thanks! :)"},{"ts":1359410199000,"body":"First one up for action_caching: https://github.com/rails/actionpack-action_caching/pull/1"},{"ts":1359410728000,"body":"Second one up https://github.com/rails/actionpack-page_caching/pull/1 for page_caching"}]},{"timestamps":[{"ts":1357517676000,"body":"Thank you."}]},{"timestamps":[{"ts":1375817424000,"body":"It looks like there needs to be some driver-detection going on or something else in order to make this test DB-independent. Honestly, any computed column should be fine for the test, so it could be something basic."},{"ts":1375818797000,"body":"Locally all tests succeeded, but it seems there is something going on with Travis: https://travis-ci.org/rails/rails/pull_requests"},{"ts":1375834092000,"body":"```sql\r\nActiveRecord::StatementInvalid: Mysql2::Error: FUNCTION activerecord_unittest.random does not exist: SELECT random() AS ranking, `posts`.`id` AS t0_r0, `posts`.`author_id` AS t0_r1, `posts`.`title` AS t0_r2, `posts`.`body` AS t0_r3, `posts`.`type` AS t0_r4, `posts`.`comments_count` AS t0_r5, `posts`.`taggings_count` AS t0_r6, `posts`.`taggings_with_delete_all_count` AS t0_r7, `posts`.`taggings_with_destroy_count` AS t0_r8, `posts`.`tags_count` AS t0_r9, `posts`.`tags_with_destroy_count` AS t0_r10, `posts`.`tags_with_nullify_count` AS t0_r11, `comments`.`id` AS t1_r0, `comments`.`post_id` AS t1_r1, `comments`.`body` AS t1_r2, `comments`.`type` AS t1_r3, `comments`.`taggings_count` AS t1_r4, `comments`.`children_count` AS t1_r5, `comments`.`parent_id` AS t1_r6 FROM `posts` LEFT OUTER JOIN `comments` ON `comments`.`post_id` = `posts`.`id` WHERE `comments`.`id` = 1  ORDER BY ranking\r\n```\r\n\r\nI saw the above and thought \"Maybe MySQL doesn't have a `random()` function\". I think it's `RAND()` in mySQL... no?"},{"ts":1375863782000,"body":"@benhamill, thanks, made the test db safe."},{"ts":1375864108000,"body":"I think there is some problems with rebase :smile: "},{"ts":1375864619000,"body":"For sure something went wrong with the rebase. You might copy your changes out, throw away the branch and start fresh, then `git push -f` up here if you can't figure out another way to untangle."}]},{"timestamps":[{"ts":1373974930000,"body":"I've updated this PR and added a CHANGELOG entry."},{"ts":1373975137000,"body":"@kennyj thanks. As this is a refactoring I don't think we need an entry in the CHANGELOG."},{"ts":1373975333000,"body":"okay. I'm going to remove it."},{"ts":1373975466000,"body":"I've updated again :)"},{"ts":1373975694000,"body":"thanks :heart: "}]},{"timestamps":[{"ts":1374239224000,"body":"I don't think we should introduce strong_parameters that early in the guide. If you follow the index you see that strong_parameters are introduced afterwards. If you are reading the guide this helps to build a basic understanding of how things work and then progresses to how they are used and why.\r\n\r\nThanks for your work."}]},{"timestamps":[{"ts":1373132097000,"body":"This case is right since we want `and` to have less precedence than `return` or that code will not work.\r\n\r\n```irb\r\n>> def foo\r\n>>   true and return false\r\n>>   end\r\n=> nil\r\n>> def foo_1\r\n>>   true && return false\r\n>>   end\r\nSyntaxError: (irb):7: syntax error, unexpected keyword_false, expecting keyword_end\r\n\tfrom /opt/boxen/rbenv/versions/1.9.3-p374/bin/irb:12:in `<main>'\r\n```"}]},{"timestamps":[{"ts":1363436652000,"body":"The rationale behind the `xhr?` predicate discussion applies here. We write and document Ruby predicates, whose exact return value is irrelevant and undocumented, all over the project (with a few exceptions)."}]},{"timestamps":[{"ts":1356558014000,"body":"Why do you need it stored at `env[\"action_dispatch.exception]`?"},{"ts":1356559372000,"body":"I'm trying to find out which exception occurred from the middleware. \r\n\r\nLet's say I have something like this:\r\n\r\n```ruby\r\nclass ExceptionDetector\r\n   def initialize(app)\r\n     @app = app\r\n   end\r\n\r\n   def call(env)\r\n      response = @app.call(env)\r\n      if env[\"action_dispatch.exception\"] # or whatever else\r\n        puts \"exception occurred\"\r\n      end\r\n      response\r\n   end\r\nend\r\n```\r\n\r\nAnd my middleware stack looks like\r\n```ruby\r\n\r\nuse ExceptionDetector\r\nuse ActionDispatch::ShowExceptions\r\nuse ActionDispatch::DebugExceptions\r\nrun Testola::Application.routes\r\n```\r\n\r\n\r\nIs there a better way to achieve this? Should I just add the rescue block inside my middleware and place it after exception middleware? Like this:\r\n\r\n```ruby\r\nclass ExceptionDetector\r\n   def initialize(app)\r\n      @app = app\r\n   end\r\n\r\n   def call(env)\r\n      begin\r\n        response = @app.call(env)\r\n      rescue => exception\r\n        puts \"exception occurred\"\r\n        raise exception\r\n      end\r\n      response\r\n   end\r\nend\r\n\r\n# stack:\r\n\r\nuse ActionDispatch::ShowExceptions\r\nuse ActionDispatch::DebugExceptions\r\nuse ExceptionDetector\r\nrun Testola::Application.routes\r\n\r\n```\r\n\r\nThanks!"},{"ts":1356559869000,"body":"I'm not familiar with this part of the code, but seems good to me.\r\n\r\n@spastorino WDYT?"},{"ts":1356853032000,"body":"Seems ok to me add tests please.\r\n@josevalim thoughts?"},{"ts":1363598371000,"body":"@shime can you add a test-case and an entry in the CHANGELOG?"},{"ts":1364333365000,"body":"@senny I'm having a little trouble wrapping my head around how the test should look. My current idea is to wrap the DebugException middleware in a Rack::Builder along with my \"detection\" middleware and test it inside that middleware.\r\n\r\nDoes that make any sense? Do you have a better idea?"},{"ts":1364391618000,"body":"@shime maybe you can create something similar to: https://github.com/rails/rails/blob/master/actionpack/test/dispatch/show_exceptions_test.rb#L79-L84"},{"ts":1364997721000,"body":"Thank you for pointing me in that direction, but I'm afraid it doesn't help in my case. I have to test if the local variable is being set inside a private method. I don't think there's another way except from what I've mentioned above."}]},{"timestamps":[{"ts":1361627060000,"body":"@carlosantoniodasilva @rafaelfranca could you take a look? :yellow_heart: "},{"ts":1361627993000,"body":"Made minor comments, but overall it looks good to me. Also +1 for forwardporting the tests to master. Thanks @senny!"}]},{"timestamps":[{"ts":1376026414000,"body":"/cc @pixeltrix "},{"ts":1376193469000,"body":"Consider making `<any>_route` return a public Route presenter object, more easily accessible to application code than through mucking around in the Router internals:\r\n\r\n```ruby\r\nnew_user_route # => Route object\r\nnew_user_route.controller # => UsersController\r\nnew_user_route.path # => '/users/new'\r\n```\r\n\r\nThen, existing `<any>_path` methods can just alias to `<any>_route.path`.\r\n\r\nThis would open a nicer API than the old `hash_for_<any>_path` methods, and make it easier to do things like write decorators for specific types of routes (e.g. imagine I want to make all User routes have a custom subdomain based on `user.name`)."},{"ts":1376223286000,"body":"As @egilburg points out the `hash_for_{route}` methods are old-school - if you know the name of the route you can always get the route object via `Rails.application.routes.named_routes[:name]`. However what you'll get back is a Journey route instance so it won't be as straightforward as doing `route.controller` - the defaults will contain the controller and action.\r\n\r\nI'm closing the PR because it's not the way forward that we want to take - I'm working on refactoring the routing code for 4.1 so I'll consider your needs as part of that process."},{"ts":1376294097000,"body":"@pixeltrix @egilburg thanks for explanation. It's really better. \r\n"}]},{"timestamps":[{"ts":1372274564000,"body":"/cc @josevalim "},{"ts":1373078882000,"body":"I'm :+1: on this"},{"ts":1374623462000,"body":"I've added the changelog entry and made a rebase. "},{"ts":1375229466000,"body":"hi, i use rails 4 and i don't set password_confirmation ! why i get the error Password confirmation can't be blank ? are this change not already applied to rails 4.0.0 ? thank's"},{"ts":1375263825000,"body":"@medBouzid : Nope, this change will be in 4.1.0.\r\n\r\n@guilleiguaran : Can this pull request be backported to 4-0-stable please?"},{"ts":1375281248000,"body":"but how to fix error \" password confirmation can't be blank \" ?? there is a trick to solve this issue in rails 4.0.0 ?"}]},{"timestamps":[{"ts":1363355356000,"body":"@jonleighton what do you think?"},{"ts":1363359643000,"body":"@senny seems good, but please update the deprecation warning so that people know they can use this option to quiet the deprecation."},{"ts":1363360065000,"body":"@jonleighton thanks, very good idea. I pushed an updated version."},{"ts":1363385844000,"body":"Great commit!"}]},{"timestamps":[{"ts":1365433198000,"body":"I think the main reason that @tenderlove want to do this is to lower the number of thread current variables and this current implementation is not changing anything.\r\n\r\nI may be wrong but I think we have to do something like this:\r\n\r\n```ruby\r\nclass ScopeRegistry\r\n  def self.current\r\n    Thread.current[\"scope_registry\"] ||= new\r\n  end\r\n\r\n  def initialize\r\n    @current_scopes = {}\r\n    @ignore_default_scopes = {}\r\n  end\r\n\r\n  def current_scope_for(class_name)\r\n    @current_scopes[class_name]\r\n  end\r\n\r\n  def set_current_scope_for(class_name, value)\r\n    @current_scopes[class_name] = value\r\n  end\r\n\r\n  ...\r\n```"},{"ts":1365434081000,"body":"@rafaelfranca Ah! Lowering the number of thread locals makes sense. I'll change the implementation to something like what you gave."},{"ts":1365440544000,"body":"@rafaelfranca I've rewritten the PR so that there is only a single thread local for all the scopes. There's now a single registry object which keeps track of everything."},{"ts":1365441762000,"body":"@rafaelfranca Thanks for the comments, I've updated the PR."}]},{"timestamps":[]},{"timestamps":[{"ts":1362260312000,"body":"gack, my github-fu failed. accidently made 2 tickets."},{"ts":1366315944000,"body":"I just hit this issue on jruby as well. Seems to happen whenever it tries to call blame_file! on java exceptions.\r\n\r\nMaybe the correct solution to this is to make java exceptions inherit from Exception so that the line where it says:\r\n\r\n```ruby\r\nException.class_eval { include Blamable }\r\n```\r\n\r\nactually affects java exceptions?"},{"ts":1367215698000,"body":":+1: "},{"ts":1369586317000,"body":"I've looked into my proposal above and it doesn't seem feasible. So this PR is probably as good as it's going to get for solving this problem."},{"ts":1369586532000,"body":"@akreiling, you'll need to make your change against master and not the 3-2-stable branch. Then if they accept it into master you can ask them to backport it to 3-2-stable."},{"ts":1370027927000,"body":"closing this as #10795 is open for master.\r\n\r\nthanks guys!"}]},{"timestamps":[{"ts":1358784378000,"body":"These seem like an overlook to me, if there is a reason to skip these singular rules please someone shout."}]},{"timestamps":[{"ts":1363817281000,"body":"I think I'd rather not have this option in Rails 3, so that people can consciously choose whether they're really needing a get/post VS allowing to match all. By adding this option, we'd opening the ports for everyone to change match to match all to solve the problem, and the overall idea of not allowing match with a specific verb/verbs would be kinda useless I think. Just my cents about the change, lets get other feedback before acting. Thanks for your contribution."},{"ts":1363999488000,"body":"+1 to what @carlosantoniodasilva  said ."},{"ts":1364000107000,"body":"Sorry but we don't backport features from master to stable versions, 3.2.x is only receiving bug fixes.\r\n\r\nThanks for you contribution!!!"}]},{"timestamps":[{"ts":1370191310000,"body":"Does this change some sort of behavior, or is it just because it's prettier?\r\n\r\nIf it's the former, it'll need a test. If it's the latter, we can't accept it. If other code was being refactored, doing this at the same time would make sense."},{"ts":1370197091000,"body":"@steveklabnik it's a repetition of [extract_options!](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/array/extract_options.rb#L22).\r\nI don't think that the test is needed. Thanks for the review"},{"ts":1370208734000,"body":"Right, that's what I thought, I just couldn't find the definition.\r\n\r\nI think this falls under 'cosmetic' but I'm not sure. @rafaelfranca ?"},{"ts":1370308513000,"body":"Yes. And it is a performance sensible code. I prefer the current implementation. Thanks @acapilleri "}]},{"timestamps":[{"ts":1370431528000,"body":"The correct benchmark would be\r\n\r\n```ruby\r\nrequire 'benchmark'\r\n\r\nn = 100000\r\n\r\nBenchmark.bmbm do |x|\r\n  x.report(:===) { n.times { 'a' === String } }\r\n  x.report(:is_a?) { n.times { 'a'.is_a?(String) } }\r\nend\r\n```\r\n\r\n`is_a?` still turns to be a bit faster though.\r\n\r\n```\r\nRehearsal -----------------------------------------\r\n===     0.040000   0.000000   0.040000 (  0.049118)\r\nis_a?   0.030000   0.000000   0.030000 (  0.022938)\r\n-------------------------------- total: 0.070000sec\r\n\r\n            user     system      total        real\r\n===     0.020000   0.000000   0.020000 (  0.025311)\r\nis_a?   0.020000   0.000000   0.020000 (  0.017198)\r\n```"},{"ts":1370431745000,"body":"@goshakkk , thank you! I missed `n.times` ... So my results with fixed benchmark:\r\n\r\n```ruby\r\nrequire 'benchmark'\r\n\r\nn = 100000\r\n\r\nBenchmark.bmbm do |x|\r\n  x.report(:===) { n.times { 'a' === String } }\r\n  x.report(:is_a?) { n.times { 'a'.is_a?(String) } }\r\nend\r\n```\r\n\r\n```\r\nRehearsal -----------------------------------------\r\n===     0.030000   0.000000   0.030000 (  0.027873)\r\nis_a?   0.020000   0.000000   0.020000 (  0.018405)\r\n-------------------------------- total: 0.050000sec\r\n\r\n            user     system      total        real\r\n===     0.030000   0.000000   0.030000 (  0.032800)\r\nis_a?   0.020000   0.000000   0.020000 (  0.016745)\r\n```"},{"ts":1370434082000,"body":"There's a slightly difference between benching `'a' === String` and `String === 'a'`, which is what the code is doing.\r\n\r\nWith this benchmark:\r\n\r\n```ruby\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  x.report(\"===\") { 'a' === String }\r\n  x.report(\"====\") { String === 'a' }\r\n  x.report(\"is_a?\") { 'a'.is_a?(String) }\r\nend\r\n```\r\n\r\n3 runs apparently show that there's not much difference between `String === 'a'` and `'a'.is_a? String`, but `'a' === String` is indeed a bit slower:\r\n\r\n```\r\nCalculating -------------------------------------\r\n                 ===     80460 i/100ms\r\n                ====     85872 i/100ms\r\n               is_a?     90291 i/100ms\r\n-------------------------------------------------\r\n                 ===  3491466.7 (±22.3%) i/s -   16172460 in   5.019338s\r\n                ====  4786399.4 (±6.7%) i/s -   23786544 in   5.005047s\r\n               is_a?  4789348.7 (±7.3%) i/s -   23836824 in   5.010388s\r\n\r\nCalculating -------------------------------------\r\n                 ===     75118 i/100ms\r\n                ====     83065 i/100ms\r\n               is_a?     86160 i/100ms\r\n-------------------------------------------------\r\n                 ===  3714941.7 (±10.0%) i/s -   18328792 in   5.001906s\r\n                ====  5203240.3 (±7.3%) i/s -   25833215 in   5.006846s\r\n               is_a?  5187117.5 (±6.6%) i/s -   25848000 in   5.009617s\r\n\r\nCalculating -------------------------------------\r\n                 ===     84500 i/100ms\r\n                ====     91096 i/100ms\r\n               is_a?     94159 i/100ms\r\n-------------------------------------------------\r\n                 ===  3855874.5 (±6.1%) i/s -   19266000 in   5.017849s\r\n                ====  5136868.9 (±7.7%) i/s -   25506880 in   5.008445s\r\n               is_a?  5145288.4 (±6.8%) i/s -   25611248 in   5.005383s\r\n```"},{"ts":1370437531000,"body":"@carlosantoniodasilva, so the conclusion is to use `is_a?`, right?"},{"ts":1370441129000,"body":"> so the conclusion is to use `is_a?`, right?\r\n\r\n@ka8725 not for performance reasons. The benchmarks posted above are flawed in that they assume `prefixes` is always a `String`, which is not realistic. Actually `String ===` is probably more performant since it works better with Ruby VM's inline cashes (which will probably get busted whenever `prefixes` is not a `String`, so a previously cached `String#is_a?` method needs to be discarded and a new for example `Array#is_a?` method needs to be stored in).\r\n\r\nOn the other side, I almost would never use `String === thing` instead of much more readable `thing.kind_of?(String)`."},{"ts":1370472414000,"body":"To be consistent I've changed every `===` by `is_a?` except one class `ActiveSupport::Duration` because `===` i s [redefined there](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/duration.rb#L52). By the way - this code looks too ugly. Even speed for `is_a?` and `===` the same I still see points for `is_a?`:\r\n\r\n1. It looks more readable\r\n2. [Ruby style guide](https://github.com/bbatsov/ruby-style-guide) says to avoid `===` and gives explanation why"},{"ts":1370510517000,"body":"I'm not sure about this pull request, it erases any useful git (blame) history for all these lines..."},{"ts":1370510616000,"body":"@thedarkone , there is a `git log` command for history"},{"ts":1370514851000,"body":"@ka8725 I'm not sure if you are trolling me or something. Do you know what `git blame` is? Do you why it is useful to have coherent commits?"},{"ts":1370514930000,"body":"Yes, we don't accept pull requests based on style. If there was a compelling speed reason to switch between one or the other in a specific case, then we'd do it, but since the speed is negligible and this would totally trash the history, we can't accept it.\r\n\r\nFurthermore, \"this microbenchmark shows that one is faster than the other so let's replace it everywhere\" doesn't make sense; if you could show a benchmark for each one of these changes with some kind of actual application to demonstrate that it was actually better, then you might have a case. But comparing `'a'.is_a?(String)` to `'a' === String` and then doing a global find and replace isn't the right thing to do."}]},{"timestamps":[{"ts":1365098008000,"body":"Would this cause issues if there are no explicit table name specified and both tables have the same column name? E.g. both just say \"order by name\". Both orders would be unambiguous on their own, but could ambiguous when joined automatically."},{"ts":1365102296000,"body":"@egilburg this is what I found.\r\n\r\n```\r\nclass Physician < ActiveRecord::Base\r\n  has_many :appointments, -> { order 'id desc' }\r\n  has_many :patients, -> { order 'id asc' }, through: :appointments\r\nend\r\n\r\n$ Physician.first.patients.to_a\r\n#=> SELECT \"patients\".* FROM \"patients\" INNER JOIN \"appointments\" ON \"patients\".\"id\" = \r\n\"appointments\".\"patient_id\" WHERE \"appointments\".\"physician_id\" = ? ORDER BY id asc, id desc \r\n [[\"physician_id\", 42]]\r\n```\r\n\r\nI tested that sql in `sqlite3`, `mysql2` and `pg` . And it worked ok."},{"ts":1365103968000,"body":"@carlosantoniodasilva Please take a look. Thanks."},{"ts":1365104457000,"body":"@neerajdotname looks good, just a minor comment."},{"ts":1365104905000,"body":"@carlosantoniodasilva good catch. Fixed. "},{"ts":1365107714000,"body":"Thanks!"}]},{"timestamps":[{"ts":1362852114000,"body":"In fb8a830a329b78a5 we did the exact opposite."},{"ts":1362852288000,"body":"hm missed that"},{"ts":1362852288000,"body":"Thanks, but this form is deprecated in favor of the `data` hash."},{"ts":1362852297000,"body":"@steveklabnik :smile:"}]},{"timestamps":[{"ts":1357568621000,"body":"Can we get a slightly better commit message here? I had no idea that this was in journey; I thought you were writing a feature for ActionController -> ActionView. http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#commit-your-changes"},{"ts":1357569556000,"body":"@steveklabnik changed commit message to \"access `@path` and `@routes` via reader methods in journey\"."},{"ts":1357569604000,"body":":heart:"}]},{"timestamps":[{"ts":1362998256000,"body":"looks good to me. /cc @carlosantoniodasilva "}]},{"timestamps":[]},{"timestamps":[{"ts":1375569798000,"body":"Could you squash your commits?"},{"ts":1375572809000,"body":"@rafaelfranca Squashed and ready for review. Thanks!"}]},{"timestamps":[{"ts":1362408880000,"body":"There are two strange details (at least) there. First, the class name should be singular. Second, searching for posts whose name is \"John\" does not have a lot of sense to me.\r\n\r\nWould you like to revise that in this PR?"},{"ts":1362409235000,"body":"Thanks!"}]},{"timestamps":[{"ts":1365984944000,"body":"In my opinion this gem should be removed from generated gemfiles since it is a activerecord dependency. But if we are going to keep it there and skip when activerecord is skipped we have to skip arel too.\r\n\r\n@jeremy @fxn @carlosantoniodasilva thoughts?"},{"ts":1365986325000,"body":"arel is in activerecord.gemspec... I presume that the only reason it is currently included in generators/app_base.rb is because master is depending on an unreleased change?\r\n\r\nP.S.  I'd suggest that if the activerecord-deprecated_finders line remains, that it be given a comment."},{"ts":1365986949000,"body":"That is correct @rubys. We release `activerecord-deprecated_finders` often and it is unlike to change. arel has a slower release process and it changes with more often. So, your suggestion seems better in this case.\r\n\r\n:+1: for the comment."},{"ts":1365988210000,"body":"So the conclusion is that these lines will be removed anyway before the next beta/rc of Rails, which should happen soonish?"},{"ts":1366036275000,"body":"@rubys yes.\r\n\r\nClosing this one. Thanks @robertomiranda "}]},{"timestamps":[{"ts":1362760535000,"body":"Would be good a CHANGELOG entry explaining the problem"},{"ts":1362803453000,"body":"Tried to make code clearer and added changelog."},{"ts":1363069095000,"body":"Changed variable name as @neerajdotname suggested."},{"ts":1363087842000,"body":"Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1368336005000,"body":":+1: for killing multi_json"},{"ts":1368336857000,"body":":+1: "},{"ts":1368340078000,"body":":metal:"},{"ts":1368583488000,"body":"Is it too late to get this backported to 4-0-stable?\r\n\r\nBtw, love your approach, @sferik "},{"ts":1368621981000,"body":":shipit:"},{"ts":1368622174000,"body":"What about oj and yajl support?"},{"ts":1368623545000,"body":"Not to speak for @teamon, but I think the problem is there are JSON documents that the json library cannot or will not parse.  In these cases, using an alternative JSON processor is necessary.  While those libraries certainly can be used directly, this change will break existing uses of ActiveSupport's JSON processing that have worked fine since the 2.x days.  If swapping out JSON processors isn't going to be possible, there should probably be a caveat in the upgrade guide that this could break existing apps."},{"ts":1368623952000,"body":"@nirvdrum If there are JSON documents that are legal according to the JSON spec that `json` cannot parse, you should file a bug with `json`. If they are not legal according to the spec, then they are not JSON documents."},{"ts":1368624896000,"body":"@charliesome Some it cannot parse because its architecture fundamentally doesn't support.  E.g., docs of certain sizes will blow out memory in `json` but work with a very reasonable footprint in `yajl`.  And `json` has deliberately hard-coded a depth limit in nested structures.  I'd imagine that was done as a stop-gap to blowing out memory, but it's not an accidental bug.  The error message very clearly tells you it will not parse that document (see: https://github.com/flori/json/blob/master/lib/json/common.rb#L119).\r\n\r\nThat aside, even if it could subsume all other JSON processors in some future release, then you'd have to require a version not bundled with stdlib anyway, kinda negating the purported benefit of this being bundled in stdlib."},{"ts":1368625137000,"body":"@nirvdrum That's a fair point, I hadn't considered that. It seems to me that large documents requiring a 'SAJ' (is that a thing?) parser are probably out of scope of what Rails should handle for you, given that it's likely you'll need to work with them specially anyway."},{"ts":1368625773000,"body":"I think if you know from the outset that's a limitation, it's a fair point.  The way I've seen it happen is a bunch of code is already using ActiveSupport's JSON interface, a problematic doc comes along, and then the engine is swapped out.  Regardless of the rationale, the point I was raising is that `json` is not a drop-in replacement for other providers but the ActiveSupport interface is going to look the same and as a result code that previously worked no longer will.  My preference is to retain the ability to swap out the engine, whether that be with multi_json or by other means.  But, barring that, I think it's misleading to indicate that a multi_json-like lib is no longer necessary and thus safe to remove. Something in the client app will have to be rewritten and mentioning that in either the CHANGELOG or upgrade guide probably makes sense (admittedly, I don't which one makes the most sense)."},{"ts":1372506143000,"body":"But I want to use OJ for performance reasons how do I go about that now?"}]},{"timestamps":[]},{"timestamps":[{"ts":1356656219000,"body":"@rafaelfranca could you take a quick look and give me some feedback? Thanks in advance. :yellow_heart: :green_heart: "},{"ts":1356657854000,"body":"1)\r\n\r\nI think so. See https://github.com/rails/rails/commit/85c86f09997fff1f07f5d58ecf69780d597e292c.\r\n\r\nI think the purpose is, on mysql if you try to change a column for not null and you don't pass the default it will raise a error for empty values. The first command if for setup the test, the second if the test itself, the third is to [restaure the previous behavior](https://github.com/rails/rails/commit/bcd62cdafd11daf7fb43946db9832f08ddb2b622). I would put the third inside an `ensure` block and separate the first and the second by an empty line.\r\n\r\n2)\r\n\r\nNo, it should be renamed\r\n\r\n3)\r\n\r\nI'm not sure, should not the index be removed for all the databases?"},{"ts":1356696530000,"body":"I would like to split up the work and not put everything in one PR. I put the assertions in place to reflect the current situation but I did not actually change any functionality. I created tasks on my todo-list for the following work (will submit PRs later):\r\n\r\n* rename indexes on rename_column\r\n* clarify the behavior of remove_column with multi-column indices\r\n\r\nThis PR can be merged. I'll work on the other tasks after the bugfix #8613\r\n\r\n@rafaelfranca could you review the changes? I used `if current_adapter?(:PostgreSQLAdapter)` to make the different behavior of PostgreSQL visible."},{"ts":1356729662000,"body":"@rafaelfranca I also replaced all `refute` assertions to `assert !`"},{"ts":1356729720000,"body":"Cool. Use the new `assert_not`"},{"ts":1356729856000,"body":"done."},{"ts":1356730540000,"body":"assertions inside the ensure block are removed."},{"ts":1356730662000,"body":"Thank you so much. Very well done as usual. :smile: "},{"ts":1356735894000,"body":"I investigated why the multi-column index is dropped on PG and kept on MySQL.\r\n\r\nThe source is how an index is stored. If you create a multi-column index on MySQL you get:\r\n\r\n```\r\nmysql> show index from articles;\r\n+----------+------------+---------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\r\n| Table    | Non_unique | Key_name                  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\r\n+----------+------------+---------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\r\n| articles |          1 | idx_articels_title_author |            1 | title       | A         |           0 |     NULL | NULL   | YES  | BTREE      |         |               |\r\n| articles |          1 | idx_articels_title_author |            2 | author      | A         |           0 |     NULL | NULL   | YES  | BTREE      |         |               |\r\n+----------+------------+---------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\r\n```\r\n\r\nIf you then drop one column of the multi-column index you get a single column index like:\r\n\r\n```\r\nmysql> show index from articles;\r\n+----------+------------+---------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\r\n| Table    | Non_unique | Key_name                  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\r\n+----------+------------+---------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\r\n| articles |          1 | idx_articels_title_author |            1 | title       | A         |           0 |     NULL | NULL   | YES  | BTREE      |         |               |\r\n+----------+------------+---------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\r\n```\r\n\r\nPostgreSQL stores the multi-column index in a single row:\r\n\r\n```\r\n                       List of relations\r\n Schema |            Name            | Type  | Owner |  Table   \r\n--------+----------------------------+-------+-------+----------\r\n public | idx_articles_title_authors | index | senny | articles\r\n(1 row)\r\n```\r\n\r\nOnce you remove one of the columns, the multi-column index is automatically dropped:\r\n\r\n```\r\nNo relations found.\r\n```\r\n\r\n@rafaelfranca do you think we should unify this behavior or accept the differences between vendors?"},{"ts":1356737946000,"body":"I don't think so. Lets accept the differences"},{"ts":1357076046000,"body":"Opened a pull request #8678, Oracle database adapters behaves like PostgreSQL."}]},{"timestamps":[]},{"timestamps":[{"ts":1374448315000,"body":"@gzohari could you add a test to ensure that this will not get changed accidentally? Also, could you extend commit message with the info you have in this issue's description? Commit says only `{} is not falsy` and issue description adds better explanation, it should also land in commit message"},{"ts":1374502699000,"body":"Is `#each` over an empty hash a problem? Can we get a benchmark?"},{"ts":1374503054000,"body":"I decided to try myself.\r\n\r\n```ruby\r\nrequire 'benchmark'\r\nrequire 'active_support/all'\r\n\r\nn = 500000\r\nBenchmark.bm do |x|\r\n  x.report(\"empty each\") do\r\n    n.times do \r\n      params = {}\r\n      params.each do |attr, value|\r\n        1\r\n      end if params\r\n    end\r\n  end\r\n  x.report(\"with present\") do\r\n    n.times do \r\n      params = {}\r\n      params.each do |attr, value|\r\n        1\r\n      end if params.present?\r\n    end\r\n  end\r\nend\r\n\r\n```\r\n\r\nResults:\r\n\r\n```\r\n       user     system      total        real\r\nempty each  0.070000   0.000000   0.070000 (  0.068431)\r\nwith present  0.070000   0.000000   0.070000 (  0.074279)\r\n```\r\n\r\nSo I guess it is a very, very, very tiny bit faster."},{"ts":1374503937000,"body":"Yes. I don't think there is a reason to change it.\r\n\r\nThank you"}]},{"timestamps":[{"ts":1376388895000,"body":"Then better also add some notes about this option: Why do we need it?"},{"ts":1376388937000,"body":"Please add `[ci skip]` for your commit message."},{"ts":1376400989000,"body":"Why did you close it?"},{"ts":1376401300000,"body":"I think it would be better to just leave it as is. If I remove primary key from DB I should care about row uniqueness by myself. Explanation of unique indexes for DB is rather complicated and doesn't relate to this mini lesson. "}]},{"timestamps":[]},{"timestamps":[{"ts":1356815837000,"body":"Looks good! Please squash to a single commit."},{"ts":1356817853000,"body":"I did not found how to add the squashed branch here (which is\r\nactiverecord-structure_dump-ending_nl-squashed on my github clone),\r\nbut here his the squashed commit:\r\n\r\ntjouan/rails@a87cd4d47ccff684a410c3bf6e1ee05506458326\r\n"},{"ts":1356878019000,"body":"the Pull Requests on github are reflect the contents of your branch. This means, you can put whatever you want on the branch you created the PR from and it will be updated to reflect that content. For your situation you should be able to push the squashed commit to the branch like so (involves a force push):\r\n\r\n```\r\ngit push -f <remote-name-for-your-fork> a87cd4d47ccff684a410c3bf6e1ee05506458326:activerecord-structure_dump-ending_nl\r\n```\r\n\r\nWhile `<remote-name-for-your-fork>` is almost certainly \"origin\". This will push the commit a87cd4d47ccff684a410c3bf6e1ee05506458326 to the branch \"activerecord-structure_dump-ending_nl\", which is the source of this PR."},{"ts":1356882024000,"body":"Amazing, it worked!\r\n\r\n@senny thank you for the detailed clarification. To be honest I must\r\nadmit I read that a few hours ago, but couldn't believe it was the\r\nright way to do it as it seems to me that it violates a strong\r\nprinciple when using DVCS like git: never rewrite a public branch!\r\nSo it feels kind of \"wrong\" to me :-)\r\n\r\nHowever I now kind of understand it plays better with how GitHub\r\nhandles pull requests.\r\n\r\nAs a side note, the hash of the commit changed because I fixed a typo\r\nin the commit message and rebased the change on latest master.\r\n"},{"ts":1356882407000,"body":"> never rewrite a public branch!\r\n\r\nThis is a good principle to follow. I think it's important though to think about what you consider a public branch. The problems start when other people depend on your work. I would consider a branch in your own fork, which is open for discussion to still be a private branch. If someone depends on it, they need a good reason and should be able to fix the situation when your branch changes. I consider PR-Branches to be exposed local branches that you can reason about and you should be able to change them upside down."},{"ts":1356883018000,"body":"Thank you again for more details, I agree it makes sense in the\r\ncontext of pull requests.\r\n"}]},{"timestamps":[]},{"timestamps":[{"ts":1364865005000,"body":"Fixed the spaces issue! :sweat_smile: "},{"ts":1364911011000,"body":"looks good to me. I think we don't need a changelog entry as it is fixing a regression only present on master.\r\n\r\n@carlosantoniodasilva @rafaelfranca can you take another look?"}]},{"timestamps":[{"ts":1361563260000,"body":"Thanks."}]},{"timestamps":[{"ts":1362470885000,"body":"also can you squash the commits together into a single one?"},{"ts":1362483735000,"body":"Thanks @neerajdotname "},{"ts":1362493877000,"body":"@senny @carlosantoniodasilva your feedback has been incorporated.\r\n\r\n@carlosantoniodasilva `relation` is a private method hence I'm using `send` ."},{"ts":1362700937000,"body":"@jonleighton Please take a look. Changes you suggested are in ."}]},{"timestamps":[{"ts":1371918430000,"body":"`ActiveSupport::Concern` is loaded in the `active_model.rb` root file:\r\n\r\nhttps://github.com/rails/rails/blob/master/activemodel/lib/active_model.rb#L25\r\n\r\nWhich loads it:\r\n\r\nhttps://github.com/rails/rails/blob/master/activesupport/lib/active_support/rails.rb"},{"ts":1371918618000,"body":"@josevalim, then my previous PR should be unnecessary as well, you might need to revert it.\r\nSorry for miss this `require 'active_support/rails'`\r\n\r\nhttps://github.com/rails/rails/commit/c20b5ca037ee788c547705bf451f88bc5352ce12"}]},{"timestamps":[{"ts":1357165276000,"body":"`$&` contains the piece of the string that was matched by the regexp; so in this case, it's saying \"if the string has a ? character, use that - otherwise nothing\". The intent, I'd guess, is correctly handle both of these cases:\r\n```\r\nhttp://example.com/foo/bar => http://example.com/foo/bar/\r\nhttp://example.com/foo/bar?baz=wat => http://example.com/foo/bar/?baz=wat\r\n```\r\nThe literal `&` is definitely wrong here."},{"ts":1357200949000,"body":"@al2o3cr it should be the same thing:\r\n\r\n```\r\n1.9.3p194 :003 > \"welcome\".sub(/e/, '\\&')\r\n => \"welcome\" \r\n1.9.3p194 :004 > \"welcome\".sub(/e/) { $& }\r\n => \"welcome\" \r\n```"},{"ts":1357202862000,"body":"I don't think this change is necessary.\r\n\r\nIn spite of the sigil the `$` family of variables for regexps are not really global, they are local to the current scope and per-thread. Moreover, in their scope `$&` and friends are available regardless of whether the block form was used."},{"ts":1357203665000,"body":"@tenderlove asked me to replace the global. In the end I'm not really concerned about the change that much but what I would really like to add is test-coverage for the case. Currently you can simply remove the global and everything passes. I'll write up a test-case once I got a couple of minutes."},{"ts":1357204005000,"body":":+1: to the test.\r\n\r\n@tenderlove is there any particular reason you want to change this?"},{"ts":1357244319000,"body":"I added a test-case but I don't have a good feeling. I ran every test there is, and collected the `:path` argument. There was not a single path containing a `?`. Is this something we even support?"},{"ts":1357244347000,"body":"/cc @rafaelfranca @steveklabnik @carlosantoniodasilva "},{"ts":1358310590000,"body":"The only problem I've found is if a trailing slash is meant to be part of the query string, such as \"?spareslashes=////\" where I expect the value of spareslashes to be \"////\". I can't really think of a reason someone would do this (maybe putting another path to redirect to later?), but it seems RFC 3986 allows it (specifically section 3.4... \"The characters slash (\"/\") and question mark (\"?\") may represent data within the query component.\"). If this is the case it would seem that the slash could conceivably come at the end of a query string somehow. What does everyone think?\r\n\r\nI've added this as a failing test case here: timraymond@a18cc780c31aff0194e1b8c6cf6ade92fadb71db"},{"ts":1358358780000,"body":"If it's part of the RFC I think we should support it. As you mentioned it could actually happen when you pass an URL in the query string and you have `trailing_slash: true`.\r\n\r\nI added your test-case and updated the implementation to get it passing.\r\n\r\n@fxn could you review it?"}]},{"timestamps":[]},{"timestamps":[{"ts":1374535637000,"body":"Thank you for the contribution @90yukke. Could you add a CHANGELOG entry?"},{"ts":1374565182000,"body":"CHANGELOG entry added."}]},{"timestamps":[{"ts":1363357168000,"body":"Hey @michald thanks for your help to make Rails better!\r\n\r\nThis feature was already suggested some time ago. The PR was closed though and you can read up on the reasons here  #3989.\r\n\r\nAs it is a resubmission I'm closing the issue but feel free to ping me if you have questions.\r\nIf you want to propose new features for Rails you can also use the [Rails core mailing list](https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-core) to get feedback from core members before you have to write the actual code.\r\n\r\nCheers,\r\nYves"}]},{"timestamps":[{"ts":1362828393000,"body":"This also needs a CHANGELOG entry and I think you could add an example how to use the method to the RDoc.\r\n\r\nThis looks like a very specific use-case to me. @rafaelfranca @carlosantoniodasilva what do you think?"},{"ts":1362833298000,"body":"Added a CHANGELOG entry and examples for RDoc."},{"ts":1363945733000,"body":"By the way, maybe this helper can be used to add a new option `:hidden_data` to `form_for` and `form_tag` helpers."},{"ts":1364110698000,"body":"Ok, maybe i should just make a gem for now.  This can be closed if there is no enough interest."},{"ts":1364138132000,"body":"I think providing this as a gem is a good idea. It wil help you to develop the use-cases where it is helpful.\r\n\r\nThanks for your work. I'm closing this one for now but if you have frequent users of the gem please post to the [rails core mailing list](http://groups.google.com/group/rubyonrails-core) to suggest it's inclusion."}]},{"timestamps":[{"ts":1373010886000,"body":"did you find the commit that fixed it? Was there no other test-case included?"},{"ts":1373017557000,"body":"I didnt' find it.... I just walked into the errors on an application using v4.0.0, checked out the source, added the test and found out that it was working on master and failed in v4.0.0. \r\nI guess I could try to run a git bisect commando to find out the commit that fixed it, but is it necesary? It's a valid test case and adding it assures that the functionality will not break in the future..."},{"ts":1373017670000,"body":"@iwiznia I think it is necessary. If the fixing commit already has a test-case there is no need to add a duplicate one."},{"ts":1373020738000,"body":"I'll try to find it. Although I ran the tests that are now on master in the v4.0.0 branch and the only one that fails is mine..."},{"ts":1373030466000,"body":"That was kind of hard, because it seems that this got fixed and reverted several times...\r\nThe commit that's still in the codebase that fixes it is this: dab58bee2a0c982f0b09abdf3dd4fa4a53c485a8\r\nIt has tests but in the callbacks_test file which tests models, not controllers. The one here is for the controllers.\r\nThere were other attempts to fix it that had tests: #10096, #8687, #10034\r\nBut got reverted afterwards: 6d8b39095ca4274bdec8c3a2307efae8130c306c"},{"ts":1373033272000,"body":"so I guess you only ran the actionpack tests from master against 4.0? One in activesupport should have failed because that's where the bug was fixed and tested, right?"},{"ts":1373035414000,"body":"I only ran the actionpack tests against 4.0, adding this test (that fails in v4.0.0). I didn't run the tests in activesupport.\r\nAlthough the fix is on activesupport I think the test should be present in the actionpack tests too, right?"},{"ts":1373035793000,"body":"@iwiznia no there is no need to test the same code in different places. The callbacks are provided by Active Support so the tests to make sure they work should be in Active Support as well.\r\n\r\nThanks a lot for your work and the investigations :yellow_heart:  but I don't think this test is necessary."},{"ts":1373038430000,"body":"If that's correct then the entire actionpack/test/controller/filters_test.rb file is not necessary. Most, if not all of the tests there, are testing the filters (ActiveSupport::Callback) on controllers.\r\nI think they are necessary, because we are making sure that the filters both work on controllers and models, thus future proofing the filters in the controllers in case the implementation changes... \r\nIf that's not necessary, then we should clean up that test file... it's indeed testing the same code, implemented by ActiveSupport::Callback"}]},{"timestamps":[{"ts":1374614147000,"body":"@rafaelfranca @spastorino Doesn't look like this one was merged into [3-2-stable](https://github.com/rails/rails/commits/3-2-stable)"},{"ts":1374614419000,"body":"Good question. @spastorino why didn't you merged on 3-2-stable?"},{"ts":1374714581000,"body":"Because 3.2.x is not maintained anymore http://weblog.rubyonrails.org/2013/2/24/maintenance-policy-for-ruby-on-rails/"},{"ts":1374717812000,"body":"@spastorino Understood, thank you!"}]},{"timestamps":[{"ts":1374850783000,"body":"This falls under a cosmetic change, which we don't accept. If you were cleaning up other parts of these files, and made that change as part of it, that'd be fine, but we don't like to muddy the git history with purely cosmetic changes. Thanks!"}]},{"timestamps":[{"ts":1356877059000,"body":"@rafaelfranca @guilleiguaran could you review this?"},{"ts":1357246041000,"body":"@carlosantoniodasilva thanks for your review, appreciate it!\r\n\r\nI changed the code and rebased against master."},{"ts":1357390332000,"body":"It looks good to me, just minor comments. Thanks @senny!"},{"ts":1357391002000,"body":"thanks @carlosantoniodasilva for your time! Really appreciate it. I pushed a new version, which includes the changes you suggested."}]},{"timestamps":[{"ts":1372709248000,"body":"/cc @rafaelfranca "}]},{"timestamps":[{"ts":1367388592000,"body":"I think it can be convenient when using STI. We only need to inheritance the controller and override the `set_*` method. For example, say that we have one model `AirConditoiner` inherit from model `Product`, then we can simply do this in the controller:\r\n\r\n    class AirConditionerController < ProductController\r\n      private\r\n      def set_product\r\n        load_resource do\r\n          for_action(:index)                          {@products = AirConditioner.all}\r\n          for_action(:new)                            {@product = AirConditioner.new}\r\n          for_action(:create)                         {@product = AirConditioner.new(product_params)}\r\n          for_action(:show, :edit, :update, :destroy) {@product = AirConditioner.find(params[id])}\r\n        end\r\n      end\r\n    end"},{"ts":1367415706000,"body":"I think it adds a good amount of indirection in controllers, making a \"load\" method responsible for setting up stuff for other different methods based on the current action, but it seems a good fit for trying out in a gem, though.\r\n\r\nPlease feel free to discuss your idea further in the Rails Core mailing list, it's easier to get more feedback from there. Thank you!"},{"ts":1367417553000,"body":"@tonytonyjan @carlosantoniodasilva  yes, I've created a gem as well, if you're interested :) https://github.com/yakko/load_resource I promise to keep it up to date\r\n\r\nI've started a discussion on the mailing list https://groups.google.com/forum/?fromgroups=#!topic/rubyonrails-core/HntOmspK_s8\r\n\r\n@carlosantoniodasilva rails 4 latest scaffold controller template comes with half of the resources set up in a before_filter, after some atempts I came up with that solution.\r\nThanks for your review on it"},{"ts":1367421316000,"body":"This seems like a good fit for a gem, but I don't like the aesthetic of it personally. It adds additional indirection that I don't think is a good fit for the default scaffold and I wouldn't personally use a setup like this in a real app either."},{"ts":1367421714000,"body":"@dhh :broken_heart: "},{"ts":1367501553000,"body":"Neat! I'm for anything that reduces code in a clear, flexible, declarative way.\r\n\r\nHave you looked at [restful_json](https://github.com/rubyservices/restful_json)? Though it evolved as a desire to implement JSON service controllers quickly and easily, the idea is to allow any format, so the name needs to change, eventually. It just requires a module include and then it is a semi-DSL for controller implementation. Basically almost anything that doesn't require much controller tweaking for action methods should work, in theory. And for things that require controller mods, you can override only what you need to in the controller or monkey-patch it. No solution (except Love!) works for everything, but it might help."},{"ts":1367506579000,"body":"I think it makes sense since a lot of gems are based on a before_filter that loads the resources internally and prevent customization."}]},{"timestamps":[{"ts":1377019962000,"body":"What is the purpose of this PR?\r\n\r\nP.S. By the way this PR should have Changelog"},{"ts":1377033436000,"body":"Thank you for the pull request but it was already rejected. See https://github.com/rails/rails/pull/9280"},{"ts":1377034979000,"body":"I agree with you but why you can do this in ActiveRecord...\r\n```\r\nmodel.attribute?\r\n```\r\n\r\nif you can do this...\r\n\r\n```\r\nmodel.attribute.present?\r\n```\r\n\r\nI think that this feature was do it to improve code readability and its the purpose of this...\r\n```\r\nmodel.association?\r\n```\r\n\r\nIt's a bit absurd, isn't it?"},{"ts":1377036144000,"body":"`model.attribute?` does more than just `present?` so it have a value.\r\n\r\n`model.association?` doesn't"},{"ts":1377037097000,"body":"Yes, you're right. Thanks. I thought that it would be a good feature."},{"ts":1377045784000,"body":"No problem. Thank you so much for your contribution. Even if it was not\r\naccepted we really appreciate.\r\nOn Aug 20, 2013 7:19 PM, \"Alejandro Gutiérrez\" <notifications@github.com>\r\nwrote:\r\n\r\n> Yes, you're right. Thanks. I thought that it would be a good feature.\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/11946#issuecomment-22982309>\r\n> .\r\n>"}]},{"timestamps":[{"ts":1358369843000,"body":":+1: Thanks - adjustments made."},{"ts":1358372314000,"body":"Seems good :+1:"},{"ts":1358373216000,"body":"Oops, I had belatedly remembered the blank line, but clearly after I'd added... "},{"ts":1358373400000,"body":"Thanks!"}]},{"timestamps":[{"ts":1371633337000,"body":"@dmarkow thanks for your work and helping us to improve Rails :yellow_heart: \r\n\r\nI think you can put the tests in the `defaults_test.rb`: https://github.com/rails/rails/blob/master/activerecord/test/cases/defaults_test.rb\r\n\r\nAs this should work for all adapters not just PostgreSQL even if PostgreSQL is the only one that needs specific code to deal with it."},{"ts":1371649243000,"body":"@senny Thanks for the feedback, I don't know how I missed the `defaults_test.rb` file. I moved the tests over and wound up adding a new model to the test suite to handle this, `DefaultString`, since it appears the `Default` model might have been Postgresql-specific.\r\n\r\nAll tests passing for sqlite3, mysql, mysql2, and postgresql."},{"ts":1371656062000,"body":"@senny Fixed the test case name and moved the model directly into it. Thanks!"},{"ts":1371656489000,"body":"I added a few comments.\r\n\r\nCan you also squash all your commits into one with a descriptive message and `force push` to your branch to update the pull request."},{"ts":1371658050000,"body":"All done. Thanks for the patience with me on this, it's much appreciated."},{"ts":1371658262000,"body":"looks great! thanks for your work. :heart: "}]},{"timestamps":[{"ts":1371588139000,"body":"Thank you!\r\n\r\nNormally we'd make this into one commit, but since it is a changelog, as well as two logical things, rather than say 'split them into two PRs' I think it's fine to bend the rule here."}]},{"timestamps":[]},{"timestamps":[{"ts":1363610362000,"body":"looks good.\r\n\r\n/cc @carlosantoniodasilva "}]},{"timestamps":[{"ts":1376905931000,"body":"looks good. Thank you :yellow_heart: "},{"ts":1376909787000,"body":"Sorry this is not right.\r\n\r\nDocumentation patches go to Rails always. You contribute to docrails if you are sure about what you are doing and have commit access."},{"ts":1376909858000,"body":"In other words, if GitHub had the feature, pull requests would be disabled in docrails."},{"ts":1376912065000,"body":"@fxn The update I've submitted is consistent with:\r\n\r\n> If you see any typos or factual errors that you are confident to fix,\r\n          you can push the fix to <%= link_to 'docrails', 'https://github.com/rails/docrails' %> (Ask\r\n          the <%= link_to 'Rails core team', 'http://rubyonrails.org/core' %> for push access).\r\n          If you choose to open a pull request, please do it in <%= link_to 'Rails', 'https://github.com/rails/rails' %>\r\n          and not in the <%= link_to 'docrails', 'https://github.com/rails/docrails' %> repository.\r\n\r\nfound at `/guides/source/layout.html.erb`\r\n\r\nShould everyone be instructed to send commit(s) to [rails](https://github.com/rails/rails)? And pushing to [docrails](https://github.com/rails/docrails) (after getting access) would be the edge case? What should the instructions say?\r\n\r\nThanks\r\n\r\n"},{"ts":1376912320000,"body":"The problem is the rewording is misleading.\r\n\r\nIt says:\r\n\r\n1) Push to docrails.\r\n\r\n2) In case you'd like to contribute regularly, ask for commit bit.\r\n\r\nWhereas what you really want to say is:\r\n\r\n1) Send a PR to rails/rails.\r\n\r\n2) If you'd like to contribute regularly ask for the commit bit to docrails and push there.\r\n\r\nWe've talked with @senny by IM about it."},{"ts":1376912486000,"body":"I'm preparing a patch for both locations. @xta thanks for mentioning `layout.html.erb`."},{"ts":1376912973000,"body":"@senny @fxn Great to hear. It's much more clear to direct contributors to rails, with the added benefit of less likelihood of pull requests at docrails.\r\n\r\nThanks for all your help :thumbsup:"},{"ts":1376914150000,"body":"@xta I pushed the fix and linked it to this PR. Thanks for your help :yellow_heart: "}]},{"timestamps":[{"ts":1368379247000,"body":":+1: Thank you!"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1372879996000,"body":"sorry, I just pushed this one fca29750e40e9499aa6fb6de4fa3d2d972d5a4d5"},{"ts":1372880075000,"body":"My bad, I have tried to search in the issues, but without results."}]},{"timestamps":[{"ts":1377268526000,"body":"Proposed edit:\r\n\r\n```\r\nWARNING: If you are upgrading from Rails 3, please take into account that assets\r\nunder `lib/assets` or `vendor/assets` are available for inclusion via the\r\napplication manifests but no longer part of the precompile array. See\r\n[Precompiling Assets](#precompiling-assets) for guidance.\r\n```"},{"ts":1377268640000,"body":":+1: "},{"ts":1377543222000,"body":"All done.\r\nThanks for the help, my first rails commit."},{"ts":1377554906000,"body":"Awesome, thanks!"},{"ts":1377557121000,"body":"@fedesoria welcome! http://contributors.rubyonrails.org/contributors/federico-soria/commits"}]},{"timestamps":[{"ts":1367953267000,"body":"Seems good. Could you add a CHANGELOG entry?"},{"ts":1367954139000,"body":"@rafaelfranca Done ( https://github.com/seanwalbran/rails/commit/2ed9ab2ed67d4da7348e831ba76d02a0347a583e )"}]},{"timestamps":[{"ts":1363052039000,"body":"/cc @fxn \r\n\r\nWe usually don't make cosmetic changes like this, but since it's in docs and not code..."},{"ts":1363054363000,"body":"The API link you're checking is related to the current stable version, 3.2.x, which has support for both Ruby 1.8 and 1.9, so the docs use the `=>` hash style. If you check the [edge guides for that](http://edgeapi.rubyonrails.org/classes/ActionMailer/Base.html), you'll see they use the new style hash, 1.9+.\r\n\r\nAnyway, both are just hash definitions, there's no real difference in the final result of the `default` call. Thanks!"},{"ts":1363054727000,"body":"Ah, got it -- apologies for the noise!"},{"ts":1363054823000,"body":"No problem, thanks for the contribution.\r\n\r\n\r\nOn Mon, Mar 11, 2013 at 11:18 PM, Waynn Lue <notifications@github.com>wrote:\r\n\r\n> Ah, got it -- apologies for the noise!\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/9673#issuecomment-14755061>\r\n> .\r\n>\r\n\r\n\r\n\r\n-- \r\nAt.\r\nCarlos Antonio"}]},{"timestamps":[{"ts":1371437005000,"body":"This request is to master and the same change as #10910."}]},{"timestamps":[]},{"timestamps":[{"ts":1361848120000,"body":"Just to who jump here, we are closing this pull request because these helpers don't improve the development workflow and is against out UJS recommendations. "}]},{"timestamps":[]},{"timestamps":[{"ts":1364961370000,"body":"I didn't think it needed a changelog entry, so I erred on the side of caution. Thanks!"},{"ts":1364961558000,"body":"Thanks!"}]},{"timestamps":[{"ts":1372360262000,"body":"I'm not sure, should such deprecation warnings be removed."},{"ts":1372360268000,"body":"You probably [need to remove this test too](https://github.com/rails/rails/blob/master/activemodel/test/cases/attribute_methods_test.rb#L205)."},{"ts":1372360524000,"body":"@carlosantoniodasilva thanks, done!"},{"ts":1372368968000,"body":"@carlosantoniodasilva there are some problems with builds, but not connected with my changes:\r\n\r\n  * https://travis-ci.org/rails/rails/jobs/8515941\r\n  * https://travis-ci.org/rails/rails/jobs/8519877\r\n\r\n```bash\r\n$ gem install bundler\r\nERROR:  Could not find a valid gem 'bundler' (>= 0), here is why:\r\n          Unable to download data from https://rubygems.org/ - Errno::ETIMEDOUT: Connection timed out - connect(2) (https://rubygems.org/latest_specs.4.8.gz)\r\nERROR:  Possible alternatives: bundler\r\nThe command \"gem install bundler\" failed and exited with 2 during before_install.\r\nYour build has been stopped.\r\n```"},{"ts":1372380505000,"body":"@pftg great, thanks."},{"ts":1372385844000,"body":":cool:"}]},{"timestamps":[{"ts":1357879417000,"body":"Looks good. We'll need a CHANGELOG entry and a backport to 3-2-stable as well. Thanks!"},{"ts":1357881567000,"body":"@jeremy added changelog and backport to 3-2-stable."},{"ts":1357882006000,"body":"Thanks @dylanahsmith. Last thing: could you squash to a single commit and force-push? Clean git history :+1:"},{"ts":1357882151000,"body":"@jeremy squashed"},{"ts":1357887193000,"body":":metal:"}]},{"timestamps":[{"ts":1372688130000,"body":"Could you add a CHANGELOG entry?"}]},{"timestamps":[{"ts":1362850019000,"body":"I like this change. Could you include a CHANGELOG entry and a test-case?"},{"ts":1362861382000,"body":"Merged. I don't think we need a CHANGELOG entry here, it is a small change. We should keep the most important changes in the CHANGELOG, people can always check the commits for more info. :)"}]},{"timestamps":[{"ts":1362522676000,"body":"cc @rafaelfranca "}]},{"timestamps":[{"ts":1358545541000,"body":"That looks a lot cleaner. :+1:"},{"ts":1358545614000,"body":"great :+1:"},{"ts":1358552247000,"body":"Thanks @schneems "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1362459110000,"body":":+1:\r\n\r\n@josevalim thoughts?"},{"ts":1362460559000,"body":"This is so weird. Apparently Erubis is passing just the new line as text even if the next chunk is more text?\r\n\r\nThanks @tmm1!"},{"ts":1362461477000,"body":"The extra newline call only happens in certain cases. We're using this patch in production, but maybe it's simpler to fix this upstream in Erubis."},{"ts":1362464393000,"body":"@tmm1 Let me know what you decide. It seems like it may be easier to fix it in Erubis indeed, but if they are not interested in a change, I will be glad to merge this."},{"ts":1363207726000,"body":"@tmm1  :heart: :+1: for fewer method calls. @josevalim what is the status with Erubis?"},{"ts":1365195441000,"body":"Thanks @tmm1. I'll wrap up a pull request to erubis later, since I don't know how much time this will take I'm merging this one to Rails"}]},{"timestamps":[]},{"timestamps":[{"ts":1377204265000,"body":"Should not we think about a deprecation path for the class method?\r\n\r\nI think it was in the public API"},{"ts":1377204595000,"body":"Ah, good point. I'll put in a deprecation warning. "},{"ts":1377208480000,"body":"I've added a deprecation warning for the old `proper_table_name` method, and added a test specific to the new method."}]},{"timestamps":[{"ts":1373806373000,"body":":green_heart: thanks :-)"},{"ts":1373813721000,"body":"Will be great if you can backport this into 4-0-stable:-) Or should I do? a PR?"},{"ts":1373814041000,"body":"@arunagw as this is just removing code, is it necessary to backport in the first place?"},{"ts":1373815662000,"body":"The task is anyway broken. I think it's fine to backport because its broken and can't fix. What do you think?"}]},{"timestamps":[{"ts":1370308232000,"body":"I didn't find any change related to byrea columns on postgresql. It is not possible it was caused by your gems?"},{"ts":1370308539000,"body":"Could you reproduce in a sample application on 3.2 upgrading to 4.0?"},{"ts":1370309069000,"body":"Hm I can't reproduce in a sample app. It seems it's one of the gems then."},{"ts":1370358789000,"body":"@rafaelfranca ok this was a bit hard to track down but I found it. It is really a difference between Rails 3 and 4 as I was able to reproduce in sample app too (only rails and pg gem). It has to do with the serialize method.\r\n\r\nIf you really want I can give you the sample app but I think you will be able to figure it out quicker by just this description:\r\n- say I have a bytea field and I use serialize like so\r\n\r\n````ruby\r\nclass Car < ActiveRecord::Base\r\n  class MySerializer\r\n    def self.load(string)\r\n      string.to_s\r\n    end\r\n\r\n    def self.dump(string)\r\n      string.to_s\r\n    end\r\n  end\r\n\r\n  serialize :testing, MySerializer\r\nend\r\n````\r\n\r\n- in Rails 4 the serializer will receive the raw string into load (same as I get from `connection.execute`)\r\n- in Rails 3 the serializer will receive (it seems) PGconn.unescape_bytea(string) into load\r\n- basically it seems Rails 4 doesn't unescape the result if you're using a serializer, but it does unescape it when not using a serializer\r\n- PS: It might depend on the data itself if these 2 will be different (could be that you need more complex binary data to see the difference)\r\n- I did not test how dump behaves in this case (i.e. if serializer is responsible to escape the string to bytea), need to consider this potential issue too\r\n\r\nIn case this is an intentional improvement of some sort, could you please let me know in which cases this behavior changed from Rails 3 so I can properly update my production data so Rails 4 can read it."},{"ts":1370369620000,"body":"@mrbrdo thank you for the detailed report.\r\n\r\n@tenderlove any idea?"},{"ts":1370430965000,"body":"@tenderlove now I'm getting (in my real-world app that I'm upgrading) \"wrong argument type Hash (expected String)\" from https://github.com/rails/rails/blob/8d6a6ef22665b2c551f30acb1aff116ae15bc5f5/activerecord/lib/active_record/attribute_methods/serialization.rb#L66\r\n\r\nAny idea?\r\nI don't know at which point this happens, but just in case you should know that my serializer loads the binary string and makes a Hash out of it.\r\nPS: I did monkey patch your change into rc1, not using master if that makes any difference."},{"ts":1370447745000,"body":"fixed it, will attach PR"},{"ts":1370450688000,"body":"I fail to come up with a test example why this is necessary, but my app won't work without this (\"wrong argument type Hash (expected String)\"). It makes sense anyway. I tried returning a hash from load in the test to make it fail but it still passes, so it must be some more complex stuff causing my app the encounter the bug.\r\nAnyway after applying this fix my app starts working."},{"ts":1370452609000,"body":"I sorry, I don't have time to help you to write a tests case, but we will need a test to make sure this will not be changed on the future."},{"ts":1370453198000,"body":"Well I can write a unit test for it that will prevent regressions. But I can't figure out how to make @tenderlove 's test (it's on a higher level) fail.\r\nWould you be happy with a unit test (in a sense of passing an unserialized value into the type_cast method and asserting things based on that)?\r\n\r\nI'll be happy to do that."},{"ts":1370455851000,"body":"Having some problems attaching the second commit here for some reason, I've put the fix+test in the above PR. Soz."},{"ts":1370609334000,"body":"@rafaelfranca good to merge? would like to see this in next RC/stable so I don't need to monkey patch. the tests should prevent any regressions"},{"ts":1371110070000,"body":"When using JSON columns in postgres it now throws `TypeError: no implicit conversion of Hash into String`.\r\n\r\nMy workaround:\r\n\r\n```\r\n  module JSON\r\n    def self.load(hash)\r\n      hash\r\n    end\r\n\r\n    def self.dump(hash)\r\n      ::JSON.dump(hash)\r\n    end\r\n  end\r\n\r\n  serialize :properties, JSON\r\n```\r\n"},{"ts":1371110323000,"body":"@ebeigarts did you try my pull request? I had a similar error which was fixed with my PR. Could you try it if you haven't:\r\n\r\nEDIT: whoops. the url I meant was https://github.com/mrbrdo/rails/commit/9041454def79d8e61cabe49e7c5cb72cef29138b"},{"ts":1371111134000,"body":"@mrbrdo tried #10858 but it doesn't seem to help, however it worked fine in rc1 but broke in rc2."},{"ts":1371111324000,"body":"You mean it worked fine for you in vanilla rc1?\r\nI haven't tried rc2 yet so can't comment on that. If there is no additional info until next week I'll look into it, too busy until then and the code in this part of Rails isn't too tasty, imo :)"},{"ts":1371111531000,"body":"@mrbrdo I figured it out, I removed `serialize :properties, JSON` and I am using `store_accessor` directly, because rc2 now typecasts json columns back to Hash, I don't have a problem anymore :)"},{"ts":1371112938000,"body":"Hm well if I understood correctly what the problem was, something is still broken though. For example I have a problem since I am migrating a huge database from 3 to 4, it's not really a very viable option for me to go change how the data is stored.\r\nAnyway glad you got it working for you."},{"ts":1371301919000,"body":"@tenderlove this seems is still broken."},{"ts":1371318691000,"body":"It seems my PR doesn't solve @ebeigarts issue, but I think it's part of the solution. It solved my issues at least. Using rc1+patch in production and it's working fine."},{"ts":1372090308000,"body":"@tenderlove this might not be fixed yet. when I call #dup on the model I it seems I again get the wrong value. perhaps a small refactor is needed?"}]},{"timestamps":[{"ts":1369277923000,"body":"wrong pull request... will reopen correctly"}]},{"timestamps":[{"ts":1373141300000,"body":"@rafaelfranca removed take!"},{"ts":1373141414000,"body":"Could you squash your commits please?"},{"ts":1373148817000,"body":"@rafaelfranca Done :thumbsup: "}]},{"timestamps":[{"ts":1357139454000,"body":"Thank you"}]},{"timestamps":[{"ts":1364164931000,"body":"@trevorturk +1 to the idea of automatically upgrading user's session data without asking them to use `session_store :upgrade_signature_to_encryption_cookie_store` ."},{"ts":1364166696000,"body":"Great! Nice refactoring, test coverage, and guide updates :heart:\r\n\r\nI'm a little concerned that removing `method_missing` didn't break any tests, but that is unrelated.\r\n\r\nCould you rebase master and squash for merge?"},{"ts":1364166756000,"body":"Also a fan of having the default :cookie_store handle session upgrade to the latest & greatest :grin:"},{"ts":1364167435000,"body":"Thanks for the review, guys!\r\n\r\nI rebased and squashed down to one commit -- should be good to merge.\r\n\r\nI'll work up a new pull request about the :cookie_store thing if that's ok with you, @spastorino?"},{"ts":1364266474000,"body":"Great work @trevorturk and yes please do provide a PR for the cookie_store thing"},{"ts":1364268973000,"body":"Thanks, @spastorino! I started looking at the cookie_store thing today. I'll work something up in the next few days and /cc you. "}]},{"timestamps":[{"ts":1373979647000,"body":"@arsemyonov this is cosmetic change. Please review http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#write-your-code:\r\n\r\n> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted.\r\n\r\n"},{"ts":1373980266000,"body":"Thanks for your work but as @pftg mentioned, this is a purely cosmetic change."},{"ts":1373983535000,"body":"Yep, cosmetic. Just by the way. Got it. \r\n—\r\nSent from Mailbox for iPhone\r\n\r\nOn Tue, Jul 16, 2013 at 5:12 PM, Yves Senn <notifications@github.com>\r\nwrote:\r\n\r\n> Thanks for your work but as @pftg mentioned, this is a purely cosmetic change.\r\n> ---\r\n> Reply to this email directly or view it on GitHub:\r\n> https://github.com/rails/rails/pull/11459#issuecomment-21040590"}]},{"timestamps":[{"ts":1360516073000,"body":"@carlosantoniodasilva @rafaelfranca what do you think?"},{"ts":1360516113000,"body":"@guilleiguaran was too fast for my comment. :yellow_heart: :green_heart: "}]},{"timestamps":[{"ts":1366097407000,"body":"/cc @rafaelfranca @steveklabnik "},{"ts":1366100693000,"body":"It's awkward that plugins are dead, but we still have `rails plugin`. Seems to me like `rails plugin --mountable` should be aliased to `rails engine`... Anyway."},{"ts":1366102275000,"body":"@steveklabnik :+1:"},{"ts":1366103707000,"body":"@steveklabnik :+1: "},{"ts":1366164577000,"body":"@senny I could be off-base, but when I was making the change in #10244 it seemed that the `rails` command doesn’t hit `railties/lib/rails/commands.rb` when outside of a rails project. I ended up making my change in `railties/lib/rails/cli.rb`, and that worked to create a new engine."},{"ts":1366167373000,"body":"I think the original decision for keeping them as `plugin new` is that we could add plugin specific commands in the future. I am not sure if we should accept this will never happen or still be wary of what can come along the way. Considering that people type `plugin new` just a couple times, I would choose the latter.\r\n\r\nedit: spelling mistakes :S"},{"ts":1366175980000,"body":"@josevalim feel free to close. I don't have a strong opinion about this change."}]},{"timestamps":[{"ts":1357774169000,"body":"Sorry, but this falls into the cosmetic change category, and we don't usually accept such changes mainly because they pollute the git history. Thanks for your contribution!"}]},{"timestamps":[{"ts":1366921754000,"body":"@pixeltrix @josevalim @carlosantoniodasilva "},{"ts":1366958188000,"body":"Closing because #10347 was merged.\r\n\r\nThanks for your efforts @lellisga !"},{"ts":1366958405000,"body":"@pixeltrix so we're going to keep the same behavior?"},{"ts":1366958956000,"body":"@lellisga yes, because that's the intended behaviour. I'm assuming the reasoning is that if the delegate is assigned then we want to raise a error if it doesn't respond to the method because it's likely that it has been incorrectly assigned and we don't want to mask that error.\r\n\r\nThe test added in #10347 is to make sure that no-one will accidentally change it in the future - merging this PR would cause that test to fail."}]},{"timestamps":[{"ts":1369182250000,"body":"Could you give us example of what you want to accomplish with this change?\r\n\r\nMaybe an example how was the validator subclass before and after it."},{"ts":1369183443000,"body":"This is the \"bottom line\" of my PR: https://github.com/apotonick/rails/commit/543c59db819c25b359c68fc9b8381eb63f32c9e0#L2L88\r\n\r\nI could get my stuff working using the existing code. However, my main intend is to remove the `respond_to?` call and move stuff into `Validator` itself. While this simplifies the `Validator` interface it is also preparing some more changes I'd like to push (especially simplifying `UniquenessValidator` in AR).\r\n\r\nAre you worried about the change? Is it because the options contain a `:class` now (I don't like it either)? It shouldn't break existing code?!\r\n"},{"ts":1369184310000,"body":"> Are you worried about the change?\r\n\r\nNo. I just want to know more about the motivation of this pull request.\r\n\r\n\r\n> Is it because the options contain a :class now (I don't like it either)?\r\n\r\nIt is awkward, but it is fine to me.\r\n\r\n> It shouldn't break existing code?!\r\n\r\nI'm not sure of this. `setup(klass)` is a public method and documented as part of the API (see [Validator documentation](http://api.rubyonrails.org/classes/ActiveModel/Validator.html)). We can't just remove it."},{"ts":1369184519000,"body":"You're right! `#setup!` should be made private soon and called by a public `#setup` which will be deprecated.\r\n\r\n```ruby\r\ndef setup(*)\r\n  deprecation_warning\r\n  setup!\r\nend\r\n\r\nprivate\r\ndef setup!\r\nend\r\n```"},{"ts":1369184632000,"body":":+1:"},{"ts":1369184804000,"body":"What is the prefered way of deprecating (and testing this)? Sorry to ask :-)"},{"ts":1369186316000,"body":"Maybe:\r\n\r\n```ruby\r\nif validator.respond_to?(:setup)\r\n  ActiveSupport::Deprecation.warn 'The `setup` instance method is deprecated and will be removed on Rails 4.2. Define `setup!` without arguments instead.'\r\n  validator.setup(self)\r\nend\r\n```\r\n\r\nYou can even provide a code snippet in the deprecation message to make explicit what the users have to do:\r\n\r\n```\r\nChange your setup method to:\r\n\r\nclass MyValidator < ActiveModel::Validator\r\n  private\r\n\r\n  def setup!\r\n    @klass.send :attr_accessor, :custom_attribute\r\n  end\r\nend\r\n```\r\n\r\nTo test you can define a Validator class with the `setup` method defined and assert the deprecation message with the `assert_deprecated` method when calling validates_with. Something like this:\r\n\r\n```ruby\r\ndef test_setup_is_deprecated\r\n  assert_deprecated do\r\n    Class.new do\r\n      include ActiveModel::Validations\r\n\r\n      validates_with MyDeprecatedValidator\r\n    end\r\n  end\r\nend\r\n```"},{"ts":1369207876000,"body":"Now the last quest: Why is `options.freeze` called in `Validator#initialize`?\r\n\r\n@rafaelfranca I wanted to say I really appreciate your responsiveness - amazing! :smile_cat: "},{"ts":1369211713000,"body":"I have added some comments, :+1 for getting rid of the `respond_to?` in general."},{"ts":1369214036000,"body":"Cool! I removed the automatic `setup!` call, I personally like that better. Ready for merge!"},{"ts":1369240326000,"body":"I like it too. Just a minor comment on the deprecation message."},{"ts":1369240528000,"body":"Since it is a user facing change we will need a CHANGELOG entry, and make sure your commits are squashed."},{"ts":1369268799000,"body":"Dunno how to change a PR to another branch, here it goes: https://github.com/apotonick/rails/tree/deprecate-validator-setup rebased to current rails/rails:master and including updated exception and CHANGELOG entry."},{"ts":1369314106000,"body":"@apotonick merged.\r\n\r\nThank you for contributing."},{"ts":1369351611000,"body":"Thank you @josevalim and especially @rafaelfranca for that quick and uncomplicated feedback and processing! :heart: "}]},{"timestamps":[{"ts":1361906601000,"body":"/cc @pixeltrix \r\n\r\nWe'd also need a CHANGELOG entry and a test, I think."},{"ts":1361910260000,"body":":+1: to what @steveklabnik said"},{"ts":1361943810000,"body":"/cc @steveklabnik, @pixeltrix \r\n\r\nSorry for overlooking the changelog, it would be nice to get this into the next beta release before more people get hit with it.  If your using plain ruby for migrations/schema it's a non-issue as rails uses timestamp and not timestamptz, however most pg shops I know prefer the timestamptz as postgres stores the time internally in UTC allowing the local to be set by the client.\r\n\r\nThe code comments from timestamptz returning a string stated as much that it probably wasn't right and it's the first thing that blew up when I tried rails4 beta today."},{"ts":1361946754000,"body":"This doesn't merge cleanly, so a rebase needs done, and they'll need to be squashed into one commit as well."},{"ts":1361948990000,"body":"@troyk still needs a test as well"},{"ts":1362093286000,"body":"@steveklabnik \r\n\r\nfollowed these steps per the contributing rails guide: \r\n\r\n```bash\r\n$ git fetch upstream\r\n$ git checkout my_pull_request\r\n$ git rebase upstream/master\r\n$ git rebase -i\r\n \r\n< Choose 'squash' for all of your commits except the first one. >\r\n< Edit the commit message to make sense, and describe all your changes. >\r\n \r\n$ git push origin my_pull_request -f\r\n```\r\n\r\nbut the pull request looks borked now, was I not supposed to pick other commits in the rebase -i ?"},{"ts":1362093790000,"body":"`rebase -i` is only necessary for squashing, and it should show only your commits if it's rebased with current rails master."},{"ts":1362121494000,"body":"@steveklabnik @pixeltrix \r\n\r\nok, this should be good to go, sorry for the noise.  It's now in a single commit with changelog and I found the reason the test was passing with it returning a string and added an assertion to also verify the attribute is being type cast."},{"ts":1362128848000,"body":"@troyk why was the test passing passing?"},{"ts":1362159361000,"body":"@pixeltrix \r\n\r\nSorry about missing the .time attribute, I end up copy/pasting the changes on a clean rebase because I can't figure out how to rebase without bringing in others commits, mostly because I can't get a clean CHANGELOG merge.\r\n\r\nThe test as it sits passes because:\r\n\r\n```ruby\r\nTime.utc(2010,1,1, 11,0,0) == \"2010-01-01 11:00:00+00\"\r\n=> true\r\n```\r\n\r\nNotice the right side is a string, not a Time object.  So in our app we use SQL in our migrations to take advantage of pg's rich datatypes and constraints and every date/time attribute on our models is currently returning a String when we moved to 4beta and of course this made it through because the test assert_equal Time.utc(2010,1,1, 11,0,0), @first_timestamp_with_zone.time will pass with a string value.\r\n\r\nThus the added assert_instance_of will complete the test to ensure equality and type.\r\n\r\nI should probably switch testing the instance for ActiveSupport::TimeWithZone to Time begin the assert_equal has the value covered..."},{"ts":1362219331000,"body":"Merged c09f934dcb2d02763777e7fd025cdc33bc8ec8bb - thanks @troyk :heart:"}]},{"timestamps":[{"ts":1359377777000,"body":"> This breaks if the #sum method is not present somehow\r\n\r\nWe need a way to verify this, otherwise someone can come here tomorrow and change it back to `sum`. Need a more concrete scenario that shows when / how this can happen."},{"ts":1359397528000,"body":"I tried to replicate the issue by isolating the use case into a small script - but it works fine there.\r\n\r\nI can't really replicate this, as the environment on which I see the issue is quite intricate. I will just patch my activerecord installation for the time being. Sorry for the time wasted."}]},{"timestamps":[{"ts":1375110935000,"body":"Good job!"},{"ts":1375113461000,"body":"Thanks!"}]},{"timestamps":[]},{"timestamps":[{"ts":1362339330000,"body":"Merged 98739cf45fbcf2bbaa53bdf23bf4aa0250eca1c7 - thanks @korny!"}]},{"timestamps":[{"ts":1361455595000,"body":"@rafaelfranca @carlosantoniodasilva could you take a look?"},{"ts":1361721519000,"body":"Looks good to me, but I'm no AR master."},{"ts":1361723464000,"body":"Checked it out again, read it closely, seems good. :D"},{"ts":1361723484000,"body":"Would you mind submit a guide update for this? Thanks!"},{"ts":1361723511000,"body":"(Oh, and that could go to `docrails` if you want to get it merged fast.)"},{"ts":1361723568000,"body":"@sikachu I'll update the guides."},{"ts":1361732461000,"body":"Was the guides updated?"},{"ts":1361732563000,"body":"@rafaelfranca not yet. It's on my todo list"}]},{"timestamps":[{"ts":1356626490000,"body":"@mykola-kyryk could you add a test-case?"},{"ts":1356643697000,"body":"Test added."},{"ts":1357238416000,"body":"I think we will have to fix the same thing on dbconsole too"},{"ts":1357238428000,"body":"```\r\nack \"production development test\"\r\nlib/rails/commands/console.rb\r\n27:          options[:environment] = %w(production development test).detect {|e| e =~ /^#{env}/} || env\r\n\r\nlib/rails/commands/dbconsole.rb\r\n139:        options[:environment] = %w(production development test).detect {|e| e =~ /^#{env}/} || env\r\n```"},{"ts":1357239004000,"body":"Will do )"},{"ts":1357242800000,"body":"Fix it for DBConsole. Trying to figure out how this is done for server\r\ncommand, but looks like it doesn't support such behavior.\r\n\r\nOn Thu, Jan 3, 2013 at 8:40 PM, Rafael Mendonça França <\r\nnotifications@github.com> wrote:\r\n\r\n> ack \"production development test\"\r\n> lib/rails/commands/console.rb\r\n> 27:          options[:environment] = %w(production development test).detect {|e| e =~ /^#{env}/} || env\r\n>\r\n> lib/rails/commands/dbconsole.rb\r\n> 139:        options[:environment] = %w(production development test).detect {|e| e =~ /^#{env}/} || env\r\n>\r\n>  —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/8633#issuecomment-11855196>.\r\n>\r\n>\r\n\r\n\r\n\r\n-- \r\nBest Regards,\r\nMykola Kyryk."},{"ts":1357243499000,"body":"It needs a rebase, also could you squash your commits?"},{"ts":1357337016000,"body":"Thanks"},{"ts":1357337145000,"body":"Rafael, you are the best. Thanks a lot for your help and guidance."}]},{"timestamps":[{"ts":1365188670000,"body":":+1: This restricts the appending of `[]` to the name *only* if the name option was not specified. \r\n\r\nThe bug is the line `options[\"name\"] += \"[]\" if options[\"multiple\"] && !options[\"name\"].ends_with?(\"[]\")` -- which appends the `[]` suffix even if a name was explicitly specified. That was a bad thing.\r\n\r\nAgree that this is the correct solution to #9830. Looks good."},{"ts":1365190053000,"body":"Requesting feedback on this PR from those that were involved with the original issues (#8108 & #9616) that introduced the regression. The basic premise here is that if an explicit `:name` option is supplied to a form input helper, do not modify the value when the `:multiple` option is also used.\r\n\r\n/cc @carlosantoniodasilva, @rafaelfranca, @tenderlove, @exviva, @nertzy"},{"ts":1365190176000,"body":"I already made the comment in the pull request for the master branch."},{"ts":1365190567000,"body":"@rafaelfranca Thanks. Changelog entry added to this PR as well (and squashed)."},{"ts":1365191095000,"body":"I'm waiting the build pass to pull this in.\r\n\r\nThank you"},{"ts":1365191611000,"body":" :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"}]},{"timestamps":[{"ts":1368728328000,"body":"Here you go, @jeremy :)"},{"ts":1368728516000,"body":"Seems good. Could you add a CHANGELOG entry?"},{"ts":1368728968000,"body":"Added."}]},{"timestamps":[{"ts":1373154017000,"body":"Can't you just override `sti_name` in your model?"},{"ts":1373154122000,"body":"I mean:\r\n\r\n```ruby\r\nclass LegacyPost < LegacyContent \r\n  def self.sti_name\r\n    '_name_used_by_other_framework' \r\n  end\r\nend\r\n```\r\n\r\nThis should have the same effect right?"},{"ts":1373181326000,"body":"It will work for a count query but it doesn't work with any find operation because `compute_type` does not rely on `sti_name`.  \r\n\r\nI admit I didn't want to experiment too much with an implementation change of `sti_name`, but maybe that's the way to go. `sti_name` and `inheritance_name` living together sounds no good. \r\n"},{"ts":1373206989000,"body":"Yes. I prefer to make overriding `sti_name` work over adding a new option."},{"ts":1373433159000,"body":"@freegenie can you give an example from a specific framework so we can understand what you're trying to achieve"},{"ts":1373440350000,"body":"@pixeltrix WordPress database for example uses the post_type column. What I'm trying to achieve i to use AR to work fine with it. But apart from that specific case, I think it's a good idea to make AR work fine with legacy databases, which very commonly use STI-like data structures as well. \r\nGiven we can customize the name of the column used for STI, it does make sense to have the possibility to customize the STI mapping itself. We could make it easier to migrate to Rails from other systems allowing the two to live together on the same database. "},{"ts":1373441053000,"body":"I tried the solution proposed by @rafaelfranca but no luck so far. I'll try again for a better implementation if you think this one is rough."},{"ts":1373442486000,"body":"This works for WordPress:\r\n\r\n``` ruby\r\nmodule WordPress\r\n  def self.table_name_prefix\r\n    'wp_'\r\n  end\r\nend\r\n\r\nclass WordPress::Post < ActiveRecord::Base\r\n  self.inheritance_column = 'post_type'\r\n\r\n  class << self\r\n    def find_sti_class(type_name)\r\n      parent.const_get(type_name.camelize)\r\n    end\r\n\r\n    def sti_name\r\n      name.demodulize.underscore\r\n    end\r\n  end\r\nend\r\n\r\nclass WordPress::Page < WordPress::Post; end\r\n```\r\n\r\n``` irb\r\n>> WordPress::Page.first\r\n  WordPress::Page Load (0.5ms)  SELECT `wp_posts`.* FROM `wp_posts` WHERE `wp_posts`.`post_type` IN ('page') LIMIT 1\r\n```\r\n\r\nThe rest is left as an exercise for the reader :smile:"},{"ts":1373446135000,"body":"@pixeltrix thanks for the lesson."}]},{"timestamps":[{"ts":1367812440000,"body":"Please rebase your pull request and squash your commits. See how on http://blog.steveklabnik.com/posts/2012-11-08-how-to-squash-commits-in-a-github-pull-request"},{"ts":1367873634000,"body":"Ok, rebased from rails/rails master.  "},{"ts":1367882812000,"body":"Remember to squash your commits. And thank you so much for your work on this one :heart: "},{"ts":1367885124000,"body":" :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"},{"ts":1375883408000,"body":"Any chance Rails 4.0.0 will be patched with this ?"},{"ts":1375884161000,"body":"4.0.0 won't, but when 4.0.1 comes out, it will have this fix."}]},{"timestamps":[]},{"timestamps":[{"ts":1376330651000,"body":"Looks good to me! I agree that I find this style much more clear. I'd like someone else's :+1: though."},{"ts":1376330804000,"body":" :shipit:"},{"ts":1376331116000,"body":"Cool, let's make sure the build passes. "},{"ts":1376333011000,"body":"@steveklabnik have you considered using https://github.com/blog/1227-commit-status-api?"},{"ts":1376333499000,"body":"Travis already uses it. Or did you mean build some tool that says \"merge as soon as it's passed\"?"},{"ts":1376333756000,"body":"I might be confused about what is what. rspec uses a feature in which travis pings back to github and github shows the current build status on the PR. I didn't set it up, so not sure what's involved :) Here's an example: https://github.com/rspec/rspec-core/pull/1038 - note \" Good to merge — The Travis CI build passed (Details)\" just below the initial report. While it's still building or if it fails that box is yellow and red, respectively (iirc) and the text indicates that it's not yet safe to merge."},{"ts":1376333849000,"body":"So no - not \"build when it passes\", just nice feedback for PR submitters and reviewers alike."},{"ts":1376334046000,"body":"Yes, Rails does too. Now that the build has started, you should be able to see the build's in progress, I think.\r\n\r\nAll I meant with my comment was, \"I'd press merge now, but I want to wait for Travis to finish, and if it passes, I'll :shipit:.\" That's all. :)"},{"ts":1376334409000,"body":"@steveklabnik I understood this comment:\r\n\r\n> Cool, let's make sure the build passes.\r\n\r\nI was responding to this one:\r\n\r\n>  Or did you mean build some tool that says \"merge as soon as it's passed\"?\r\n\r\nI see the travis feedback now, thanks. I didn't realize that travis doesn't send anything back before the build starts. I think it _could_ ping back as soon as it queues the build, but I'll take that up w/ the travis folks :)\r\n\r\nThanks!"},{"ts":1376334537000,"body":":+1: :heart: text is hard. Got it.\r\n\r\nYeah, not sending anything before it starts is non-optimal."},{"ts":1376335808000,"body":"Awesome, we are good to go.\r\n\r\nThank you so much for this pr. :heart: "},{"ts":1376336019000,"body":"My pleasure!"},{"ts":1376907745000,"body":"FYI - I did try to simplify this further, eliminating the need for the consolidated hash. I think this is even easier to grok, but, unfortunately, it was slower than what's in this PR, so just posting for grins.\r\n\r\n```ruby\r\ndef inspect\r\n  parts.\r\n    reduce(::Hash.new(0)) {|h,(l,r)| h[l] += r; h}.\r\n    sort_by {|k,_| [:years, :months, :days, :minutes, :seconds].index(k)}.\r\n    map {|k,v| \"#{v} #{v == 1 ? k.to_s.chop : k.to_s}\"}.\r\n    to_sentence(:locale => :en)\r\nend\r\n```"}]},{"timestamps":[{"ts":1361345649000,"body":"@jeremy I introduced compact because one of the test cases had something like:\r\n\r\n```ruby\r\nmodel.joins(nil)\r\n```\r\n\r\nwhich shouldn't throw an error, but the joins should still be able to take care of this. If .compact isn't called on the args, we'll have a nil value being added to the join_values when the args are sent to ```join!```. \r\n"},{"ts":1361347789000,"body":"Also I've written comment about `having` here https://github.com/rails/rails/commit/8991083e31c507b2385e8258983261640caa32bf#commitcomment-2655545\r\nDon't see `having` at all in this PR..."},{"ts":1361373762000,"body":"@route Sorry about that, I'm not sure why I wrote limit, but that has been changed. The CHANGELOG was incorrect so I rewrote my entry. And you're right that ```limit``` isn't related to this commit.\r\n\r\nAlso I see what you're saying about ```having``` so I'm reverting to the old behavior. I think this is fine because, as you said, ruby will throw an error if you don't have a first argument. Thanks for the comment."},{"ts":1361378998000,"body":"That was merged fast. :-)  So, disregard my comments!"},{"ts":1361379080000,"body":"@richardkmichael omg! I didn't get your comments since you did in the author repository :("},{"ts":1361379431000,"body":"@rafaelfranca I followed links out of GitHub sent email.. I guess they just took me to @wangjohn's fork.  Sorry!  No worries; just some thoughts on naming clarity.  You are fast! :-)"}]},{"timestamps":[]},{"timestamps":[{"ts":1368762374000,"body":"cc @rafaelfranca "}]},{"timestamps":[{"ts":1365606540000,"body":"Reverting https://github.com/rails/rails/commit/8cf88cc75ad0289f39fc2272c372f945b3934e76 or merging https://github.com/rubys/rails/commit/ee62a898c1deebf05f737cf887a37bcdf8038065 seem to be better options."}]},{"timestamps":[{"ts":1361524554000,"body":"not sure about the test either but we need a CHANGELOG entry for sure. I'm leaning towards creating a test."},{"ts":1361658325000,"body":"Added a test and a CHANGELOG entry"},{"ts":1361725374000,"body":"I experimented with removing the connection instance method from [core](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/core.rb#L328) and these were the only other places in the codebase that seemed to rely on it:\r\n\r\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/has_and_belongs_to_many_association.rb#L22\r\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/has_and_belongs_to_many_association.rb#L29\r\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/has_and_belongs_to_many_association.rb#L44\r\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/locking/optimistic.rb#L89\r\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/locking/optimistic.rb#L120\r\n\r\nIt seems like it only makes sense to try to make the earlier change if I change all these others as well, otherwise it'll only be a matter of time until they likely bite me or someone else. Do you think this is worthwhile? It still seems like it's going to be hard to protect against others introducing new code that relies on it, the only sure-fire way to remove it as a 'reserved method' would be to rename it or remove it entirely, but both of those seem like too big of changes to the AR interface."},{"ts":1361733392000,"body":"I think you can change all these places, but we can't protect for introducing new code without removing `connection` from the instance. We can't do this without a deprecation cycle.\r\n\r\n@jonleighton @tenderlove WDYT about removing `connection` method from instance?"},{"ts":1361734023000,"body":"I am in favour. I've encountered this problem myself."},{"ts":1361734099000,"body":"@benmoss mind to update your pull request deprecating `connection` at instance level and removing all the use in the Rails codebase?"},{"ts":1361740084000,"body":"Sure, awesome!"},{"ts":1361764664000,"body":"Neat."},{"ts":1362706981000,"body":"Any word on this?"},{"ts":1362742594000,"body":"@benmoss I'll merge this, but it needs a rebase. Please comment when you have rebased as github doesn't send a notification when there's a code update."},{"ts":1362849828000,"body":"Rebased!"},{"ts":1362858941000,"body":"Fixed! Sorry about that."},{"ts":1362859038000,"body":"@benmoss no problem, looks good to me now. Thanks.\r\n\r\n@jonleighton all yours :)"},{"ts":1362859149000,"body":"@benmoss could you add the reasoning for the change to your commit message / the changelog? thanks"},{"ts":1362859863000,"body":"Done"}]},{"timestamps":[{"ts":1372191624000,"body":"Thank you. These methods are added because they are fast implementation than the `Object#blank?`. See https://github.com/rails/rails/commit/df95567598677a9c109146df8531674e70c2eb80"},{"ts":1372191801000,"body":"Oops sorry, haven't seen."}]},{"timestamps":[]},{"timestamps":[{"ts":1370923309000,"body":"@carlosantoniodasilva I've removed the constant changes in ``rake_test.rb`` and will update those if (possibly) the class singleton is removed."},{"ts":1371328788000,"body":"\\cc @spastorino Could you check this out as well?"},{"ts":1371515918000,"body":"@spastorino thanks\r\n\r\n@wangjohn sorry I missed your message :)"}]},{"timestamps":[{"ts":1374156680000,"body":"As for me this code should be look like after processing all steps by getting started.\r\n\r\nAlso please add `[ci skip]` to the commit message."},{"ts":1374157111000,"body":"will keep to [skip ci] for guides stuff from next time.. thanks \r\n"},{"ts":1374157369000,"body":"are those test-cases relevant to the guide? Are the mentioned in the text or generated? In my opinion the files need to match the guide. If they are not mentioned in the guide they should look like the generated template."},{"ts":1374157700000,"body":"@senny these test cases are just for the sample app.  I don't see anything specific to them in the guide.  But can you please recheck? \r\nI just kept those test cases for a person using that code and runs test should have a fair idea of a test case."},{"ts":1374157984000,"body":"/cc @steveklabnik "},{"ts":1374246258000,"body":"The sample app is intended to cover what's in the Getting Started Guide. We don't cover testing in Getting Started, because that's more than just 'getting started.' The Testing Guide is the right place to put test stuff.\r\n\r\nThank you for this, but I don't feel it's appropriate."},{"ts":1374261936000,"body":"Thanks @steveklabnik :)"}]},{"timestamps":[{"ts":1364664239000,"body":"I think they are already supported"},{"ts":1364664300000,"body":"See https://github.com/eatnumber1/rails/blob/a57b4ddfcd74c100723b4988c9d9791fe80d3f62/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb#L309-319"}]},{"timestamps":[{"ts":1359394614000,"body":"Could you squash the commits?"},{"ts":1359394637000,"body":"Also put [ci skip] in the commit message"},{"ts":1359416746000,"body":"I see. I squashed and put `[ci skip]` to the commit message."},{"ts":1359416952000,"body":"Thank you so much"}]},{"timestamps":[{"ts":1368103233000,"body":"Thanks."}]},{"timestamps":[{"ts":1372489599000,"body":"cc @tenderlove "},{"ts":1372492290000,"body":"@vipulnsward it seems `substitute_at` does not even need `index` parameter. Right ?"},{"ts":1372492378000,"body":"It does in case of Postgres"},{"ts":1372493183000,"body":"@vipulnsward I see. Anyways comments for the method should be changed to reflect that `column` is not being accepted."},{"ts":1372497816000,"body":"Are we sure that any of the third party adapters use this argument?\r\n\r\ncc @yahonda"},{"ts":1372510865000,"body":"Oracle enhanced adapter does not use this `column` argument within `substitute_at`.\r\n\r\nhttps://github.com/rsim/oracle-enhanced/blob/rails4/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb#L730-L732\r\n\r\nWe can support this change."},{"ts":1372511058000,"body":"sqlserver-adapter does use it https://github.com/rails-sqlserver/activerecord-sqlserver-adapter/blob/c0e4004e572ae47f20844562b4fc612ba82bfd47/lib/active_record/connection_adapters/sqlserver/quoting.rb#L52\r\n\r\nSo I think is not safe to change."},{"ts":1372513529000,"body":"Maybe we can add a comment to tell people that some adapters use this argument"},{"ts":1372647638000,"body":"Could consider reversing the argument order and making the method signature be either `(index, column=nil`), or `(index, options={})`. This way. rare consumers could look for `column` or `options[:column]` while the common use cases would not need to mention it.\r\n\r\nPotential issue, of course, is how difficult would it be for consumers to change all their caller code."},{"ts":1372648336000,"body":"I don't think is worth to do this, we will have to deprecate the old signature. Also, I don't see any problem of passing these arguments if some adapters need it."},{"ts":1372648613000,"body":"@rafaelfranca makes sense, I was trying to find a workaround to not having to do https://github.com/rails-sqlserver/activerecord-sqlserver-adapter/blob/c0e4004e572ae47f20844562b4fc612ba82bfd47/lib/active_record/connection_adapters/sqlserver/quoting.rb#L52 . Until then, I am updating to just add a comment for now."},{"ts":1372649958000,"body":"@rafaelfranca  updated"}]},{"timestamps":[{"ts":1372506926000,"body":"This fails PR fails the build.\r\n\r\n```\r\n    Club.before_save -> { self.name='callback' }\r\n                       ^\r\ntest/cases/associations/has_one_through_associations_test.rb:319: odd number list for Hash\r\nrake aborted!\r\n```\r\n\r\nCan you please fix the errors and re-push."},{"ts":1372514231000,"body":"Well, this will introduce a backward incompatible behavior on the 3-2-stable branch. Even if it is a bug people could be relying on this bug. I vote to not fix it on 3-2-stable."},{"ts":1372515386000,"body":"Confirmed in 4.0.0 same thing. Shall I submit to 4.0.0 instead?"},{"ts":1372707989000,"body":"Even at 4.0.0 it will change the behavior, please send to master only."},{"ts":1372709525000,"body":"Done. Thanks for help."}]},{"timestamps":[{"ts":1364508928000,"body":"Is better to get the real generated Gemfile "},{"ts":1364509048000,"body":"Actually I think we have a lot of outdated things in getting started app.\r\n\r\n@robertomiranda can you review the getting started app an update it to current version of rails edge?"},{"ts":1364509081000,"body":"@guilleiguaran sure :+1: "}]},{"timestamps":[{"ts":1357747076000,"body":"CHANGELOG entry?"},{"ts":1357748334000,"body":"Oops, thanks @rafaelfranca ; Added."},{"ts":1357778394000,"body":"@rafaelfranca \"Yes, since 3.1.x only get security releases we don't know when will be the next release.\"\r\nDoes it mean I should roll with 3-1-stable branch(I can;t upgrade to 3.1.10 because of this multi_json dependency issues)?"},{"ts":1357779238000,"body":"@nandayadav yeah, you should be able to stick with the branch for now."},{"ts":1357780070000,"body":"great, thanks"}]},{"timestamps":[{"ts":1358630342000,"body":"Did you run tests against all databases?"},{"ts":1358630758000,"body":"I ran tests as specified [here](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#testing-active-record); as far as I saw, tests for SQLite3, mysql1/2, and PostgreSQL all passed with no failures. If something is amiss, I apologize, of course. Testing was done using an Ubuntu environment (as doing so on OS X was proving to be a bit of a nuisance in regards to setting up packages)."},{"ts":1366980649000,"body":"Closing as #8968 closed and #9043 merged"}]},{"timestamps":[{"ts":1359851562000,"body":"Can you also add a changelog entry please? Thanks."},{"ts":1359891067000,"body":":ok: Added."},{"ts":1359894619000,"body":"@lexmag Thanks!"}]},{"timestamps":[{"ts":1373207712000,"body":"Have you tried to change the line above from:\r\n\r\n```ruby\r\nhtml_options, options = options, name if block_given?\r\n```\r\n\r\nto\r\n\r\n```ruby\r\nhtml_options, options, name = options, name, block if block_given?\r\n```\r\n?"},{"ts":1373210593000,"body":"@rafaelfranca almost works fine, but I feel this confuses me:\r\n\r\n`&block || url`\r\n\r\nand\r\n\r\nuse `name` actually as `block`,  `options` as `name` and `html_options` as `options` if block given."},{"ts":1373210741000,"body":"This is a argument shift. There is no need to two `if block_given?` checks.\r\n\r\nWhat was the difference?"},{"ts":1373211628000,"body":"Yes, no differences."},{"ts":1373211685000,"body":"Waiting travis to merge. Thanks"},{"ts":1373218066000,"body":"Thank you. Backported to 4-0-stable on fd98ab76303695a4552b1b40d27fad2425df6080"},{"ts":1373218353000,"body":":+1::+1::+1:"}]},{"timestamps":[]},{"timestamps":[{"ts":1363042401000,"body":"Problem is `delete_all` does not ignore `:dependent` unfortunately, we cannot just change this behavior overnight because it would break upgrades in a subtle way. We need to redefine `delete_all` in a progressive way, hence the warning."}]},{"timestamps":[{"ts":1369235824000,"body":"cc @fxn "},{"ts":1369237318000,"body":"According to the docs, this is an example of: `As an example of the callbacks initiated, consider the <tt>Base#save</tt> call for a new record:`, which means there are no destroy/update callbacks involved. Maybe the `around_create/save` ones should be listed, unsure, but the other ones are not part of it for sure. Thanks!"},{"ts":1369282010000,"body":"Line 52 to Line 82\r\n\r\n\" class Firm < ActiveRecord::Base\r\n  # # Destroys the associated clients and people when the firm is destroyed\r\n  # before_destroy { |record| Person.destroy_all \"firm_id = #{record.id}\" }\r\n  # before_destroy { |record| Client.destroy_all \"client_of = #{record.id}\" }\r\n  # end\r\n\r\n class Topic < ActiveRecord::Base\r\n  #     has_many :children, dependent: destroy\r\n  #\r\n  #     before_destroy :log_children, prepend: true\r\n  #\r\n  #     private\r\n  #       def log_children\r\n  #         # Child processing\r\n  #       end\r\n  #   end\r\n  #\r\n  # This way, the +before_destroy+ gets executed before the <tt>dependent: destroy</tt> is called, and the data is still available.\r\n\"\r\nbut for particular case we can use this\r\n\r\n\r\n\r\n"},{"ts":1373926172000,"body":"Yeah, that is the very introduction to callbacks, and the purpose of that list is only to depict that there are a handful of them happening with a certain ordering. The purpose is that the reader gets the idea. To do so, we pick the particular case of *object creation*. Therefore, callbacks related to updating or destroying don't really go there.\r\n\r\nOn the other hand, around callbacks are kind of an edge case. They do happen, but the relative order of execution depends on the relative order of declaration. That is, after callbacks are guaranteed to run after before callbacks regardless of who was declared first. But around callbacks vs before callbacks do depend on the order of declaration.\r\n\r\nSo, around callbacks do not really fit in a linear sequence like that. Around callbacks are kinda manual before + after and in my opinion we can obviate them for that particular example. Sometimes in introductory examples you don't tell the whole story on behalf of the exposition. Later you get the full details (by the way, there is not much documentation about around callbacks).\r\n"}]},{"timestamps":[{"ts":1373763425000,"body":"can you add [ci-skip] to your commit message?"},{"ts":1373763805000,"body":"Sorry about that, @guilleiguaran. :) Done!"}]},{"timestamps":[]},{"timestamps":[{"ts":1356811469000,"body":"For example:\r\n\r\n```ruby\r\ndef create\r\n  @account = Account.create(params[:account])\r\n  respond_with @account, location: new_account_transaction_path(@account)\r\nend\r\n```"}]},{"timestamps":[{"ts":1374116480000,"body":"@rafaelfranca Cant you take a look at it? It fixes `assert_redirected_to` in 3.2 branch"},{"ts":1374119012000,"body":"Seems good. Could you add a test case?"},{"ts":1374119018000,"body":"Also it needs a rebase"},{"ts":1374121802000,"body":"I'm not sure how to test assert message."},{"ts":1374122034000,"body":"Well, would be hard to write tests to `assert_redirect_to` so you don't need to add a test case. But this PR needs a rebase."},{"ts":1374122333000,"body":"ok"},{"ts":1374123532000,"body":"rebased onto 3-2-stable"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1362881545000,"body":"Makes sense, but I think it'd be better to use `group: [:development, :test]`, since it might be useful to have it there as well."},{"ts":1362881889000,"body":"Fixed."},{"ts":1362882089000,"body":":+1:"}]},{"timestamps":[{"ts":1373209240000,"body":"@pixeltrix could you review this one?"},{"ts":1373299613000,"body":"Hmm, I apologise for messing this fix up in the first place - we're trying to emulate the behaviour of `Time.at` so `to_f` isn't going to fly either because of this:\r\n\r\n``` irb\r\n>> Time.at(Time.now)\r\n=> 2013-07-08 17:00:58 +0100\r\n>> Time.at(Time.now.utc)\r\n=> 2013-07-08 16:01:03 UTC\r\n```\r\n\r\nI think we need to detect whether it acts like a time and return a duplicate if it is."},{"ts":1373314126000,"body":"I found this issue too while testing today against current 3-2-stable (and previously with 4.0), my test suite (which uses timecop) was raising:\r\n\r\n    Capybara::FrozenInTime:\r\n       time appears to be frozen, Capybara does not work with libraries which freeze time, consider using time travelling instead\r\n\r\n@pixeltrix let me know if you need any help or someone to test it :)\r\n@neerfri thanks for catching this."},{"ts":1373375210000,"body":"Should be fixed on master, 4-0-stable and 3-2-stable now"},{"ts":1373375293000,"body":":green_heart::yellow_heart::heart::blue_heart::purple_heart:"}]},{"timestamps":[{"ts":1374077101000,"body":"Can you amend your commit and add `[ci skip]` at the end of its message please? (and force push to this branch)"},{"ts":1374081190000,"body":"thanks for your contribution :yellow_heart: "},{"ts":1374081305000,"body":"Thanks you all! :-) "}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1366097885000,"body":"+1\r\n"},{"ts":1367355545000,"body":"+2"},{"ts":1367355569000,"body":"+3"},{"ts":1368114906000,"body":"The following error is raised in the activesupport's test suite:\r\n\r\n```\r\n/vagrant/patch1/rails/activesupport/lib/active_support/dependencies.rb:228:in `require': /vagrant/patch1/rails/activesupport/lib/active_support/json/encoding.rb:126: too short escaped multibyte character: /\\xe2\\x80(\\xa8|\\xa9)|[\\x00-\\x1F\"\\\\><&]/ (SyntaxError)\r\ntoo short escaped multibyte character: /\\xe2\\x80(\\xa8|\\xa9)|[\\x00-\\x1F\"\\\\]/\r\n\tfrom /vagrant/patch1/rails/activesupport/lib/active_support/dependencies.rb:228:in `block in require'\r\n\tfrom /vagrant/patch1/rails/activesupport/lib/active_support/dependencies.rb:213:in `load_dependency'\r\n\tfrom /vagrant/patch1/rails/activesupport/lib/active_support/dependencies.rb:228:in `require'\r\n\tfrom /vagrant/patch1/rails/activesupport/lib/active_support/json.rb:2:in `<top (required)>'\r\n\tfrom /vagrant/patch1/rails/activesupport/lib/active_support/dependencies.rb:228:in `require'\r\n\tfrom /vagrant/patch1/rails/activesupport/lib/active_support/dependencies.rb:228:in `block in require'\r\n\tfrom /vagrant/patch1/rails/activesupport/lib/active_support/dependencies.rb:213:in `load_dependency'\r\n\tfrom /vagrant/patch1/rails/activesupport/lib/active_support/dependencies.rb:228:in `require'\r\n\tfrom /vagrant/patch1/rails/activesupport/test/core_ext/duration_test.rb:4:in `<top (required)>'\r\n\tfrom /vagrant/patch1/rails/activesupport/lib/active_support/dependencies.rb:228:in `require'\r\n\tfrom /vagrant/patch1/rails/activesupport/lib/active_support/dependencies.rb:228:in `block in require'\r\n\tfrom /vagrant/patch1/rails/activesupport/lib/active_support/dependencies.rb:213:in `load_dependency'\r\n\tfrom /vagrant/patch1/rails/activesupport/lib/active_support/dependencies.rb:228:in `require'\r\n\tfrom /home/vagrant/.rvm/gems/ruby-2.0.0-p0@global/gems/rake-10.0.4/lib/rake/rake_test_loader.rb:10:in `block (2 levels) in <main>'\r\n\tfrom /home/vagrant/.rvm/gems/ruby-2.0.0-p0@global/gems/rake-10.0.4/lib/rake/rake_test_loader.rb:9:in `each'\r\n\tfrom /home/vagrant/.rvm/gems/ruby-2.0.0-p0@global/gems/rake-10.0.4/lib/rake/rake_test_loader.rb:9:in `block in <main>'\r\n\tfrom /home/vagrant/.rvm/gems/ruby-2.0.0-p0@global/gems/rake-10.0.4/lib/rake/rake_test_loader.rb:4:in `select'\r\n\tfrom /home/vagrant/.rvm/gems/ruby-2.0.0-p0@global/gems/rake-10.0.4/lib/rake/rake_test_loader.rb:4:in `<main>'\r\nrake aborted!\r\n```"},{"ts":1368204090000,"body":"+9001"},{"ts":1368725244000,"body":":thumbsup: :grin:"}]},{"timestamps":[{"ts":1363825097000,"body":"```\r\nbundle install --binstubs\r\n```\r\n\r\nThat would overwrite `bin/rails` that ship with Rails, and `rails` that ship with the gem only handles generating new app ... (I think)\r\n\r\nI think we keep getting issue like this. How do you think we should tackle it @jeremy @dhh ?"},{"ts":1363825131000,"body":"The patch I just added does actually resolve the regression in `rails console`, but I'd like to get feedback on it before trying to get it applied."},{"ts":1364288680000,"body":"Is there a temporary fix for this? I need to run `rails console production` on my linux box."},{"ts":1364312565000,"body":"You should be able to run 'bundle config --delete binstubs && rake rails:update:binstubs && bin/rails' to get things working.\r\n\r\nOn Mar 26, 2013, at 2:05 AM, Jamie Hill <notifications@github.com> wrote:\r\n\r\n> Is there a temporary fix for this? I need to run rails console production on my linux box.\r\n> \r\n> \\\r\n> Reply to this email directly or view it on GitHub."},{"ts":1364313363000,"body":"I then get `Don't know how to build task 'rails:update:binstubs'`"},{"ts":1364314893000,"body":"`rake rails:update:bin`\r\n\r\nOn Mar 26, 2013, at 8:56 AM, Jamie Hill <notifications@github.com> wrote:\r\n\r\n> I then get Don't know how to build task 'rails:update:binstubs'\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub.\r\n> "},{"ts":1364315314000,"body":"Perfect @indirect, many thanks.\r\n\r\nSo is the problem with Bundler? What is the long term fix? "},{"ts":1364325922000,"body":"Probably best to abort with an error when it's been overwritten.\r\n\r\nThink `config --delete binstubs` needs to be `config --delete bin` as well."},{"ts":1364400917000,"body":"`bundle config --delete bin && rake rails:update:bin` works, thanks.\r\n\r\n@jeremy Would you put that code in `application.rb`?"},{"ts":1364441184000,"body":"tested with cross-rails versions and fixed instructions. anything else?"},{"ts":1364469044000,"body":"What is the technical limitation why `bin/rails` can't work for the current app if it was generated with Bundler? Can't Rails detect it's in an existing rails app?"},{"ts":1364754020000,"body":"I'm with @mislav. Why break compatibility with `--binstubs`? As far as I'm aware, this is a pretty widely-used option."},{"ts":1365531250000,"body":"This seems to have [failed the build](https://travis-ci.org/rails/rails/builds/6190788), mind taking a look? :pray::smile:"},{"ts":1365532281000,"body":"`rails server` was also breaking in the same way as `rails console`, right? If so then I won't have to open another issue, I think it's the same one."},{"ts":1365536345000,"body":"@Agis-, yes, same issue.\r\n\r\n@carlosantoniodasilva I submitted a draft patch for review! I wasn't expecting it to just get merged. :) I will next have time to look at this tomorrow, so I'll check on things then if the build is still red."},{"ts":1365537116000,"body":"@indirect Ah, I almost lost my mind with this one! :bow: :clap: "},{"ts":1365537129000,"body":"@indirect thanks :heart:"},{"ts":1365697634000,"body":"@indirect So let me get this straight, the issue comes both Bundler overwriting `bin/rails` after you do a `bundle install --binstubs`? Could you shed some more light on why this regression happened with Rails 4? This was never the case in 3.2, was it?\r\n\r\nEdit: nvm, this was just answered: https://github.com/rails/rails/commit/9039c5038823754f79e04f1e83723e46229dbe05#commitcomment-2993604"},{"ts":1365699114000,"body":"the `rails` bin included in the rails gem try to find the `script/rails` file in Rails 3.2 and call it. But `script/rails` was changed to `bin/rails` and the `rails` bin included in the rails 4 gem try to find `script/rails` and `bin/rails`. If bundle override the `bin/rails` with its binstub the content of the `bin/rails` will not be the same of the included in Rails 4, so it will only print the help of the new command "},{"ts":1365699253000,"body":"@rafaelfranca thanks, this makes it even more clear!"}]},{"timestamps":[{"ts":1357316089000,"body":"This needs to use app.config.action_controller.raise_on_unexpected_params instead of living bare on the config root."},{"ts":1357317157000,"body":"@rafaelfranca You happy with the changes I made in response to your comment?"},{"ts":1357317335000,"body":"Please squash yout commits after of finish the proposed changes :smile: "},{"ts":1357317388000,"body":"I made two comments but it looks awesome.\r\n\r\nAnd also squash your commits as @guilleiguaran said."},{"ts":1357317656000,"body":"OK. Going to squash this down now."},{"ts":1357318138000,"body":"Just ran all the tests on action_pack, all passed."},{"ts":1357324060000,"body":"This should also be on by default when Rails.env is development or test."},{"ts":1357324116000,"body":"The last thing, update the configuring guides adding this options."},{"ts":1357324150000,"body":"@dhh good point. So we have to update the development and test environment template."},{"ts":1357324256000,"body":"I'm actually thinking that the railties could just have this embedded. Instead of adding even more to the env templates. Because nobody is really ever want to change it. And if they do, they still can (as that'll overwrite the default).\r\n\r\nOn Jan 4, 2013, at 7:29 PM, Rafael Mendonça França <notifications@github.com> wrote:\r\n\r\n> @dhh good point. So we have to update the development and test environment template.\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub.\r\n> \r\n> "},{"ts":1357324592000,"body":"hmmm, I'm not sure. It is easier to people copy an environment when all the configurations is there. If, someone want to create a ci environment based on the test environment they will have to know that this options is set only for development and test.\r\n\r\nThis can cost some hours until they understand that they have to add this configuration to the new environment."},{"ts":1357325548000,"body":"Don't agree with that. In fact, we have too much shit in those env files for now. We should only expose configs you're likely to change. This is not one of them.\r\n\r\nOn Jan 4, 2013, at 7:37 PM, Rafael Mendonça França <notifications@github.com> wrote:\r\n\r\n> hmmm, I'm not sure. It is easier to people copy an environment when all the configurations is there. If, someone want to create a ci environment based on the test environment they will have to know that this options is set only for development and test.\r\n> \r\n> This can cost some hours until they understand that they have to add this configuration to the new environment.\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub.\r\n> \r\n> "},{"ts":1357325861000,"body":"ok."},{"ts":1357327406000,"body":"@thomasfedb could you make the change @dhh asked and update the guides? Also put in the guides that the value is `true` by default in test and development environments."},{"ts":1357354038000,"body":"OK @rafaelfranca, @dhh.\r\n\r\nNow enabled in test and development.\r\n\r\nDocumentation updated in this commit: https://github.com/lifo/docrails/commit/bd104bf5ca4c756f2c94b7a9f1107a3b8e300490"},{"ts":1357374131000,"body":"Thank you"},{"ts":1357400674000,"body":"Powerful @thomasfedb "}]},{"timestamps":[{"ts":1360601499000,"body":"Makes sense, thanks."},{"ts":1360601556000,"body":"Woah, my bad I noticed it was to 2-3 after clicking the button =(. For the future, 2-3 is unmaintained, I'm going to revert this. Thanks."},{"ts":1360601834000,"body":"No problem, it was funny though!\r\n\r\nBtw this is covered in the master branch"}]},{"timestamps":[{"ts":1371208601000,"body":"Why we need this? \r\n\r\nClosing."}]},{"timestamps":[{"ts":1362912745000,"body":"/cc @pixeltrix \r\n\r\n@carlosantoniodasilva could you take a look?"},{"ts":1362922838000,"body":"Seems good, can you add `[ci skip]` to the commit message please? Thanks."},{"ts":1362926738000,"body":"@carlosantoniodasilva commit message is updated."}]},{"timestamps":[]},{"timestamps":[{"ts":1359120353000,"body":"cc/ @rafaelfranca \r\nthanks in advance"},{"ts":1359121485000,"body":"Thank you for the pull request.\r\n\r\nI'm sorry but I really prefer to not touch the `html-scanner` even if the change is trivial like this. Closing."}]},{"timestamps":[{"ts":1371988770000,"body":"@dhh, you had the objections to this previously, what do you think?\r\n\r\n@glcodewarrior, you need to rebase this."},{"ts":1372090494000,"body":"imo, we already have a way of doing this. Just register your own custom ERb template handler. Not a fan of this kind of overloading of the existing setup."}]},{"timestamps":[{"ts":1377549487000,"body":"Sorry - forgot about no-ci!"},{"ts":1377550285000,"body":"Seems good to me :+1: "},{"ts":1377552088000,"body":"/cc @fxn"},{"ts":1377612287000,"body":"Thanks"}]},{"timestamps":[{"ts":1357313699000,"body":"Thanks."},{"ts":1357313772000,"body":"As a side note, doc updates can be sent directly to lifo/docrails, it's a branch of Rails specific for documentation that has open commit access, and it's reviewed and cross merged from time to time. But pull requests here are welcome as well when in doubt."},{"ts":1357313778000,"body":"@tricknotes btw, you can commit documentation-related stuff directly to https://github.com/lifo/docrails. It gets cross-merged from time to time with the actual repo."},{"ts":1357314148000,"body":"Thanks for letting me know :smile: @carlosantoniodasilva @goshakkk \r\nI didn't know that."}]},{"timestamps":[]},{"timestamps":[{"ts":1371213523000,"body":"I am :-1: on it. :) If the `AbstractController::Helpers` or `ActionMailer::Base` says `helper :all` would work, we should simply fix the docs."},{"ts":1371213553000,"body":"Sure :-) "},{"ts":1371213567000,"body":"thanks for comments. "},{"ts":1371213647000,"body":"Thanks for the contributions, as always! :heart:"}]},{"timestamps":[{"ts":1370137048000,"body":"@rafaelfranca thanks for your comments. I've updated this PR. I found unnecessary and related test, so I removed https://github.com/kennyj/rails/commit/825a212ee2ac17bbece2272b159d5b289460b838 (author was me) too."},{"ts":1370137438000,"body":" :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"},{"ts":1370197545000,"body":":100: thanks!"}]},{"timestamps":[{"ts":1363651309000,"body":"HULK SMASH CODE FORMATTING PULL REQUEST BECAUSE CODE FORMATTING PULL REQUEST CAUSES BACKPORT AND MERGE CONFLICT PAIN."},{"ts":1363652335000,"body":"tenderhulk :grin:\r\n—\r\nSent from Mailbox for iPhone\r\n\r\nOn Mon, Mar 18, 2013 at 7:02 PM, Aaron Patterson <notifications@github.com>\r\nwrote:\r\n\r\n> HULK SMASH CODE FORMATTING PULL REQUEST BECAUSE CODE FORMATTING PULL REQUEST CAUSES BACKPORT AND MERGE CONFLICT PAIN.\r\n> ---\r\n> Reply to this email directly or view it on GitHub:\r\n> https://github.com/rails/rails/pull/9787#issuecomment-15089999"},{"ts":1363652721000,"body":"Yup."}]},{"timestamps":[]},{"timestamps":[{"ts":1363040129000,"body":"not a bug, this PR has been made before (#5329) and has been rejected"},{"ts":1363040156000,"body":"@miry we've been here before - I suggest that you read the discussion on 3756a3fdfe8d339a53bf347487342f93fd9e1edb for the back story."},{"ts":1363040791000,"body":"It is really confuse that a method with suffix `?` does not return `true` or `false`. IMHO\r\n\r\nBtw: https://github.com/rack/rack/blob/master/lib/rack/request.rb#L308"},{"ts":1363041087000,"body":"@miry whether a predicate should return `true` or `false` was debated to death in #5329 and 3756a3fdfe8d339a53bf347487342f93fd9e1edb - going over it again serves no purpose."},{"ts":1363041773000,"body":"@pixeltrix What do you think to replace word in the comment from the `true`(or even all phrase) to something more close to solution?\r\n\r\nhttp://apidock.com/rails/ActionDispatch/Request/xml_http_request%3F"},{"ts":1363041977000,"body":"That's how predicates are documented: \"returns true if...\", \"says whether...\". In the very exceptional cases when you  really want to commit or refer to the `true` singleton, the documentation guidelines of Rails say you need to use fixed-width font. True and false in regular font are used all over the place."},{"ts":1363163151000,"body":"@fxn What were the conditions to use the Regexp? \r\n\r\nIf only for case issue, so to use `downcase` is faster.\r\n\r\nhttps://gist.github.com/miry/5150174"},{"ts":1363168155000,"body":"The method checks for case-insensitive _inclusion_, not sure if that is needed though. I didn't write the original method and don't see any test checking inclusion.\r\n\r\nBear in mind that no matter how you rewrite it, _the method does not document singletons_. So even in the case of a refactor that returned singletons _you still could not rely on them_, the same way people cannot rely on `nil`/0 today.\r\n"},{"ts":1363176398000,"body":"@fxn I don't care about return value now, just performance issue."}]},{"timestamps":[{"ts":1361121915000,"body":"Actually, do you think this is an expected behavior, or do you think it should be fixed?"},{"ts":1361146620000,"body":"My argument as two why it should be fixed (which I made briefly to @carlosantoniodasilva and @senny in #9269) is as follows.\r\n\r\nFirst, it seems to me that, absent a reason to the contrary, `number_to_human` ought to return a value given any numeric input and valid options. The two cases this patch adresses violate this rule.\r\n\r\nSecond, this patch makes `number_to_human` more user-friendly in what I would imagine is a relatively common use case. Namely, cases in which  one wants to display the number unaltered up to a certain value, and then abbreviate the number for bigger values. An example of such a case might be the display of follower and following numbers in a social app.\r\n\r\nBefore this fix, this use case requires something like: \r\n\r\n``` ruby\r\nif @follower_count < 1000\r\n  @follower_count.to_s\r\nelse\r\n  number_to_human(@follower_count, :precision => 2,\r\n    :units => {:thousand => 'k', :million => 'M'})\r\nend\r\n```\r\n\r\nWith this patch, on the other hand, one can remove the if-clause altogether."},{"ts":1361392886000,"body":"Sorry, all. I've made some git mistakes here. I'm quite embarrassed. I think the best approach is for me to close this request and open a fresh one. I realize this is not ideal because the discussions won't be connect. My apologies! "},{"ts":1361430758000,"body":"@hoffm you don't need to close a PR. you can always fix your git mistakes and then force push the new version onto the branch. This will automatically update the PR."},{"ts":1361453888000,"body":"@senny I'll certainly do that in the future (and also be more careful not to get into this position). In this case, given that I've already started a new request with the same branch name, I think it's cleaner to transfer discussion over there. Is that cool?"},{"ts":1361454076000,"body":"yes that's reasonable, just wanted to let you know that you don't need to close and reopen."}]},{"timestamps":[{"ts":1372202424000,"body":"Thanks."}]},{"timestamps":[{"ts":1366532950000,"body":"Thanks. Don't forget about docrails for these kinds of things!"},{"ts":1366533281000,"body":"Almost forgot. Makes sense since it doesnt change any code. Thanks!\r\nOn Apr 21, 2013 1:59 PM, \"Steve Klabnik\" <notifications@github.com> wrote:\r\n\r\n> Thanks. Don't forget about docrails for these kinds of things!\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/10280#issuecomment-16717746>\r\n> .\r\n>"}]},{"timestamps":[{"ts":1372380385000,"body":"Thanks, but this one I'm not sure is going down in 4.1 or 5.0.\r\n\r\nSummoning @jonleighton."},{"ts":1372410779000,"body":"We're removing the hard dependency in 4.1, so people will need to explicitly add `activerecord-deprecated_finders` to their Gemfile from then on, but that gem will be supported until 5.0. So this can be merged."},{"ts":1372419006000,"body":":confetti_ball:"},{"ts":1372420600000,"body":":green_heart::yellow_heart::heart::blue_heart::purple_heart:"}]},{"timestamps":[{"ts":1376388600000,"body":"I think someone tried to do this, and was rejected. You may review old issues."},{"ts":1376388892000,"body":"@pftg but http://edgeapi.rubyonrails is working fine so should we refer it rather than http://api.rubyonrails.org where readme links are broken #11862 \r\n\r\nThanks @pftg "},{"ts":1376388968000,"body":"cc @zzak"},{"ts":1376395592000,"body":"Sorry, we do not use the edge api links in docs, they should always point to stable ones, otherwise on every new release we'd need to update the guides back to api. Thanks."},{"ts":1376395754000,"body":"But Please change the README links of api.rubyonrails.org it is broken #11862 "},{"ts":1376397894000,"body":"@rajcybage : It will be fine when 4.0.1 will be released."}]},{"timestamps":[]},{"timestamps":[{"ts":1359375367000,"body":"It is not misleading if you run the command like this:\r\n\r\n```\r\nrails new -T my_application\r\n```\r\n\r\n`APP_PATH` was given but the error will raise."},{"ts":1364071807000,"body":"@dharamgollapudi had you saw my comment? Mind to change the pull request to take in consideration that case?"},{"ts":1373732118000,"body":"Closing this. @dharamgollapudi please reopen again if you feel that this PR should change and merge.\r\n\r\nthanks! "}]},{"timestamps":[{"ts":1372690855000,"body":":+1:"}]},{"timestamps":[]},{"timestamps":[{"ts":1360321749000,"body":"It's a completely backward incompatible change unfortunately, but I agree that underscores doesn't seem good in alt attribute, it always bothered me. Thanks."},{"ts":1360339070000,"body":"Awesome. :+1:\r\n\r\nEven though it's not backwards compatible, nobody should be relying on `alt` tags for CSS or anything, so it shouldn't cause breakage."},{"ts":1360345590000,"body":"@carlosantoniodasilva, thanks for the suggestions (and catching the typos). Should I add example output to the changelog _and_ the documentation on the method itself, or just in the changelog?"},{"ts":1360393539000,"body":"@carlosantoniodasilva I added some clearer documentation and some examples. Check it out."},{"ts":1360398710000,"body":"About the changelog.\r\nIt is wrong mentioning ```Apple Voice Over```\r\nBecause before it works bad with ``` Apple Voice Over ```, as said [here](http://www.w3schools.com/tags/att_img_alt.asp), the current implementation is violating the ```alt``` definition.\r\n\r\n* The text should describe the image if the image contains information\r\n* The text should explain where the link goes if the image is inside an ```<a>``` element\r\n* Use ```alt=\"\"``` if the image is only for decoration"},{"ts":1360431159000,"body":"I'm not sure why you would say that mentioning Voice Over is \"wrong\", @acapilleri. The reason I mention it is that it's a screen reader, and that screen readers for the vision impaired are, I would argue, the primary use case for the `alt` attribute. (I also don't think that [W3 Schools](http://www.w3schools.com) is a valid reference, as argued [here](http://w3fools.com/).) \r\n\r\nThe definition, as you state it, is mostly correct, but incomplete. As noted in the (SitePoint Reference)(http://reference.sitepoint.com/html/img/alt), \r\n\r\n>[If] the user is visually impaired and is accessing the content using a screen reader—the alt \r\n>attribute provides alternative content that can be displayed instead of the image.\r\n\r\n[456 Berea St](http://www.456bereastreet.com/archive/200412/the_alt_and_title_attributes/) also has a good write up on the alt tag and its use in screen readers. And the [W3 specification](http://www.w3.org/TR/html4/struct/objects.html#adef-alt) mentions other use cases, primarily focused on accessibility, not instances where the image won't load:\r\n\r\n>Specifying alternate text assists users without graphic display terminals, users whose browsers don't support forms, visually impaired users, those who use speech synthesizers, those who have configured their graphical user agents not to display images, etc.\r\n\r\nThus, screen readers are my primary concern, as noted in the pull request title, because I think accessibility is important. So the reason I mention Voice Over is twofold: \r\n\r\n1. The current implementation is broken in Voice Over\r\n2. That was the screen reader with which I tested it\r\n\r\nFurther, I didn't need to test it in any other screen readers because it was broken on Apple computers, a significant enough portion of the market that, even if this worked on every other screen reader, it would still need fixing for Apple's Voice Over.\r\n\r\nLastly, in the other use cases that you correctly point out, if the image doesn't display, the text should describe the image, and a long, hyphenated and capitalized string doesn't work well for that case, either. \r\n\r\nSo whatever the reason that an `alt` attribute is being displayed, whether it's by a screen reader, because the user is using a headless web browser, because the image path is incorrectly specified, because the user has a slow connection and it hasn't rendered yet, or any other reason, this description needs to read like a normal phrase.\r\n"},{"ts":1360445919000,"body":"Can you squash please?"},{"ts":1360538791000,"body":"Squashed. Please let me know if there's anything else you'd like to see happen on this."},{"ts":1360540553000,"body":"Looks great. :+1:"},{"ts":1360585317000,"body":"Thanks!"}]},{"timestamps":[]},{"timestamps":[{"ts":1360586811000,"body":"Seems good :+1:. It'd be nice to have a test ensuring that `super` will actually work and we won't break it in the future :)."},{"ts":1360586906000,"body":"Also a changelog entry, thanks @lest!"},{"ts":1360587315000,"body":"@carlosantoniodasilva I'm thinking about changing [current overrided accessors in tests](https://github.com/rails/rails/blob/759679289e6f22a5e4cfd9015e5102194fb92b29/activerecord/test/models/admin/user.rb#L23-29) to use `super`. c/d?"},{"ts":1360589565000,"body":"It seems ok.. but then we won't have anything that tests for that specifically right? May be better to have a different attribute for this."},{"ts":1360591512000,"body":"@carlosantoniodasilva Updated. Please take another look. Thanks <3"},{"ts":1360598585000,"body":"Seems great, thank you."}]},{"timestamps":[{"ts":1367605460000,"body":"This needs a test."},{"ts":1367606474000,"body":"Yup. That's why we had the regression in the first place."},{"ts":1367666925000,"body":"I've added test."}]},{"timestamps":[]},{"timestamps":[{"ts":1368721344000,"body":"Thank you"}]},{"timestamps":[{"ts":1377026086000,"body":"We can’t automatically merge this pull request. Could you rebase it?"},{"ts":1377026984000,"body":"@rafaelfranca: sorry about that, what about now?"},{"ts":1377027237000,"body":"Thanks"}]},{"timestamps":[{"ts":1365155151000,"body":"Looks good, this will also need an entry in the CHANGELOG."},{"ts":1365169095000,"body":"Added changelog entry."},{"ts":1365623476000,"body":"Is there a chance this is going to be back-ported to 3.1 or 3.2? We just upgraded an app from 3.0 to 3.1 (and eventually 3.2) and this broke.  it worked in 3.0 (it was setting defaults to 0 not 0::bigint) and broke a /lot/ of our tests when upgrading to 3.1.\r\n\r\nSo this has been broke since 3.1 but just noticed 6 days ago. :("},{"ts":1365668071000,"body":"I think @zacheryph reqeust for a backport is valid. This clearly fixes a bug and should not change behavior outside the scope of the bug. I opened a PR to backport: #10172"}]},{"timestamps":[{"ts":1368762406000,"body":"@vipulnsward Why did you close both this and #10610?"},{"ts":1368762565000,"body":"@ptn Umm, this isn't closed? The other one is."},{"ts":1368763065000,"body":"Duh. Ignore me :)"}]},{"timestamps":[{"ts":1366908025000,"body":"I don't think it is unnecessary. That payload has a key-value pair to make sure it is the same that was passed. If we test with a empty hash it can be some internal empty hash"}]},{"timestamps":[{"ts":1364424448000,"body":"Seems legit."},{"ts":1364424570000,"body":":+1: nice work @SamSaffron "},{"ts":1364424927000,"body":"No, it doesn't seem legit:\r\n\r\n```ruby\r\nclass String\r\n  def blank?\r\n    self !~ /[^[:space:]]/\r\n  end\r\n\r\n  def blank2?\r\n    self =~ /^[[:space:]*]$/m?true:false\r\n  end\r\n\r\nend\r\n\r\np \"  \".blank?  # => true\r\np \"  \".blank2? # => false\r\n```"},{"ts":1364424973000,"body":"hold off a tad ... I think the regex still need a bit of love ... fixing\r\n\r\n\r\nOn Thu, Mar 28, 2013 at 9:50 AM, Michael Bernstein <notifications@github.com\r\n> wrote:\r\n\r\n> [image: :+1:] nice work @SamSaffron <https://github.com/SamSaffron>\r\n>\r\n> —\r\n> Reply to this email directly or view it on GitHub<https://github.com/rails/rails/pull/9958#issuecomment-15558165>\r\n> .\r\n>"},{"ts":1364425187000,"body":"> Also, I wonder if value_to_boolean in AR should even be calling blank?, shouldn't .nil? || .empty? do ... it would be much faster\r\n\r\n@SamSaffron I would vote for this rather than muck with `blank?`"},{"ts":1364425624000,"body":"@tenderlove yeah ... once I corrected the regex this becomes a bit slower ... \r\n\r\nwill close ... \r\n\r\njust to confirm ... do you know of any dbs that return \"   \" and really mean null ? "},{"ts":1364428479000,"body":"FYI, moved discussion here: https://github.com/rails/rails/commit/111611b511c27ec29be6a8837de6d8f25cded5a7#commitcomment-2894924\r\n\r\nits the proper way to fix this anyway, blank should not be being called tons of times from the internals."}]},{"timestamps":[{"ts":1368173585000,"body":"I just applied this patch #7695 here and did a PR. Tests looks fine on my machine."},{"ts":1368382509000,"body":"Closing this this is merged 442b7c8ccfe107e05b309e1ef72b760716fa4cba"},{"ts":1368382543000,"body":"@arunagw I merged the original pull request (with some git magic). You still can improve the CHANGELOG messages if you want"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1363238679000,"body":"//cc @senny @carlosantoniodasilva I hope I am not bugging you with these verrrry small improvements each day :smile: \r\n"},{"ts":1363240700000,"body":"Improvements are never annoying. :)"}]},{"timestamps":[{"ts":1361991796000,"body":"/cc @carlosantoniodasilva @rafaelfranca \r\n\r\n@pixeltrix can you take a look?"},{"ts":1362021860000,"body":"Thanks @senny - I missed this set of options when I refactored the constraints code. This is how I'd do this kind of route:\r\n\r\n``` ruby\r\nget '/products.:format', to: 'products#index', format: /json/\r\n```\r\n\r\ni.e. make the required format part of the path."},{"ts":1362075681000,"body":"Thanks, @senny and @pixeltrix. Actually I always found it dumb to have to specify both \"format: true\" and \"format: /json/\" in the constraints to force the format. First I did try to do something like:\r\n\r\n```ruby\r\nget '/products.json' => 'products#index'\r\n```\r\n\r\nBut that didn't work if I remembered correctly. When I asked in the rails-core list a while ago I was pointed that I should be doing as in the route I pointed out when I reported the issue.\r\n\r\nBut I certainly prefer your suggested approach, thanks.\r\n"},{"ts":1362095761000,"body":"@rosenfeld for your example to work you'd have to specify `format: false`:\r\n\r\n``` ruby\r\nget '/products.json' => 'products#index', :format => false\r\n```\r\n\r\nwhich seems counter-intuitive when you look at it."},{"ts":1362098386000,"body":"@pixeltrix I believe that wouldn't work either for what I want... Look, I don't really care if the URL ends up with \".json\" or not. The main reason I started to be concerned about the format is that I realized that when Rails caches some action it doesn't store the response content-type in the cache. So, the first time the action would respond with content-type 'application/json' but next time it would be 'text/html' if I remember correctly. Then I have been told that the cached action will use the content-type based on the format of the request, so I can't use \"format: false\". And the reason why I want to enforce the format is so that I don't forget about it in my client-side applications when calling some action with jQuery.getJSON (which won't run the callback if the wrong content-type is served). Sorry if this is confusing but I couldn't find any way to simplify that... That's why I ended up grouping all my JSON requests (99.9% of all requests) in a scoped block that would set format to true and the format constraint to /json/ to minimize any maintenance pain from my side..."},{"ts":1362098481000,"body":"Ah, and I remembered. Actually my first try was this one if I recall correctly:\r\n\r\n```ruby\r\nget 'products' => 'product#index', format: 'json'\r\n```"}]},{"timestamps":[]},{"timestamps":[{"ts":1365878543000,"body":"/cc @kennyj @jonleighton @tenderlove "},{"ts":1365879378000,"body":"@MSch"},{"ts":1366061251000,"body":"This seems fine I think, but I don't think we need a whole new test file for it. I'd add it to `base_test.rb` I think, or wherever the existing tests are for clone/dup."},{"ts":1366070286000,"body":"@jonleighton Moved the test into the CloneTest."}]},{"timestamps":[{"ts":1357219394000,"body":"Thanks @pcasaretto. \r\n\r\nAs a side note, doc updates can be sent directly to lifo/docrails, a branch of Rails with open commit rights specific for documentation, which is cross merged from time to time."}]},{"timestamps":[]},{"timestamps":[{"ts":1361848357000,"body":"@dickeyxxx Thanks. In future, please use [docrails](https://github.com/lifo/docrails) for such changes."}]},{"timestamps":[{"ts":1371298126000,"body":"I added a few comments, can you also add a short CHANGELOG entry?"},{"ts":1372934648000,"body":"@LTe ping, are you still on this PR?"},{"ts":1373060435000,"body":"@senny yes, I will create update soon :)"},{"ts":1373399591000,"body":"@senny updated"},{"ts":1373399900000,"body":"@LTe it does no longer apply, can you push a rebased version?"},{"ts":1373402857000,"body":"@senny rebased and updated"},{"ts":1373459091000,"body":"@LTe thanks for your contribution :yellow_heart: "}]},{"timestamps":[{"ts":1369723135000,"body":"Thank you for the pull request! Could you please rebase your commits? Right now this pull request has 10 commits. :)"},{"ts":1369723699000,"body":"@josevalim Working on it! Was having trouble doing it while following 7.11.1 in the contributing guide. I think I'm close, though... :grinning: "}]},{"timestamps":[]},{"timestamps":[{"ts":1368846029000,"body":"What I hand in mind was something like:\r\n\r\n```ruby\r\nclass ArrayHandler\r\n  def self.handles?(klass)\r\n    klass === Array\r\n  end\r\n\r\n  def call(attribute, value)\r\n    # same as now\r\n  end\r\nend\r\n\r\n# same as above for defining all the other handlers\r\n\r\nclass PredicateBuilder\r\n  @handlers = []\r\n\r\n  def append_handler(handler)\r\n    @handlers.append(handler)\r\n  end\r\n\r\n  def prepend_handler(handler)\r\n    @handlers.prepend(handler)\r\n  end\r\n\r\n  append_handler ArrayHandler # same for all the other handlers, called from most specific to most general\r\n\r\n  def self.handler_for(object)\r\n    @handlers.detect{ |handler| handler.handles?(object) }\r\n  end\r\nend\r\n\r\n# below is custom user code example:\r\n\r\ndef CustomHandler # user-defined if needed\r\n  def self.handles?(klass)\r\n    # custom logic that can be anything, not just `===`\r\n  end\r\n\r\n  def call(attribute, value)\r\n    # custom logic\r\n  end\r\nend\r\n\r\n# will be first handler to be checked against, because using `prepend` rather than `append`\r\nPredicateBuilder.prepend_handler(CustomHandler)\r\n\r\n"},{"ts":1368846820000,"body":"@egilburg I understand that. My question was what the benefit of that would be aside from looking more ruby-like. `append_handler` is pointless, as every object will always match `BasicObject`, so no handler after that would ever be matched. The implementation of `handles?` for every existing case would be nearly identical, and it'd end up introducing a lot of duplication.\r\n\r\nDon't get me wrong, I like the idea of having a class defined to handle this responsibility, but I feel like there's something to be said for the ability to simply pass in a class and a lambda for the simple cases. That said, I'm not opposed to the idea, assuming no performance hit. Anyone else have an opinion on the issue?"},{"ts":1368847986000,"body":"@egilburg I gave the class based method a shot. You can see what the code looks like here: https://github.com/sgrif/rails/tree/sg-class-based-handlers. It has about a 10-15% performance hit, unfortunately."},{"ts":1368851051000,"body":"I really like the idea.\r\n\r\nCould you share your benchmarks data?\r\n\r\n@tenderlove WDYT?"},{"ts":1368851882000,"body":"@rafaelfranca I've only done some very light benchmarking. Here's the code:\r\n\r\n    puts(Benchmark.measure do\r\n      1_000_000.times do\r\n        Topic.where(title: 'something')\r\n      end\r\n    end)\r\n\r\nTime before:\r\n 29.600000   0.040000  29.640000 ( 29.638634)\r\n\r\nTime after:\r\n 30.540000   0.010000  30.550000 ( 30.550835)\r\n\r\nDefinitely need to do some more thorough testing, but the preliminary numbers look good."},{"ts":1369060841000,"body":"I like this overall idea. I'd be interested in seeing an example from an application where this would be useful.\r\n\r\nOne issue with the current implementation: inflecting on the object's class makes it difficult to use patterns like Decorator, because the Decorator's class will be matched instead. Matching on an object's class is also duplicating behavior that Ruby implements itself, as it's generally Ruby's job to decide what method definition to invoke based on a receiver's type. Ruby already does a good job of this: method dispatch is fast, predicable, and supports inheritance and other language features like `method_missing`. It might be worth looking at the instance method version to see if there are any strong downsides."},{"ts":1369062159000,"body":"That's a good point on Decorators. I'm not sure that there's any way to handle that with the method it's using, now.\r\n\r\nThe only reason I didn't go to using an instance method straight away is because it'd require monkey patching several core classes. Especially since this would require patching BasicObject, it makes me feel a bit uncomfortable. That said, I'm not opposed to doing it that way if that's not a huge concern."},{"ts":1369062382000,"body":"Monkey-patching `BasicObject` does seem pretty serious. Its whole purpose is to have as few methods as possible.\r\n\r\n* Could you patch `Object` instead?\r\n* Even better, could you patch a few core classes like `String`?\r\n* Would a `respond_to?` check with a default case make sense?"},{"ts":1369063022000,"body":"- Yes, I think patching `Object` should be fine. Technically we'd be changing the behavior from what was there, but any case that'd be affected by that would have gotten an error from Arel, anyway.\r\n- I'm not sure how I feel about that one. We'd be introducing duplication of what Arel can handle as a value. I'd prefer something that's a true default.\r\n- `respond_to?` is much nicer than monkey patching `Object`, but we'll need to benchmark it as there's probably a performance hit.\r\n\r\nEdit: misread the second question"},{"ts":1369067344000,"body":"@rafaelfranca Do you have any thoughts on the monkey patching issue?"},{"ts":1369067794000,"body":"Right now I don't have a strong opinion about it, but I'd like to see a real usage before changing the current implementation to support it.\r\n\r\nDo you guys have an example where the Decorators pattern would be used?"},{"ts":1369069100000,"body":"The feature doesn't exist yet and I'm not sure how I'd use it. I'd still be interested in an example where it would be useful.\r\n\r\nI brought up the Decorator issue because it's a problem I've repeatedly had with Ruby code that inflects on another object's class."},{"ts":1369070553000,"body":"I'm not sure about an example of the Decorator pattern being used with this, but I could definitely see it being a problem.\r\n\r\nI gave the instance method version a try, just to see what the code would look like, and there were two things of note that happened. First was that version runs as much as 10% faster than what is currently on master. However, the test case of adding a handler for Regexp became a good bit uglier, as it now required monkey-patching core classes to add support for one.\r\n\r\n@jferris, as for use cases, I believe @joannecheng had a good one she ran into recently involving using PostGIS and a Location class. I've got a few ideas for some utility class gems that would be much less hacky with this sort of support. (For example, a currency class that normalized whether the database column was an int or float, and always came out as an integer in cents, with a few presentation helpers). We'd also be able to do things like database side encryption much more easily. "},{"ts":1369753603000,"body":"Anyone have any other thoughts on this?"},{"ts":1370639848000,"body":"@rafaelfranca Pinging again to see if anything else needs to be done on this?"},{"ts":1374683170000,"body":"This has been sitting open for about 2 months now, is there anything that needs to happen for this to be merged/rejected?"},{"ts":1374764390000,"body":"I'll take the decision to merge this one.\r\n\r\nCould you rebase it?\r\n\r\nPing me when done and I'll merge.\r\n\r\nSorry for the delay"},{"ts":1374973842000,"body":"@rafaelfranca I've rebased and squashed."},{"ts":1375151552000,"body":" :shipit:"},{"ts":1375151560000,"body":"Thank you and sorry for the delay"}]},{"timestamps":[]},{"timestamps":[{"ts":1373081776000,"body":"Got @evsyukovmv commit in this one. Will close and open a new one."}]},{"timestamps":[{"ts":1362754237000,"body":"I'm not sure these lines are unnecessary so I think is better to leave it as it is"},{"ts":1362754487000,"body":"The removed lines are tailored into an one-liner, so no harm done. The re-written one line will serve the purpose of the removed lines, so no worries. "},{"ts":1362754728000,"body":"I don't think so, the test description is explicitly saying that the test is for when you the set foreign key after the object load and the one line is not doing this."},{"ts":1362755292000,"body":"Right...the removed lines kill the purpose of the test case. "},{"ts":1362760265000,"body":"Thank you for the contribution"}]},{"timestamps":[{"ts":1356527960000,"body":"Updated. Thanks for suggestions, guys."},{"ts":1356532977000,"body":"Thanks for your contribution!!!"}]},{"timestamps":[{"ts":1362088781000,"body":"OMG!! Thank you @trevorturk :heart:\r\n\r\n@fxn do you want to do the sanity check? It seems good to me."},{"ts":1362089162000,"body":":heart: "},{"ts":1362089654000,"body":":heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:"},{"ts":1362219222000,"body":":heart:"}]},{"timestamps":[{"ts":1371335798000,"body":"/cc @rafaelfranca "},{"ts":1371347238000,"body":"Thank you"},{"ts":1371369016000,"body":"Thanks :)"}]},{"timestamps":[{"ts":1373029031000,"body":"@gsamokovarov cool. I like it! But this is cosmetic only changes, in order of 7.2 section http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html is not acceptable."},{"ts":1373031445000,"body":"@pftg Yeah, I thought about that, but since some old hash style to new hash style changes were accepted, decided to give it a shot :)"},{"ts":1373031579000,"body":":)"}]},{"timestamps":[{"ts":1373995664000,"body":"Why?"},{"ts":1374035386000,"body":"rather than sql quoted table and write a function quote_table_name with gsub , we can use arel table name or table_name "},{"ts":1374146737000,"body":":-1: ```.arel_table#name``` isn't quoted - if you wanted an unquoted string you could just go straight for ```.table_name```. Don't see the point of going unquoted generally, or here."}]},{"timestamps":[{"ts":1358941858000,"body":"Thanks."}]},{"timestamps":[{"ts":1362950197000,"body":"Do you have any specific use case for having such a method? It's good to know where and when things can be used so that we can have more context to decide whether it's useful or not to add things to the framework, otherwise it already starts with negative impact. Thanks."},{"ts":1362950544000,"body":"I'm storing a Duration in a model by serializing the parts hash. I wanted to allow natural language entries without doing something insecure, like calling eval() to get a Duration from a string.\r\n\r\nOn Mar 10, 2013, at 5:17 PM, Carlos Antonio da Silva <notifications@github.com> wrote:\r\n\r\n> Do you have any specific use case for having such a method? It's good to know where and when things can be used so that we can have more context to decide whether it's useful or not to add things to the framework, otherwise it already starts with negative impact. Thanks.\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub.\r\n> "},{"ts":1371324976000,"body":"This doesn't seem like something ActiveSupport needs to do. It could be its own separate gem.\r\n\r\nAlso it doesn't support different date locales.\r\n\r\nI'd say this shouldn't be pulled."},{"ts":1371326650000,"body":"Agree. Thank so much for the contribution."}]},{"timestamps":[{"ts":1357333419000,"body":":+1: \r\n\r\nWould be really nice to have this!"},{"ts":1357333785000,"body":"Could you add a changelog entry?"},{"ts":1357334751000,"body":"@rafaelfranca yep - done."},{"ts":1357334862000,"body":"Thank you"},{"ts":1357334966000,"body":"@robworley awesome :+1: "},{"ts":1357337253000,"body":"A nice to have. Thank you @robworley. "},{"ts":1357686382000,"body":"More PG goodness.  Thanks!"},{"ts":1365779639000,"body":"Hi, I'm working with enum types in PG and had to create my own type (because of how PG works).\r\nI keep seeing the ``unknown OID: kind(183152)`` error, is there anything that can be done about that?"}]},{"timestamps":[]},{"timestamps":[{"ts":1364038895000,"body":"Closing because @tenderlove made the same change in db3a6e6."}]},{"timestamps":[{"ts":1372421612000,"body":"Thanks!"}]},{"timestamps":[{"ts":1357345998000,"body":"Seriously, I ack'ed the project for the beginning of the message, and this test didn't come up because of the `\\w+` regexp =(. No worries, thanks @amatsuda!"},{"ts":1357346312000,"body":"@carlosantoniodasilva Yeah, that's exactly what I did... :neckbeard:"}]},{"timestamps":[{"ts":1369070559000,"body":"@egilburg refactored wrt your request"},{"ts":1369082331000,"body":"closing this while I investigate why I don't see failures with my tests minus my patches."}]},{"timestamps":[{"ts":1371696771000,"body":"Thank you so much for the pull request. But like you said we don't accept features in the 3-2-stable branch. Neither on 4-0-stable. Only master.\r\n\r\nAlso, the sprockets integrations was moved to https://github.com/rails/sprockets-rails.\r\n\r\nI'm not sure if we will accept this feature but I sugest you talk with @guilleiguaran or @josh.\r\n\r\nIn my opinion I don't see any reason to support this in Rails by default since it is not a widely used."}]},{"timestamps":[]},{"timestamps":[{"ts":1373799385000,"body":"thanks :yellow_heart: "}]},{"timestamps":[{"ts":1377583758000,"body":":+1: "}]},{"timestamps":[]},{"timestamps":[{"ts":1363825792000,"body":"This pull request cannot be automatically merged. :grin:"},{"ts":1363826006000,"body":"This commit was already merged"},{"ts":1363826045000,"body":"Ops, I was wrong"},{"ts":1363836335000,"body":"Considered doing this, but it introduces a bare toplevel constant as de facto API.\r\n\r\nCan work around this with `Rake::Task['test:run'].enhance 'test:before'` though it doesn't fit with `test:run`'s error-collection scheme."},{"ts":1375540776000,"body":"this file has changed a lot from last 5 months. Please do a new PR if this patch is still required.\r\n\r\n\r\nClosing this.\r\n\r\nthanks."}]},{"timestamps":[{"ts":1364952368000,"body":"Seems good to me.\r\n\r\n@tenderlove any comments?"},{"ts":1364952374000,"body":"Thanks @SamSaffron :+1:"}]},{"timestamps":[]},{"timestamps":[{"ts":1363529858000,"body":":+1: Thanks."}]},{"timestamps":[]},{"timestamps":[{"ts":1357213738000,"body":"Thanks."}]},{"timestamps":[{"ts":1356920761000,"body":"I wouldn't do `head :not_found, :content_type => \"image/png\"` in the test.\r\nhead :not_found shouldn't be a png. I know this doesn't change anything but tests could be used as examples to do things :)."},{"ts":1356952319000,"body":"@spastorino could other response codes have the mime-type \"image/png\", or any other content-type, which do not have a charset? (for example `head :created, :content_type => 'image/png')\r\n\r\nbottom line, do you think we need to fix that charset is always appended?"},{"ts":1356959128000,"body":"@senny yes, just do `head :ok, :content_type => 'image/png'`"},{"ts":1356959503000,"body":"What do you think would be a good way to solve the problem? Removing the charset from every response generated with head or inspecting the content-type?"},{"ts":1356965289000,"body":"Can't think of nothing better than https://gist.github.com/0072a9f5e1ebe14f35a9\r\n/cc @josevalim "},{"ts":1356966646000,"body":"We should not need the charset parameter for responses generated with `head` (they have a empty body anyway). I incorporated your solution and added a CHANGELOG entry."},{"ts":1356967784000,"body":"I think that we should not change this behavior. RFC says:\r\n\r\n> The metainformation contained\r\n> in the HTTP headers in response to a HEAD request SHOULD be identical\r\n> to the information sent in response to a GET request.\r\n\r\nSo while I agree that we should not include charset when `image/png` content type is returned, I don't see any value in removing it from any `HEAD` request."},{"ts":1356968058000,"body":"@drogus what the patch is doing is ...\r\nwhen you do `head :ok, :content_type => \"image/png\"` you're saying you want your content type to be \"image/png\" not \"image/png; charset=utf-8\""},{"ts":1356968117000,"body":"@spastorino yup, sorry, I totally misunderstood the problem *and* the patch after conversation with you on IM, ignore my comment :)"}]},{"timestamps":[{"ts":1357819063000,"body":"Some minor style comments, thanks!"},{"ts":1357845995000,"body":"There's still a merge commit in there."},{"ts":1357847506000,"body":"I removed the merge commit, I hope this can be pulled in."},{"ts":1357849794000,"body":"Looks good, just another minor comment and we'll merge. Thanks."},{"ts":1357850446000,"body":"@carlosantoniodasilva: Thanks for the comments. I just fixed them. Hope all is good now."},{"ts":1357871605000,"body":"Just remember to squash your commits and update the commit message to something more descriptive."},{"ts":1357872362000,"body":"@rafaelfranca: I squashed my commits. What should be my commit message if this does not work?"},{"ts":1357872447000,"body":"Now the commit message is good, but we have three commits"},{"ts":1357872957000,"body":"@rafaelfranca: Sorry, I don't see those commit. Should I close this and create a new pull request with my changes as a single commit? Thanks!"},{"ts":1357873040000,"body":"Ahhh, now it is fine, I think was the force push.\r\n\r\n@carlosantoniodasilva :shipit: "},{"ts":1357873090000,"body":"Yeah, I saw it a couple of times. Github's backend job had to catch up."},{"ts":1357903124000,"body":"Thanks @adomokos!"}]},{"timestamps":[{"ts":1370349424000,"body":"Looks like there are unrelated commits, can you please rebase from master and squash the commits into one, only leaving the relevant `Rails.application` changes?"},{"ts":1370350786000,"body":"My last two commits are for Rails.application you can merge these two commits @d137a5d and @f62a57d by cherry picking "},{"ts":1370351734000,"body":"The idea of pull requests is to make pulling your fork and cherry picking unnecessary."},{"ts":1370411992000,"body":"Done Please look into this https://github.com/rails/rails/pull/10846..\r\n\r\nThanks"},{"ts":1370415249000,"body":"This didn't require a new pull request.\r\nAnd your new one could have a much better commit message.\r\n\r\nWhat you need to do is just to [squash your commits](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#iterate-as-necessary)"},{"ts":1370415515000,"body":"Thank you @dmathieu  for your suggestion already did @f0ba70c"},{"ts":1370437889000,"body":"We should discuss on the https://github.com/rails/rails/issues/10846 .\r\nI'm closing this.\r\n\r\nBTW: @rajcybage, you can use ' git push -f ' option :)"},{"ts":1370438754000,"body":"Yeah sure ..\r\n\r\nThanks @carlosantoniodasilva  @kennyj  @dmathieu "},{"ts":1370610887000,"body":"Will you merge the request? "},{"ts":1370611243000,"body":"@rajcybage see comments on #10846 \r\n\r\nIf you face any issue in doing rebasing and squashing.  Join here https://ohmygod.campfirenow.com/e57ab\r\n\r\nI can help you in doing that."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1374252268000,"body":"Thank you for the PR but you must require `action_dispatch` before requiring any of the other modules available in `action_dispatch`."},{"ts":1374397455000,"body":"Thanks for the info @josevalim, sorry for wasting your time :clock9:"}]},{"timestamps":[]},{"timestamps":[{"ts":1375451314000,"body":"Not having the `log_level` applied with a custom logger can be confusing. I imagine Heroku users get bitten by this rather often. :thumbsup:"}]},{"timestamps":[]},{"timestamps":[{"ts":1372273529000,"body":"Can you add [ci skip] in commit message also? And force push again?"},{"ts":1372273672000,"body":"@arunagw done"},{"ts":1372360789000,"body":"@pftg can you please squash the commits?"},{"ts":1372360930000,"body":"@senny done!"}]},{"timestamps":[{"ts":1363617159000,"body":"@carlosantoniodasilva  @norman  Fixed/Squashed it."},{"ts":1363621747000,"body":"Thanks @normal @vipulnsward "}]},{"timestamps":[{"ts":1372086821000,"body":"Thank you for the pull request.\r\n\r\nI think inline styles is a bad practice, so I'm :-1: to add this feature since it may promote this bad practice."},{"ts":1372105009000,"body":"One example: when writing html mail views, inline styles are sometimes inevitable since some mail clients refuse to parse non-inline style. Unless you have some kind of compiler that turns css files into inline style on the run, the alternative to this is to hardcode a bunch of inline string styles which is even worse.\r\n\r\nA lot of things Rails supports is arguably bad practice - such as inline onClick JS as opposed to unobtrusive observers. But at the end of the day, IMO the user should have the choice. This PR isn't in any way forcing or encouraging users to use inline styles."},{"ts":1372105845000,"body":"The diference is that `onClick` and friends are not a special case on our code. I don't see any gain between `style: 'color: red; top: 10px;'` and `style: { color: 'red', top: '10px' }`"},{"ts":1372105898000,"body":"It is unneeded complexity to something that is not so common."},{"ts":1372132080000,"body":"Yes, I agree with @rafaelfranca ."}]},{"timestamps":[]},{"timestamps":[{"ts":1361805610000,"body":"So this is making the migration fail as a whole if there's a failure step, not just migrate to some version and fail, is that correct?"},{"ts":1361817740000,"body":"You can run db:migrate and it play all migration up to specific version or you can db:migrate:up (down or redo) single migration. In fist case, if failure occurrs during migration then it breaks running and current (failed) migration will rollback all already executed statements (if database supports ddl transactions). \r\nFor example, in your migration, you have two parts: \r\n1) creation of table;\r\n2) adding foreign key to table.\r\nIf, in this case, second step fails migration will be completly cancelled and table creation will be rolled back as well as forign key creation.\r\nBut this works **only** for **db:migrate**.\r\nIf you will try same thing with **db:migrate:up** you face with problem - table will not be removed. If you then fix foreign key creation and try to run same migration again it will fail again with error like \"Table already exists\"."},{"ts":1365980377000,"body":"The fix looks good.\r\n\r\n@mirasrael can you rebase the code. Your test code would need a few changes since migration number 100 is gone now."},{"ts":1366029572000,"body":"Please send a pull request to master first, we'll backport if needed. Thanks!"},{"ts":1366030141000,"body":"Hi, @neerajdotname. I provided this fix for version 3.2 and migration 100 still exists in this branch (3-2-stable). Any chance this pull request will be merged into 3.2.x or we should wait for Rails 4? I will open another pull request for current master.\r\n\r\nP.S.:\r\nComments merge conflict :)"},{"ts":1366031188000,"body":"@mirasrael it should be merged in Rails master first, and it might be backported from there if the change is not considered harmful for a stable release. Thanks."},{"ts":1366031474000,"body":"@carlosantoniodasilva, I just opened new pull request for same issue on master branch - #10217. Thanks you!"},{"ts":1366378381000,"body":"Closing this as author has submitted new PR against master"}]},{"timestamps":[{"ts":1358930017000,"body":"You should add tests and documentation."},{"ts":1359012248000,"body":"Hi - I added tests and documentation. Not sure if I did the merge right?\r\n*resubmitted a clean version: https://github.com/rails/rails/pull/9162*"},{"ts":1359894206000,"body":"@anyu just as a side note, you can always push force to your branch in github, that it'll take care of updating the pull request properly, so usually there's no need to open up a separate pull request. Thanks."}]},{"timestamps":[{"ts":1371537875000,"body":"@fxn can you take a look?"},{"ts":1371538115000,"body":"Looks good to me. Do we really need a CHANGELOG? If someone reads the CHANGELOG he may think this is something new, if we are fixing a regression introduced sometime in the 4 branch I believe it is not needed."},{"ts":1371538455000,"body":"@fxn agreed, entry is removed."},{"ts":1371538878000,"body":"Awesome :)."}]},{"timestamps":[{"ts":1363447156000,"body":"Since you aren't passing the ActionController parameter hash to update_attributes, it won't be protected.\r\n\r\nOne of the benefits of strong_parameters making attribute protection a controller concern, is you're free to update_attributes at will internally.\r\n\r\nDoes this answer your question or am I misunderstanding the issue?"},{"ts":1363464104000,"body":"Yes, as far as I know, @erichmenge is correct. If we're mistaken, please elaborate and we can re-open."},{"ts":1363465971000,"body":"Well I know guys it's controller thing, but logically thinking is it right case when we have record loaded and passing id it updates another record? I don't think so..."},{"ts":1363466103000,"body":"If you update the id attribute, it will... update the id attribute."},{"ts":1363467573000,"body":"Well this way I'd like to see it in `UPDATE ... SET ...` statement rather than `WHERE` statement:\r\n`UPDATE \"topics\" SET \"title\" = ?, \"updated_at\" = ?, \"content\" = ? WHERE \"topics\".\"id\" = 3  [[\"title\", \"Hm is it possible?\"], [\"updated_at\", 2013-03-16 20:58:46 UTC], [\"content\", \"--- Have a nice day\\n...\\n\"]]`"},{"ts":1363468354000,"body":"I'm re-opening this just in case this behavior is a bug. I am not sure. @jonleighton @tenderlove ?"},{"ts":1363475133000,"body":"Ah, that is interesting behavior. Thanks for the additional information @route.\r\n\r\nI'll see if I can't look a bit more into it in the next couple of days as well.\r\n\r\n```\r\nLoading development environment (Rails 4.0.0.beta1)\r\nirb(main):001:0> topic = Topic.create name: \"I like pie.\"\r\n   (0.1ms)  begin transaction\r\n  SQL (3.5ms)  INSERT INTO \"topics\" (\"created_at\", \"name\", \"updated_at\") VALUES (?, ?, ?)  [[\"created_at\", Sat, 16 Mar 2013 23:01:24 UTC +00:00], [\"name\", \"I like pie.\"], [\"updated_at\", Sat, 16 Mar 2013 23:01:24 UTC +00:00]]\r\n   (1.7ms)  commit transaction\r\n=> #<Topic id: 1, name: \"I like pie.\", created_at: \"2013-03-16 23:01:24\", updated_at: \"2013-03-16 23:01:24\">\r\nirb(main):002:0> topic.update_attributes id: 15, name: \"I like pie a lot!\"\r\n   (0.1ms)  begin transaction\r\n  SQL (0.4ms)  UPDATE \"topics\" SET \"name\" = ?, \"updated_at\" = ? WHERE \"topics\".\"id\" = 15  [[\"name\", \"I like pie a lot!\"], [\"updated_at\", Sat, 16 Mar 2013 23:01:40 UTC +00:00]]\r\n   (0.1ms)  commit transaction\r\n=> true\r\nirb(main):003:0> topic\r\n=> #<Topic id: 15, name: \"I like pie a lot!\", created_at: \"2013-03-16 23:01:24\", updated_at: \"2013-03-16 23:01:40\">\r\nirb(main):004:0> topic.reload\r\n  Topic Load (0.4ms)  SELECT \"topics\".* FROM \"topics\" WHERE \"topics\".\"id\" = ? LIMIT 1  [[\"id\", 15]]\r\nActiveRecord::RecordNotFound: Couldn't find Topic with id=15\r\n```"},{"ts":1363592679000,"body":"It would be super nice to hear from people Steve mentioned and I've added fix for this also, opinions/suggestions?"},{"ts":1363952333000,"body":"This looks like a reasonable patch to me, but can you add an assertion at the end of the test to check that the record's id has actually changed. E.g. `assert_equal topic.title, Topic.find(1234).title` ?"},{"ts":1363960779000,"body":"@jonleighton done and added change log entry"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1362902819000,"body":"Hi there,\r\n\r\nThis patch doesn't make a whole lot of sense. I _think_ you're trying to ask a question. We don't provide help on GitHub Issues, please send an email to rubyonrails-talk or ask on StackOverflow. Thanks!"},{"ts":1362908208000,"body":"@hbakhtiyor You may be looking for a gem like `validates_formatting_of` which provides similar functionality."},{"ts":1362914175000,"body":"@steveklabnik It's proposal. Thanks!\r\n@mattdbridges  thanks for inform me"}]},{"timestamps":[{"ts":1372541256000,"body":"This has gotten out of sync with master, but is still needed (#10752 is a dupe with the same problem). @shuber Any chance you can update this?"},{"ts":1372542338000,"body":"Will be great to have regression tests for this feature!"},{"ts":1375387421000,"body":"@shuber or @jridgewell any update on this?"},{"ts":1375394803000,"body":"@courtsimas, I've found it easier to just monkey patch the cache as a blackhole hash:\r\nhttps://github.com/cloudspace/ettu/blob/master/lib/ettu/railtie.rb#L10-L12\r\nhttps://github.com/cloudspace/ettu/blob/master/lib/ettu/railtie.rb#L20-L24\r\n\r\nProperly fixing this issues would require either creating a `ActiveSupport::Cache` compliant wrapper for the thead_safe gem, or removing the thread_safe gem and using `ActiveSupport::Cache::MemoryStore` (which is also thread safe...).\r\n\r\nMore info here: https://groups.google.com/forum/#!searchin/rubyonrails-core/thread_safe/rubyonrails-core/QgJ9QyEbgAs/4iOB4AUb-5gJ"},{"ts":1375437382000,"body":"@jridgewell if you are willing to work on this (@shuber seems to be busy right now), you should open a new PR.\r\n\r\nThe best fix for this is just to add a `to_prepare` callback instead of mucking with `NullStore`:\r\n\r\n```ruby\r\n# in actionpack/lib/action_view/railtie.rb\r\nif in_development? && caching_is_enabled?\r\n  ActionDispatch::Reloader.to_prepare { ActionView::Digestor.cache.clear }\r\nend\r\n```\r\n\r\nDon't forget to document it, close all the relevant issues and a test case would also be nice :) :heart:.\r\n\r\n"},{"ts":1375736279000,"body":"@thedarkone @josh-lauer and I originally went with the `to_prepare` route but realized that it would only be fired when `.rb` files would be modified and not `.erb` files (or any other template files).\r\n\r\nInstead, we are directly checking for `config.action_view.cache_template_loading` (`ActionView::Resolver.caching` is set to the same value) before storing the the digest in the cache. The greatly eased testing, since the `caching` setting can be changed on the fly and not just at initialization."},{"ts":1377623145000,"body":"Closed by #11768"}]},{"timestamps":[{"ts":1363621048000,"body":"@fxn Please take a look. "},{"ts":1363622636000,"body":"This is a great idea! I spent many hours trying to reproduce AR issues, and many times it resulted in an incomplete bug report. This would safe a ton of time and help to check what versions are affected by the bug.\r\n\r\n/cc @carlosantoniodasilva @rafaelfranca @steveklabnik "},{"ts":1363622879000,"body":"Looks good.\r\n\r\nIf the templates are too big for being inlined (they probably are) I believe we should store them in the repo and link to GitHub.\r\n"},{"ts":1363623945000,"body":":+1: for what @fxn said."},{"ts":1363629240000,"body":"You are amazing. :+1:"},{"ts":1363630527000,"body":"@vipulnsward @stevenharman thanks and fixed ."},{"ts":1363631026000,"body":"@fxn Can you take it from here? I think it's better to hand over it to you rather than asking questions like where to store the templates etc. Thank you."},{"ts":1363631129000,"body":"@neerajdotname sure, thanks!"},{"ts":1364802395000,"body":"I gave it another iteration, the gist for reports against the master branch is also self-contained.\r\n\r\nThanks for this proposal, it is a great idea."}]},{"timestamps":[{"ts":1363109805000,"body":"should valid_type? be made into an API method on abstract adapter?"},{"ts":1364229553000,"body":"Merged at c2e203173221991e104a9eb872025788b9fc4763"}]},{"timestamps":[{"ts":1368569608000,"body":"1. Will this work for errors on `:base`?\r\n2. Is `object.errors.respond_to?(:full_messages)` still relevant?\r\n3. Test coverage would be great"},{"ts":1368572073000,"body":"1. What are errors in :base? What are you calling :base? I'm not that knowledgeable about rails code.\r\n2. I'm not sure, it doesn't look relevant to me. The change was introduced in commit 5267addd4f986c89df3d31f35e046abc3b1fbe26. Before, it used to check for methods ```errors``` and ```on?```. The commit has no further explanations. Anyway, errors.include? use only messages. Moreover, I think errors will always respond to include? and messages (they are both defined in the base Error class).\r\n3. I can do that."},{"ts":1368585002000,"body":"@aflag I was researching on this area and I don't think we can change this unfortunately. Changing this we are changing the API that Action Pack requires to ORMs implement in their errors object. Before it was `[]` now we are changing to `include?` and `[]`. I don't think this is a good idea.\r\n\r\nI really sorry for making you loose your time :bow:. I hope you have learned something good for digging in the Rails source code and I hope you can help us more like you did bringing this discussion. :smile:\r\n\r\nCan I close this pull request?"},{"ts":1368586635000,"body":"That's ok. Sometimes things work out, sometimes they don't.\r\n\r\nJust out of curiosity, is there a minimum supported API? Is that documented or people implement their ORM by looking at what the rest of the code actually uses? If other parts of Action Pack required other methods from Error, then those could be used. It would be easy to copy ```include?``` code by using messages attribute or get method. [] is really the only way to implement it that has the annoying side-effect :P"},{"ts":1368586939000,"body":"@aflag yes. there is. See [`ActiveModel::Lint`](https://github.com/rails/rails/blob/master/activemodel/lib/active_model/lint.rb). It is a set of tests that make sure your object implementes the required API for Action Pack and errors [requires a `[]` method that returns an array](https://github.com/rails/rails/blob/master/activemodel/lib/active_model/lint.rb#L88-97).\r\n\r\nI'll close this pull request now. Thank you for the discussion and feel free to ask anything."}]},{"timestamps":[{"ts":1362161854000,"body":"Linking to the closed issue #9505, for people to have a better understanding about the discussion/feedback.\r\n\r\nAs a side note, there's no need to send a new pull request when rebasing/squashing, you can just change locally and push force to your branch, that github will update the pull request properly.\r\n\r\nThanks!"},{"ts":1362162442000,"body":"Oh, i have a little problem with my git, but for now it's ok. Changes that you highlighted complete."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1376248391000,"body":"This is a bit of a bikeshed, but can you put the period on the second line? I think that makes it much  more clear that you're chaning methods, and we don't need to support 1.8 any more."},{"ts":1376281951000,"body":"@steveklabnik  done."},{"ts":1376314957000,"body":"Thanks!"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1364971280000,"body":"I should mention these changes are for ActiveSupport only."},{"ts":1364992414000,"body":"Overall it seems ok, but we need @tenderlove to weight in. thanks @kastiglione :+1:"},{"ts":1365003974000,"body":"I've added the missing `require`'s, and `allow_nil`, thank you all for reviews.\r\n\r\n@pixeltrix While switching to `delegate` doesn't remove the use of `module_eval`, it does buy a few things, primarily that a subsequent change to the implementation of `delegate` will benefit all callers. I have actually rewritten `delegate` to use `define_method`, and while the rewrite does pass all the tests, the [code is ugly](https://github.com/kastiglione/rails/commit/3ccada42fabbfed99c77bea75b88d374ae76368b) and I want to refactor it before submitting a pull request.\r\n\r\nIf it's preferred that these changes not switch to `delegate` and instead use `define_method` directly, I'm happy to do it that way."},{"ts":1365008555000,"body":"I think this is worth it for the readability aspect alone, even if it's not more performant yet."},{"ts":1365047648000,"body":"Apologies for the GitHub noise. The above referenced PR is not relevant here."},{"ts":1365197703000,"body":"Do you have any measurements how this impacts ISeqs on startup?  I'm hesitant to change the entire world away from class_eval unless we can see some real gain."},{"ts":1365287631000,"body":"Good question, I'll get back to you with measurements. If the measurements don't support the changes, has anyone every succeeded in getting a PR through with an argument based on intelligent design instead?"},{"ts":1370460264000,"body":"As it's been a while, and I don't know when I'll have the requested measurements, should I close this PR? Alternatively I could update the PR to include only the commits that refactor `class_eval` to `delegate` (017f6a67d73879c5759c3a89dd1288f8f445edf8, b9055732657387211f9ce9bd5f0a4591f5987b4e, e91ddd941dc294d735e590ed0086260475c1f39e), since there was interest in them."},{"ts":1373062289000,"body":"I'll gently put this one to sleep. I'll keep the branch in case it's needed."}]},{"timestamps":[{"ts":1358769106000,"body":"This change doesn't need CHANGELOG entry"},{"ts":1358769120000,"body":"Please squash your commits after the changes"},{"ts":1358787623000,"body":"Ok, I think everything should be fixed. Removed the whitespace and the freeze and squashed the commits into a single commit."},{"ts":1358787697000,"body":"There are merge conflics, and this pull request needs a rebase. Also remember to remote the changelog entry"},{"ts":1358788814000,"body":"Ok, I rebased and the changelog entry has been removed. Hopefully it's right this time, sorry about the back and forth."},{"ts":1358789583000,"body":"Everything is right. Thank so much for you great work! :clap: "},{"ts":1358789895000,"body":"What's the reason to split this into a separate object?"},{"ts":1358790989000,"body":"I'm making a separate object so that each ActiveRecord object will hold onto a TransactionState object instead of a Transaction object. The ActiveRecord object doesn't need to know anything about the transaction except whether it is committed or rolled back, so I thought it would be more modular that way. \r\n\r\nI'm trying to fix the issue where each transaction holds pointers to many ActiveRecord objects, which prevent them from being garbage collected. I'm going to try to make it so that each active record object has a pointer to a TransactionState object, and using this state object, can correctly provide its attributes to the user."}]},{"timestamps":[{"ts":1370639257000,"body":"Does not seem to be right."},{"ts":1370645090000,"body":"Yeah, this should be `eval'd`."},{"ts":1370662037000,"body":"@steveklabnik, I fixed it. "},{"ts":1370676311000,"body":"Could you please squash the commits? Rebase and force push your branch."},{"ts":1370705540000,"body":"@fxn  sent new pull request #10889  "},{"ts":1370726029000,"body":"closing this as #10889 arrived."}]},{"timestamps":[]},{"timestamps":[{"ts":1365088874000,"body":"Could you add a CHANGELOG entry?"},{"ts":1365101202000,"body":"@rafaelfranca made those changes."},{"ts":1365110349000,"body":"This pull request broke the Rails tests. I'll revert it. Please fix the erros and submit another pull request. https://travis-ci.org/rails/rails/builds/6061839"},{"ts":1365112010000,"body":"Gross. Will do.\r\n\r\nOn Thu, Apr 4, 2013 at 2:20 PM, Rafael Mendonça França\r\n<notifications@github.com> wrote:\r\n\r\n> This pull request broke the Rails tests. I'll revert it. Please fix the erros and submit another pull request. https://travis-ci.org/rails/rails/builds/6061839\r\n> ---\r\n> Reply to this email directly or view it on GitHub:\r\n> https://github.com/rails/rails/pull/10034#issuecomment-15924677"}]},{"timestamps":[{"ts":1372767544000,"body":"@carlosantoniodasilva  :green_heart: "},{"ts":1372767573000,"body":":heart:"}]},{"timestamps":[]},{"timestamps":[{"ts":1363131743000,"body":":+1: "},{"ts":1363131942000,"body":"I'd like to refactor this so we aren't duping this code: https://github.com/rails/rails/blob/master/railties/lib/rails/application/bootstrap.rb#L42-L45\r\n\r\nSome suggestions of where to put that would be cool. Maybe we can add it to `ActionSupport::TaggedLogger`?"},{"ts":1363134736000,"body":"Yay pairing! I helped out with this, but it obviously needs a lot of work."},{"ts":1363193357000,"body":"What if we do some refactoring like this: https://github.com/schneems/rails/compare/schneems;logger-config to make the log_target (i'm open to renaming this config) exposed without having to go through the `new/formatter/level` dance? "},{"ts":1363319613000,"body":"@steveklabnik @tenderlove @schneems thoughts?"},{"ts":1363319704000,"body":"Seems good. They'll need squashed, and we'll need a CHANGELOG entry."},{"ts":1363346579000,"body":"rebased and squashed /cc @steveklabnik "},{"ts":1363367356000,"body":"Awesome! :heart:"},{"ts":1363370278000,"body":":bomb: :heart: :heart_eyes: :smile:"},{"ts":1363373856000,"body":"This has now been reverted: https://github.com/rails/rails/commit/1a9055073dcc189b289a1e3f47cbc72ff7380f0a"}]},{"timestamps":[{"ts":1361636664000,"body":"/cc @carlosantoniodasilva @rafaelfranca \r\n\r\n@jonleighton as discussed, this patch is based on selectively adding the order wether we are preloading or not."},{"ts":1361735377000,"body":"Seems good. Needs a rebase"},{"ts":1361735595000,"body":"@rafaelfranca rebased."}]},{"timestamps":[]},{"timestamps":[{"ts":1368175079000,"body":"This commit message is very non-descriptive."},{"ts":1368211229000,"body":"\"Adding ActiveSupport::Concern\" actually seems pretty descriptive to me given the changes - exactly the change I'd expected when refactoring a module that didn't use AS:C to use it.\r\n\r\nI'm not sure, though, whether it's Rails practice to not depend on `ActiveSupport` at all for migrations. For example, I've seen duplications of `Inflector` methods, as if people purposefully tried to avoid using it."},{"ts":1368214563000,"body":"If we have the advantage of ActiveSupport::Concern, then why don't we use it in the internals of the Rails rather than just using it in the outside..."},{"ts":1368229874000,"body":"\"adding activesupport::concern\" is the _what_. Commit messages are about the _why_. \r\n\r\nWhy is it good to add AS::C?\r\n\r\nWhat advantage does that bring?"},{"ts":1368232830000,"body":"Also make sure to squash the commits :+1:"},{"ts":1368256184000,"body":"@steveklabnik The ActiveSupport::Concern does the same thing which the following lines does.\r\n\r\ndef self.included(klass)\r\n  klass.extend(ClassMethods)\r\nend\r\n\r\nMy point is that if we have the luxury of using this function then why do we need to write the above three lines every time we need to add some ClassMethods in the class which is including the module. I guess, this is also the part of Code Refactoring."},{"ts":1368285790000,"body":"Right! So put that in the commit message! :) \r\n\r\n0e4af86 has a much better message. :)  "},{"ts":1368597816000,"body":"@carlosantoniodasilva when would you merge it????"},{"ts":1369578118000,"body":"@carlosantoniodasilva "},{"ts":1372600636000,"body":"@aditya-kapoor please squash the commits into a single commit. "},{"ts":1372629613000,"body":"@aditya-kapoor sorry for the big delay. Yes we're merging this, but please squash the commits and improve the commit message. Thanks."},{"ts":1372697203000,"body":"@carlosantoniodasilva made a huge mess of the commits....:( I am submitting a new pull request and closing this one...."}]},{"timestamps":[]},{"timestamps":[{"ts":1358067416000,"body":"/cc @rafaelfranca @tenderlove "},{"ts":1358332452000,"body":"it's an old issue, please see #8225, #8741, though your solution looks nicer"},{"ts":1358543524000,"body":"I tried to find if somebody has already fixed it before implementing myself. Apparently I did not search good enough.\r\nAnyway I will be happy if any patch would be accepted."},{"ts":1358614470000,"body":"@vanyak looks good. Could you apply the tests cases from the other two patches on you pull request and see if all work with your fix?"},{"ts":1358633196000,"body":"actually i think they won't pass:\r\n1.9.3p194 :001 > s='users.id asc, sum_fun(users.name, sum_other_fun(a, b, c), users.surname)'\r\n => \"users.id asc, sum_fun(users.name, sum_other_fun(a, b, c), users.surname)\" \r\n1.9.3p194 :002 > s.split(/,(?=(?:[^)]|\\([^)]*\\))*$)/)\r\n => [\"users.id asc, sum_fun(users.name, sum_other_fun(a, b, c), users.surname)\"] \r\n\r\nmy solution from #8741:\r\n..\r\n1.9.3p194 :015 > s.scan(order_values_regexp).map(&:first)\r\n => [\"users.id asc\", \" sum_fun(users.name, sum_other_fun(a, b, c), users.surname)\"]"},{"ts":1358674926000,"body":"@joxxoxo looks like you are right. There are actually some more cases when it won't work. Unfortunately Ruby does not support variable-length lookbehind assertions so the only way would be to use split like you did.\r\nBut I'll give it another try.."},{"ts":1359250748000,"body":"Have to admit that trying further I came up with solution quite similar to the one @joxxoxo proposed.\r\nClosing this one in favor of #8741"},{"ts":1359291828000,"body":"@vanyak alright, thanks for reporting back."}]},{"timestamps":[{"ts":1370867342000,"body":"Thanks @carlosantoniodasilva "},{"ts":1370887794000,"body":"Minor comment, can you please squash your commits? Thanks."},{"ts":1370925179000,"body":"sure @carlosantoniodasilva "},{"ts":1370925715000,"body":"Thanks I had squashed it by rebase git rebase -i cbfcd9ddf1c964829307a8ce4b483c50252898a7 and then replace pickup to squash  and git push \r\n\r\nplease let me know  am I able to squash it or not?"},{"ts":1371580971000,"body":"I'm still seeing 3 commits on this PR. Can you squash again?\r\n\r\n```\r\ngit rebase -i HEAD~4\r\n```\r\n\r\nThen put an `s` in front of  2 out of 3 of your commits and go ahead. When you push back to this branch you will have to do a force push."},{"ts":1371817430000,"body":"Thanks \r\nsquash into one commit Please look into this https://github.com/rails/rails/pull/11047\r\n\r\ncc @carlosantoniodasilva  \r\n\r\nThanks @carlosantoniodasilva  "},{"ts":1371822569000,"body":"You don't need to open a new pull request after squash the commit. Just force push for your branch."}]},{"timestamps":[{"ts":1372961145000,"body":"thanks :smile: "},{"ts":1372961179000,"body":"Thank you :)"}]},{"timestamps":[{"ts":1364744456000,"body":":-1:, class methods are much harder to refactor."},{"ts":1364744700000,"body":"Was just thinking of avoiding Object creation in realtime, as there are no 'states' that are needed to maintain on the object."},{"ts":1364744762000,"body":"Right. I don't think it's worth it, hence the :-1:, but someone else may prefer, so I didn't close it. :)"},{"ts":1364769069000,"body":"Well, explains are not supposed to be used so often, and mainly during development I imagine, so optimizing at this level (to avoid Object creation) is probably not going to give big impacts.\r\n\r\nI think we're fine with the classes implementation for now, thanks @vipulnsward!"},{"ts":1364784884000,"body":":+1: "}]},{"timestamps":[{"ts":1360855749000,"body":"Ops, my bad, `Fev` stands for `Fevereiro`, which is `February` in pt-br. Can you please fix the other changelogs as well in the same commit? Please also add `[ci skip]` to the commit message, so we don't run the tests when merging.Thanks."},{"ts":1360855880000,"body":"Coming right up! Thanks, @carlosantoniodasilva "},{"ts":1360856299000,"body":"Proper PR in #9288 "},{"ts":1360856409000,"body":"Great, thank you!"}]},{"timestamps":[{"ts":1372420409000,"body":"Looks good to me :+1:\r\n\r\n/cc @steveklabnik @fxn"},{"ts":1372428173000,"body":"This is great, thanks! :D"},{"ts":1372433370000,"body":"It would be good to add `[ci skip]` to commit message as well."},{"ts":1372441034000,"body":"Thanks for all the comments! I've incorporated all your feedback and rebased."}]},{"timestamps":[{"ts":1372861495000,"body":"Thanks."}]},{"timestamps":[{"ts":1374309897000,"body":"I don't think we should completely remove it. As `sqlite3` is the default and the database will automatically be created on that request, it's most likely that you hit this page without having configured anything. It should tell you where the database configuration is."},{"ts":1374311114000,"body":"@senny I updated it to say 'Configure database'. "},{"ts":1374331768000,"body":"Since this is a doc only change, It would be great you would add [ci skip] to commit. helps to reduce load on the build servers."},{"ts":1374403909000,"body":"Thanks you for your contribution :yellow_heart: "},{"ts":1374408942000,"body":"@senny will it be backported to 4.0-stable? I think this should be updated there also."},{"ts":1374414376000,"body":"@prathamesh-sonpatki I agree. I'll backport."}]},{"timestamps":[{"ts":1371292494000,"body":"Closing this. please open again if this required."}]},{"timestamps":[{"ts":1372977138000,"body":"/cc @tenderlove "},{"ts":1373010200000,"body":"Thanks for feedback. I updated PR.\r\n\r\n/cc @pixeltrix, @carlosantoniodasilva, @neerajdotname"},{"ts":1373010626000,"body":"Also, what do you think to rename method `attribute_was` to `attribute_initialized_with` (method name just to show my idea). Because current name is not clear for me that it returns current value too, if attribute has not been changed. And also add new `attribute_was` with expected logic to return only if changed. What do you think?"},{"ts":1373041573000,"body":"@carlosantoniodasilva I updated PR.\r\n\r\nWorking on backporting commits connected with this feature.\r\nShould I backport refactoring commits made 24 days ago by @tenderlove?"},{"ts":1373146392000,"body":"Thanks!"},{"ts":1373289129000,"body":":+1:"}]},{"timestamps":[]},{"timestamps":[{"ts":1360592626000,"body":"@fxn @steveklabnik could you take a look?"},{"ts":1360606496000,"body":"Looks great. Thanks!"}]},{"timestamps":[{"ts":1358727086000,"body":"Nice :+1:"}]},{"timestamps":[{"ts":1372732432000,"body":"needs a rebase"},{"ts":1372732740000,"body":"@rafaelfranca rebased."}]},{"timestamps":[{"ts":1358184436000,"body":"The inflector is frozen, sorry. If your app needs `Geese` you can add this to your app."}]},{"timestamps":[{"ts":1362073361000,"body":"Seems good. Could you add a changelog entry?"},{"ts":1362073751000,"body":"I'm adding a changelog entry... done."},{"ts":1362087326000,"body":"Thank you"}]},{"timestamps":[{"ts":1367748822000,"body":"Ahh thanks. Can you please squash your commits. \r\n\r\nMy Mistake I didn't looked properly. Just did a paste."},{"ts":1367749145000,"body":"cc/ @rafaelfranca "},{"ts":1367751786000,"body":"@arunagw squashed."},{"ts":1367762814000,"body":"Thanks."},{"ts":1367762938000,"body":":smile: "}]},{"timestamps":[{"ts":1356528852000,"body":"@rafaelfranca @carlosantoniodasilva @steveklabnik let me know what you think."},{"ts":1356643645000,"body":"I like this approach. Maybe we can put that `reserved_chars_count` in a constant. But why it is 2?"},{"ts":1356649717000,"body":"@rafaelfranca I could put it into a constant. Should I subtract the value directly in `index_name_length`, etc..? This would make the patch very simple but we lose the ability to fetch at the \"real\" db limits. I don't think we should pollute the code with `index_name_length - RESERVED_CHARS_COUNT` everywhere.\r\n\r\nThe current value is 2 because the current copy logic for indices appends an two prefixes. Previously they were `temp_` and `altered_` I modified them to `t` and `a` so it's 2 chars."},{"ts":1356650486000,"body":"I really think we should not change the database limits because we are reserving some characters to Rails implementation. But if the change requires the constant spread in a lot of places so lets change the limits."},{"ts":1356650699000,"body":"what do you think about creating a new method, which subtracts the reserved character count from the database limit? This way different database adapter implementations could overwrite the method to reserve a different amount of characters. We could even reserve a different amount of characters for index name, than for a table name. I guess there are also databases which do not need the renaming where we could leave the limit as is."},{"ts":1356650787000,"body":"Seems good too."},{"ts":1356699897000,"body":"I completed the implementation. The current behavior only works for index names. I'll have to look if the same issue exists for table names. I'm not particularly happy with the `:internal => true` option to enforce a different limit. I could also split the method apart but I'm not sure it would make the code more readable.\r\n\r\nI split the changes into two commits:\r\n\r\n1. puts the functionality in place to validate against `allowed_index_name_length`\r\n1. reduces the reserved characters for sqlite3 by shortening the prefixes.\r\n\r\nI can squash the commits but wanted to separate them for the review. I'm not sure if the shortened prefixes in 2.) work in all cases. The tests all passed but I wanted to get a second opinion first.\r\n\r\n@rafaelfranca @carlosantoniodasilva could you review this?"},{"ts":1356745097000,"body":"Seems good to me. @carlosantoniodasilva thoughts?"}]},{"timestamps":[{"ts":1364931078000,"body":"I celebrate most times a file is deleted or code removed from rails/rails. This is no exception. :+1:"},{"ts":1364931080000,"body":":+1: "},{"ts":1364931094000,"body":":+1: "},{"ts":1364931135000,"body":":-1:, I think this is good for at least \"Where do I put images in my app?\""},{"ts":1364931156000,"body":":+1:"},{"ts":1364931160000,"body":":+1: It's a file that tends to stagnate in many projects. I'm always deleting it, but usually 3 months after the project was created because it was forgotten about.\r\n\r\nAnd even if it's remembered early, it's still taking up space in git history."},{"ts":1364931223000,"body":"@qrush I think it is ok to delete the file as long as we add a .gitkeep to the `app/assets/images` directory."},{"ts":1364931230000,"body":"I actually have a small script that removes the index.html and rails.png files. I tutted when I had to use it again today. This is good."},{"ts":1364931251000,"body":":+1:"},{"ts":1364931334000,"body":":+1: "},{"ts":1364931339000,"body":"@qrush I think a .gitkeep in app/assets/images should suffice"},{"ts":1364931370000,"body":":+1: ya, no reason to precompile it either."},{"ts":1364931382000,"body":":+1: with the `.gitkeep`"},{"ts":1364932608000,"body":":+1: "},{"ts":1364933190000,"body":":thumbsup: I always forget that I need to delete it, and have wondered why it wasn't being handled with data-URI since index.html disappeared."},{"ts":1364933282000,"body":":+1: Yes please! please! please!"},{"ts":1364933745000,"body":":+1:"},{"ts":1364934783000,"body":":+1: "},{"ts":1364935660000,"body":":metal:\r\n\r\nI'll commit test fixes soon. Working on them right now..."},{"ts":1364947134000,"body":"Does it need a CHANGELOG entry btw?"},{"ts":1364949487000,"body":"Good call. https://github.com/rails/rails/commit/fc11375584edeaef24ed55a3afde305b15686c75"},{"ts":1364952789000,"body":"IMO no need for a changelog entry. Nobody is going to care. Doesn't change anything for anyone in terms of functionality. \r\n\r\nOn Apr 2, 2013, at 17:38, Steve Klabnik <notifications@github.com> wrote:\r\n\r\n> Good call. fc11375\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub."},{"ts":1364953206000,"body":"I can just think of a few templates trying to remove `rails.png` that might fail and will need to be changed now."}]},{"timestamps":[{"ts":1370461264000,"body":"Any chance of this commit getting merged into 4-0-stable? Seems really useful and more in line with the JSON spec."}]},{"timestamps":[{"ts":1371591116000,"body":"This would fix https://github.com/rails/rails/issues/10977 , no?\r\n\r\nThis should also really be targetting master, not 4-0-stable, right?"},{"ts":1371591457000,"body":"Yes this would fix #10977 in production but not development. "},{"ts":1371593300000,"body":"I'd love to see rails move to logging to STDOUT by default. We need to look into things like the test environment, but should be manageable."},{"ts":1371793912000,"body":"@schneems could you add a changelog entry and set the target branch to master?"},{"ts":1371990168000,"body":"Couldn't figure out how to change the target branch so I just opened #11060. \r\n\r\nTried this http://stackoverflow.com/questions/10081053/how-to-change-the-base-branch-of-a-pull-request(), but the GitHub API changed. Closing this issue in favor of #11060."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1362234152000,"body":"@carlosantoniodasilva @rafaelfranca @steveklabnik could you take a look?"},{"ts":1362259766000,"body":"Weird, it's been like that since 3-2, `sandbox` is being set in `start` method. I don't mind merging, but it seems that's not the problem yet so perhaps finding the real problem might solve everything without that change?"},{"ts":1362263312000,"body":"I don't think so because without that change the sandbox file is not even required. so there is no transaction started and no rollback. so essentially the console is identical to a normal console.\r\n\r\nAm 02.03.2013 um 22:30 schrieb Carlos Antonio da Silva <notifications@github.com>:\r\n\r\n> Weird, it's been like that since 3-2, sandbox is being set in start method. I don't mind merging, but it seems that's not the problem yet so perhaps finding the real problem might solve everything without that change?\r\n> \r\n> —\r\n> Reply to this email directly or view it on GitHub."},{"ts":1362751247000,"body":"Closing per the above commit"},{"ts":1362751493000,"body":":heart:"}]},{"timestamps":[{"ts":1370069825000,"body":"Is there a replacement syntax for :confirm now, or is it moves to a third-party gem?"},{"ts":1370071835000,"body":"You can use { data: { confirm: \"ok?\" } } syntax ."},{"ts":1370090790000,"body":"I've added https://github.com/kennyj/rails/commit/de9b5637d9c86f57ab41f3ccd056dda6508064ff and https://github.com/kennyj/rails/commit/704991d766900d1e6dca12c465704d4584affb90."},{"ts":1370095624000,"body":"Awesome. Thank you @kennyj "},{"ts":1370096647000,"body":"@rafaelfranca I've reverted comments."}]},{"timestamps":[{"ts":1374102693000,"body":"Could you add [ci skip] to your commit message?"},{"ts":1374103848000,"body":"@garysweaver You could just push this change to https://github.com/rails/docrails, no need for a PR."},{"ts":1374574621000,"body":"@jasonnoble : FYI, you have to ask for commit bit on rails/docrails to be able to push commits to this repository ; docrails hasn't public wright acess anymore (see [this blog](http://weblog.rubyonrails.org/2013/6/14/docrails-back-to-the-roots/) for more information)."},{"ts":1374589111000,"body":"@robin850 Ah, I had missed that, thanks for the pointer."}]},{"timestamps":[{"ts":1376426153000,"body":"3-2-stable is bugfixes only, I'm not sure if this is a bugfix or a feature."},{"ts":1376443235000,"body":"I consider it a bug fix.\r\n\r\n\r\nIt prevents a non-obvious error (NoMethodError for the \"attribute\") that comes up when the combination of two features: Adding errors to arbitrary attributes and using translation keys for error messages.\r\n\r\nOn Tue, Aug 13, 2013 at 4:36 PM, Steve Klabnik <notifications@github.com>\r\nwrote:\r\n\r\n> 3-2-stable is bugfixes only, I'm not sure if this is a bugfix or a feature.\r\n> ---\r\n> Reply to this email directly or view it on GitHub:\r\n> https://github.com/rails/rails/pull/11874#issuecomment-22595414"},{"ts":1376498077000,"body":"This looks more like a feature than a bug fix. Also let's focus on #11873 first. Backporting will happen once it's merged. I'm closing this one for the moment to continue the discussion on #11873."}]},{"timestamps":[]},{"timestamps":[{"ts":1370535695000,"body":"A detail: \"Contributing to the Rails Documentation\" is not a guide, maybe it could say: \"read the corresponding section in the  [Actual guide title](...) guide\" or somesuch. What do you think?"},{"ts":1370537108000,"body":"Yep - that makes sense. I've changed it to \"the ... section of the guide\". I tried \"of the main guide\" but that split over two lines which didn't look as nice to read."},{"ts":1370537492000,"body":"Thanks, but now \"guide\" is left a little orphan, which guide? Maybe it could say the \"aforementioned guide\". If you edit and squash commits (squash and force push to your branch), I think we are good to go."},{"ts":1370537917000,"body":"Done - thanks :)"},{"ts":1370538020000,"body":"Super, thanks a lot!"}]},{"timestamps":[{"ts":1361497256000,"body":"You'll also need to provide a changelog entry for that. Thanks."},{"ts":1361508803000,"body":"Should I squash/force commits into one? Thanks. /cc @carlosantoniodasilva "},{"ts":1361808000000,"body":"@killthekitten, yes please squash into one commit"},{"ts":1361808439000,"body":"@schneems done :)"},{"ts":1362086864000,"body":":+1: this looks good!"}]},{"timestamps":[{"ts":1360265503000,"body":"2-3-stable is not under maintenance anymore"}]},{"timestamps":[{"ts":1360510805000,"body":"Thanks @norman."}]},{"timestamps":[{"ts":1358558683000,"body":":+1: works for me /cc @tenderlove "}]},{"timestamps":[]},{"timestamps":[{"ts":1372541229000,"body":"I think we are not going to make any changes in 2-3-stable now.\r\n\r\nClosing this now.\r\n\r\nthanks."}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1359001436000,"body":"turns out this is a dup of #9042.  the test uses an actual decimal column though."}]},{"timestamps":[{"ts":1360800669000,"body":"Since @carlosantoniodasilva merged #8400, I'll let him review this one. Thanks for doing the backport!"},{"ts":1360805533000,"body":"Thanks."},{"ts":1360808744000,"body":":heart: :clap:"}]},{"timestamps":[]},{"timestamps":[{"ts":1375497917000,"body":"Looks like this change negatively affected MRI so it should probably be reverted."},{"ts":1375498223000,"body":"Reverted, please do investigate about the problem with MRI :smiley: "}]},{"timestamps":[{"ts":1364394540000,"body":"@steveklabnik can you take a look?"}]},{"timestamps":[{"ts":1368206033000,"body":"There are few tests also needs to remove. "},{"ts":1368206255000,"body":"cc @headius"},{"ts":1368209320000,"body":"Updated PR with deleted test.  I also removed jruby-openssl from the Rails Gemfile."},{"ts":1368209483000,"body":"Did you also tried running test after removal of this?  Or tried a sample app?"},{"ts":1368210864000,"body":"I haven't been able to get the tests to run cleanly, but none of my failures appear to be related. I have run the generator with the new template, and smoke tested the resulting app."},{"ts":1368211441000,"body":"Yeah all tests will not run under JRuby. Thanks for running and doing smoke test the resulting app."},{"ts":1368211950000,"body":"+1 for removing jruby-openssl from default gems. It's shipped with jruby 1.7+, which are likely necessary to run rails 4 anyway."}]},{"timestamps":[{"ts":1361897865000,"body":":+1: "},{"ts":1361897909000,"body":"`The scary internet` was so nice :smile:"}]},{"timestamps":[]},{"timestamps":[{"ts":1363373650000,"body":"Usually only rails committers make these types of cosmetic changes. Also this might obscure the commit history, although its probably fine to get rid of the newlines. "},{"ts":1363373791000,"body":"Yes, we don't make these kinds of changes for the reasons @wangjohn commented. If you were fixing this area of the codebase, removing them would be great.\r\n\r\nThank you for the patch, but I can't accept it."},{"ts":1363379074000,"body":"You should change the documentation to state the above policy. I followed Section 6.3 of http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html bullet #2."},{"ts":1363379164000,"body":"The policy is still the same, we just do not accept pull requests doing only this."},{"ts":1363379608000,"body":"Is the policy this document - http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html ?"},{"ts":1363379680000,"body":"Yes. In the section 6.2 you can see:\r\n\r\n> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted."},{"ts":1363379751000,"body":"Found it - thanks. Bye."}]},{"timestamps":[{"ts":1358419821000,"body":"Crap =(, thanks @arunagw!"},{"ts":1358482704000,"body":":+1: "}]},{"timestamps":[{"ts":1360441060000,"body":"/cc @jeremy \r\n\r\n@carlosantoniodasilva can you take a look?"},{"ts":1360445262000,"body":"P.S. controller should avoid using const_get, because random controller names in wild route can lead to DoS"},{"ts":1360445295000,"body":"Seems good :+1:, thanks!"},{"ts":1360445484000,"body":"@carlosantoniodasilva removed the CHANGELOG entry."},{"ts":1360445860000,"body":"Seems good, thanks."}]},{"timestamps":[{"ts":1361730769000,"body":"/cc @dhh\r\n\r\n@fxn can you review this?"},{"ts":1361732524000,"body":"Look good to me"}]},{"timestamps":[{"ts":1362311954000,"body":"Seems good. We'll need a CHANGELOG entry. Also, a test would be nice."},{"ts":1362311975000,"body":"Actually, @guilleiguaran , is the 'asset' part something sass-rails should be taking care of?"},{"ts":1362312451000,"body":"Well, not sure how to test generator's console output. In terms of functionality generator was ok."},{"ts":1362319178000,"body":"We have generator tests here: https://github.com/rails/rails/tree/master/railties/test/generators"},{"ts":1362320181000,"body":"Thanks, but file assertions were fine, error messages were caused by messy inheritance of Thor tasks.\r\nNone of those usual assertions used there will reveal the issue.\r\nGenerators work just fine, except for the message in the console output.\r\n\r\nJust checked - bug is there in 3.2.11 too"},{"ts":1362321917000,"body":"@andriytyurnikov what was the exact problem, and why can't you add assertions to detect it and make sure we don't get regressions?"},{"ts":1362325018000,"body":"generators are written in DSL, and some DSL method invocation had incomplete set of parameters, \r\nthose methods are all over the place, and their parameters are not tested for other cases, and I think same issues are present in other generators.\r\nSo it sounds a little bigger then one-liner. \r\n\r\nSo while DSL itself is tested, I am not sure if one should go with DSLish helper like:\r\nassert_generator_option_defined :assets, :boolean\r\nor just stick with one line fix\r\n\r\nBut perhaps this piece could benefit from better coverage and bit of refactoring. \r\nStill in terms of having correct files generated - everything looks ok so far."},{"ts":1363790192000,"body":"incomplete - see better solution in #9832 "}]},{"timestamps":[{"ts":1368413637000,"body":"@guilleiguaran I ran the tests for Railties and actionpack and evenything is passing."},{"ts":1368415451000,"body":"What happened with the `env[KEY]`?"},{"ts":1368415800000,"body":"Thank you\r\n\r\n/cc @rubys how are your tests with this?"},{"ts":1368415867000,"body":"In line 244 the variable `flash_hash` was created with `env[KEY]` and then later inside the `if` that key was rewritten with `flash_hash`"},{"ts":1368416776000,"body":"I'm not seeing the key being rewritten"},{"ts":1368417064000,"body":"It was before. Check this out https://github.com/rails/rails/commit/c43ca06ca091fc09e2c86bb051ac92b648f12b64#L0R245\r\n\r\nin line 244 `flash_hash = env[KEY]` then in lines 249 and 241 `new_hash = flash_hash` and thin in line 254 `env[KEY] = new_hash`"},{"ts":1368417167000,"body":"Ok. But why it was removed?"},{"ts":1368417333000,"body":"Because that code seems to be unnecesary, I ran the tests for railties and actionpack and both are passing"},{"ts":1368448587000,"body":"> /cc @rubys how are your tests with this?\r\n\r\n:+1:"},{"ts":1368454696000,"body":"@julianvargasalvarez I'm not sure that code is unnecessary. The test coverage can not be accurate. I prefer to be conservative and merge the @arunagw fix. Thank you"}]},{"timestamps":[]},{"timestamps":[]},{"timestamps":[{"ts":1356464543000,"body":"@rafaelfranca can you take a look?"}]},{"timestamps":[]},{"timestamps":[{"ts":1361372182000,"body":"@rafaelfranca as discussed, this is the change to the templates. Let me know what you think."}]},{"timestamps":[{"ts":1368311252000,"body":"Could you expand the commit message to explain the problem?\r\n\r\nAlso it needs a rebase"},{"ts":1368326806000,"body":"All set. I've made the requested changes."},{"ts":1368328905000,"body":"Thanks for merging. I was just curious if this would/could be included in 4.0? I see master is at 4.1, but without this change anyone using table_name_prefix won't be able to run tests in 4.0 w/o doing some monkey patching."},{"ts":1368330061000,"body":"It will be included. I'm finishing a patch and will backport it soon"},{"ts":1368330336000,"body":"Oh ok, perfect. Thanks."}]},{"timestamps":[{"ts":1357731490000,"body":"@yahonda all green in my machine for the sqlite3 tests. I'll check the full Active Record suite. If all green I'll merge and see how the CI behaves."},{"ts":1357732608000,"body":":heart:"},{"ts":1357734198000,"body":"CI https://travis-ci.org/rails/rails/jobs/4043106 are all green. Thanks for testing and merging!"}]},{"timestamps":[{"ts":1373853690000,"body":"Thank you so much. This is a new feature and new features can not be added on the 3-2-stable branch"},{"ts":1373855413000,"body":"Ok, no problem. Sorry for not observing the new features policy for this branch.\r\n\r\nFor reference, I tried using [pg_power](https://github.com/TMXCredit/pg_power) to create a partial unique index, and it works fine."}]},{"timestamps":[{"ts":1366044359000,"body":"@rafaelfranca should I withdraw this pull request?"},{"ts":1366045038000,"body":"Sorry, missed this one. Thank you"}]},{"timestamps":[{"ts":1363529738000,"body":"Hm yeah, I was having problems but couldn't look yet. Will try your patch later, thanks @macksmind!"},{"ts":1363534796000,"body":"Confirme, tests pass for me with this change.\r\n\r\n@jonleighton thoughts?"},{"ts":1363560103000,"body":"@carlosantoniodasilva not passed the tests..."},{"ts":1363574881000,"body":"@rrmartins sorry, what? It seems to be passing here."},{"ts":1363604252000,"body":"@carlosantoniodasilva here in my machine had a failure, below is the log:\r\n\r\n``` ruby\r\n1) Failure:\r\nFullStackConsoleTest#test_sandbox [test/application/console_test.rb:125]:\r\n\"Post.count\" expected, but got:\r\n\r\nquit\r\n```"},{"ts":1363621778000,"body":"@rrmartins crap.. which version is your OS?"},{"ts":1363622207000,"body":"@carlosantoniodasilva  here is my version 10.8.3"},{"ts":1363622917000,"body":"@rrmartins Pulling that down now."},{"ts":1363624648000,"body":"Weird, I'm already on OSX 10.8.3, and it worked."},{"ts":1363624969000,"body":"Works for me on 10.8.3 too. @rrmartins, call you try increasing the timeout at line 109 and see if anything changes. Grasping at straws, but it seems like that quit should have already been consumed."},{"ts":1363949381000,"body":"Sorry for my slow reply folks, I've been moving house :( :( :( I'll look at this today."},{"ts":1363953989000,"body":"Hi guys, I hope that the above commit resolves this? Please let me know if not."},{"ts":1363960377000,"body":"No, it doesn't.\r\n\r\n```\r\n$ bundle exec ruby -wItest test/application/console_test.rb\r\nRun options: --seed 41388\r\n\r\n# Running tests:\r\n\r\n.....Terminated: 15\r\n```"},{"ts":1363961183000,"body":"Based on the Process#kill rdoc, what you did looks good. But I played with it for a while on my Mac and I couldn't figure out how to make it do what I wanted. My patch isn't ideal, but it's the best I could think of. Do we need to bring this up at http://bugs.ruby-lang.org/ ?"},{"ts":1363962261000,"body":"Hmm, weird. Maybe some native extension is objecting to the signal. Anyway, how about this?\r\n\r\n``` diff\r\ndiff --git a/railties/test/application/console_test.rb b/railties/test/application/console_test.rb\r\nindex d586822..80700a1 100644\r\n--- a/railties/test/application/console_test.rb\r\n+++ b/railties/test/application/console_test.rb\r\n@@ -126,12 +126,6 @@ class FullStackConsoleTest < ActiveSupport::TestCase\r\n     assert_output \"> \"\r\n   end\r\n \r\n-  def kill(pid)\r\n-    Process.kill('TERM', pid)\r\n-    Process.wait(pid)\r\n-  rescue Errno::ESRCH\r\n-  end\r\n-\r\n   def spawn_console\r\n     pid = Process.spawn(\r\n       \"#{app_path}/bin/rails console --sandbox\",\r\n@@ -148,15 +142,13 @@ class FullStackConsoleTest < ActiveSupport::TestCase\r\n     write_prompt \"Post.count\", \"=> 0\"\r\n     write_prompt \"Post.create\"\r\n     write_prompt \"Post.count\", \"=> 1\"\r\n-\r\n-    kill pid\r\n+    @master.puts \"quit\"\r\n \r\n     pid = spawn_console\r\n \r\n     write_prompt \"Post.count\", \"=> 0\"\r\n     write_prompt \"Post.transaction { Post.create; raise }\"\r\n     write_prompt \"Post.count\", \"=> 0\"\r\n-  ensure\r\n-    kill pid if pid\r\n+    @master.puts \"quit\"\r\n   end\r\n end\r\n```\r\n\r\nI basically want to avoid having special cases for different OSes."},{"ts":1363962901000,"body":"Yes!"},{"ts":1363963454000,"body":"Ok, I've committed that then"},{"ts":1363965387000,"body":"@jonleighton Thanks"}]},{"timestamps":[{"ts":1357213851000,"body":"I didn't mention in the PR, but in my case this bug is preventing us from upgrading 3.2.8 apps to 3.2.10 for today's security fixes. I'm sure others are going to run into similar issues with many strange failures in their test suites from the changes introduced in 3.2.9."},{"ts":1357215222000,"body":"Just as a side note, I'd rather have your last example working properly, ie setting the attribute to an AR object should *just work*.\r\n\r\n/cc @rafaelfranca "},{"ts":1357215855000,"body":"I agree that AR case should *just work* (I had a failing spec in my app from exactly that case!), though in terms of intention it's a bit weird to set a field like that.\r\n\r\nI think the easiest implementation here would be for the fallback case use `.to_i` if `value` responds to it, otherwise `.id`. Best case it works, worst case they get undefined method `id' (which at least makes sense) or the id/object_id deprecation warning depending on version of ruby.\r\n\r\nHappy to make the change if you think it's worthwhile."},{"ts":1357220440000,"body":"This PR fixes a bug where we are trying to build an object through an association as well\r\n\r\n```ruby\r\nscope = Post.first.comments.where(:id => [1, 2, 3, 4]).scoped\r\nscope.new.post\r\n```"},{"ts":1357232095000,"body":"What @cfabianski said."},{"ts":1357233418000,"body":"Just ran into this issue as well. I'd suggest a more robust approach however, since something like `MyModel.new(:integer_field => SomeOtherModel)` will still crash. So will anything that is not a `Hash` or `Array`.\r\n\r\n    assert_nil column.type_cast((1..2)) # test Range will fail\r\n\r\nProbably need to rescue out or check if the value responds to to_i.\r\n\r\nEDIT: Ah I see @jstirk already addressed this concern above.\r\n"},{"ts":1357236495000,"body":"First, a little more history for this pull request.\r\n\r\nThe previous behavior (at 3.2.8) was call `to_i` in every single object that value is, if it raise an exception, any exception, check if the object is truthy, if it is so return `1`, if not return `0`. (See https://github.com/tchandy/rails/commit/652107e2e137cf18cf517d96ee9063660e86d686)\r\n\r\nThis has nothing to do with the first element of a array or everything else. It just return `1` or `0`.\r\n\r\nThat said I think the best approach is check if the value responds to `to_i`. The problem with this approach is if we return `nil` if the object doesn't respond to we will change the attribute value to `nil` when it should not change the value at all."},{"ts":1357245930000,"body":"Updated to handle the AR object situation that @carlosantoniodasilva identified - now uses `to_i` then `id`, finally setting `nil` if nothing else can be done. This also cleans up @jstin's concern about `Hash` and `Array` being hardcoded.\r\n\r\n@rafaelfranca my thoughts are that setting `nil` on an invalid argument is clearer and safer than leaving the value in its original state. Firstly, it's more likely to be caught by a validation or `:null => false` constraint. Setting `nil` also makes it clear that the assignment was at least attempted by AR, rather than leaving you wondering if something intercepted the call before it got there."},{"ts":1357246329000,"body":"We don't need to check `id`. It should behave like any other object that doesn't respond to `to_i`.\r\n\r\nNo it is not clearer or safer, it is error prone. It should not change the original value at all. You are not assigning a valid value, so it should not change the object. I would expect to raise an exception instead of silently changing my value to `nil`. If I don't have validation (what is expected in an optional value) I will loose information without being warned of."},{"ts":1357246520000,"body":"Between I agree the current implementation is wrong, but I would fix the scoped builder, instead of the value type casting."},{"ts":1357247328000,"body":"Looking at the code I saw that decimal type casting already change the value if the object is not valid. So I guess it is fine. I would only remove the `id` check"},{"ts":1357249168000,"body":"@rafaelfranca OK, thanks for your feedback. I've updated the PR to remove the `id` check as you recommended, rebased and squashed.\r\n\r\nI was thinking about your comment about fixing the scope builder. From what I can see it looks possible to do things this way, but I think we would need to have a `ActiveRecord::*` exception raised rather than `NoMethodException` on calling `to_i`. We could then have `populate_with_current_scope_attributes` silently ignore just that exception when it tries to set an attribute.\r\n\r\nThe big benefit of that approach is that `post.category_id = Category.find(1)` would fail with an exception, but `Post.where(:category_id => [ 1, 2 ]).new` would work correctly.\r\n\r\nWhat do you think? I'm happy to prepare a separate PR for that if you think it's worthwhile, as it's a bit wider issue than this and probably needs a fair bit of discussion on how it works across all the types."},{"ts":1357250149000,"body":"After thinking a lot about this I think your current implementation is the right.\r\n\r\n```ruby\r\np.category_id = [ 1, 2 ]\r\n\r\nNoMethodError: undefined method `to_i' for [1, 2]:Array\r\n```\r\n\r\nI would not expect an exception to be raised at this point, a assignment should not be a dangerous operation like a `save!` or `create!`."},{"ts":1357251378000,"body":"OK, understood. Let me know if you need me to do anything else to get this PR approved and merged."},{"ts":1357251816000,"body":"Seems good. We need two things, first apply the same fix on master.\r\n\r\nAfter we need a CHANGELOG entry here so I can merge it"},{"ts":1357256628000,"body":"Thank you so much."},{"ts":1357776055000,"body":"Will this be released in 3.2.12?  I can't upgrade to the latest security releases until this is fixed as I have several tests failing with this error."},{"ts":1357776556000,"body":"@johnkelly probably yes, but there's not release date yet. Meanwhile, you should focus on the security releases, either by upgrading and monkey patching this issue, or by applying the available workarounds."},{"ts":1358126296000,"body":"Or you can point to 3-2-stable branch"}]},{"timestamps":[{"ts":1365156504000,"body":"can you add a test-case to verify the behavior?"},{"ts":1365202472000,"body":"Yeah, I'll see what I can do.  I should have some time this weekend to make one."},{"ts":1365325862000,"body":"To see failure:\r\n\r\n    git checkout f27e6d6\r\n    ARCONN=postgresql ruby -Itest test/cases/adapters/postgresql/array_test.rb -n test_insert_fixture\r\n\r\nTo exercise fix:\r\n\r\n    git checkout be4318b\r\n    ARCONN=postgresql ruby -Itest test/cases/adapters/postgresql/array_test.rb -n test_insert_fixture\r\n\r\n\r\nThanks for having me make a test.  In attempting to make the test I realized I really didn't understand what was going on.  The problem stems from the way the insert statements were built and used.  \r\n\r\nIn the fixture builder there was a single statement that would insert the fixture row and would yield something like:\r\n\r\n    INSERT INTO table_name (\"arr_column\") VALUES ('{\"asdf\", \"as'df\"}')\r\n\r\nThe problem with this was that the single quote in the second array value would need to be escaped.  Normally they won't need to be escaped in strings, but because the array syntax starts with '{ you need to escape them in array contexts.\r\n\r\nNew ActiveRecord::Base models get inserted into the database more like this:\r\n\r\n    INSERT INTO table_name(\"arr_column\") VALUES( $1 ) [ [\"arr_column\", [\"asdf\", \"as'df\"] ] ]\r\n\r\nThis isn't exactly the SQL that is transferred, that array on the end is sent to the DB as a binding of some kind. This is the command you see recorded to the rails log when a model insert happens.\r\n\r\nThe new fix in be4318b doesn't attempt to escape the ' character anymore, instead it uses the existing postgres insert code used for inserting models with the bound column values.  This is less dangerous as it only effects the code in insert_fixture (which only runs during test setup).  I pulled the method into the PostgreSQL specific driver because I'm not sure it will work with the other db engines and fixture loading appears to be completely untested; I couldn't find any tests that call insert_fixture.  \r\n\r\n\r\n"},{"ts":1365409612000,"body":"Thanks for the update and the test-case. Can you rebase your changes against master and squash your commits into a single one?"},{"ts":1365443357000,"body":"Rebased and squashed."},{"ts":1365493461000,"body":"/cc @rafaelfranca @carlosantoniodasilva "},{"ts":1366223654000,"body":"Bump?"},{"ts":1366305090000,"body":"That is generating a list of values like: \"$1, $2, $3\" for the number of columns being set."},{"ts":1366305410000,"body":"thanks"},{"ts":1366306236000,"body":"This broke the postgresql test suite. Could you fix?"},{"ts":1366306237000,"body":"Thanks!"},{"ts":1366306259000,"body":"Oh dear, I'll look into it."},{"ts":1366309794000,"body":"@cconstantine ping. Did you managed to fix it?"},{"ts":1366309907000,"body":"Pong.  I'm just now able to dedicate time to it."},{"ts":1366310175000,"body":"Ok. We are planning a release today, so we need to fix it quickly or I'll revert"},{"ts":1366310389000,"body":"Sorry for the delay.  I'm at work, and I had an urgent task I had to finish before I could get to this.\r\n\r\nIt appears that the problem is related to loading serialized columns where the db column type is text/string.  "},{"ts":1366310689000,"body":"Well, so I'll revert. Send a pull request again with the build green and we can merge.\r\n\r\nSorry about this, but we need to release today"},{"ts":1366310795000,"body":"Yeah, sounds like the right call.  I'm sorry about the failures, I'm suspecting they are new tests since I made the initial pull request."},{"ts":1366314447000,"body":"Ok, I figured out what was wrong.  This fix didn't work when a model was serializing an array to a string column."},{"ts":1367905027000,"body":"This looks to be related to \r\n\r\n```ruby\r\n  def tag_counts\r\n    Rails.cache.fetch([:user_id, id, :tag_counts]) do\r\n      connection.select_values(\r\n        <<-SQL\r\n          SELECT UNNEST(tag_names) tag_name, count(*)\r\n          FROM workouts\r\n          WHERE user_id = #{id}\r\n          GROUP BY user_id, tag_name\r\n          ORDER BY 2 DESC\r\n        SQL\r\n      )\r\n    end\r\n  end\r\n```\r\n\r\nreturning \r\n\r\n```ruby\r\n1] pry(main)> User.find(103).tag_counts\r\n  User Load (4.1ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = $1 LIMIT 1  [[\"id\", 103]]\r\n=> \"\\x04\\b[^o:\\fWorkout\\x10:\\x10@attributes{\\aI\\\"\\rtag_name\\x06:\\x06ETI\\\"\\rkb swing\\x06;\\aTI\\\"\\ncount\\x06;\\aTI\\\"\\a25\\x06;\\aT:\\x0E@relation0:\\x18@changed_attributes{\\0:\\x18@previously_changed{\\0:\\x16@attributes_cache{\\0:\\x17@association_cache{\\0:\\x17@aggregation_cache{\\0:\\x1C@marked_for_destructionF:\\x0F@destroyedF:\\x0E@readonlyF:\\x10@new_recordFo;\\0\\x10;\\x06{\\a@\\bI\\\"\\fpull-up\\x06;\\aT@\\nI\\\"\\a13\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\fpush-up\\x06;\\aT@\\nI\\\"\\a12\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Eair squat\\x06;\\aT@\\nI\\\"\\a10\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\vsit-up\\x06;\\aT@\\nI\\\"\\x069\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\vburpee\\x06;\\aT@\\nI\\\"\\x069\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\a4k\\x06;\\aT@\\nI\\\"\\x066\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x11goblet squat\\x06;\\aT@\\nI\\\"\\x066\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Fbouldering\\x06;\\aT@\\nI\\\"\\x065\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x13back extension\\x06;\\aT@\\nI\\\"\\x065\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Fplayground\\x06;\\aT@\\nI\\\"\\x064\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\rthruster\\x06;\\aT@\\nI\\\"\\x064\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Ekb snatch\\x06;\\aT@\\nI\\\"\\x064\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x13knees to elbow\\x06;\\aT@\\nI\\\"\\x064\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\f4km run\\x06;\\aT@\\nI\\\"\\x064\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\nangie\\x06;\\aT@\\nI\\\"\\x063\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\rkb clean\\x06;\\aT@\\nI\\\"\\x063\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Frope climb\\x06;\\aT@\\nI\\\"\\x063\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Ejump rope\\x06;\\aT@\\nI\\\"\\x063\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x11double-under\\x06;\\aT@\\nI\\\"\\x063\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\rmobility\\x06;\\aT@\\nI\\\"\\x063\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x10kb thruster\\x06;\\aT@\\nI\\\"\\x063\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\bk2e\\x06;\\aT@\\nI\\\"\\x063\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\ncindy\\x06;\\aT@\\nI\\\"\\x063\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\nsquat\\x06;\\aT@\\nI\\\"\\x063\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\ndiane\\x06;\\aT@\\nI\\\"\\x063\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x12walking lunge\\x06;\\aT@\\nI\\\"\\x063\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\rbox jump\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x13farmer's carry\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Epush pres\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\akb\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Fhand stand\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\rkb press\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Ewall-ball\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x11almost pukie\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\rdeadlift\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\rring dip\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\nclean\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x112012openwod1\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\r100m run\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\tsdhp\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\thrpu\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\bt2b\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x11double under\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\thspu\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x13turkish get-up\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x13burpee pull-up\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\tfran\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Epull down\\x06;\\aT@\\nI\\\"\\x062\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\btgu\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\f2km run\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\tbike\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x12shoulder pres\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\nlunge\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\rwallball\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\vkb run\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Fpush press\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x12farmers carry\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\t400m\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Fhang clean\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\a5k\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\t800m\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\nvomit\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\fkb pres\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\rkb squat\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Fhotel room\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x10front squat\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Erow 1000m\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\bdip\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x17kb clean and press\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x15butterfly sit up\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x15kettlebell swing\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\toslo\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x10kb push pre\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0F1rm snatch\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Fback squat\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x10100m kb run\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Fbear crawl\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\vsprint\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Ethe chief\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\trope\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\eoverhead walking lunge\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\rclimbing\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\tsick\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x12hotel workout\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\vut\\xC3\\x98ya\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x0Fkettlebell\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\npukie\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11Fo;\\0\\x10;\\x06{\\a@\\bI\\\"\\x13crossfit total\\x06;\\aT@\\nI\\\"\\x061\\x06;\\aT;\\b0;\\t{\\0;\\n{\\0;\\v{\\0;\\f{\\0;\\r{\\0;\\x0EF;\\x0FF;\\x10F;\\x11F\"\r\n```\r\n\r\nIt was working fine in rails 3.2.13, no idea what changed. I haven't dug into the nitty gritty details but I think it's a sound guess these two are related?"},{"ts":1367993281000,"body":"I don't follow how these are related.  Also, this pull request was reverted.  The merge that stuck was https://github.com/rails/rails/pull/10264 and it only had to do with the serialization of array columns.  \r\n\r\nIf this is really an issue please create a separate issue with the minimum sample code possible.  I'd recommend at least removing the caching wrapper."},{"ts":1368269467000,"body":"Thanks for the feedback, I'm investigating why this is happening."}]},{"timestamps":[{"ts":1359484693000,"body":"Thank you"},{"ts":1359484816000,"body":"Thank you, @rafaelfranca!"}]},{"timestamps":[]},{"timestamps":[{"ts":1369473259000,"body":"Feel free to send this kind of path to [lifo/docrails](https://github.com/lifo/docrails/) in the future @elgalu! :smiley: "}]},{"timestamps":[]},{"timestamps":[{"ts":1366047835000,"body":"I'm submitting a PR because @rafaelfranca mentioned that the `assets` group is no longer used.\r\n\r\n/cc @carlosantoniodasilva @steveklabnik "},{"ts":1366049334000,"body":"The situation is actually not as clear as this.  Bundler clearly is the default, and generated apps, by default, depend on Bundler.  But zap your Gemfile and the generated config/boot.rb will no longer require bundler.  Nor will any part of rails."},{"ts":1366050554000,"body":"Currently the generated `application.rb` references the `Bundler` constant: https://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/app/templates/config/application.rb#L16 I think this section in the guides only makes a reference to this generated file.\r\n\r\n@rubys are there upcoming changes to the generated `application.rb`?"},{"ts":1366054025000,"body":"The subtle point (and it __is___ subtle, and easily missed) is that generated files are meant to be starting points, reflecting the preferences and values of the core team, but ones that can be changed.  And that people do change them.  And specify options like --skip-bundle (see https://github.com/rails/rails/commit/fc3a39b599fbbed86a153b9742258db020eefa3c).\r\n\r\nNetting this all out: Rails doesn't depend on bundler, but apps by default do.  The current docs for assets don't presume that every application will use the defaults.  The proposal is to change this assumption.\r\n\r\nPerhaps this assumption should be reexamined.  But not because \"Rails 4 relies on bundler\"."},{"ts":1366615573000,"body":"I changed the PR title and the commit to no longer state that Rails 4 relies on `Bundler`. The changes simply update the snippets in the `asset pipeline` guide to match the generated files."},{"ts":1367933290000,"body":"I guess this is related to #10449 \r\n\r\n@guilleiguaran let me know what to update or close if it's no longer needed."},{"ts":1369340598000,"body":"Seems good to me. @rubys @guilleiguaran any concerns about this one now?"},{"ts":1369341654000,"body":"no concerns here"},{"ts":1369341679000,"body":"This is fine for me :+1: "}]},{"timestamps":[]}]
